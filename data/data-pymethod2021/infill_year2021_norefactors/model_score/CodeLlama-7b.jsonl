{"hexsha": "07bea0dee804f4a3dd1cb8de837a2c6f9ce9c771", "ext": "py", "lang": "Python", "content": "def pretty_print_post(url: str):\n    try:\n        text = parse_post(url)\n    except api2ch.Api2chError as e:\n        print('Request Error', e.code, e.reason)\n    else:\n        print(text)", "fn_id": 1, "class_fn": false, "repo": "uburuntu/api2ch", "file": "examples/complex.py", "last_update_at": "2021-07-26T09:40:57+00:00", "pred": {"ppl": 5.197775363922119, "ppl_lower": 5.818082332611084, "ppl/lowercase_ppl": -1.068400613206749, "ppl/zlib": 0.01267869784167871, "Min_5.0% Prob": 9.29265308380127, "Min_10.0% Prob": 8.170637289683023, "Min_20.0% Prob": 6.273464818795522, "Min_30.0% Prob": 4.756518426694368, "Min_40.0% Prob": 3.8872114181518556, "Min_50.0% Prob": 3.166027351282537, "Min_60.0% Prob": 2.7222481644467305}}
{"hexsha": "6c31f616e579c190b006f0e8ba4f595d892ad988", "ext": "py", "lang": "Python", "content": "@card('Braids, Cabal Minion')\ndef braids_cabal_minion(card, abilities):\n\n    def braids_cabal_minion():\n        return AbilityNotImplemented\n    return (braids_cabal_minion,)", "fn_id": 28, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/odyssey.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 3.7420098781585693, "ppl_lower": 5.555235862731934, "ppl/lowercase_ppl": -1.299417374279245, "ppl/zlib": 0.011678078474828503, "Min_5.0% Prob": 9.63689931233724, "Min_10.0% Prob": 8.590511639912924, "Min_20.0% Prob": 6.308181909414438, "Min_30.0% Prob": 4.534347756912834, "Min_40.0% Prob": 3.3447730147208157, "Min_50.0% Prob": 2.638337190855633, "Min_60.0% Prob": 2.232952462658525}}
{"hexsha": "fc7e94a2224575fc9faaa120b95dfa7c40d2f253", "ext": "py", "lang": "Python", "content": "def test_extended_projection(ra_module):\n    initial_set = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'y'), [(7, 8), (9, 2)])\n    expected_sum = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(15,), (11,)])\n    expected_lambda = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(14,), (10,)])\n    expected_lambda2 = ra_module.NamedRelationalAlgebraFrozenSet(('z', 'x'), [(14, 8), (10, 10)])\n    expected_new_colum_str = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'z'), [(7, 'a'), (9, 'a')])\n    expected_new_colum_int = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(1,), (1,)])\n    new_set = initial_set.extended_projection({'z': sum})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': ra_module.RelationalAlgebraStringExpression('x+y')})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1})\n    assert expected_lambda == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1, 'x': ra_module.RelationalAlgebraStringExpression('x+1')})\n    assert expected_lambda2 == new_set\n    new_set = initial_set.extended_projection({'z': 'a', 'x': ra_module.RelationalAlgebraStringExpression('x')})\n    assert expected_new_colum_str == new_set\n    new_set = initial_set.extended_projection({'z': 1})\n    assert expected_new_colum_int == new_set\n    new_set = initial_set.extended_projection({'x': ra_module.RelationalAlgebraColumnStr('x')})\n    assert initial_set.projection('x') == new_set\n    base_set = ra_module.NamedRelationalAlgebraFrozenSet((1, 2), [(7, 8), (9, 2)])\n    new_set = base_set.extended_projection({'x': ra_module.RelationalAlgebraColumnInt(1), 'y': ra_module.RelationalAlgebraColumnInt(2)})\n    assert initial_set == new_set", "fn_id": 31, "class_fn": false, "repo": "demianw/NeuroLang", "file": "neurolang/utils/tests/test_relational_algebra_set.py", "last_update_at": "2021-07-02T09:06:30+00:00", "pred": {"ppl": 1.7063403129577637, "ppl_lower": 1.8649728298187256, "ppl/lowercase_ppl": -1.1663617929195222, "ppl/zlib": 0.0014061866032146605, "Min_5.0% Prob": 6.046325148958148, "Min_10.0% Prob": 4.166730739853599, "Min_20.0% Prob": 2.5119683590150417, "Min_30.0% Prob": 1.7528597951384646, "Min_40.0% Prob": 1.3280430292584617, "Min_50.0% Prob": 1.068424526024161, "Min_60.0% Prob": 0.8901684560298332}}
{"hexsha": "b41186cab3d777d1b3f6deea4852d5203576ebc3", "ext": "py", "lang": "Python", "content": "def say(text):\n    hash = hashlib.md5(text.encode()).hexdigest()\n    file = 'speech-cache/{}.wav'.format(hash)\n    cmd = 'play {}'.format(file)\n    if not os.path.isfile(file):\n        cmd = 'pico2wave -w {} \"{}\" && {}'.format(file, text, cmd)\n    os.system(cmd)", "fn_id": 3, "class_fn": false, "repo": "yousefamar/sanctum", "file": "sanctum.py", "last_update_at": "2021-01-17T00:14:06+00:00", "pred": {"ppl": 2.6779212951660156, "ppl_lower": 2.6779212951660156, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005693877788608917, "Min_5.0% Prob": 8.767402648925781, "Min_10.0% Prob": 6.616678184933132, "Min_20.0% Prob": 4.368006298416539, "Min_30.0% Prob": 3.1745993515540816, "Min_40.0% Prob": 2.4383818140396705, "Min_50.0% Prob": 1.971608436077225, "Min_60.0% Prob": 1.6480144973907431}}
{"hexsha": "efba18d12458eb11af1a1ce332ee1fe30fca6aa2", "ext": "py", "lang": "Python", "content": "def stft(sig, frameSize=FRAMESIZE, overlapFac=OVERLAP, window=np.hanning):\n    hop = int(frameSize - np.floor(overlapFac * frameSize))\n    w = np.sqrt(window(frameSize))\n    out = np.array([np.fft.rfft(w * sig[i:i + frameSize]) for i in range(0, len(sig) - frameSize, hop)])\n    out = np.abs(out)\n    out -= np.mean(out)\n    return out", "fn_id": 0, "class_fn": false, "repo": "glkuzi/CountMTS", "file": "DataGenerator.py", "last_update_at": "2021-07-22T03:45:54+00:00", "pred": {"ppl": 2.4934322834014893, "ppl_lower": 2.6629223823547363, "ppl/lowercase_ppl": -1.0719785891540468, "ppl/zlib": 0.00437157984874175, "Min_5.0% Prob": 7.018994092941284, "Min_10.0% Prob": 5.5625164692218485, "Min_20.0% Prob": 3.8076203006964464, "Min_30.0% Prob": 2.8160654589533807, "Min_40.0% Prob": 2.238666964589425, "Min_50.0% Prob": 1.8110835632281517, "Min_60.0% Prob": 1.525990733411163}}
{"hexsha": "3daf2b90efe24d08876eb33fa7e809886b79aacb", "ext": "py", "lang": "Python", "content": "def write_float_list():\n    global result\n    with open('result_shared_memory.txt', 'w') as f:\n        f.write(str(result))\n        f.close()", "fn_id": 7, "class_fn": false, "repo": "alansouls/interop-pysharp", "file": "proof_of_concept/python/text_transfer/connector_file.py", "last_update_at": "2021-05-22T22:37:44+00:00", "pred": {"ppl": 4.976424217224121, "ppl_lower": 4.976424217224121, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.014588287313278707, "Min_5.0% Prob": 9.408016681671143, "Min_10.0% Prob": 8.255272626876831, "Min_20.0% Prob": 6.1886363294389515, "Min_30.0% Prob": 4.902081535412715, "Min_40.0% Prob": 3.8425563474496207, "Min_50.0% Prob": 3.102112501859665, "Min_60.0% Prob": 2.680221857296096}}
{"hexsha": "e13fa130c6f556d3b69fbf1da32dc9e4fc944723", "ext": "py", "lang": "Python", "content": "def report():\n    value = grp.value\n    try:\n        say(labels[value], 'selected')\n    except (TypeError, IndexError):\n        say('Value =', value)", "fn_id": 0, "class_fn": false, "repo": "gcewing/PyGUI", "file": "Tests/07-radiogroup.py", "last_update_at": "2021-11-24T19:50:02+00:00", "pred": {"ppl": 11.725421905517578, "ppl_lower": 14.455108642578125, "ppl/lowercase_ppl": -1.0850158642665304, "ppl/zlib": 0.02178548050529176, "Min_5.0% Prob": 10.397834300994873, "Min_10.0% Prob": 9.815918445587158, "Min_20.0% Prob": 8.26952706442939, "Min_30.0% Prob": 6.989773511886597, "Min_40.0% Prob": 5.734548330307007, "Min_50.0% Prob": 4.873114518143914, "Min_60.0% Prob": 4.045407657270078}}
{"hexsha": "d5c45875560e75035fb70d3ac4fa58d21599d27d", "ext": "py", "lang": "Python", "content": "def test_vsi_path_zip_plus_https():\n    \"\"\"A zip+https:// URLs vsi path is correct (see #1151)\"\"\"\n    url = 'zip+https://example.com/foo.zip!bar.tif'\n    assert vsi_path(parse_path(url)) == '/vsizip/vsicurl/https://example.com/foo.zip/bar.tif'", "fn_id": 16, "class_fn": false, "repo": "CloudNiner/rasterio", "file": "tests/test_path.py", "last_update_at": "2021-09-16T00:44:50+00:00", "pred": {"ppl": 4.765000820159912, "ppl_lower": 4.900013446807861, "ppl/lowercase_ppl": -1.0178955236828489, "ppl/zlib": 0.009578513553545111, "Min_5.0% Prob": 8.969992280006409, "Min_10.0% Prob": 7.85017188390096, "Min_20.0% Prob": 5.8909931057377865, "Min_30.0% Prob": 4.585976859618878, "Min_40.0% Prob": 3.719622703698965, "Min_50.0% Prob": 3.0612637151260764, "Min_60.0% Prob": 2.6200695844559836}}
{"hexsha": "995e126c50514275c11a5e83f7c9eaa1aa63e240", "ext": "py", "lang": "Python", "content": "def timestamp_unpack(seconds, timedelta=datetime.timedelta, relative_to=pg_epoch_datetime.__add__):\n    \"\"\"\n\tCreate a `datetime.datetime` instance from a (seconds, microseconds) pair.\n\t\"\"\"\n    return relative_to(timedelta(0, *seconds))", "fn_id": 1, "class_fn": false, "repo": "autolog/TRV_Controller", "file": "TRV.indigoPlugin/Contents/Server Plugin/postgresql/types/io/stdlib_datetime.py", "last_update_at": "2021-02-03T16:31:26+00:00", "pred": {"ppl": 7.567702770233154, "ppl_lower": 8.052362442016602, "ppl/lowercase_ppl": -1.0306716158522562, "ppl/zlib": 0.013403242095575849, "Min_5.0% Prob": 10.904779116312662, "Min_10.0% Prob": 9.401509421212333, "Min_20.0% Prob": 7.405011669794718, "Min_30.0% Prob": 5.768875766884197, "Min_40.0% Prob": 4.604964172840118, "Min_50.0% Prob": 3.914348252721735, "Min_60.0% Prob": 3.309972271654341}}
{"hexsha": "6f8e9b82a7e7f7ef2e5696e6e11a9da88873c108", "ext": "py", "lang": "Python", "content": "@app.route('/ext/<api_key>/new_session/<session_name>', methods=['POST'])\ndef ext_create_new_session_name(api_key, session_name):\n    logging.debug('EXTERNAL: Create new Session with name')\n    db = Database()\n    user = db.get_user_by_api_key(api_key)\n    if user is None:\n        return (\"Provided API key ('{}') is not associated with any registered user\".format(api_key), HTTPStatus.UNAUTHORIZED.value)\n    if db.does_session_name_exist(session_name):\n        return (\"Provided session name ('{}') already exists\".format(session_name), HTTPStatus.UNAUTHORIZED.value)\n    logging.debug('Creating new session: %s (userid: %s)', session_name, user['user_id'])\n    session_id = db.create_session(session_name, user['user_id'])\n    logging.debug('New session id: %s', session_id)\n    set_current_session(session_id, session_name)\n    return \"New Session ID: '{}'\".format(session_id)", "fn_id": 2, "class_fn": false, "repo": "Samiasa/UsabilityConsole", "file": "console/routes/external.py", "last_update_at": "2021-06-07T17:15:42+00:00", "pred": {"ppl": 2.410869598388672, "ppl_lower": 2.649592399597168, "ppl/lowercase_ppl": -1.1072950511472555, "ppl/zlib": 0.0021463110039665334, "Min_5.0% Prob": 6.865501335688999, "Min_10.0% Prob": 5.222167533019493, "Min_20.0% Prob": 3.6602161074506827, "Min_30.0% Prob": 2.7236567173881094, "Min_40.0% Prob": 2.1387736658597816, "Min_50.0% Prob": 1.7472317403246616, "Min_60.0% Prob": 1.4671381520556992}}
{"hexsha": "3b40f31f9e2306102a844f470092207c102189e3", "ext": "py", "lang": "Python", "content": "@pb.route('/detail/<id>', methods=['GET', 'POST'])\ndef single_product(id):\n    product = Product.query.filter_by(id=id).first()\n    if product.out_of_stock == True:\n        status = 'Sold Out'\n    else:\n        status = 'In stock'\n    data = {'id': product.id, 'name': product.name, 'img_url': product.img_url, 'description': product.description, 'seller': User.query.filter_by(id=product.seller_id).first().name, 'seller_id': product.seller_id, 'created': product.created, 'price': product.price, 'status': status, 'seller_img': User.query.filter_by(id=product.seller_id).first().avatar_url}\n    return jsonify(data)", "fn_id": 3, "class_fn": false, "repo": "sori9088/mealplan-server", "file": "app/components/product/__init__.py", "last_update_at": "2021-06-02T00:44:12+00:00", "pred": {"ppl": 2.1102917194366455, "ppl_lower": 2.2507238388061523, "ppl/lowercase_ppl": -1.086265957970446, "ppl/zlib": 0.002557623950646303, "Min_5.0% Prob": 7.601598262786865, "Min_10.0% Prob": 5.33498968396868, "Min_20.0% Prob": 3.30857713449569, "Min_30.0% Prob": 2.3630375138350894, "Min_40.0% Prob": 1.822472762671255, "Min_50.0% Prob": 1.4782875235591615, "Min_60.0% Prob": 1.239472787457681}}
{"hexsha": "fe240d6eafcfe9043656fc61dbcdc36afa2f5d4c", "ext": "py", "lang": "Python", "content": "def get_feature(internel_layer, layers, filters, batch_norm=False):\n    \"\"\"Get VGG feature body as stacks of convoltions.\"\"\"\n    for i, num in enumerate(layers):\n        for j in range(num):\n            internel_layer = sym.conv2d(data=internel_layer, kernel_size=(3, 3), padding=(1, 1), channels=filters[i], name='conv%s_%s' % (i + 1, j + 1))\n            if batch_norm:\n                internel_layer = sym.batch_norm(data=internel_layer, name='bn%s_%s' % (i + 1, j + 1))\n            internel_layer = sym.relu(data=internel_layer, name='relu%s_%s' % (i + 1, j + 1))\n        internel_layer = sym.max_pool2d(data=internel_layer, pool_size=(2, 2), strides=(2, 2), name='pool%s' % (i + 1))\n    return internel_layer", "fn_id": 0, "class_fn": false, "repo": "CynthiaProtector/helo", "file": "nnvm/python/nnvm/testing/vgg.py", "last_update_at": "2021-12-25T06:09:46+00:00", "pred": {"ppl": 2.093144655227661, "ppl_lower": 2.1818230152130127, "ppl/lowercase_ppl": -1.0561730614554, "ppl/zlib": 0.002478750184217315, "Min_5.0% Prob": 8.005981041834904, "Min_10.0% Prob": 5.7065948339609, "Min_20.0% Prob": 3.4907390047919074, "Min_30.0% Prob": 2.427186131477356, "Min_40.0% Prob": 1.8444005351896597, "Min_50.0% Prob": 1.4795299125140282, "Min_60.0% Prob": 1.2331499833648343}}
{"hexsha": "d1b6df0cf562b4a74a407607abec54818df78080", "ext": "py", "lang": "Python", "content": "def mech():\n    item = {0: 'mail', 1: 'password'}\n    try:\n        choice = int(input(bcolors.OKBLUE + 'Enter the option no. of data: \\n [0] Mail \\n [1] Password\\n [2] Exit\\nOption:' + bcolors.ENDC))\n        try:\n            pass_data = input(bcolors.OKBLUE + 'Enter the ' + str(item[choice]) + ' to check: ' + bcolors.ENDC)\n        except:\n            exit(0)\n        data = main(str(choice), pass_data)\n        print(bcolors.OKGREEN + data + bcolors.ENDC)\n        print(bcolors.OKBLUE + ' [0] Dump data in a file \\n [1] Go back \\n [2] Exit' + bcolors.ENDC)\n        choice_ = input(bcolors.OKBLUE + 'Option: ' + bcolors.ENDC)\n        if choice_ == '0':\n            raw_filename = input(bcolors.OKBLUE + 'File name to save: ' + bcolors.ENDC)\n            filename = raw_filename + '_' + str(item[choice]) + '.txt'\n            file = open(filename, 'w')\n            file.write(data)\n            file.close()\n            print(bcolors.OKGREEN + 'File is saved in same directory with name {}.'.format(raw_filename) + bcolors.ENDC)\n            print()\n        elif choice_ == '1':\n            print()\n            print()\n            mech()\n        else:\n            exit(0)\n    except Exception as e:\n        print(bcolors.FAIL + e + bcolors.ENDC)\n        exit(0)", "fn_id": 1, "class_fn": false, "repo": "StrinTH/checkleaks", "file": "leakcheck.py", "last_update_at": "2021-01-06T14:45:08+00:00", "pred": {"ppl": 2.3903732299804688, "ppl_lower": 2.607757329940796, "ppl/lowercase_ppl": -1.0998807995027977, "ppl/zlib": 0.0019322605696739793, "Min_5.0% Prob": 7.0674748659133915, "Min_10.0% Prob": 5.363845423954289, "Min_20.0% Prob": 3.722848889339401, "Min_30.0% Prob": 2.761412197589874, "Min_40.0% Prob": 2.1408497777706135, "Min_50.0% Prob": 1.7349730024925258, "Min_60.0% Prob": 1.4515776444835018}}
{"hexsha": "a113b237351d78e1a5fa0fd0d24d0327976b7f7a", "ext": "py", "lang": "Python", "content": "def process_data(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"delete column that have most na, and fill na with mean\"\"\"\n    na_count = dataframe.isnull().sum(axis=0).tolist()\n    most_na_col = na_count.index(max(na_count))\n    result = dataframe.drop(dataframe.columns[most_na_col], axis=1)\n    return result.fillna(result.mean())", "fn_id": 1, "class_fn": false, "repo": "coookie89/Intern-Training", "file": "txya900619/Week1/ch2/2.2/exercise1.py", "last_update_at": "2021-08-24T12:14:46+00:00", "pred": {"ppl": 2.9641129970550537, "ppl_lower": 3.140974998474121, "ppl/lowercase_ppl": -1.0533375790735313, "ppl/zlib": 0.00535260014714357, "Min_5.0% Prob": 7.654016971588135, "Min_10.0% Prob": 6.21998782157898, "Min_20.0% Prob": 4.643309229896182, "Min_30.0% Prob": 3.514518439769745, "Min_40.0% Prob": 2.694488906583121, "Min_50.0% Prob": 2.17398717764903, "Min_60.0% Prob": 1.8160389517935422}}
{"hexsha": "be83fdd493ff018b94ad39f9ed435403d860ea8e", "ext": "py", "lang": "Python", "content": "def generate_bio(spans, length):\n    tags = ['O'] * length\n    for span in spans:\n        tags[span.tokens[0]] = f'B-{span.type}'\n        for i in span.tokens[1:]:\n            tags[i] = f'I-{span.type}'\n    return tags", "fn_id": 4, "class_fn": false, "repo": "blester125/iobes", "file": "tests/utils.py", "last_update_at": "2021-12-06T23:15:18+00:00", "pred": {"ppl": 2.838898181915283, "ppl_lower": 3.250868082046509, "ppl/lowercase_ppl": -1.129867711826606, "ppl/zlib": 0.007729007502083186, "Min_5.0% Prob": 8.75442099571228, "Min_10.0% Prob": 7.16517436504364, "Min_20.0% Prob": 4.644028149545193, "Min_30.0% Prob": 3.342182744294405, "Min_40.0% Prob": 2.592478931415826, "Min_50.0% Prob": 2.0974396521225573, "Min_60.0% Prob": 1.7557390104047954}}
{"hexsha": "1a9febc6fc48fe142ca3755fceef4aa604dfb595", "ext": "py", "lang": "Python", "content": "def assemble(mappings, sequence_file, out_file, min_overlap, max_overhang, min_length):\n    graph, assembled = OverlapGraph.parse_paf(mappings, min_overlap, max_overhang)\n    paths = graph.max_paths()\n    sequences = parse_fasta(sequence_file)\n    with open(out_file, 'w') as f:\n        for path in paths:\n            seq, contained_reads, name = construct_merged_sequence(path, graph, sequences)\n            assembled += contained_reads\n            if len(seq) > min_length:\n                f.write('>%s\\n%s\\n' % (name, seq))\n        for n, s in sequences.items():\n            if n in assembled:\n                continue\n            if len(s) < min_length:\n                continue\n            f.write('>%s\\n%s\\n' % (n, s))", "fn_id": 2, "class_fn": false, "repo": "rikuu/hgga", "file": "asm_node.py", "last_update_at": "2021-04-09T21:56:00+00:00", "pred": {"ppl": 2.7038421630859375, "ppl_lower": 2.7661685943603516, "ppl/lowercase_ppl": -1.0229114301625017, "ppl/zlib": 0.0032936218040967255, "Min_5.0% Prob": 7.872866457158869, "Min_10.0% Prob": 6.354463718154213, "Min_20.0% Prob": 4.320550322532654, "Min_30.0% Prob": 3.159526007140384, "Min_40.0% Prob": 2.4512025818719967, "Min_50.0% Prob": 1.9785014354019312, "Min_60.0% Prob": 1.6637329117203241}}
{"hexsha": "a2c6556c09f53bd180fe20a7e14114c3b4f5b12b", "ext": "py", "lang": "Python", "content": "def get_mycroft_version():\n    try:\n        from mycroft.version import CORE_VERSION_STR\n        return CORE_VERSION_STR\n    except:\n        pass\n    root = search_mycroft_core_location()\n    if root:\n        version_file = join(root, 'version', '__init__.py')\n        if not isfile(version_file):\n            version_file = join(root, 'mycroft', 'version', '__init__.py')\n        if isfile(version_file):\n            version = []\n            with open(version_file) as f:\n                text = f.read()\n                version.append(text.split('CORE_VERSION_MAJOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_MINOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_BUILD =')[-1].split('\\n')[0].strip())\n                version = '.'.join(version)\n                if \"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \" in text:\n                    version += text.split(\"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \")[-1].split('\\n')[0][1:-1]\n                return version\n        return None", "fn_id": 3, "class_fn": false, "repo": "NeonJarbas/ovos_utils", "file": "ovos_utils/fingerprinting.py", "last_update_at": "2021-11-08T07:19:25+00:00", "pred": {"ppl": 1.9348382949829102, "ppl_lower": 2.128821849822998, "ppl/lowercase_ppl": -1.1447598656660378, "ppl/zlib": 0.001864473882783674, "Min_5.0% Prob": 7.0094155704273895, "Min_10.0% Prob": 4.926733073066263, "Min_20.0% Prob": 3.0868009723284664, "Min_30.0% Prob": 2.1844963115804337, "Min_40.0% Prob": 1.6456163026881914, "Min_50.0% Prob": 1.3222967561508654, "Min_60.0% Prob": 1.103933848742759}}
{"hexsha": "d9fc432fc00d588e5c0efee2aee23a3f4e8a0c91", "ext": "py", "lang": "Python", "content": "def main(_):\n    tf.logging.set_verbosity(tf.logging.INFO)\n    usr_dir.import_usr_dir(FLAGS.t2t_usr_dir)\n    trainer_utils.log_registry()\n    trainer_utils.validate_flags()\n    output_dir = os.path.expanduser(FLAGS.output_dir)\n    tmp_dir = os.path.expanduser(FLAGS.tmp_dir)\n    if not FLAGS.data_dir:\n        raise ValueError('You must specify a --data_dir')\n    data_dir = os.path.expanduser(FLAGS.data_dir)\n    tf.gfile.MakeDirs(output_dir)\n    if FLAGS.generate_data:\n        tf.gfile.MakeDirs(data_dir)\n        tf.gfile.MakeDirs(tmp_dir)\n        for problem_name in FLAGS.problems.split('-'):\n            tf.logging.info('Generating data for %s' % problem_name)\n            problem = registry.problem(problem_name)\n            problem.generate_data(data_dir, tmp_dir)\n    trainer_utils.run(data_dir=data_dir, model=FLAGS.model, output_dir=output_dir, train_steps=FLAGS.train_steps, eval_steps=FLAGS.eval_steps, schedule=FLAGS.schedule)", "fn_id": 0, "class_fn": false, "repo": "ctuning/ck-ml", "file": "program/tensor2tensor-attention-tf/source/tensor2tensor/tensor2tensor/bin/t2t-trainer.py", "last_update_at": "2021-09-14T14:14:10+00:00", "pred": {"ppl": 2.001014232635498, "ppl_lower": 2.3100624084472656, "ppl/lowercase_ppl": -1.2070489575794114, "ppl/zlib": 0.0018399314810017748, "Min_5.0% Prob": 6.247603584738338, "Min_10.0% Prob": 4.811306904343998, "Min_20.0% Prob": 3.1436844932682373, "Min_30.0% Prob": 2.242171593302605, "Min_40.0% Prob": 1.719894984353553, "Min_50.0% Prob": 1.384345462436185, "Min_60.0% Prob": 1.1554745976429652}}
{"hexsha": "01b86d405494b9108be791ee779c96fe8f5fc81b", "ext": "py", "lang": "Python", "content": "def test_code_point_of_name():\n    assert demojiprocess.code_point_of_name('yellow_heart') == '1f49b'\n    assert demojiprocess.code_point_of_name(':yellow_heart:') == '1f49b'\n    assert demojiprocess.code_point_of_name('woman_health_worker_tone2') == '1f469-1f3fc-200d-2695-fe0f'\n    assert demojiprocess.code_point_of_name('adult:skin-tone-4') == '1f9d1-1f3fe'", "fn_id": 4, "class_fn": false, "repo": "PommeBleue/discord-emoji", "file": "src/tests/tests.py", "last_update_at": "2021-06-18T09:37:53+00:00", "pred": {"ppl": 2.336642026901245, "ppl_lower": 2.336642026901245, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005337829355266516, "Min_5.0% Prob": 8.248974561691284, "Min_10.0% Prob": 6.647838532924652, "Min_20.0% Prob": 4.05287943464337, "Min_30.0% Prob": 2.812046405375004, "Min_40.0% Prob": 2.1196057219336284, "Min_50.0% Prob": 1.6950872693255188, "Min_60.0% Prob": 1.4252429417008534}}
{"hexsha": "b9a0444e34d229fe92febc414b59c043e61e95ce", "ext": "py", "lang": "Python", "content": "def get_blue_marble_image(month):\n    filename = 'world.2004%02i.3x21600x10800.jpg' % month\n    fullpath = os.path.join(os.path.expanduser('~'), '.cache/burned_area/' + filename)\n    if os.path.exists(fullpath):\n        with open(fullpath, 'rb') as f:\n            imgdata = f.read()\n    else:\n        code = _nasa_blue_marble_ng_monthly_image_url_codes[month - 1]\n        url = ('https://eoimages.gsfc.nasa.gov/images/imagerecords/' + '%s/' + filename) % code\n        print('Downloading', url)\n        req = requests.get(url)\n        req.raise_for_status()\n        imgdata = req.content\n        os.makedirs(os.path.dirname(fullpath), exist_ok=True)\n        with open(fullpath, 'wb') as f:\n            f.write(imgdata)\n    img = Image.open(io.BytesIO(imgdata))\n    return img", "fn_id": 4, "class_fn": false, "repo": "benbarsdell/burned-area-viz", "file": "burned_area_viz.py", "last_update_at": "2021-04-16T18:20:36+00:00", "pred": {"ppl": 2.2575576305389404, "ppl_lower": 2.4907877445220947, "ppl/lowercase_ppl": -1.12073864334021, "ppl/zlib": 0.0019812251446741933, "Min_5.0% Prob": 7.481181587491717, "Min_10.0% Prob": 5.481385392802102, "Min_20.0% Prob": 3.6720171978599145, "Min_30.0% Prob": 2.6529346217127405, "Min_40.0% Prob": 2.0225082877696607, "Min_50.0% Prob": 1.630794386103959, "Min_60.0% Prob": 1.3560032723689375}}
{"hexsha": "965d7f77982b9eaf53ae37fba39562b4f8c0b34f", "ext": "py", "lang": "Python", "content": "def _split_points_into_batches(points: NumericArray, number_of_points_per_batch: int) -> tp.List[tp.List[NumericArray]]:\n    number_of_points = points.shape[1]\n    n_begin = 0\n    args_list = []\n    while n_begin < number_of_points:\n        n_end = min(n_begin + number_of_points_per_batch, number_of_points)\n        args_list.append([points[:, n_begin:n_end]])\n        n_begin = n_end\n    return args_list", "fn_id": 0, "class_fn": false, "repo": "michaelnowotny/cocos", "file": "cocos/scientific/kde.py", "last_update_at": "2021-11-27T09:09:40+00:00", "pred": {"ppl": 2.214078187942505, "ppl_lower": 2.4361910820007324, "ppl/lowercase_ppl": -1.1202759070367228, "ppl/zlib": 0.003994151502027104, "Min_5.0% Prob": 8.373222419193812, "Min_10.0% Prob": 6.161916834967477, "Min_20.0% Prob": 3.747915861935451, "Min_30.0% Prob": 2.6065781658346, "Min_40.0% Prob": 1.9769848960183434, "Min_50.0% Prob": 1.5850431540779568, "Min_60.0% Prob": 1.3353267841527916}}
{"hexsha": "01eaa1599fa6952fceac0db02f61801ac8392d27", "ext": "py", "lang": "Python", "content": "def plot_correlation(py, correlated, minimum_arg, minimums):\n    plt.figure()\n    plt.plot(py, correlated[:, 0, 0])\n    plt.plot(py, correlated[:, -1, -1])\n    plt.legend(['pixel 0,0', 'pixel n,n', 'minimum 0 0', 'minimum n n'])\n    plt.title('cross correlation between calibration curve and pixel values')\n    plt.xlabel('Physical distance (im)')\n    plt.ylabel('Focus unit')", "fn_id": 17, "class_fn": false, "repo": "idiap/deepfocus2019", "file": "detection/calibration_fit.py", "last_update_at": "2021-11-26T09:33:14+00:00", "pred": {"ppl": 5.566688060760498, "ppl_lower": 5.480841636657715, "ppl/lowercase_ppl": -0.9909473444674476, "ppl/zlib": 0.008457144206884745, "Min_5.0% Prob": 9.959309418996176, "Min_10.0% Prob": 8.673489643977238, "Min_20.0% Prob": 6.62984064909128, "Min_30.0% Prob": 5.0878796696662905, "Min_40.0% Prob": 4.089766647455828, "Min_50.0% Prob": 3.3410299269121086, "Min_60.0% Prob": 2.845713028870523}}
{"hexsha": "d4fedd0a36cd395e4706b0c47428c1465d2a2a9d", "ext": "py", "lang": "Python", "content": "def wl_predict(datasets, test_datasets):\n    \"\"\"\n\n    \"\"\"\n    log_dir = tfu.get_logdir()\n    datasets, test_datasets = get_wl_datasets()\n    x, y = tfu.get_example(datasets)\n    loss_fxn = tf.losses.BinaryCrossentropy()\n    optim = tf.keras.optimizers.Adam()\n    model = lstm.make_mlp_functional(x.shape[-2:], tf.size(y[0]), classify=True)\n    train_summary_writer, test_summary_writer = tfu.init_summary_writers(log_dir)\n    train_loss, train_accuracy, test_loss, test_accuracy = tfu.get_classification_metrics()\n    tr_step = 0\n    te_step = 0\n    for epoch, dataset in enumerate(datasets):\n        if not dataset:\n            continue\n        for xtr, ytr in dataset:\n            ytr = tf.reshape(ytr, (1, -1))\n            tl, ta, preds = fwd.train_step_classify(model, optim, loss_fxn, xtr, ytr, train_loss, train_accuracy)\n            tr_step += 1\n            with train_summary_writer.as_default():\n                tf.summary.scalar('loss', tl.numpy(), step=tr_step)\n                tf.summary.scalar('accuracy', ta.numpy(), step=tr_step)\n            maxed_pred = tf.argmax(preds, 1).numpy()[0]\n            maxed_true = tf.argmax(ytr).numpy()\n            correct = tf.equal(maxed_pred, maxed_true).numpy()\n        test_dataset = random.choice(test_datasets)\n        if not test_dataset:\n            continue\n        for xte, yte in test_dataset:\n            yte = tf.reshape(yte, (1, -1))\n            tel, tea = fwd.test_step(model, loss_fxn, xte, yte, test_loss, test_accuracy)\n            te_step += 1\n            with test_summary_writer.as_default():\n                tf.summary.scalar('loss', tel.numpy(), step=te_step)\n                tf.summary.scalar('accuracy', tea.numpy(), step=te_step)\n        template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}, Preds: {}, Acts: {}'\n        print(template.format(epoch + 1, train_loss.result(), train_accuracy.result() * 100, test_loss.result(), test_accuracy.result() * 100, preds, ytr))\n        train_loss.reset_states()\n        test_loss.reset_states()\n        train_accuracy.reset_states()\n        test_accuracy.reset_states()\n    tf.saved_model.save(model, tfm.WRITE_TO + 'win_loss/')\n    return datasets", "fn_id": 1, "class_fn": false, "repo": "AnandIJain/sip", "file": "sips/ml/tf_models/win_loss.py", "last_update_at": "2021-06-13T13:53:59+00:00", "pred": {"ppl": 2.1572275161743164, "ppl_lower": 2.294766902923584, "ppl/lowercase_ppl": -1.080392188546416, "ppl/zlib": 0.0010445976085653374, "Min_5.0% Prob": 7.005616238242702, "Min_10.0% Prob": 5.291982813885338, "Min_20.0% Prob": 3.47697471793181, "Min_30.0% Prob": 2.4954061460235843, "Min_40.0% Prob": 1.9085546197545644, "Min_50.0% Prob": 1.5345298249982686, "Min_60.0% Prob": 1.2827512721045187}}
{"hexsha": "982db6db807b1cdc32803139fd8028059a1a1f18", "ext": "py", "lang": "Python", "content": "def plotvfonsph(theta_rad, phi_rad, F_th, F_ph, freq=0.0, vcoordlist=['sph'], projection='orthographic', cmplx_rep='AbsAng', vfname='Unknown'):\n    \"\"\"Plot transverse vector field on sphere. Different projections are\n    supported as are different bases and complex value representations.\"\"\"\n    x, y, xyNames, nom_xticks, F_th, F_ph = projectdomain(theta_rad, phi_rad, F_th, F_ph, projection)\n    F0_c, F1_c, compNames = vcoordconvert(F_th, F_ph, phi_rad, vcoordlist=vcoordlist)\n    F0_2r, cmplxop0 = cmplx2realrep(F0_c, cmplx_rep)\n    F1_2r, cmplxop1 = cmplx2realrep(F1_c, cmplx_rep)\n    if projection == 'orthographic':\n        xyNames = [xyNames[0] + ' []', xyNames[1] + ' []']\n    if projection == 'azimuthal-equidistant':\n        x = numpy.rad2deg(x)\n        y = numpy.rad2deg(y)\n        xyNames = [xyNames[0] + ' [deg.]', xyNames[1] + ' [deg.]']\n    fig = plt.figure()\n    fig.suptitle(vfname + ' @ ' + str(freq / 1000000.0) + ' MHz' + ', ' + 'projection: ' + projection)\n\n    def plotcomp(vcmpi, cpi, zcomp, cmplxop, xyNames, nom_xticks):\n        if cmplxop[cpi] == 'Ang':\n            cmap = plt.get_cmap('hsv')\n        else:\n            cmap = plt.get_cmap('viridis')\n        plt.pcolormesh(x, y, zcomp[cpi], cmap=cmap)\n        if nom_xticks is not None:\n            plt.xticks(nom_xticks)\n        ax.set_title(cmplxop[cpi] + '(' + compNames[vcmpi] + ')')\n        plt.xlabel(xyNames[0])\n        plt.ylabel(xyNames[1])\n        plt.grid()\n        plt.colorbar()\n        if projection == 'equirectangular':\n            ax.invert_yaxis()\n    ax = plt.subplot(221, polar=False)\n    plotcomp(0, 0, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(222, polar=False)\n    plotcomp(0, 1, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(223, polar=False)\n    plotcomp(1, 0, F1_2r, cmplxop1, xyNames, nom_xticks)\n    ax = plt.subplot(224, polar=False)\n    plotcomp(1, 1, F1_2r, cmplxop1, xyNames, nom_xticks)\n    plt.show()", "fn_id": 12, "class_fn": false, "repo": "David-McKenna/AntPat", "file": "antpat/reps/sphgridfun/tvecfun.py", "last_update_at": "2021-04-06T06:23:25+00:00", "pred": {"ppl": 2.59523344039917, "ppl_lower": 2.639308214187622, "ppl/lowercase_ppl": -1.0176583704501256, "ppl/zlib": 0.001335681331003512, "Min_5.0% Prob": 8.347846233844757, "Min_10.0% Prob": 6.338092480176761, "Min_20.0% Prob": 4.2198369985709165, "Min_30.0% Prob": 3.07625409060595, "Min_40.0% Prob": 2.3728509906656536, "Min_50.0% Prob": 1.9059785330101995, "Min_60.0% Prob": 1.5892341363386309}}
{"hexsha": "acf70d67c75b3c219a4cc6fc3e0736e214b7ac7f", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef color_image(image):\n    image.ndim = 3\n    return image", "fn_id": 2, "class_fn": false, "repo": "dxxxm/opencv_wrapper", "file": "tests/conftest.py", "last_update_at": "2021-11-24T09:24:10+00:00", "pred": {"ppl": 5.453403472900391, "ppl_lower": 5.453403472900391, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.02570060460912999, "Min_5.0% Prob": 8.272960662841797, "Min_10.0% Prob": 8.079893350601196, "Min_20.0% Prob": 6.685314321517945, "Min_30.0% Prob": 4.834865123033524, "Min_40.0% Prob": 4.158068263530732, "Min_50.0% Prob": 3.432408277805035, "Min_60.0% Prob": 2.842732266522944}}
{"hexsha": "53f7bb295a7670c88ce420c9fc2d3c662110f9c1", "ext": "py", "lang": "Python", "content": "def AvgPooling(pytorch_layer):\n    layer = pb2.LayerParameter()\n    layer.type = 'Pooling'\n    layer.pooling_param.pool = pb2.PoolingParameter.AVE\n    CopyPoolingParameter(pytorch_layer, layer)\n    return layer", "fn_id": 14, "class_fn": false, "repo": "UltronAI/pytorch-caffe", "file": "pytorch2caffe/ConvertLayer_caffe.py", "last_update_at": "2021-11-12T07:39:36+00:00", "pred": {"ppl": 3.1531982421875, "ppl_lower": 5.390061378479004, "ppl/lowercase_ppl": -1.4668508055922338, "ppl/zlib": 0.009491051675488136, "Min_5.0% Prob": 9.847793896993002, "Min_10.0% Prob": 7.65332613672529, "Min_20.0% Prob": 5.011588931083679, "Min_30.0% Prob": 3.720891384851365, "Min_40.0% Prob": 2.8291435755532364, "Min_50.0% Prob": 2.306523247725434, "Min_60.0% Prob": 1.944756863162268}}
{"hexsha": "ed1e84994c73c427aad1a29aacc2fb28de4545f1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('transaction_args,method_args,method_kwargs,expected,skip_testrpc', (({}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gas': 800000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gasPrice': 21000000000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 21000000000, 'chainId': None}, False), ({'nonce': 7}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'nonce': 7, 'chainId': None}, True), ({'value': 20000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 20000, 'gasPrice': 1, 'chainId': None}, False)), ids=['Standard', 'Explicit Gas', 'Explicit Gas Price', 'Explicit Nonce', 'With Value'])\ndef test_build_transaction_with_contract_with_arguments(web3, skip_if_testrpc, math_contract, transaction_args, method_args, method_kwargs, expected, skip_testrpc, buildTransaction):\n    if skip_testrpc:\n        skip_if_testrpc(web3)\n    txn = buildTransaction(contract=math_contract, contract_function='increment', func_args=method_args, func_kwargs=method_kwargs, tx_params=transaction_args)\n    expected['to'] = math_contract.address\n    assert txn is not None\n    if 'gas' in transaction_args:\n        assert txn['gas'] == transaction_args['gas']\n    else:\n        assert 'gas' in txn\n    assert dissoc(txn, 'gas') == expected", "fn_id": 4, "class_fn": false, "repo": "onlinedeal4unow/web3.py", "file": "tests/core/contracts/test_contract_buildTransaction.py", "last_update_at": "2021-11-12T00:38:42+00:00", "pred": {"ppl": 1.5196901559829712, "ppl_lower": 1.5905027389526367, "ppl/lowercase_ppl": -1.1088243271785012, "ppl/zlib": 0.0008718884777728651, "Min_5.0% Prob": 5.388509273529053, "Min_10.0% Prob": 3.601008366970789, "Min_20.0% Prob": 2.060879997909069, "Min_30.0% Prob": 1.395203475633429, "Min_40.0% Prob": 1.0459854365589003, "Min_50.0% Prob": 0.8378252290953017, "Min_60.0% Prob": 0.6985728004388857}}
{"hexsha": "6f98bbabb72a1fe6a11d10ff1c78a84452e1e916", "ext": "py", "lang": "Python", "content": "def add_preproc_params(parser):\n    parser.add_argument('--effdir_out_preproc', required=False, help='Output directory for preproc')\n    parser.add_argument('--preproc_mask', required=False, help='Preproc processing mask file')\n    parser.add_argument('--preproc_mask_adc', required=False, help='Preproc ADC NL processing mask file')\n    parser.add_argument('--preproc_dark', dest='preproc_dark', default=False, action='store_true', help='Preprocess dark data')\n    parser.add_argument('--preproc_common', dest='preproc_common', default=False, action='store_true', help='Preprocess common data')\n    parser.add_argument('--nbin', required=False, default=10000, type=np.int, help='Number of phase bins')\n    parser.add_argument('--jump_filter_len', required=False, default=40000, type=np.int, help='Jump filter length')\n    parser.add_argument('--jump_threshold', required=False, default=5.0, type=np.float, help='Jump detection threshold')\n    parser.add_argument('--preproc_timeout', required=False, default=120, type=np.int, help='Maximum time allowed for preprocessing a ring')\n    parser.add_argument('--preproc_timeout_intermediate', required=False, default=60, type=np.int, help='Maximum time allowed for preprocessing a ring before last iteration')\n    parser.add_argument('--adc_correction', required=False, help='Full (new) NL correction file.')\n    parser.add_argument('--measure_ADC', dest='measure_ADC', default=False, action='store_true', help='Measure ADC NL')\n    parser.add_argument('--niter_ADC', default=1, type=np.int, help='Number of ADC NL iterations')\n    parser.add_argument('--delta_ADC', default=1.0, type=np.float, help='Width of ADC bin in ADU')\n    parser.add_argument('--nphase4k', required=False, default=2, type=np.int, help='Number of 4K cooler phases to measure ADC NL for.')\n    parser.add_argument('--skip_preproc', dest='skip_preproc', default=False, action='store_true', help='Do not pre-process the TOD')\n    parser.add_argument('--flag_planets', dest='flag_planets', default=False, action='store_true', help='Derive planet flags')\n    parser.add_argument('--planet_flag_radius', required=False, default=2.0, type=np.float, help='New planet flag radius (in FWHM) when --flag_planets')\n    parser.add_argument('--detmask', required=False, type=np.int, help='Detector flag mask')\n    parser.add_argument('--intense_threshold', required=False, default=10000000000.0, type=np.float, help='Intense signal threshold [K_CMB]')\n    parser.add_argument('--preproc_async_time', required=False, default=1000, type=np.int, help='Initial asynchronous processing time before load balancing')\n    parser.add_argument('--preproc_async_time_intermediate', required=False, default=800, type=np.int, help='Initial asynchronous processing time before load balancing before last iteration')\n    return", "fn_id": 5, "class_fn": false, "repo": "planck-npipe/toast-npipe", "file": "pipelines/toast_planck_reduce.py", "last_update_at": "2021-04-20T08:09:35+00:00", "pred": {"ppl": 2.4193508625030518, "ppl_lower": 2.4969096183776855, "ppl/lowercase_ppl": -1.035715421888391, "ppl/zlib": 0.0012748907150809164, "Min_5.0% Prob": 7.644827896898443, "Min_10.0% Prob": 5.9813792407512665, "Min_20.0% Prob": 3.939648910002275, "Min_30.0% Prob": 2.8471624480955526, "Min_40.0% Prob": 2.1861027702054177, "Min_50.0% Prob": 1.7624330165372653, "Min_60.0% Prob": 1.4724089066783728}}
{"hexsha": "c0b95f623054d53abb9621aff1a8155369c99b80", "ext": "py", "lang": "Python", "content": "def seed_everything(seed):\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    random.seed(seed)", "fn_id": 0, "class_fn": false, "repo": "boostcampaitech2/model-optimization-level3-cv-17", "file": "train.py", "last_update_at": "2021-12-22T04:52:08+00:00", "pred": {"ppl": 1.5950366258621216, "ppl_lower": 1.8311498165130615, "ppl/lowercase_ppl": -1.2956700829344052, "ppl/zlib": 0.0039235016713960015, "Min_5.0% Prob": 7.578539689381917, "Min_10.0% Prob": 4.594254527773176, "Min_20.0% Prob": 2.3040061473846434, "Min_30.0% Prob": 1.5858548982068896, "Min_40.0% Prob": 1.1664605595947555, "Min_50.0% Prob": 0.9462721933173394, "Min_60.0% Prob": 0.7781208010655569}}
{"hexsha": "5ecff52b202fb2311f75b717f10ecda7192b0a5e", "ext": "py", "lang": "Python", "content": "def extract_cands_in_generate(type, constraints=set()):\n    cands = []\n    for t in CONCEPTS[type]:\n        if all([is_consistent(t, c) for c in constraints]) or not constraints:\n            cands.append(t)\n    return cands", "fn_id": 5, "class_fn": false, "repo": "simon555/baby-ai-game", "file": "levels/instr_gen.py", "last_update_at": "2021-11-03T15:36:56+00:00", "pred": {"ppl": 5.164469242095947, "ppl_lower": 5.561188220977783, "ppl/lowercase_ppl": -1.0450781776668405, "ppl/zlib": 0.011018807629574294, "Min_5.0% Prob": 9.651262283325195, "Min_10.0% Prob": 7.889396667480469, "Min_20.0% Prob": 6.221260990415301, "Min_30.0% Prob": 5.043264003027053, "Min_40.0% Prob": 4.016151379261698, "Min_50.0% Prob": 3.2216090849704213, "Min_60.0% Prob": 2.7291280786658443}}
{"hexsha": "57728a0d7226be69507552ec44dac52e55264baf", "ext": "py", "lang": "Python", "content": "def make_test_data():\n    \"\"\" \"\"\"\n    tgrid = np.array([0.0, 86400.0])\n    xgrid = np.linspace(-8, 8, 120)\n    ygrid = np.linspace(-7, 7, 110)\n    zgrid = np.linspace(-6, 6, 100)\n    bdip = np.array([[[ptm_dipole.dipole_field([x, y, z]) for z in zgrid] for y in ygrid] for x in xgrid])\n    ex = np.zeros([xgrid.size, ygrid.size, zgrid.size])\n    ey = np.zeros_like(ex)\n    ez = np.zeros_like(ex)\n    pf = ptm_preprocessing.PTMfields()\n    pf.set_grid(xgrid, ygrid, zgrid)\n    pf.set_magnetic(bdip[:, :, :, 0], bdip[:, :, :, 1], bdip[:, :, :, 2])\n    pf.set_electric(ex, ey, ez)\n    pf.write_file('ptm_data/ptm_fields_0001.dat')\n    pf.write_file('ptm_data/ptm_fields_0002.dat')\n    np.savetxt('ptm_data/tgrid.dat', tgrid)", "fn_id": 1, "class_fn": false, "repo": "Pheosics/SHIELDS-PTM", "file": "ptm_python/ptm_test_data.py", "last_update_at": "2021-09-20T19:58:27+00:00", "pred": {"ppl": 2.268422842025757, "ppl_lower": 2.2818310260772705, "ppl/lowercase_ppl": -1.007195098067945, "ppl/zlib": 0.002474576455501542, "Min_5.0% Prob": 6.774481693903605, "Min_10.0% Prob": 5.1761594613393145, "Min_20.0% Prob": 3.5880595793326697, "Min_30.0% Prob": 2.601784471836355, "Min_40.0% Prob": 2.0178022030740976, "Min_50.0% Prob": 1.6265580753553968, "Min_60.0% Prob": 1.3631096467856438}}
{"hexsha": "bb68959040f9d60e5d44b71c03cdbfca7f860c20", "ext": "py", "lang": "Python", "content": "def _read(fname):\n    try:\n        return open(path.join(path.dirname(__file__), fname)).read()\n    except IOError:\n        return ''", "fn_id": 0, "class_fn": false, "repo": "inveniosoftware/flask-collect", "file": "setup.py", "last_update_at": "2021-11-15T12:08:13+00:00", "pred": {"ppl": 2.6293997764587402, "ppl_lower": 3.4980173110961914, "ppl/lowercase_ppl": -1.2952563478171248, "ppl/zlib": 0.00957183760657714, "Min_5.0% Prob": 8.109450817108154, "Min_10.0% Prob": 6.325957298278809, "Min_20.0% Prob": 4.550768703222275, "Min_30.0% Prob": 3.249530350168546, "Min_40.0% Prob": 2.4913328075781465, "Min_50.0% Prob": 1.9201005881740933, "Min_60.0% Prob": 1.6196961957216263}}
{"hexsha": "9f339190f0ef239c8b99606a869e09ec3bd344b0", "ext": "py", "lang": "Python", "content": "def top(stack):\n    if len(stack):\n        return stack[-1]\n    return None", "fn_id": 2, "class_fn": false, "repo": "suvambasak/cp", "file": "others/stack.py", "last_update_at": "2021-02-28T20:17:32+00:00", "pred": {"ppl": 4.622633457183838, "ppl_lower": 6.526854991912842, "ppl/lowercase_ppl": -1.2253224260058266, "ppl/zlib": 0.02733865276920991, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 8.8011794090271, "Min_20.0% Prob": 6.769275009632111, "Min_30.0% Prob": 5.302260557810466, "Min_40.0% Prob": 3.7538944085439048, "Min_50.0% Prob": 3.1376218159090388, "Min_60.0% Prob": 2.681474051796473}}
{"hexsha": "a7cb7c0cbe1316b9f471be562240d8e6e68b5ee9", "ext": "py", "lang": "Python", "content": "def get_items(list_, doc_type):\n    data_table_names = {'PO': 'fss.dbo.bsPRItem', 'SO': 'fss.dbo.bsSaleOrderItem'}\n    result_dict = {}\n    item_list = []\n    try:\n        table_name = data_table_names[doc_type]\n    except KeyError as e:\n        print(f'ERROR: DocType {e} not found')\n        sys.exit()\n        return ({}, [])\n    for p in list_:\n        doc_no = p[1]\n        statement_items = f\"SELECT * FROM {table_name}                            WHERE DocNo = '{doc_no}'\"\n        cursor.execute(statement_items)\n        package = []\n        for r in cursor:\n            item_list.append(r)\n            package.append(r)\n        result_dict[r[1]] = package\n    return (result_dict, item_list)", "fn_id": 1, "class_fn": false, "repo": "adadesions/tenzing-project", "file": "tenzing-mini/tenzing_mini.py", "last_update_at": "2021-01-25T04:45:56+00:00", "pred": {"ppl": 3.890350818634033, "ppl_lower": 4.185329914093018, "ppl/lowercase_ppl": -1.0537992128447302, "ppl/zlib": 0.00394912598343832, "Min_5.0% Prob": 8.926374912261963, "Min_10.0% Prob": 7.093346985903653, "Min_20.0% Prob": 5.281984933217367, "Min_30.0% Prob": 4.085947967627469, "Min_40.0% Prob": 3.2606153088611562, "Min_50.0% Prob": 2.673017269033089, "Min_60.0% Prob": 2.2662876602810096}}
{"hexsha": "e376bb9a7337aed835807b7a81d670cdfa095d2c", "ext": "py", "lang": "Python", "content": "def plot_values(registration_method):\n    global metric_values, multires_iterations\n    metric_values.append(registration_method.GetMetricValue())\n    clear_output(wait=True)\n    plt.plot(metric_values, 'r')\n    plt.plot(multires_iterations, [metric_values[index] for index in multires_iterations], 'b*')\n    plt.xlabel('Iteration Number', fontsize=12)\n    plt.ylabel('Metric Value', fontsize=12)\n    plt.show()", "fn_id": 10, "class_fn": false, "repo": "neurodata/ndreg", "file": "ndreg/plotter.py", "last_update_at": "2021-09-27T01:06:33+00:00", "pred": {"ppl": 3.102729558944702, "ppl_lower": 3.611290454864502, "ppl/lowercase_ppl": -1.1340504554561295, "ppl/zlib": 0.0053662664784891925, "Min_5.0% Prob": 9.001694758733114, "Min_10.0% Prob": 6.961026925307054, "Min_20.0% Prob": 4.713065001699659, "Min_30.0% Prob": 3.554316854476929, "Min_40.0% Prob": 2.7541185948583813, "Min_50.0% Prob": 2.253314683464036, "Min_60.0% Prob": 1.8772867979642787}}
{"hexsha": "56d66414c84d9d6eef940c2d2989f3d4532fde9e", "ext": "py", "lang": "Python", "content": "def pose_to_transformation(pose):\n    \"\"\"\n    Convert poses to transformation matrix\n    \"\"\"\n    temp_0 = pose[0]\n    temp_1 = pose[1]\n    temp_2 = pose[2]\n    temp_x = pose[3]\n    temp_y = pose[4]\n    temp_z = pose[5]\n    temp_w = pose[6]\n    pose[4:6] *= -1\n    pose[0] *= -1\n    rot_mat = quat2mat(pose[3:])\n    translation_vector = np.array([[pose[0]], [pose[1]], [pose[2]]]) / 1000\n    print(translation_vector)\n    rot_mat_2 = np.array([[0, 1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n    flip_x = np.eye(4)\n    flip_x[0, 0] *= -1\n    trans = flip_x @ rot_mat_2\n    translation_offset = np.ones((3, 1)) * 1\n    transformation_mat = np.vstack((np.hstack((rot_mat, translation_vector + 0.5)), np.array([0, 0, 0, 1])))\n    print(transformation_mat.shape)\n    return transformation_mat @ trans", "fn_id": 8, "class_fn": false, "repo": "RahulSajnani/DRACO-Weakly-Supervised-Dense-Reconstruction-And-Canonicalization-of-Objects", "file": "DRACO/visualization-scripts/gen_point_cloud.py", "last_update_at": "2021-12-17T16:55:00+00:00", "pred": {"ppl": 2.1424529552459717, "ppl_lower": 2.148843288421631, "ppl/lowercase_ppl": -1.0039087513385596, "ppl/zlib": 0.0023372742741427214, "Min_5.0% Prob": 6.394705702276791, "Min_10.0% Prob": 4.89676468031747, "Min_20.0% Prob": 3.2655171055189323, "Min_30.0% Prob": 2.4124628781715285, "Min_40.0% Prob": 1.8704731023603387, "Min_50.0% Prob": 1.5148102631740397, "Min_60.0% Prob": 1.2685528896229212}}
{"hexsha": "d7f4490b643639fa5528139f79a00b5f88a06a1f", "ext": "py", "lang": "Python", "content": "def v_bool(Inout=InOut_t.Internal_t, Default=0, varSigConst=None):\n    value = Default\n    if type(Default).__name__ == 'int':\n        Default = \"'\" + str(Default) + \"'\"\n    return v_symbol(v_type='boolean', DefaultValue=Default, Inout=Inout, includes=slv_includes, value=value, varSigConst=varSigConst, Bitwidth=1, primitive_type='boolean')", "fn_id": 0, "class_fn": false, "repo": "HardwareDesignWithPython/HDPython", "file": "HDPython/v_symbol.py", "last_update_at": "2021-10-20T20:08:16+00:00", "pred": {"ppl": 9.864996910095215, "ppl_lower": 9.616496086120605, "ppl/lowercase_ppl": -0.9888541109233734, "ppl/zlib": 0.010848307233438841, "Min_5.0% Prob": 11.33514633178711, "Min_10.0% Prob": 9.800813068043102, "Min_20.0% Prob": 7.690178891886836, "Min_30.0% Prob": 6.319314663750784, "Min_40.0% Prob": 5.36406256582426, "Min_50.0% Prob": 4.476510193841211, "Min_60.0% Prob": 3.7798090130090714}}
{"hexsha": "db3168c7636e669ffaa426160820cfab9e45c298", "ext": "py", "lang": "Python", "content": "def event(self, event):\n    if event.type() == QEvent.KeyPress and event.key() == Qt.Key_Tab:\n        self.emit(SIGNAL('tabPressed'))\n        return True", "fn_id": 3, "class_fn": false, "repo": "anjanatiha/Generative-Open-Domain-Chatbot-Application-with-Deep-Learning", "file": "code/chat_gui.py", "last_update_at": "2021-11-19T07:31:14+00:00", "pred": {"ppl": 3.148210287094116, "ppl_lower": 6.8349103927612305, "ppl/lowercase_ppl": -1.6759558441744804, "ppl/zlib": 0.009972470682996658, "Min_5.0% Prob": 9.33787727355957, "Min_10.0% Prob": 6.9884185791015625, "Min_20.0% Prob": 4.4813012679417925, "Min_30.0% Prob": 3.4140657016209195, "Min_40.0% Prob": 2.7558416222271167, "Min_50.0% Prob": 2.2745705184837184, "Min_60.0% Prob": 1.9127621242198452}}
{"hexsha": "58b7827b7aa5bd50934dcfc83e24f6888bb30df8", "ext": "py", "lang": "Python", "content": "@pytest.fixture()\ndef enrollment_data(user):\n    \"\"\"enrollment data for testing\"\"\"\n    bootcamps = BootcampFactory.create_batch(2)\n    enrollments = BootcampRunEnrollmentFactory.create_batch(3, user=user, active=factory.Iterator([False, True, True]), bootcamp_run__bootcamp=factory.Iterator([bootcamps[0], bootcamps[0], bootcamps[1]]))\n    unenrollable_run = BootcampRunFactory.create(end_date=now_in_utc() - timedelta(days=1))\n    order = OrderFactory.create(user=user)\n    return SimpleNamespace(bootcamps=bootcamps, enrollments=enrollments, unenrollable_run=unenrollable_run, order=order)", "fn_id": 3, "class_fn": false, "repo": "mitodl/bootcamp-ecommerce", "file": "klasses/api_test.py", "last_update_at": "2021-01-06T09:51:40+00:00", "pred": {"ppl": 2.442798137664795, "ppl_lower": 3.4204013347625732, "ppl/lowercase_ppl": -1.3768862280308283, "ppl/zlib": 0.0031448738027791477, "Min_5.0% Prob": 8.75815396308899, "Min_10.0% Prob": 6.0816505432128904, "Min_20.0% Prob": 3.95460701584816, "Min_30.0% Prob": 2.8577476903796195, "Min_40.0% Prob": 2.2079385865479706, "Min_50.0% Prob": 1.780355620160699, "Min_60.0% Prob": 1.4870981702658659}}
{"hexsha": "d07c3f5d3f8bceba3730181638eb4ed2e60e2c51", "ext": "py", "lang": "Python", "content": "def get_toplevel_elements(str_, element, parsed=None):\n    if parsed is None:\n        parsed = bs4.BeautifulSoup(str_, 'html.parser')\n    skip, result = ([], [])\n    for l in parsed(element):\n        if str(l) not in skip:\n            result.append(l)\n        skip += [str(l_nested) for l_nested in l(element)]\n    return result", "fn_id": 0, "class_fn": false, "repo": "memri/pyintegrators", "file": "pyintegrators/indexers/notelist/util.py", "last_update_at": "2021-12-06T16:25:13+00:00", "pred": {"ppl": 3.899409055709839, "ppl_lower": 4.520813941955566, "ppl/lowercase_ppl": -1.1086598452479492, "ppl/zlib": 0.007200132367606818, "Min_5.0% Prob": 9.069406986236572, "Min_10.0% Prob": 7.7920633316040036, "Min_20.0% Prob": 5.823550042651949, "Min_30.0% Prob": 4.380552889839295, "Min_40.0% Prob": 3.343208921807153, "Min_50.0% Prob": 2.6925437291556933, "Min_60.0% Prob": 2.278092867857407}}
{"hexsha": "60908cb818b31508f23a6d5114dd56b36a1c0b97", "ext": "py", "lang": "Python", "content": "def factory_create_activity(name: str=None) -> Activity:\n    record = RecordFactory()\n    now = timezone.localtime()\n    start = now\n    end = now + datetime.timedelta(hours=1)\n    spent_time = (end - start).seconds\n    return Activity.objects.create(record_id=record.id, name=name, start=start, end=end, spent_time=spent_time)", "fn_id": 0, "class_fn": false, "repo": "siruku6/life_recorder", "file": "tests/test_models.py", "last_update_at": "2021-05-08T10:04:20+00:00", "pred": {"ppl": 3.3928513526916504, "ppl_lower": 4.2580742835998535, "ppl/lowercase_ppl": -1.185930907405667, "ppl/zlib": 0.006170053913377718, "Min_5.0% Prob": 9.585193252563476, "Min_10.0% Prob": 7.377244782447815, "Min_20.0% Prob": 5.173153042793274, "Min_30.0% Prob": 3.7686613740459567, "Min_40.0% Prob": 2.9853977735449626, "Min_50.0% Prob": 2.4049892081664157, "Min_60.0% Prob": 2.0382189562003457}}
{"hexsha": "109ffa951504bc25a96cc88a0b6aa9552c14314b", "ext": "py", "lang": "Python", "content": "def _create_nat_match_obj(**kwargs):\n    nat_match_obj = {'ethertype': 'IPv4'}\n    delta = set(kwargs.keys()) - set(MATCH_KEYS)\n    if delta:\n        raise Exception(_('Invalid keys for NAT match: %s'), delta)\n    nat_match_obj.update(kwargs)\n    return nat_match_obj", "fn_id": 51, "class_fn": false, "repo": "ericwanghp/quantum", "file": "quantum/plugins/nicira/nicira_nvp_plugin/nvplib.py", "last_update_at": "2021-04-18T15:23:19+00:00", "pred": {"ppl": 3.398932695388794, "ppl_lower": 4.483362674713135, "ppl/lowercase_ppl": -1.226334788344727, "ppl/zlib": 0.006649247115326822, "Min_5.0% Prob": 9.932326078414917, "Min_10.0% Prob": 7.599708928002252, "Min_20.0% Prob": 5.216883665985531, "Min_30.0% Prob": 3.887160994388439, "Min_40.0% Prob": 3.016137940188249, "Min_50.0% Prob": 2.4083678097180696, "Min_60.0% Prob": 2.0349718851121987}}
{"hexsha": "3db72119b5d317902b6f4df26947aae91390d2a3", "ext": "py", "lang": "Python", "content": "def VAE(inputs, input_lengths, filters, kernel_size, strides, num_units, is_training, scope):\n    with tf.variable_scope(scope):\n        outputs = ReferenceEncoder(inputs=inputs, input_lengths=input_lengths, filters=filters, kernel_size=kernel_size, strides=strides, is_training=is_training)\n        mu = tf.layers.dense(outputs, num_units, name='mean', activation=tf.nn.relu)\n        log_var = tf.layers.dense(outputs, num_units, name='vari', activation=tf.nn.relu)\n        std = tf.exp(log_var * 0.5)\n        z = tf.random_normal(shape=[tf.shape(mu)[0], num_units], mean=0.0, stddev=1.0)\n        output = mu + z * std\n        style_embeddings = tf.layers.dense(output, hp.encoder_depth)\n        return (style_embeddings, mu, log_var)", "fn_id": 0, "class_fn": false, "repo": "GlitteringAu/vae_tacotron", "file": "models/modules.py", "last_update_at": "2021-09-02T06:04:46+00:00", "pred": {"ppl": 2.161076307296753, "ppl_lower": 2.1982500553131104, "ppl/lowercase_ppl": -1.0221322152255385, "ppl/zlib": 0.002349409719529858, "Min_5.0% Prob": 7.671120203458345, "Min_10.0% Prob": 5.507502739246075, "Min_20.0% Prob": 3.4842132662351313, "Min_30.0% Prob": 2.4712309807161743, "Min_40.0% Prob": 1.9152405927578608, "Min_50.0% Prob": 1.5368419464846903, "Min_60.0% Prob": 1.2866219052708932}}
{"hexsha": "8f760a85301ff2c85907784935bbde2796fc3fc2", "ext": "py", "lang": "Python", "content": "def get_current_commit_id() -> str:\n    \"\"\"Get current commit id\n\n    Returns:\n        str: Current commit id\n    \"\"\"\n    command = 'git rev-parse HEAD'\n    commit_id = subprocess.check_output(command.split()).strip().decode('utf-8')\n    return commit_id", "fn_id": 7, "class_fn": false, "repo": "shagunsodhani/torch-template", "file": "src/utils/utils.py", "last_update_at": "2021-01-12T10:02:16+00:00", "pred": {"ppl": 2.041391611099243, "ppl_lower": 2.4151124954223633, "ppl/lowercase_ppl": -1.235575467746744, "ppl/zlib": 0.004247807961861494, "Min_5.0% Prob": 6.417049566904704, "Min_10.0% Prob": 4.448323011398315, "Min_20.0% Prob": 3.0024730364481607, "Min_30.0% Prob": 2.194729930680731, "Min_40.0% Prob": 1.7530260076125463, "Min_50.0% Prob": 1.4151449899532293, "Min_60.0% Prob": 1.1841356524306794}}
{"hexsha": "a1f55cf8e4ae2523b3711b8a9b769203a9a8a01e", "ext": "py", "lang": "Python", "content": "def search(keywords, max_results=None):\n    url = 'https://html.duckduckgo.com/html/'\n    params = {'q': keywords}\n    headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0'}\n    yielded = 0\n    while True:\n        res = requests.post(url, data=params, headers=headers)\n        doc = html.fromstring(res.text)\n        results = [a.get('href') for a in doc.cssselect('#links .links_main a')]\n        for result in results:\n            yield result\n            time.sleep(0.1)\n            yielded += 1\n            if max_results and yielded >= max_results:\n                return\n        try:\n            form = doc.cssselect('.results_links_more form')[-1]\n        except IndexError:\n            return\n        params = dict(form.fields)", "fn_id": 0, "class_fn": false, "repo": "Jcorb08/programming-support-skill", "file": "duckduckgo.py", "last_update_at": "2021-05-26T11:08:27+00:00", "pred": {"ppl": 1.9682836532592773, "ppl_lower": 2.230435848236084, "ppl/lowercase_ppl": -1.1846457828465673, "ppl/zlib": 0.001623889498795281, "Min_5.0% Prob": 6.252810537815094, "Min_10.0% Prob": 4.445326833724976, "Min_20.0% Prob": 2.9655625653266906, "Min_30.0% Prob": 2.1793345860640208, "Min_40.0% Prob": 1.6723419663929704, "Min_50.0% Prob": 1.3528781009926683, "Min_60.0% Prob": 1.1326972225014835}}
{"hexsha": "b97e6f9295654f19c6ba8f5fa580dfd29d44c69e", "ext": "py", "lang": "Python", "content": "def edit_seller_selector(brief, sellers_to_invite):\n    if brief.lot.slug != 'atm' and sellers_to_invite:\n        seller_selector = brief.data.get('sellerSelector', '')\n        if len(sellers_to_invite.keys()) > 0 and seller_selector and (seller_selector == 'oneSeller'):\n            brief.data['sellerSelector'] = 'someSellers'", "fn_id": 5, "class_fn": false, "repo": "ArenaNetworks/dto-digitalmarketplace-api", "file": "app/api/business/brief/brief_edit_business.py", "last_update_at": "2021-08-23T06:05:06+00:00", "pred": {"ppl": 3.892775297164917, "ppl_lower": 4.563804626464844, "ppl/lowercase_ppl": -1.1170124798776995, "ppl/zlib": 0.008237105134857156, "Min_5.0% Prob": 8.23489694595337, "Min_10.0% Prob": 6.380493944341486, "Min_20.0% Prob": 4.788599913770502, "Min_30.0% Prob": 3.891652266184489, "Min_40.0% Prob": 3.1901113878596914, "Min_50.0% Prob": 2.6711098221215335, "Min_60.0% Prob": 2.2548511547572687}}
{"hexsha": "299d845b4ecb3a12712dbe607958f777e7c89d76", "ext": "py", "lang": "Python", "content": "def dms2dec(dms_str):\n    \"\"\"Return decimal representation of DMS\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"N))\n    48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"E))\n    2.34330555556F\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"S))\n    -48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"W))\n    -2.34330555556F\n    \n    \"\"\"\n    dms_str = re.sub('\\\\s', '', dms_str)\n    sign = -1 if re.search('[swSW]', dms_str) else 1\n    numbers = list(filter(len, re.split('\\\\D+', dms_str, maxsplit=4)))\n    degree = numbers[0]\n    minute = numbers[1] if len(numbers) >= 2 else '0'\n    second = numbers[2] if len(numbers) >= 3 else '0'\n    frac_seconds = numbers[3] if len(numbers) >= 4 else '0'\n    second += '.' + frac_seconds\n    return sign * (int(degree) + float(minute) / 60 + float(second) / 3600)", "fn_id": 1, "class_fn": false, "repo": "Joel-hanson/Iceberg-locations", "file": "iceberg.py", "last_update_at": "2021-08-17T08:21:01+00:00", "pred": {"ppl": 2.0187795162200928, "ppl_lower": 2.1030304431915283, "ppl/lowercase_ppl": -1.0582016280168556, "ppl/zlib": 0.0019352427793932786, "Min_5.0% Prob": 6.185010784550717, "Min_10.0% Prob": 4.5502273848182275, "Min_20.0% Prob": 3.1314567688264345, "Min_30.0% Prob": 2.2633443019960238, "Min_40.0% Prob": 1.7384342821497543, "Min_50.0% Prob": 1.3976096637585822, "Min_60.0% Prob": 1.170553644163453}}
{"hexsha": "40cc7483e6638afc906172fe0592b4a30fce27e5", "ext": "py", "lang": "Python", "content": "@dp.message_handler(commands=['creds'])\nasync def handler_creds(message: types.Message, state: FSMContext):\n    username = await db.get_username(message.from_user['id'])\n    if username is None:\n        await message.answer('You have to be registered to view creds! Use /reg')\n        return\n    username = username.decode()\n    password = (await db.get_secret(message.from_user['id'])).decode()\n    await message.answer(f'Username: {username}\\nPassword: {password}')", "fn_id": 5, "class_fn": false, "repo": "ne-bknn/CSSH", "file": "bot/bot.py", "last_update_at": "2021-05-12T19:38:55+00:00", "pred": {"ppl": 2.622382164001465, "ppl_lower": 3.542877435684204, "ppl/lowercase_ppl": -1.312064484611877, "ppl/zlib": 0.0038409686357831173, "Min_5.0% Prob": 7.405458132425944, "Min_10.0% Prob": 5.775913788722112, "Min_20.0% Prob": 3.8555477636831776, "Min_30.0% Prob": 2.9274753987789155, "Min_40.0% Prob": 2.2986445713926247, "Min_50.0% Prob": 1.9027692384239454, "Min_60.0% Prob": 1.5956703596460966}}
{"hexsha": "13e50b7266dceea05106c82bd6e330375bd50ee2", "ext": "py", "lang": "Python", "content": "def timeline(request):\n    ts = Timeline.objects.all()\n    contaxt = {'ts': ts}\n    return render(request, 'other/timeline.html', contaxt)", "fn_id": 1, "class_fn": false, "repo": "jackyfzh/j_django_blog", "file": "other/views.py", "last_update_at": "2021-05-22T10:57:45+00:00", "pred": {"ppl": 4.353853225708008, "ppl_lower": 4.616177558898926, "ppl/lowercase_ppl": -1.0397711124033153, "ppl/zlib": 0.013252804072301854, "Min_5.0% Prob": 9.650506019592285, "Min_10.0% Prob": 9.280700445175171, "Min_20.0% Prob": 6.612870401806301, "Min_30.0% Prob": 4.702149770089558, "Min_40.0% Prob": 3.7275606758064694, "Min_50.0% Prob": 2.95819653570652, "Min_60.0% Prob": 2.451462661847472}}
{"hexsha": "b167197574c1ae8ea60f5374ce76c84554e825b9", "ext": "py", "lang": "Python", "content": "def upgrade_rdr():\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `ethnicity` smallint(6);')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `ethnicity` smallint(6);')", "fn_id": 0, "class_fn": false, "repo": "all-of-us/raw-data-repository", "file": "rdr_service/alembic/versions/01e685241414_change_degree_for_workbench_researcher__.py", "last_update_at": "2021-09-24T16:58:21+00:00", "pred": {"ppl": 2.5872504711151123, "ppl_lower": 2.8970754146575928, "ppl/lowercase_ppl": -1.1189843701946498, "ppl/zlib": 0.006741813600405642, "Min_5.0% Prob": 8.486037572224935, "Min_10.0% Prob": 6.889097873981182, "Min_20.0% Prob": 4.623387112067296, "Min_30.0% Prob": 3.15731858368963, "Min_40.0% Prob": 2.3979028841515757, "Min_50.0% Prob": 1.8998584068421998, "Min_60.0% Prob": 1.5918674063810614}}
{"hexsha": "c5d6e28510e9bfcfa523c2d73057ed4afa27c4d5", "ext": "py", "lang": "Python", "content": "def _test_overlap(hits):\n    tester = np.zeros(len(hits), dtype=strax.time_fields)\n    tester['time'] = hits['time'] - (hits['left_integration'] - hits['left']) * hits['dt']\n    tester['endtime'] = hits['time'] + (hits['right_integration'] - hits['left']) * hits['dt']\n    for ch in np.unique(hits['channel']):\n        mask = hits['channel'] == ch\n        test_ch = np.all(tester[mask]['endtime'][:-1] - tester[mask]['time'][1:] <= 0)\n        assert np.all(test_ch), 'Hits overlap!'", "fn_id": 1, "class_fn": false, "repo": "RiceAstroparticleLab/strax", "file": "tests/test_lone_hit_integration.py", "last_update_at": "2021-11-16T18:20:27+00:00", "pred": {"ppl": 2.835186004638672, "ppl_lower": 2.8681020736694336, "ppl/lowercase_ppl": -1.0110765607340184, "ppl/zlib": 0.0044918428669366, "Min_5.0% Prob": 7.709065556526184, "Min_10.0% Prob": 5.822846959618961, "Min_20.0% Prob": 4.2143667084830145, "Min_30.0% Prob": 3.269546002149582, "Min_40.0% Prob": 2.548989423257964, "Min_50.0% Prob": 2.0817556299012283, "Min_60.0% Prob": 1.733064476223219}}
{"hexsha": "65850953a74773d8a1f36d8cdb7ca6cda7bf01af", "ext": "py", "lang": "Python", "content": "def message(flag=None):\n    exc_type, exc_obj, exc_tb = sys.exc_info()\n    if flag is None:\n        return exc_obj.message\n    return traceback.extract_tb(exc_tb)[0][3]", "fn_id": 10, "class_fn": false, "repo": "wroldwiedbwe/vfp2py", "file": "vfp2py/vfpfunc.py", "last_update_at": "2021-12-11T18:31:23+00:00", "pred": {"ppl": 3.238619089126587, "ppl_lower": 3.67494535446167, "ppl/lowercase_ppl": -1.1075535466604247, "ppl/zlib": 0.009476992192681439, "Min_5.0% Prob": 9.857031186421713, "Min_10.0% Prob": 7.8189622561136884, "Min_20.0% Prob": 4.947217365105947, "Min_30.0% Prob": 3.728196293115616, "Min_40.0% Prob": 2.9330141047636666, "Min_50.0% Prob": 2.3238813430070877, "Min_60.0% Prob": 1.9611939360966553}}
{"hexsha": "c1e6e718242cba1e86b4e900ac601b58a5f8729f", "ext": "py", "lang": "Python", "content": "def count_byte_values(bss: Iterable[ByteString]) -> list[Counter[int]]:\n    \"\"\"Returns a list of Counters, each of which records the values of the\n    bytes at the corresponding index in the given ByteStrings.\"\"\"\n    counts_for_idx: list[Counter[int]] = []\n    bs_len = None\n    for bs in bss:\n        if bs_len is None:\n            bs_len = len(bs)\n            counts_for_idx = [Counter() for _ in range(bs_len)]\n        assert len(bs) == bs_len\n        for i, b in enumerate(bs):\n            counts_for_idx[i][b] += 1\n    return counts_for_idx", "fn_id": 2, "class_fn": false, "repo": "misterfifths/nis_mods", "file": "utils/mining.py", "last_update_at": "2021-10-18T13:42:09+00:00", "pred": {"ppl": 2.3483951091766357, "ppl_lower": 2.694958209991455, "ppl/lowercase_ppl": -1.1612338637222135, "ppl/zlib": 0.003049043437808357, "Min_5.0% Prob": 7.116661250591278, "Min_10.0% Prob": 5.4588932710535385, "Min_20.0% Prob": 3.7316738156711353, "Min_30.0% Prob": 2.740256715638965, "Min_40.0% Prob": 2.118707571836079, "Min_50.0% Prob": 1.698018193244934, "Min_60.0% Prob": 1.4233622675562658}}
{"hexsha": "f3e180cb426f2d4f4869990002b54890e11a8ca1", "ext": "py", "lang": "Python", "content": "def exponential(db, utility, eps=1e-05):\n    \"\"\"\n    Goal:\n        The Exponential mechanism is a DP method for answering categorical queries,\n        by sampling from an exponential distribution over possible choices.\n    Guaranties:\n        1. (eps,0) Differential Privacy\n        2. Accuracy:\n           Let utility: N ^ |Universe| x categories -> R\n           Denote c* = exponential(db, utility, eps)\n                  s = utility.sensitivity\n                  R = utility.categories\n                  Opt(u,x) = max_{c in R} u(x,r)\n           Then forall t > 0\n                  P[u(x,c*) <= Opt(u,x) - (2s / epsilon) (ln(|R|) + t)] <= e^-t\n    \"\"\"\n    assert isinstance(db, Database)\n    assert isinstance(utility, Utility)\n    assert db.rep == 'histogram'\n    assert eps > 0\n    evals = np.array([utility.value(db, cat) for cat in utility.categories])\n    consts = eps / (2 * utility.sensitivity)\n    weights = np.exp(consts * evals)\n    res = np.random.choice(utility.categories, p=normalize(weights, ord=1))\n    return res", "fn_id": 1, "class_fn": false, "repo": "chuxuantinh/differential-privacy-ct", "file": "mechanism/basic.py", "last_update_at": "2021-04-17T04:55:59+00:00", "pred": {"ppl": 6.065480709075928, "ppl_lower": 6.949522495269775, "ppl/lowercase_ppl": -1.0754788145977991, "ppl/zlib": 0.0035980315345099964, "Min_5.0% Prob": 9.152678161859512, "Min_10.0% Prob": 7.653434493324974, "Min_20.0% Prob": 6.053661451195225, "Min_30.0% Prob": 4.92178386630434, "Min_40.0% Prob": 4.085053035707185, "Min_50.0% Prob": 3.447155418540492, "Min_60.0% Prob": 2.9486985135861117}}
{"hexsha": "748d69ab544fa46cb8d58415b5d688a6b34e3694", "ext": "py", "lang": "Python", "content": "def map_dists(dists: Dict[str, AbstractMessage], values: Dict[str, np.ndarray], _call: str='logpdf') -> Iterator[Tuple[str, np.ndarray]]:\n    \"\"\"\n    Calls a method (default: logpdf) for each Message in dists\n    on the corresponding value in values\n    \"\"\"\n    for v in dists.keys() & values.keys():\n        dist = dists[v]\n        if isinstance(dist, AbstractMessage):\n            yield (v, getattr(dist, _call)(values[v]))", "fn_id": 0, "class_fn": false, "repo": "arfon/PyAutoFit", "file": "autofit/graphical/messages/__init__.py", "last_update_at": "2021-01-18T23:20:31+00:00", "pred": {"ppl": 3.798654794692993, "ppl_lower": 4.315756797790527, "ppl/lowercase_ppl": -1.0956250558450435, "ppl/zlib": 0.005447538786377443, "Min_5.0% Prob": 8.049546400705973, "Min_10.0% Prob": 6.890312855060284, "Min_20.0% Prob": 5.1069244632014525, "Min_30.0% Prob": 3.9194183582212867, "Min_40.0% Prob": 3.1932914389504328, "Min_50.0% Prob": 2.64995865655296, "Min_60.0% Prob": 2.220450499026877}}
{"hexsha": "85ecf5da466f0df65d97156a925dd2cbb9cc304a", "ext": "py", "lang": "Python", "content": "def predict_labels_datasets(weight0, weight1, weight23, data, transform_x, degree):\n    \"\"\" Generate the predictions given the weigth of the data set with num jet 0, 1  or {2,3} \"\"\"\n    ids = np.arange(data.shape[0])\n    tx_0, tx_1, tx_23 = transform_x(data, degree)\n    ids0 = ids[data[:, 22] == 0]\n    y_pred0 = np.dot(tx_0, weight0)\n    ids1 = ids[data[:, 22] == 1]\n    y_pred1 = np.dot(tx_1, weight1)\n    ids23 = ids[data[:, 22] > 1]\n    y_pred23 = np.dot(tx_23, weight23)\n    y_pred = np.concatenate((np.concatenate((y_pred0, y_pred1), axis=None), y_pred23), axis=None)\n    ids = np.concatenate((np.concatenate((ids0, ids1), axis=None), ids23), axis=None)\n    y = np.transpose(np.array([ids, y_pred]))\n    y = y[y[:, 0].argsort()][:, 1]\n    y[np.where(y <= 0)] = -1\n    y[np.where(y > 0)] = 1\n    return y", "fn_id": 2, "class_fn": false, "repo": "yannvon/higgs-boson", "file": "scripts/split.py", "last_update_at": "2021-11-01T12:55:40+00:00", "pred": {"ppl": 2.4817824363708496, "ppl_lower": 2.547769069671631, "ppl/lowercase_ppl": -1.0288687991921035, "ppl/zlib": 0.0025040689431441426, "Min_5.0% Prob": 8.349284966786703, "Min_10.0% Prob": 6.203791624969906, "Min_20.0% Prob": 4.1004652173982725, "Min_30.0% Prob": 2.9149554779223346, "Min_40.0% Prob": 2.2499635278150953, "Min_50.0% Prob": 1.810072321485687, "Min_60.0% Prob": 1.5155914778769906}}
{"hexsha": "9681618928c5641d65d743ec3954a60d579c7fcb", "ext": "py", "lang": "Python", "content": "def bezierSliceFromTo(points, minParam, maxParam):\n    fromP = bezierPointAt(points, minParam)\n    fromT = bezierTangentAt(points, minParam)\n    toP = bezierPointAt(points, maxParam)\n    toT = bezierTangentAt(points, maxParam)\n    paramDiff = maxParam - minParam\n    return [fromP, fromP + fromT * paramDiff, toP - toT * paramDiff, toP]", "fn_id": 15, "class_fn": false, "repo": "calculusrobotics/RNNs-for-Bayesian-State-Estimation", "file": "Blender 2.91/2.91/scripts/addons/curve_tools/internal.py", "last_update_at": "2021-06-30T00:39:40+00:00", "pred": {"ppl": 2.3708064556121826, "ppl_lower": 3.1648879051208496, "ppl/lowercase_ppl": -1.3346586724906715, "ppl/zlib": 0.005994653985386738, "Min_5.0% Prob": 8.086835193634034, "Min_10.0% Prob": 6.202080900018865, "Min_20.0% Prob": 3.9761125160300215, "Min_30.0% Prob": 2.8427836869444167, "Min_40.0% Prob": 2.1543347703966687, "Min_50.0% Prob": 1.724021792032961, "Min_60.0% Prob": 1.4543240200528609}}
{"hexsha": "1bafe6e69cd8c367d829bb77f059218e660a5475", "ext": "py", "lang": "Python", "content": "def computeStarsItembased(corated, target_bid, model):\n    \"\"\"\n    corated - {bid: star, ...}\n    \"\"\"\n    if corated == None:\n        return None\n    corated.pop(target_bid, None)\n    bid_cor = list(corated.keys())\n    collect = []\n    for b in bid_cor:\n        pair = None\n        if b < target_bid:\n            pair = (b, target_bid)\n        else:\n            pair = (target_bid, b)\n        w = model.get(pair)\n        if w != None:\n            collect.append((pair, w, b))\n    collect.sort(key=lambda x: x[1], reverse=True)\n    neighbors = collect[:N_NEIGHBORS_ITEMBASED]\n    sum_w = 0\n    n = 0\n    for p, w, b in neighbors:\n        star = corated[b]\n        n += star * w\n        sum_w += w\n    if sum_w == 0:\n        return None\n    else:\n        return n / sum_w", "fn_id": 2, "class_fn": false, "repo": "maple1eaf/data_mining_inf553", "file": "assignment/assignment3/python/task3/task3predict_dev.py", "last_update_at": "2021-05-04T05:17:57+00:00", "pred": {"ppl": 2.9214906692504883, "ppl_lower": 3.1957874298095703, "ppl/lowercase_ppl": -1.0837049046891774, "ppl/zlib": 0.0030114999696229062, "Min_5.0% Prob": 8.901092309218187, "Min_10.0% Prob": 6.826051867925203, "Min_20.0% Prob": 4.651846096200763, "Min_30.0% Prob": 3.3790223583579064, "Min_40.0% Prob": 2.6239141097692684, "Min_50.0% Prob": 2.1283346760962436, "Min_60.0% Prob": 1.7834700109055324}}
{"hexsha": "e3a8b073f0f64789f2b3c0b201ed953476be70ca", "ext": "py", "lang": "Python", "content": "def get_quarter(month):\n    if month in ['January', 'April', 'July', 'October']:\n        return True\n    else:\n        return False", "fn_id": 2, "class_fn": false, "repo": "Mindhome/field_service", "file": "mindhome_alpha/erpnext/quality_management/doctype/quality_review/quality_review.py", "last_update_at": "2021-04-29T14:55:29+00:00", "pred": {"ppl": 2.864680290222168, "ppl_lower": 3.517904281616211, "ppl/lowercase_ppl": -1.1951706660645434, "ppl/zlib": 0.010318203454847175, "Min_5.0% Prob": 8.392046451568604, "Min_10.0% Prob": 7.1792415380477905, "Min_20.0% Prob": 4.884705662727356, "Min_30.0% Prob": 3.559209957718849, "Min_40.0% Prob": 2.6072072150076138, "Min_50.0% Prob": 2.135227137378284, "Min_60.0% Prob": 1.8030661481618881}}
{"hexsha": "c5b9d51ce8759bd19c31258626e669df3a3907b6", "ext": "py", "lang": "Python", "content": "def bias_variable(shape, bias=0.01):\n    \"\"\"Function to initialize the bias. For ReLUs, it MUST be > 0.0\n\n    :param shape: the shape of the bias variable\n    :param val: the value of the bias variable\n    \"\"\"\n    initial = tf.constant(bias, shape=shape)\n    return tf.Variable(initial)", "fn_id": 1, "class_fn": false, "repo": "yxw027/mmWave-localization-learning", "file": "bff_positioning/models/layer_functions.py", "last_update_at": "2021-05-29T20:28:23+00:00", "pred": {"ppl": 4.43011999130249, "ppl_lower": 5.290421485900879, "ppl/lowercase_ppl": -1.119234123193441, "ppl/zlib": 0.008505295255788687, "Min_5.0% Prob": 10.352843761444092, "Min_10.0% Prob": 8.460548043251038, "Min_20.0% Prob": 5.806418951819925, "Min_30.0% Prob": 4.475477622105525, "Min_40.0% Prob": 3.5870455622673036, "Min_50.0% Prob": 2.9455826587297698, "Min_60.0% Prob": 2.479201782565072}}
{"hexsha": "5f30e702c766d9408e95e8e3b793cedd534e612e", "ext": "py", "lang": "Python", "content": "def get_colorscale_values(cmap):\n    \"\"\"Get the colors composing a plotly colorscale.\n\n    Parameter\n    ---------\n    cmap : str\n        Name of the Plotly colorscale\n\n    Returns\n    -------\n    colorscale : array_like\n        Colors associated to the colormap\n    \"\"\"\n    import plotly\n    rev = '_r' if '_r' in cmap.lower() else ''\n    cmap = cmap.lower().replace('_r', '')\n    colorscales = plotly.colors.named_colorscales()\n    assert cmap in colorscales\n    ensembles = ['sequential', 'diverging', 'qualitative']\n    for e in ensembles:\n        cmaps = dir(eval(f'plotly.colors.{e}'))\n        cmaps_lower = [c.lower() for c in cmaps]\n        if cmap in cmaps_lower:\n            cmap_idx = cmaps_lower.index(cmap)\n            return eval(f'plotly.colors.{e}.{cmaps[cmap_idx]}{rev}')\n    assert ValueError(f'{cmap} is not a predefined colorscale {colorscales}')", "fn_id": 0, "class_fn": false, "repo": "brainets/netchos", "file": "netchos/utils/colors.py", "last_update_at": "2021-11-17T15:18:33+00:00", "pred": {"ppl": 2.572051763534546, "ppl_lower": 2.7067811489105225, "ppl/lowercase_ppl": -1.0540446877748213, "ppl/zlib": 0.0023676790274784172, "Min_5.0% Prob": 8.40506727354867, "Min_10.0% Prob": 6.210399487922931, "Min_20.0% Prob": 4.1504663146775345, "Min_30.0% Prob": 3.008668924258514, "Min_40.0% Prob": 2.33100649752678, "Min_50.0% Prob": 1.8758811217282905, "Min_60.0% Prob": 1.5730206102069297}}
{"hexsha": "5ea5ff02510da4eb6075ea3e0e4184f4d733ca2e", "ext": "py", "lang": "Python", "content": "def detectFacesByRekognition(image_binary: bytes) -> List[List[float]]:\n    client = boto3.client('rekognition')\n    response = client.detect_faces(Image={'Bytes': image_binary}, Attributes=['ALL'])\n    faces = list()\n    for face_info in response['FaceDetails']:\n        faces.append(face_info['BoundingBox'])\n        print(face_info['BoundingBox'])\n    return faces", "fn_id": 1, "class_fn": false, "repo": "p1ass/emojic.ch", "file": "lambda/detect_face.py", "last_update_at": "2021-08-12T04:24:43+00:00", "pred": {"ppl": 2.2500381469726562, "ppl_lower": 3.291583299636841, "ppl/lowercase_ppl": -1.4691076543129944, "ppl/zlib": 0.003636534395886445, "Min_5.0% Prob": 7.464035415649414, "Min_10.0% Prob": 5.523126927289096, "Min_20.0% Prob": 3.633657330816442, "Min_30.0% Prob": 2.631455679734548, "Min_40.0% Prob": 1.9987431310945087, "Min_50.0% Prob": 1.626106164285115, "Min_60.0% Prob": 1.3650939117060668}}
{"hexsha": "4a4bfa3d96580a5d40c5b2e5e994ece0ab585163", "ext": "py", "lang": "Python", "content": "def test_event_graph_accumulated_time_before_start(mocker: Any) -> None:\n    message = DeferredMessage(MyMessage, 'unittest_args', kwargs_field='unittest_kwargs')\n    topic = Topic(MyMessage)\n    start = Event(message, topic, 0.0, 1.0)\n    graph = EventGraph(start)\n    parent = Event(message, topic, 0.0, 1.0)\n    child = Event(message, topic, -3.0, 1.0)\n    graph.add_event_at_end(parent, start)\n    with pytest.raises(LabGraphError):\n        graph.add_event_at_end(child, parent)", "fn_id": 10, "class_fn": false, "repo": "mofe64/labgraph", "file": "labgraph/events/tests/test_event_generator.py", "last_update_at": "2021-08-01T06:31:08+00:00", "pred": {"ppl": 4.396988868713379, "ppl_lower": 5.282433986663818, "ppl/lowercase_ppl": -1.1238871919581366, "ppl/zlib": 0.005995627362880704, "Min_5.0% Prob": 9.412976384162903, "Min_10.0% Prob": 7.864645396961885, "Min_20.0% Prob": 5.757824475424631, "Min_30.0% Prob": 4.405824138567998, "Min_40.0% Prob": 3.49615831886019, "Min_50.0% Prob": 2.886479260569269, "Min_60.0% Prob": 2.4591829928613844}}
{"hexsha": "4ccaae78da187b459e1b8de6f377e49ceb0a7fea", "ext": "py", "lang": "Python", "content": "def _get_files_from_arcs(extension, arc_list=None, arc_path=None):\n    use_concurrency = False\n    if arc_path:\n        arc_list = find_files(arc_path, '.arc')\n    elif arc_list:\n        arc_list = arc_list\n    else:\n        arc_list = ARC_FILES\n    to_export = [arc_file for arc_file in arc_list if arc_file not in CACHE_ARC]\n    if to_export and use_concurrency:\n        concurrent_unpack(arc_list, CACHE_ARC, extension)\n    elif to_export and (not use_concurrency):\n        for arc_file in to_export:\n            _unpack_arc_in_temp(arc_file, CACHE_ARC)\n    files, ids = _get_files_and_ids(extension, arc_list)\n    return (files, ids)", "fn_id": 0, "class_fn": false, "repo": "BlenderCN-Org/albam", "file": "tests/mtframework/conftest.py", "last_update_at": "2021-01-05T22:58:18+00:00", "pred": {"ppl": 3.2205231189727783, "ppl_lower": 3.6596200466156006, "ppl/lowercase_ppl": -1.1092866494911355, "ppl/zlib": 0.004284043244210801, "Min_5.0% Prob": 8.187947273254395, "Min_10.0% Prob": 6.712130503220991, "Min_20.0% Prob": 4.627165288395352, "Min_30.0% Prob": 3.4937214605948506, "Min_40.0% Prob": 2.801595460706287, "Min_50.0% Prob": 2.308547682862366, "Min_60.0% Prob": 1.9409018313950475}}
{"hexsha": "66c3929472e5beb4f365dc128305de4970e9e7a7", "ext": "py", "lang": "Python", "content": "def extract_sentences_and_labels_from_files(files):\n    sentences = []\n    labels = []\n    for infile in files:\n        with open(infile) as file:\n            for line in file:\n                sentence, label = parse_infile_line(line)\n                labels.append(label)\n                sentences.append(sentence)\n            file.close()\n    return (sentences, labels)", "fn_id": 1, "class_fn": false, "repo": "arielrodrigues/nlp-relations-extraction-ptbr", "file": "input-data-preparation/utils.py", "last_update_at": "2021-02-09T16:27:10+00:00", "pred": {"ppl": 2.398353099822998, "ppl_lower": 2.398353099822998, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0051156859263044654, "Min_5.0% Prob": 7.0096116065979, "Min_10.0% Prob": 5.918130132887098, "Min_20.0% Prob": 4.010847072852285, "Min_30.0% Prob": 2.872069136849765, "Min_40.0% Prob": 2.1843837461410422, "Min_50.0% Prob": 1.7539299503729051, "Min_60.0% Prob": 1.4622663145537598}}
{"hexsha": "0924022c1119a245a7cbca668d233e67f604810f", "ext": "py", "lang": "Python", "content": "def get_shifted_3D(tau, X, Y, Z, cam_left, cam_top, traj_left, traj_top, timespan):\n    corr_top, corr_left = shift_cam_coord(timespan, traj_top, traj_left, tau)\n    len_traj = len(corr_top)\n    x = np.zeros(np.shape(X)) * np.nan\n    y = np.zeros(np.shape(Y)) * np.nan\n    z = np.zeros(np.shape(Z)) * np.nan\n    for i in range(0, len_traj):\n        if not (np.isnan(X[i]) or np.isnan(Y[i]) or np.isnan(Z[i])):\n            A, B = make_system_mat(cam_top, cam_left, corr_left[i, :], corr_top[i, :])\n            x[i], y[i], z[i] = np.linalg.solve(np.matrix(A), np.matrix(B).T)\n    return (x, y, z, corr_top, corr_left)", "fn_id": 12, "class_fn": false, "repo": "simonBreumier/3Deye", "file": "data_treat/reconstruction_3d.py", "last_update_at": "2021-06-05T07:51:00+00:00", "pred": {"ppl": 2.5733840465545654, "ppl_lower": 2.6428236961364746, "ppl/lowercase_ppl": -1.0281692038254409, "ppl/zlib": 0.0032260129091628465, "Min_5.0% Prob": 8.51949919973101, "Min_10.0% Prob": 6.358228419508253, "Min_20.0% Prob": 4.1740865643535345, "Min_30.0% Prob": 3.0158502821411406, "Min_40.0% Prob": 2.3335156869143248, "Min_50.0% Prob": 1.8799098611195038, "Min_60.0% Prob": 1.5753650011483735}}
{"hexsha": "f441d0b6f5533ef1211ad198d6e281b4230affcd", "ext": "py", "lang": "Python", "content": "def test_class4_ex4():\n    base_path = '../class4/exercises/exercise4'\n    cmd_list = ['ansible-playbook', 'exercise4.yml']\n    std_out, std_err, return_code = subprocess_runner(cmd_list, exercise_dir=base_path)\n    assert std_err == ''\n    assert return_code == 0", "fn_id": 4, "class_fn": false, "repo": "kinther/ansible_course", "file": "tests/test_class4.py", "last_update_at": "2021-05-24T01:58:08+00:00", "pred": {"ppl": 3.0189783573150635, "ppl_lower": 3.0189783573150635, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006537979182681991, "Min_5.0% Prob": 8.453848242759705, "Min_10.0% Prob": 6.603143612543742, "Min_20.0% Prob": 4.552460984179848, "Min_30.0% Prob": 3.4714226085564186, "Min_40.0% Prob": 2.7074341032749567, "Min_50.0% Prob": 2.1971665152481625, "Min_60.0% Prob": 1.842732380759918}}
{"hexsha": "f2310222e3119de7c2f2b3c8746814477e78d8d7", "ext": "py", "lang": "Python", "content": "def class_add_student(student_id, student_name):\n    \"\"\"\n    \u7528\u4e8e\u6dfb\u52a0\u5b66\u751f\n    \"\"\"\n    cur.execute(f\"insert into student_list values ({student_id},'{student_name}')\")\n    conn.commit()", "fn_id": 1, "class_fn": false, "repo": "XieJianCheng/ClassAdminSystem", "file": "module_new/class_admin_n.py", "last_update_at": "2021-11-11T12:41:09+00:00", "pred": {"ppl": 3.7203378677368164, "ppl_lower": 3.7203378677368164, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00918751390784042, "Min_5.0% Prob": 8.296350161234537, "Min_10.0% Prob": 6.964275757471721, "Min_20.0% Prob": 4.71905783812205, "Min_30.0% Prob": 3.70745195945104, "Min_40.0% Prob": 3.0646651660402617, "Min_50.0% Prob": 2.538180000359012, "Min_60.0% Prob": 2.1798097318088687}}
{"hexsha": "78f066607cb84040dfcf6fa504ecdea051a0dfbc", "ext": "py", "lang": "Python", "content": "def test_calculate_raises_with_no_active_phases_passed():\n    \"\"\"Passing inactive phases to calculate() raises a ConditionError.\"\"\"\n    with pytest.raises(ConditionError):\n        calculate(ALFE_DBF, ['AL', 'VA'], ['AL13FE4'], T=1200, P=101325)", "fn_id": 3, "class_fn": false, "repo": "dschwen/pycalphad", "file": "pycalphad/tests/test_calculate.py", "last_update_at": "2021-07-19T14:25:43+00:00", "pred": {"ppl": 9.521645545959473, "ppl_lower": 11.982917785644531, "ppl/lowercase_ppl": -1.1020224215695071, "ppl/zlib": 0.012804361848480179, "Min_5.0% Prob": 9.42660927772522, "Min_10.0% Prob": 8.595070944892036, "Min_20.0% Prob": 7.372548368242052, "Min_30.0% Prob": 6.101804221117938, "Min_40.0% Prob": 5.1077576412094965, "Min_50.0% Prob": 4.341519700156318, "Min_60.0% Prob": 3.720467455961086}}
{"hexsha": "3546a7402fd9a0f1b6c55afe3610cdd62558560c", "ext": "py", "lang": "Python", "content": "def __get_stock_bar(code, start, end, freq):\n    df = None\n    _start = start.format()\n    _end = end.format()\n    if freq == util.FREQ_DAY or freq == util.FREQ_WEEK or freq == util.FREQ_MONTH:\n        covert = {util.FREQ_DAY: 'D', util.FREQ_WEEK: 'W', util.FREQ_MONTH: 'M'}\n        df = ts.get_stock_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    else:\n        covert = {util.FREQ_1M: '1MIN', util.FREQ_5M: '5MIN', util.FREQ_15M: '15MIN', util.FREQ_30M: '30MIN'}\n        df = ts.tushare_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError('df is unknown type %s' % type(df))\n    elif df.empty:\n        log.warn('%s from %s to %s bar[%s] is empty' % (code, start, end, freq))\n    return df", "fn_id": 3, "class_fn": false, "repo": "lijielife/carp", "file": "carp/request.py", "last_update_at": "2021-03-02T15:48:57+00:00", "pred": {"ppl": 2.2138845920562744, "ppl_lower": 2.4619803428649902, "ppl/lowercase_ppl": -1.1336489586762146, "ppl/zlib": 0.002207635295792503, "Min_5.0% Prob": 8.342357859892005, "Min_10.0% Prob": 6.034260525422938, "Min_20.0% Prob": 3.6698622193889343, "Min_30.0% Prob": 2.586579970442332, "Min_40.0% Prob": 1.9808262608189513, "Min_50.0% Prob": 1.5888360455589143, "Min_60.0% Prob": 1.3244600659773613}}
{"hexsha": "8644f9b2a8f01c213caf5bcbd4d123b465cabeeb", "ext": "py", "lang": "Python", "content": "@leet2git.command()\n@click.option('--source-repository', '-s', default='', help='the path to the folder where the code will be saved')\n@click.option('--language', '-l', default='python3', help='the default language')\n@click.option('--soft/--hard', default=True, help='A soft reset only erases the database. A hard reset also erase the files.')\n@click.pass_obj\ndef reset(cm: ConfigManager, source_repository: str, language: str, soft: bool):\n    \"\"\"Reset the configuration file\n    \\x0c\n    Args:\n        source_repository (str, optional): the path to the folder where the code will be saved.\n            Defaults to \"\".\n        language (str, optional): the default language. Defaults to \"python3\".\n        soft(bool, optional): the reset hardness. Defaults to soft.\n    \"\"\"\n    if not soft:\n        try:\n            click.confirm(f\"This will delete EVERY solution and test file inside                     the {cm.config['source_path']} folder.                      Still want to proceed?\", abort=True)\n        except Abort:\n            return\n        file_list = glob.glob(os.path.join(cm.config['source_path'], 'src', 'leetcode_*')) + glob.glob(os.path.join(cm.config['source_path'], 'tests', 'test_*'))\n        for file in file_list:\n            try:\n                os.remove(file)\n            except FileNotFoundError as e:\n                click.secho(e.args)\n    else:\n        try:\n            click.confirm('This will delete the question database. Still want to proceed?', abort=True)\n        except Abort:\n            return\n    reset_config(cm, source_repository, language)\n    cm.load_config()\n    qdb = QuestionDB(cm.config)\n    qdb.reset()\n    if not soft:\n        data = QuestionData(language=cm.config['language'])\n        file_handler = create_file_handler(data, cm.config)\n        file_handler.generate_repo(cm.config['source_path'])", "fn_id": 7, "class_fn": false, "repo": "sungho-joo/leetcode2github", "file": "src/leet2git/leet2git.py", "last_update_at": "2021-05-07T08:26:47+00:00", "pred": {"ppl": 2.8822596073150635, "ppl_lower": 3.1827456951141357, "ppl/lowercase_ppl": -1.0936822785869655, "ppl/zlib": 0.0015253235913465996, "Min_5.0% Prob": 7.627974758148193, "Min_10.0% Prob": 6.040658674988092, "Min_20.0% Prob": 4.292323839317247, "Min_30.0% Prob": 3.248701960425223, "Min_40.0% Prob": 2.5649958463106755, "Min_50.0% Prob": 2.0963658469236495, "Min_60.0% Prob": 1.7592933761297316}}
{"hexsha": "d1aed9946c2cb489d711ae8a1fe207359b86da6f", "ext": "py", "lang": "Python", "content": "def buildStartEndBreakProb(fit, nSegments, tag):\n\n    def sebBuilder(s):\n        return ee.String(s).cat('_' + tag)\n    segmentTag = buildSegmentTag(nSegments).map(sebBuilder)\n    zeros = ee.Array(0).repeat(0, nSegments)\n    magImg = fit.select(tag).arrayCat(zeros, 0).float().arraySlice(0, 0, nSegments)\n    return magImg.arrayFlatten([segmentTag])", "fn_id": 5, "class_fn": false, "repo": "rjsheperd/gee-gateway", "file": "gee/ccdc.py", "last_update_at": "2021-03-19T19:51:49+00:00", "pred": {"ppl": 5.921652793884277, "ppl_lower": 9.098978042602539, "ppl/lowercase_ppl": -1.2415060941675833, "ppl/zlib": 0.008429457810835456, "Min_5.0% Prob": 9.493452231089273, "Min_10.0% Prob": 8.391790756812462, "Min_20.0% Prob": 6.585653176674476, "Min_30.0% Prob": 5.123120977328374, "Min_40.0% Prob": 4.17056004359172, "Min_50.0% Prob": 3.4282270832495256, "Min_60.0% Prob": 2.9274548043178608}}
{"hexsha": "b735786ce4c39a03aae76e4daf78a4867d561247", "ext": "py", "lang": "Python", "content": "def test_subtraction_with_other_types():\n    price1 = Money(40, 'EUR')\n    price2 = Money(80, 'EUR')\n    price_range = MoneyRange(price1, price2)\n    with pytest.raises(TypeError):\n        price_range - 1", "fn_id": 6, "class_fn": false, "repo": "anton-shestakov/prices", "file": "tests/test_money_range.py", "last_update_at": "2021-11-17T14:38:52+00:00", "pred": {"ppl": 3.1996614933013916, "ppl_lower": 4.861199378967285, "ppl/lowercase_ppl": -1.3596078955592559, "ppl/zlib": 0.008744699405014385, "Min_5.0% Prob": 9.951263904571533, "Min_10.0% Prob": 7.264610154288156, "Min_20.0% Prob": 5.117331949869792, "Min_30.0% Prob": 3.7179693812909336, "Min_40.0% Prob": 2.887131154537201, "Min_50.0% Prob": 2.333266359873307, "Min_60.0% Prob": 1.949500413175593}}
{"hexsha": "1869c8f32f7f9bd4afb8cbf0bd42e3c02a87fce7", "ext": "py", "lang": "Python", "content": "def Vector4CrossProduct(vectorLeft, vectorRight):\n    assert isinstance(vectorRight, Vector4)\n    v = Vector4()\n    v.x = vectorLeft.y * vectorRight.z - vectorLeft.z * vectorRight.y\n    v.y = vectorLeft.z * vectorRight.x - vectorLeft.x * vectorRight.z\n    v.z = vectorLeft.x * vectorRight.y - vectorLeft.y * vectorRight.x\n    v.w = 0\n    return v", "fn_id": 11, "class_fn": false, "repo": "pome-ta/draftPythonistaScripts", "file": "simd/vector4.py", "last_update_at": "2021-08-05T04:31:02+00:00", "pred": {"ppl": 1.7335996627807617, "ppl_lower": 1.8896565437316895, "ppl/lowercase_ppl": -1.1566614260111274, "ppl/zlib": 0.003667999844802393, "Min_5.0% Prob": 7.424386215209961, "Min_10.0% Prob": 5.187971516089006, "Min_20.0% Prob": 2.7457458124212595, "Min_30.0% Prob": 1.8500547815646444, "Min_40.0% Prob": 1.3891862264259698, "Min_50.0% Prob": 1.1085320049028655, "Min_60.0% Prob": 0.921776542872925}}
{"hexsha": "6780c64eb55bdd7710a2ca7590d41b28234c58e4", "ext": "py", "lang": "Python", "content": "def polyClipboard(*args, **kwargs):\n    \"\"\"\n    The command allows the user to copy and paste certain polygonal attributes to a clipboard. These attributes are:  1)\n    Shader (shading engine) assignment.  2) Texture coordinate (UV) assignment.  3) Color value assignment. Any combination\n    of attributes can be chosen for the copy or paste operation. If the attribute has not been copied to the clipboard, then\n    naturally it cannot be pasted from the clipboard. The copy option will copy the attribute assignments from a single\n    source polygonal dag object or polygon component. If the source does not have the either UV or color attributes, then\n    nothing will be copied to the clipboard. The paste option will paste the attribute assignments to one or more polygon\n    components or polygonal dag objects. If the destination does not have either UV or color attributes, then new values\n    will be assigned as needed. Additionally, there is the option to clear the clipboard contents\n    \n    Flags:\n      - clear : cl                     (bool)          [create]\n          When used, will mean to clear the specified attribute argument(s).\n    \n      - color : clr                    (bool)          [create]\n          When used, will be to copy or paste color attributes\n    \n      - copy : cp                      (bool)          [create]\n          When used, will mean to copy the specified attribute argument(s).\n    \n      - paste : ps                     (bool)          [create]\n          When used, will mean to paste the specified attribute argument(s).\n    \n      - shader : sh                    (bool)          [create]\n          When used, will be to copy or paste shader attributes\n    \n      - uvCoordinates : uv             (bool)          [create]\n          When used, will be to copy or paste texture coordinate attributes                                  Flag can have\n          multiple arguments, passed either as a tuple or a list.\n    \n    \n    Derived from mel command `maya.cmds.polyClipboard`\n    \"\"\"\n    pass", "fn_id": 220, "class_fn": false, "repo": "FXTD-ODYSSEY/vscode-mayapy", "file": "mayaSDK/pymel/core/modeling.py", "last_update_at": "2021-12-26T06:56:16+00:00", "pred": {"ppl": 3.398317813873291, "ppl_lower": 3.6185526847839355, "ppl/lowercase_ppl": -1.0513321221125183, "ppl/zlib": 0.0018647569337838252, "Min_5.0% Prob": 8.284809713778289, "Min_10.0% Prob": 6.551106239886994, "Min_20.0% Prob": 4.843352825083631, "Min_30.0% Prob": 3.73611832462566, "Min_40.0% Prob": 2.9780232482170934, "Min_50.0% Prob": 2.4231855153785977, "Min_60.0% Prob": 2.036663326185564}}
{"hexsha": "ce10512207649c9489cbc69c74570eefc9c463ff", "ext": "py", "lang": "Python", "content": "def get_data_int():\n    X = np.array([[2, 20, 3], [4, 50, 6], [7, 80, 9], [10, 110, 12]])\n    y_int = np.array([1, 2, 3, 4])\n    return (X, y_int)", "fn_id": 0, "class_fn": false, "repo": "gradientzero/dq0-sdk", "file": "tests/test_pipeline/test_pipeline.py", "last_update_at": "2021-03-18T21:26:29+00:00", "pred": {"ppl": 2.4561524391174316, "ppl_lower": 2.483319044113159, "ppl/lowercase_ppl": -1.0122412211047347, "ppl/zlib": 0.007882421722836066, "Min_5.0% Prob": 7.143504023551941, "Min_10.0% Prob": 5.394619017839432, "Min_20.0% Prob": 3.6296528157065895, "Min_30.0% Prob": 2.7430488811089444, "Min_40.0% Prob": 2.159525739295142, "Min_50.0% Prob": 1.7715145349502563, "Min_60.0% Prob": 1.4899032600926903}}
{"hexsha": "a0e82345e90e71c8a988186287df593c48a61aad", "ext": "py", "lang": "Python", "content": "async def selectDB(userid):\n    conn = sqlite3.connect('ID_DATA.db')\n    c = conn.cursor()\n    cursor = c.execute('SELECT *  FROM UIDDATA WHERE USERID = ?', (userid,))\n    for row in cursor:\n        if row[0]:\n            if row[2]:\n                return [row[2], 3]\n            elif row[1]:\n                return [row[1], 2]\n            else:\n                return None\n        else:\n            return None", "fn_id": 1, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/GenshinUID/getDB.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 2.987388849258423, "ppl_lower": 3.133699417114258, "ppl/lowercase_ppl": -1.0436901775854703, "ppl/zlib": 0.005261537073540138, "Min_5.0% Prob": 8.012659072875977, "Min_10.0% Prob": 6.517405390739441, "Min_20.0% Prob": 4.765317673484485, "Min_30.0% Prob": 3.420799812755069, "Min_40.0% Prob": 2.6877189014030964, "Min_50.0% Prob": 2.160690521520953, "Min_60.0% Prob": 1.8239262703604795}}
{"hexsha": "de5093d7a37e19119c9ed380921063f98f98a572", "ext": "py", "lang": "Python", "content": "def solve_all(l, r):\n    res.clear()\n    nl = l.copy()\n    for i in range(len(nl)):\n        nl[i] = (frac(nl[i]), str(nl[i]))\n    solve_all_rec(nl, frac(r))\n    return res", "fn_id": 1, "class_fn": false, "repo": "mateo-cv/KryptoCards", "file": "solver_all.py", "last_update_at": "2021-11-06T02:19:58+00:00", "pred": {"ppl": 4.494923114776611, "ppl_lower": 4.494923114776611, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.012524571359724818, "Min_5.0% Prob": 9.15602191289266, "Min_10.0% Prob": 7.421436582292829, "Min_20.0% Prob": 5.59670155843099, "Min_30.0% Prob": 4.381166783246127, "Min_40.0% Prob": 3.502703678607941, "Min_50.0% Prob": 2.9504971069258614, "Min_60.0% Prob": 2.4743589689334233}}
{"hexsha": "6a6c2ee6803eaaa2206bcf41874368968655c509", "ext": "py", "lang": "Python", "content": "def tsne_plot(model):\n    labels = []\n    tokens = []\n    print('Displaying t-SNE...')\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n    plt.figure(figsize=(16, 16))\n    for i in range(len(x)):\n        plt.scatter(x[i], y[i])\n        plt.annotate(labels[i], xy=(x[i], y[i]), xytext=(5, 2), textcoords='offset points', ha='right', va='bottom')\n    plt.title('t-SNE')\n    plt.show()", "fn_id": 3, "class_fn": false, "repo": "cjbayron/artist2lyrics", "file": "common/utils.py", "last_update_at": "2021-11-08T12:49:36+00:00", "pred": {"ppl": 1.476910948753357, "ppl_lower": 1.5765939950942993, "ppl/lowercase_ppl": -1.1674923894000366, "ppl/zlib": 0.0010596541026002743, "Min_5.0% Prob": 5.336734129832341, "Min_10.0% Prob": 3.4298694019134226, "Min_20.0% Prob": 1.907418525725041, "Min_30.0% Prob": 1.2966741395648569, "Min_40.0% Prob": 0.9767286100938359, "Min_50.0% Prob": 0.7818962577799919, "Min_60.0% Prob": 0.6513637875775107}}
{"hexsha": "71850fd6a06c73964f1a9b9a4f6b911414e14aff", "ext": "py", "lang": "Python", "content": "@pytest.mark.usefixtures('aftersocialregister_app')\ndef test_aftersocialregister(aftersocialregister_config, db_session):\n    \"\"\"Register fresh user and logs him in and check response if redirect from AfterSocialRegister.\"\"\"\n    profile = {'accounts': [{'domain': 'facebook.com', 'userid': '2343'}], 'displayName': 'teddy', 'verifiedEmail': 'we@po.pl', 'preferredUsername': 'teddy', 'emails': [{'value': 'aasd@bwwqwe.pl'}], 'name': 'ted'}\n    credentials = {'oauthAccessToken': '7897048593434'}\n    provider_name = 'facebook'\n    provider_type = 'facebook'\n    request = testing.DummyRequest()\n    request.user = None\n    request.registry = aftersocialregister_config.registry\n    request.remote_addr = '127.0.0.123'\n    request.context = AuthenticationComplete(profile, credentials, provider_name, provider_type)\n    request.login_perform = MagicMock(name='login_perform')\n    request.login_perform.return_value = {'status': True}\n    view = SocialLoginViews(request)\n    out = view()\n    assert out.location == EVENT_PATH.format(AfterSocialRegister)\n    transaction.commit()\n    user = db_session.query(User).one()\n    assert user.is_active\n    assert user.provider_id('facebook') == profile['accounts'][0]['userid']", "fn_id": 24, "class_fn": false, "repo": "fizyk/pyramid_fullauth", "file": "tests/views/test_events.py", "last_update_at": "2021-11-14T15:36:07+00:00", "pred": {"ppl": 4.3026814460754395, "ppl_lower": 5.161829471588135, "ppl/lowercase_ppl": -1.124758670278796, "ppl/zlib": 0.0024320640340955296, "Min_5.0% Prob": 8.96030886967977, "Min_10.0% Prob": 7.4654409949843945, "Min_20.0% Prob": 5.4934861342112224, "Min_30.0% Prob": 4.30503533055297, "Min_40.0% Prob": 3.4766802077261816, "Min_50.0% Prob": 2.866306696303938, "Min_60.0% Prob": 2.423948009226438}}
{"hexsha": "9109af01b75d406c726ca60fbd26a94a9e80f374", "ext": "py", "lang": "Python", "content": "def MultiscaleEntropy_mse(x, scale_factor=[i for i in range(1, 21)], m=[2], r=[0.15], return_type='dict', safe_mode=False):\n    \"\"\"[Multiscale Entropy]\n\n    Arguments:\n        x {[input signal]} -- [an iterator of numbers]\n\n    Keyword Arguments:\n        scale_factor {list} -- [scale factors of coarse graining] (default: {[i for i in range(1,21)]})\n        m {list} -- [m in sample entropy] (default: {[2]})\n        r {list} -- [r in sample entropy] (default: {[0.15]})\n        return_type {str} -- [can be dict or list] (default: {'dict'})\n        safe_mode {bool} -- [if set True, type checking will be skipped] (default: {False})\n\n    Raises:\n        ValueError -- [some values too big]\n\n    Returns:\n        [dict or list as return_type indicates] -- [if dict, nest as [scale_factor][m][r] for each value of scale_factor, m, r; if list nest as [i][j][k] for lengths of scale_factor, m, r]\n    \"\"\"\n    if not safe_mode:\n        m = MultiscaleEntropy_check_type(m, int, 'm')\n        r = MultiscaleEntropy_check_type(r, float, 'r')\n        scale_factor = MultiscaleEntropy_check_type(scale_factor, int, 'scale_factor')\n    try:\n        x = np.array(x)\n    except:\n        print('x should be a sequence of numbers')\n    if max(scale_factor) > len(x):\n        raise ValueError(\"the max scale_factor is bigger than x's length\")\n    sd = np.sqrt(np.var(x))\n    ms_en = MultiscaleEntropy_init_return_type(return_type)\n    for s_f in scale_factor:\n        y = MultiscaleEntropy_coarse_grain(x, s_f)\n        if return_type == 'dict':\n            ms_en[s_f] = MultiscaleEntropy_sample_entropy(y, m, r, sd, 'dict', True)\n        else:\n            ms_en.append(MultiscaleEntropy_sample_entropy(y, m, r, sd, 'list', True))\n    if return_type == 'list':\n        ms_en = [i[0] for i in ms_en]\n        ms_en = [i[0] for i in ms_en]\n    return ms_en", "fn_id": 18, "class_fn": false, "repo": "LRydin/NeuroKit", "file": "tests/tests_complexity.py", "last_update_at": "2021-06-10T03:27:15+00:00", "pred": {"ppl": 2.3493027687072754, "ppl_lower": 2.501490831375122, "ppl/lowercase_ppl": -1.0734889715075, "ppl/zlib": 0.0012166931481004681, "Min_5.0% Prob": 7.406739830970764, "Min_10.0% Prob": 5.463472010539128, "Min_20.0% Prob": 3.6805705923300525, "Min_30.0% Prob": 2.7056584582878993, "Min_40.0% Prob": 2.102251404409225, "Min_50.0% Prob": 1.7024935477284284, "Min_60.0% Prob": 1.4234478562688215}}
{"hexsha": "d2664e1063dfac0585b27173768ffad2c031b7e9", "ext": "py", "lang": "Python", "content": "def _InceptionV3_blockH(x):\n    block1 = conv2d_bn(x, 320, (1, 1))\n    block2 = conv2d_bn(x, 384, (1, 1))\n    block2_1 = conv2d_bn(block2, 384, (1, 3))\n    block2_2 = conv2d_bn(block2, 384, (3, 1))\n    block2 = Concatenate()([block2_1, block2_2])\n    block3 = conv2d_bn(x, 448, (1, 1))\n    block3_1 = conv2d_bn(block3, 384, (3, 3))\n    block3_2 = conv2d_bn(block3, 384, (1, 3))\n    block3_3 = conv2d_bn(block3, 384, (3, 1))\n    block3 = Concatenate()([block3_1, block3_2, block3_3])\n    block4 = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    block4 = conv2d_bn(block4, 192, (1, 1))\n    x = Concatenate()([block1, block2, block3, block4])\n    return x", "fn_id": 8, "class_fn": false, "repo": "Hiroaki-Ozaki/modelib-classification", "file": "keras/models/InceptionV3.py", "last_update_at": "2021-04-14T08:56:01+00:00", "pred": {"ppl": 1.3272343873977661, "ppl_lower": 1.4015233516693115, "ppl/lowercase_ppl": -1.192380396329339, "ppl/zlib": 0.0012046696565597582, "Min_5.0% Prob": 4.46193308690015, "Min_10.0% Prob": 2.668431801831021, "Min_20.0% Prob": 1.3974092698831488, "Min_30.0% Prob": 0.9464229116288637, "Min_40.0% Prob": 0.7085277110378704, "Min_50.0% Prob": 0.5657884035390032, "Min_60.0% Prob": 0.47305823150535165}}
{"hexsha": "be392b1159ec0d0cbf136ec1807d49c872f36a16", "ext": "py", "lang": "Python", "content": "def plot_oi(ticker: str, expiry: str, min_sp: float, max_sp: float, calls_only: bool, puts_only: bool, export: str):\n    \"\"\"Plot open interest\n\n    Parameters\n    ----------\n    ticker: str\n        Ticker\n    expiry: str\n        Expiry date for options\n    min_sp: float\n        Min strike to consider\n    max_sp: float\n        Max strike to consider\n    calls_only: bool\n        Show calls only\n    puts_only: bool\n        Show puts only\n    export: str\n        Format to export file\n    \"\"\"\n    options = tradier_model.get_option_chains(ticker, expiry)\n    export_data(export, os.path.dirname(os.path.abspath(__file__)), 'oi_tr', options)\n    current_price = tradier_model.last_price(ticker)\n    if min_sp == -1:\n        min_strike = 0.75 * current_price\n    else:\n        min_strike = min_sp\n    if max_sp == -1:\n        max_strike = 1.25 * current_price\n    else:\n        max_strike = max_sp\n    if calls_only and puts_only:\n        print('Both flags selected, please select one', '\\n')\n        return\n    calls = options[options.option_type == 'call'][['strike', 'open_interest']]\n    puts = options[options.option_type == 'put'][['strike', 'open_interest']]\n    call_oi = calls.set_index('strike')['open_interest'] / 1000\n    put_oi = puts.set_index('strike')['open_interest'] / 1000\n    df_opt = pd.merge(call_oi, put_oi, left_index=True, right_index=True)\n    df_opt = df_opt.rename(columns={'open_interest_x': 'OI_call', 'open_interest_y': 'OI_put'})\n    max_pain = op_helpers.calculate_max_pain(df_opt)\n    plt.style.use('classic')\n    fig, ax = plt.subplots(figsize=plot_autoscale(), dpi=cfp.PLOT_DPI)\n    if not calls_only:\n        put_oi.plot(x='strike', y='open_interest', label='Puts', ax=ax, marker='o', ls='-', c='r')\n    if not puts_only:\n        call_oi.plot(x='strike', y='open_interest', label='Calls', ax=ax, marker='o', ls='-', c='g')\n        ax.axvline(current_price, lw=2, c='k', ls='--', label='Current Price', alpha=0.7)\n        ax.axvline(max_pain, lw=3, c='k', label=f'Max Pain: {max_pain}', alpha=0.7)\n        ax.grid('on')\n        ax.set_xlabel('Strike Price')\n        ax.set_ylabel('Open Interest (1k) ')\n        ax.set_xlim(min_strike, max_strike)\n        if gtff.USE_ION:\n            plt.ion()\n        ax.set_title(f'Open Interest for {ticker.upper()} expiring {expiry}')\n        plt.legend(loc=0)\n        fig.tight_layout(pad=1)\n    plt.show()\n    plt.style.use('default')\n    print('')", "fn_id": 4, "class_fn": false, "repo": "Aerex/GamestonkTerminal", "file": "gamestonk_terminal/stocks/options/tradier_view.py", "last_update_at": "2021-03-11T17:42:35+00:00", "pred": {"ppl": 1.6844687461853027, "ppl_lower": 1.7955873012542725, "ppl/lowercase_ppl": -1.1225081938008732, "ppl/zlib": 0.0005600969172167551, "Min_5.0% Prob": 5.5671467347578565, "Min_10.0% Prob": 3.942073922478751, "Min_20.0% Prob": 2.4080866558591745, "Min_30.0% Prob": 1.7025284640851075, "Min_40.0% Prob": 1.299191119815301, "Min_50.0% Prob": 1.0422528157588593, "Min_60.0% Prob": 0.8689792572765621}}
{"hexsha": "467014e3a54821c2e5ac7b33d2f939b0052d1b15", "ext": "py", "lang": "Python", "content": "def run_task(hosts, command, timeout=None):\n    \"\"\"Create a task to run a command on each host in parallel.\n\n    Args:\n        hosts (list): list of hosts\n        command (str): the command to run in parallel\n        timeout (int, optional): command timeout in seconds. Defaults to None.\n\n    Returns:\n        Task: a ClusterShell.Task.Task object for the executed command\n\n    \"\"\"\n    task = task_self()\n    task.set_info('ssh_options', '-oForwardAgent=yes')\n    kwargs = {'command': command, 'nodes': NodeSet.fromlist(hosts)}\n    if timeout is not None:\n        kwargs['timeout'] = timeout\n    task.run(**kwargs)\n    return task", "fn_id": 3, "class_fn": false, "repo": "kmajzero/daos", "file": "src/tests/ftest/util/general_utils.py", "last_update_at": "2021-04-13T16:04:21+00:00", "pred": {"ppl": 3.0165581703186035, "ppl_lower": 4.279200553894043, "ppl/lowercase_ppl": -1.3166782690448815, "ppl/zlib": 0.0032569808340905722, "Min_5.0% Prob": 8.21775197982788, "Min_10.0% Prob": 6.366824795218075, "Min_20.0% Prob": 4.39838136945452, "Min_30.0% Prob": 3.3276062776457587, "Min_40.0% Prob": 2.6437169082567724, "Min_50.0% Prob": 2.1632818335227753, "Min_60.0% Prob": 1.8257433447603868}}
{"hexsha": "dac2bf672e1bd9ca92568b7538b014b4a37dd949", "ext": "py", "lang": "Python", "content": "def find_euler_random(n):\n    while True:\n        el = np.array([random.randint(0, 4) * 2 for x in range(n + 1)])\n        try:\n            g = Graph.from_sequence(el)\n            choose_biggest_comp(g)\n            if g.adjacency.shape[0] != n:\n                continue\n            print(g.adjacency)\n            for i in range(el.shape[0] * 3):\n                g.randomize_edges()\n            print(g.adjacency)\n            graph = nx.from_numpy_matrix(g.adjacency)\n            euler_list = []\n            euler(g.adjacency.tolist(), 0, euler_list)\n            print(euler_list)\n            plt.subplot(111)\n            nx.draw(graph, with_labels=True, font_weight='bold')\n            plt.show()\n            break\n        except NotGraphicSequenceException:\n            continue", "fn_id": 3, "class_fn": false, "repo": "timcki/graficiarze", "file": "02_project/main.py", "last_update_at": "2021-05-14T11:35:04+00:00", "pred": {"ppl": 3.148585319519043, "ppl_lower": 3.5462536811828613, "ppl/lowercase_ppl": -1.1036995173527058, "ppl/zlib": 0.003286398988668011, "Min_5.0% Prob": 8.033518314361572, "Min_10.0% Prob": 6.3700754356384275, "Min_20.0% Prob": 4.608603882789612, "Min_30.0% Prob": 3.4845047624905905, "Min_40.0% Prob": 2.7651021778583527, "Min_50.0% Prob": 2.268355680346489, "Min_60.0% Prob": 1.9088595341642698}}
{"hexsha": "b27331e2a40b51e2950c979f9bac602c12eef9c1", "ext": "py", "lang": "Python", "content": "@app.route('/')\n@app.route('/index')\ndef index():\n    app.logger.debug('Entering index')\n    flask.session['user_id'] = 'creator'\n    flask.session['finished'] = check_completed()\n    flask.session['to_finish'] = PEOPLE_TO_INVITE\n    events = []\n    for record in collection.find({'user_id': 'creator'}):\n        events.append(record)\n    if len(events) > 0:\n        return render_template('waiting.html')\n    if 'begin_date' not in flask.session:\n        init_session_values()\n    return render_template('index.html')", "fn_id": 0, "class_fn": false, "repo": "Dream7hief/MeetMe", "file": "flask_main.py", "last_update_at": "2021-02-08T20:18:11+00:00", "pred": {"ppl": 3.0799648761749268, "ppl_lower": 3.287637233734131, "ppl/lowercase_ppl": -1.0580050603274425, "ppl/zlib": 0.003989071606670743, "Min_5.0% Prob": 9.07895976305008, "Min_10.0% Prob": 7.206991167629466, "Min_20.0% Prob": 4.773495078086853, "Min_30.0% Prob": 3.511737201728073, "Min_40.0% Prob": 2.7349289537352672, "Min_50.0% Prob": 2.2230054754544706, "Min_60.0% Prob": 1.8654009534739981}}
{"hexsha": "11ad143814ad6766582b44de612f20dfd8d0423f", "ext": "py", "lang": "Python", "content": "def test_x86_direct():\n    insn = ms.ISA_X86.parse_instruction('mov eax, dword ptr [0x8000]')\n    assert insn.num_operands == 2\n    op = insn.operands[1]\n    assert op.is_direct\n    assert op.offset == 32768\n    assert op.base_reg is None\n    assert op.index_reg is None\n    assert op.scale == 1\n    assert str(op) == '0x8000'\n    assert repr(op) == '<MemoryOperand(offset=0x8000)>'", "fn_id": 11, "class_fn": false, "repo": "giltom/megastone", "file": "tests/test_disasm.py", "last_update_at": "2021-04-12T15:12:10+00:00", "pred": {"ppl": 2.7676846981048584, "ppl_lower": 3.139575958251953, "ppl/lowercase_ppl": -1.1238460183362453, "ppl/zlib": 0.004627323280104674, "Min_5.0% Prob": 8.366445541381836, "Min_10.0% Prob": 6.11612499554952, "Min_20.0% Prob": 4.188805553220933, "Min_30.0% Prob": 3.1550322999345495, "Min_40.0% Prob": 2.460010620336684, "Min_50.0% Prob": 2.003537472667573, "Min_60.0% Prob": 1.7007861051391413}}
{"hexsha": "12b9c9e1e1cd70be553e0f6bc5aeab33f9e284de", "ext": "py", "lang": "Python", "content": "def build_data_str(records):\n    records_data_str = []\n    for record in records:\n        records_data_str.append(tup_to_str(record))\n    return records_data_str", "fn_id": 0, "class_fn": false, "repo": "pangeon/Taskello", "file": "utils/str_utils.py", "last_update_at": "2021-06-22T21:18:37+00:00", "pred": {"ppl": 3.492985486984253, "ppl_lower": 3.492985486984253, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01389729789922627, "Min_5.0% Prob": 9.175910472869873, "Min_10.0% Prob": 7.553232192993164, "Min_20.0% Prob": 5.4901360988616945, "Min_30.0% Prob": 4.027930665016174, "Min_40.0% Prob": 3.048033078511556, "Min_50.0% Prob": 2.5066752708875217, "Min_60.0% Prob": 2.1277242956622953}}
{"hexsha": "e7dae2609f1a6ef8908cb001bd4912ee60a48a48", "ext": "py", "lang": "Python", "content": "def construct_tabs(selected_pipeline, window, prefs, include_eeg):\n    \"\"\"Constructs as set of tabs based on specifications and the\n    selected pipeline.\n\n    Parameters\n    ----------\n    selected_pipeline : str\n        ID of the selected pipeline\n    window : instance of main window\n        The main window.\n    prefs : Instance of PreferencesHandler\n        Stores e.g. active plugins.\n    include_eeg : bool\n        Whether to add EEG-related actions\n\n    Returns\n    -------\n    list of QDialog\n        Contains the constructed tabs relevant to the pipeline\n    \"\"\"\n    active_plugins = prefs.active_plugins\n    action_specs = find_all_action_specs()\n    datatype_specs = find_all_datatype_specs()\n    package_specs = find_all_package_specs()\n    tabs = []\n    pipelines = []\n    for source, package_spec in package_specs.items():\n        if source not in active_plugins and source != 'meggie':\n            continue\n        if 'tabs' in package_spec:\n            tabs.extend(package_spec['tabs'])\n        if 'pipelines' in package_spec:\n            pipelines.extend(package_spec['pipelines'])\n    for tab in tabs:\n        if 'id' not in tab:\n            raise Exception('Every tab specification must have id.')\n        if 'name' not in tab:\n            tab['name'] = tab['id']\n        if 'inputs' not in tab:\n            tab['inputs'] = []\n        if 'outputs' not in tab:\n            tab['outputs'] = []\n        if 'input_actions' not in tab:\n            tab['input_actions'] = []\n        if 'output_actions' not in tab:\n            tab['output_actions'] = []\n        if 'info' not in tab:\n            tab['info'] = []\n    for pipeline in pipelines:\n        if 'id' not in pipeline:\n            raise Exception('Every pipeline must have id.')\n        if 'name' not in pipeline:\n            pipeline['name'] = pipeline['id']\n    found = False\n    pipeline_spec = None\n    for pipeline in pipelines:\n        if pipeline['id'] == selected_pipeline:\n            found = True\n            pipeline_spec = pipeline\n            break\n    if not found:\n        pipeline_spec = {'id': 'classic', 'name': 'Include everything'}\n    combined_tabs = []\n    for tab_spec in tabs:\n        if pipeline_spec.get('include_tabs'):\n            if tab_spec['id'] not in pipeline_spec['include_tabs']:\n                continue\n        if tab_spec['id'] not in [tab['id'] for tab in combined_tabs]:\n            new_tab = {}\n            new_tab['id'] = tab_spec['id']\n            new_tab['name'] = tab_spec['name']\n            new_tab['inputs'] = []\n            new_tab['outputs'] = []\n            new_tab['input_actions'] = []\n            new_tab['output_actions'] = []\n            new_tab['info'] = []\n            idx = len(combined_tabs)\n            combined_tabs.append(new_tab)\n        else:\n            idx = [tab['id'] for tab in combined_tabs].index(tab_spec['id'])\n        for input_spec in tab_spec['inputs']:\n            if input_spec not in combined_tabs[idx]['inputs']:\n                combined_tabs[idx]['inputs'].append(input_spec)\n        for output_spec in tab_spec['outputs']:\n            if output_spec not in combined_tabs[idx]['outputs']:\n                combined_tabs[idx]['outputs'].append(output_spec)\n        for input_spec in tab_spec['input_actions']:\n            action_spec = action_specs.get(input_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + input_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if input_spec not in combined_tabs[idx]['input_actions']:\n                combined_tabs[idx]['input_actions'].append(input_spec)\n        for output_spec in tab_spec['output_actions']:\n            action_spec = action_specs.get(output_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + output_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if output_spec not in combined_tabs[idx]['output_actions']:\n                combined_tabs[idx]['output_actions'].append(output_spec)\n        for info_spec in tab_spec['info']:\n            action_spec = action_specs.get(info_spec)\n            if not action_spec:\n                raise Exception('Cannot read info item ' + info_spec + '.')\n            if info_spec not in combined_tabs[idx]['info']:\n                combined_tabs[idx]['info'].append(info_spec)\n    tabs = []\n    for tab_spec in combined_tabs:\n        tabs.append(construct_tab(tab_spec, action_specs, datatype_specs, window))\n    return tabs", "fn_id": 6, "class_fn": false, "repo": "Teekuningas/meggie", "file": "meggie/mainwindow/dynamic.py", "last_update_at": "2021-01-15T21:21:51+00:00", "pred": {"ppl": 1.6742786169052124, "ppl_lower": 1.7314587831497192, "ppl/lowercase_ppl": -1.0651591607922133, "ppl/zlib": 0.00047544501479223304, "Min_5.0% Prob": 6.127974674105644, "Min_10.0% Prob": 4.222179145552218, "Min_20.0% Prob": 2.4679962785095557, "Min_30.0% Prob": 1.7023370858717275, "Min_40.0% Prob": 1.2851267835987796, "Min_50.0% Prob": 1.030743310005314, "Min_60.0% Prob": 0.8587412738519685}}
{"hexsha": "8ce8096f58ca81419a2edfa556d2c57b16fdd66c", "ext": "py", "lang": "Python", "content": "def deepcopy_and_sign(rlp_signable, privatekey):\n    msg = deepcopy(rlp_signable)\n    msg.sign(privatekey)\n    return msg", "fn_id": 0, "class_fn": false, "repo": "luehrsFred/raidex", "file": "raidex/tests/unit/commitment_service/old_test_swap_commitment.py", "last_update_at": "2021-06-22T05:01:56+00:00", "pred": {"ppl": 6.125735759735107, "ppl_lower": 6.125735759735107, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.021837335822347724, "Min_5.0% Prob": 9.586313247680664, "Min_10.0% Prob": 8.925412058830261, "Min_20.0% Prob": 7.112103044986725, "Min_30.0% Prob": 5.695152252912521, "Min_40.0% Prob": 4.372454541571, "Min_50.0% Prob": 3.6419627297492254, "Min_60.0% Prob": 3.1004333412647247}}
{"hexsha": "338af77e36625c6e736374eb318b1d3d29015cd3", "ext": "py", "lang": "Python", "content": "def find_replacement_chord(chord):\n    t = chord.transpose(-chord.bass)\n    if t.pitches == (0, 4, 6, 10):\n        return Chord(bass=0, root=0, pitches=(0, 4, 10)).transpose(chord.bass)\n    if t.pitches == (0, 3, 8, 10):\n        return Chord(bass=0, root=8, pitches=(0, 3, 8)).transpose(chord.bass)\n    if t.pitches == (0, 4, 6, 11):\n        return Chord(bass=0, root=0, pitches=(0, 4, 6, 7, 11)).transpose(chord.bass)\n    if t.pitches == (0, 2, 4, 6, 10):\n        return Chord(bass=0, root=10, pitches=(0, 2, 6, 10)).transpose(chord.bass)\n    raise ValueError('no such chord: ' + str(chord))", "fn_id": 7, "class_fn": false, "repo": "andreasjansson/music-inpainting-bert", "file": "data.py", "last_update_at": "2021-11-25T22:59:11+00:00", "pred": {"ppl": 1.9616808891296387, "ppl_lower": 2.0573267936706543, "ppl/lowercase_ppl": -1.0706524853703554, "ppl/zlib": 0.003403038900057457, "Min_5.0% Prob": 5.646737779889788, "Min_10.0% Prob": 4.461884367054906, "Min_20.0% Prob": 2.977139875806611, "Min_30.0% Prob": 2.1742894221311326, "Min_40.0% Prob": 1.670309741949213, "Min_50.0% Prob": 1.3441872682807774, "Min_60.0% Prob": 1.1219137763877496}}
{"hexsha": "969279abcd7947481d7b6dda02b897ac7a615367", "ext": "py", "lang": "Python", "content": "def main() -> typing.NoReturn:\n    h, w, d = map(int, input().split())\n    I = np.array(sys.stdin.read().split(), dtype=np.int64)\n    a = I[:h * w].reshape(h, w) - 1\n    lr = I[h * w + 1:].reshape(-1, 2) - 1\n    solve(a, d, lr)", "fn_id": 1, "class_fn": false, "repo": "kagemeka/competitive-programming", "file": "src/atcoder/abc089/d/sol_0.py", "last_update_at": "2021-07-11T03:20:10+00:00", "pred": {"ppl": 2.354736089706421, "ppl_lower": 2.6550848484039307, "ppl/lowercase_ppl": -1.1401727438099567, "ppl/zlib": 0.0052541635421462125, "Min_5.0% Prob": 6.8182398796081545, "Min_10.0% Prob": 5.448759865760803, "Min_20.0% Prob": 3.879807949066162, "Min_30.0% Prob": 2.7632789565250278, "Min_40.0% Prob": 2.1444034315645695, "Min_50.0% Prob": 1.714534347279454, "Min_60.0% Prob": 1.427087718853727}}
{"hexsha": "f25d845a5d072ddbe9a4ba42086800a674959571", "ext": "py", "lang": "Python", "content": "def func_18fc8c7e787b450bb9ba27326af7b455(x):\n    x = sorted(x, reverse=True)\n    rmax = 0.0\n    y = [x[i] for i in xrange(len(x))]\n    return y", "fn_id": 134, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y13R5P1/gepa/generated_py_84001afe6c4e45fca49f21e859b1c46f.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 8.115839958190918, "ppl_lower": 9.361355781555176, "ppl/lowercase_ppl": -1.0681876105141859, "ppl/zlib": 0.01648675356277797, "Min_5.0% Prob": 8.879144191741943, "Min_10.0% Prob": 7.15483113697597, "Min_20.0% Prob": 5.5180726369222, "Min_30.0% Prob": 4.584353778673255, "Min_40.0% Prob": 4.115300709201444, "Min_50.0% Prob": 3.7711276702391796, "Min_60.0% Prob": 3.44204320596612}}
{"hexsha": "35f904677ad8fd1f812f7b5f6172973cf62eaed0", "ext": "py", "lang": "Python", "content": "def mixture_fit(x, K=3, x_w=None, n_itr=100, verbose=False, random_state=0, f_write=None, output_folder=None, suffix=None, fold_number=0):\n    \"\"\"Fit a slope+bump mixture using EM algorithm.\n\n    Args:\n        x ((n,d) ndarray): The covaraites.\n        K (int): The number of bump components.\n        x_w ((n,) ndarray): The weights for each sample.\n        n_itr (int): The maximum number of iterations for the EM algorithm\n        verbose (bool): Indicate if output the computation details.\n        random_state (int): The random seed.\n        f_write (file handler (write mode)): The output file.\n        output_folder (string): The output directory.\n        suffix (string): The suffix of the output file.\n        fold_number (int(0,1)): The fold number.\n\n    Returns:\n        a ((d,) ndarray): slope parameter.\n        mu,sigma ((k,d) ndarray): bump parameter.\n        w ((n,) ndarray): proportion of each component. \n    \"\"\"\n    np.random.seed(random_state)\n    if len(x.shape) == 1:\n        x = x.reshape([-1, 1])\n    n_samp, d = x.shape\n    if x_w is None:\n        x_w = np.ones([n_samp], dtype=float)\n    GMM = GaussianMixture(n_components=K, covariance_type='diag').fit(x)\n    w_old = np.zeros([K + 1])\n    w = 0.5 * np.ones([K + 1]) / K\n    w[0] = 0.5\n    a = ML_slope(x, x_w)\n    mu, sigma = (GMM.means_, GMM.covariances_ ** 0.5)\n    w_samp = np.zeros([K + 1, n_samp], dtype=float)\n    i = 0\n    if verbose:\n        if f_write is not None:\n            f_write.write('## mixture_fit: initialization parameters\\n')\n            f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n            for k in range(K):\n                f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n                f_write.write('         mu=%s\\n' % mu[k])\n                f_write.write('      sigma=%s\\n' % sigma[k])\n            f_write.write('\\n')\n    while np.linalg.norm(w - w_old, 1) > 0.005 and i < n_itr:\n        w_old = w\n        w_samp[0, :] = w[0] * f_slope(x, a)\n        for k in range(K):\n            w_samp[k + 1, :] = w[k + 1] * f_bump(x, mu[k], sigma[k])\n        w_samp = w_samp / np.sum(w_samp, axis=0) * x_w\n        w = np.mean(w_samp, axis=1)\n        a = ML_slope(x, w_samp[0, :])\n        for k in range(K):\n            if w[k + 1] > 0.0001:\n                mu[k], sigma[k] = ML_bump(x, w_samp[k + 1, :])\n        sigma = sigma.clip(min=0.0001)\n        w[w < 0.001] = 0\n        w /= w.sum()\n        i += 1\n    if i >= n_itr and verbose:\n        print('Warning: the model does not converge, w_dif=%0.4f' % np.linalg.norm(w - w_old, 1))\n        if f_write is not None:\n            f_write.write('Warning: the model does not converge, w_dif=%0.4f\\n' % np.linalg.norm(w - w_old, 1))\n    if verbose and f_write is not None:\n        f_write.write('## mixture_fit: learned parameters\\n')\n        f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n        for k in range(K):\n            f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n            f_write.write('         mu=%s\\n' % mu[k])\n            f_write.write('      sigma=%s\\n' % sigma[k])\n        f_write.write('\\n')\n    if output_folder is not None:\n        bins_ = np.linspace(0, 1, 101)\n        x_grid = bins_.reshape([-1, 1])\n        if d == 1:\n            plt.figure(figsize=[8, 5])\n            plt.hist(x, bins=bins_, weights=x_w / np.sum(x_w) * 100)\n            temp_p = f_all(x_grid, a, mu, sigma, w)\n            plt.plot(bins_, temp_p)\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        else:\n            plt.figure(figsize=[8, 12])\n            n_figure = min(d, 5)\n            for i_dim in range(n_figure):\n                plt.subplot(str(n_figure) + '1' + str(i_dim + 1))\n                plt.hist(x[:, i_dim], bins=bins_, weights=x_w / np.sum(x_w) * 100)\n                temp_p = f_all(x_grid, a[[i_dim]], mu[:, [i_dim]], sigma[:, [i_dim]], w)\n                plt.plot(bins_, temp_p)\n                plt.title('Dimension %d' % (i_dim + 1))\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        plt.close('all')\n    return (a, mu, sigma, w)", "fn_id": 14, "class_fn": false, "repo": "martinjzhang/adafdr", "file": "adafdr/method.py", "last_update_at": "2021-05-21T09:23:58+00:00", "pred": {"ppl": 1.8435425758361816, "ppl_lower": 1.8788421154022217, "ppl/lowercase_ppl": -1.031007025566277, "ppl/zlib": 0.00045411212586181186, "Min_5.0% Prob": 6.185898490068389, "Min_10.0% Prob": 4.400353596427224, "Min_20.0% Prob": 2.75191486025865, "Min_30.0% Prob": 1.9703052287260372, "Min_40.0% Prob": 1.5113491663917493, "Min_50.0% Prob": 1.2179747979057691, "Min_60.0% Prob": 1.0187154792836322}}
{"hexsha": "184edbc2fe82843b354712c8ba7f81417e3fb3d2", "ext": "py", "lang": "Python", "content": "def main(arguments):\n    cap = cv2.VideoCapture(arguments.video)\n    model: tf.keras.Model = tf.keras.models.load_model(arguments.weights_path)\n    model.compile(optimizer='adam', loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n    classes = get_classes(os.path.join(arguments.data_path, 'training_set'))\n    success, img = cap.read()\n    while success:\n        img_pp = preprocess_image(img, INPUT_SHAPE)\n        x = model.predict(np.expand_dims(img_pp, 0), batch_size=1)\n        img_out = write_class_on_img(img_pp, classes[int(np.argmax(np.array(x)))])\n        cv2.imshow('EfficientNet Prediction', img_out)\n        cv2.waitKey(10)\n        success, img = cap.read()", "fn_id": 0, "class_fn": false, "repo": "vincenzosantopietro/Action-Recognition-EfficientNet-TensorFlow", "file": "demo.py", "last_update_at": "2021-08-24T06:48:24+00:00", "pred": {"ppl": 2.5241405963897705, "ppl_lower": 3.075460433959961, "ppl/lowercase_ppl": -1.213364121084874, "ppl/zlib": 0.0022918332844727757, "Min_5.0% Prob": 7.451419234275818, "Min_10.0% Prob": 5.751754846572876, "Min_20.0% Prob": 3.9849228072166443, "Min_30.0% Prob": 2.9287113960584006, "Min_40.0% Prob": 2.267923340348914, "Min_50.0% Prob": 1.845941615542249, "Min_60.0% Prob": 1.5480991977433496}}
{"hexsha": "3836b014a35e2f166dd6e956235064be019753de", "ext": "py", "lang": "Python", "content": "def createSampleFile(sampleFilePath):\n    if not os.path.exists(sampleFilePath):\n        _dir = os.path.dirname(sampleFilePath)\n        if not os.path.exists(_dir):\n            os.makedirs(_dir, mode=493)\n        import uuid\n        with open(sampleFilePath, 'w') as f:\n            f.write(str(uuid.uuid1()) + '\\n')\n            f.write(str(uuid.uuid4()) + '\\n')\n    return sampleFilePath", "fn_id": 0, "class_fn": false, "repo": "Fanduzi/huaweicloud-sdk-python-obs", "file": "examples/download_sample.py", "last_update_at": "2021-12-13T07:21:48+00:00", "pred": {"ppl": 2.137131929397583, "ppl_lower": 2.2059850692749023, "ppl/lowercase_ppl": -1.041752357836777, "ppl/zlib": 0.004290761074735317, "Min_5.0% Prob": 7.506428162256877, "Min_10.0% Prob": 5.515100260575612, "Min_20.0% Prob": 3.5139718055725098, "Min_30.0% Prob": 2.49121905661918, "Min_40.0% Prob": 1.8901620915532111, "Min_50.0% Prob": 1.5112250151615294, "Min_60.0% Prob": 1.2732113886872927}}
{"hexsha": "8ee4e5b90ef2f57ff31c13abfc6ea37b6aa9f151", "ext": "py", "lang": "Python", "content": "def cosine_similarity(A, B):\n    t1 = vector_multiply(A, B)\n    t2 = sqrt(vector_multiply(A, A))\n    t3 = sqrt(vector_multiply(B, B))\n    if t2 > 0 and t3 > 0:\n        return t1 / (t2 * t3)\n    else:\n        return 0", "fn_id": 0, "class_fn": false, "repo": "Pengeace/LncRNA-Disease-link", "file": "sample/parallel_prediction_CV.py", "last_update_at": "2021-12-12T13:15:20+00:00", "pred": {"ppl": 1.9940553903579712, "ppl_lower": 1.9639685153961182, "ppl/lowercase_ppl": -0.9779717159300858, "ppl/zlib": 0.005434412989514645, "Min_5.0% Prob": 8.579325199127197, "Min_10.0% Prob": 5.826837248272366, "Min_20.0% Prob": 3.2560944792471433, "Min_30.0% Prob": 2.2787127776869704, "Min_40.0% Prob": 1.7157526355432837, "Min_50.0% Prob": 1.371117432989801, "Min_60.0% Prob": 1.1592778865117253}}
{"hexsha": "0a460dfb309ddfb8343e04a6b02b1cc8858e4c42", "ext": "py", "lang": "Python", "content": "def import_no_virt_driver_import_deps(physical_line, filename):\n    \"\"\"Check virt drivers' modules aren't imported by other drivers\n\n    Modules under each virt driver's directory are\n    considered private to that virt driver. Other drivers\n    in Nova must not access those drivers. Any code that\n    is to be shared should be refactored into a common\n    module\n\n    N311\n    \"\"\"\n    thisdriver = _get_virt_name(virt_file_re, filename)\n    thatdriver = _get_virt_name(virt_import_re, physical_line)\n    if thatdriver is not None and thisdriver is not None and (thisdriver != thatdriver):\n        return (0, 'N311: importing code from other virt drivers forbidden')", "fn_id": 4, "class_fn": false, "repo": "KevinWang2015/nova", "file": "nova/hacking/checks.py", "last_update_at": "2021-05-12T07:52:44+00:00", "pred": {"ppl": 4.211459159851074, "ppl_lower": 5.001495838165283, "ppl/lowercase_ppl": -1.119576266525613, "ppl/zlib": 0.004383564577540827, "Min_5.0% Prob": 8.26204702589247, "Min_10.0% Prob": 6.623609966701931, "Min_20.0% Prob": 5.127812501546499, "Min_30.0% Prob": 4.146551747755571, "Min_40.0% Prob": 3.3761277810947314, "Min_50.0% Prob": 2.821262288676656, "Min_60.0% Prob": 2.3808837520915107}}
{"hexsha": "8a91b3f07767ea74f9a6d8cb283d9cb8dd32dbfa", "ext": "py", "lang": "Python", "content": "def task_factory(name, func=None, vars=None, color='GREEN', ext_in=[], ext_out=[], before=[], after=[], shell=False, scan=None):\n    params = {'vars': vars or [], 'color': color, 'name': name, 'ext_in': Utils.to_list(ext_in), 'ext_out': Utils.to_list(ext_out), 'before': Utils.to_list(before), 'after': Utils.to_list(after), 'shell': shell, 'scan': scan}\n    if isinstance(func, str):\n        params['run_str'] = func\n    else:\n        params['run'] = func\n    cls = type(Task)(name, (Task,), params)\n    global classes\n    classes[name] = cls\n    return cls", "fn_id": 8, "class_fn": false, "repo": "He-Ze/Distributed-System-SYSU", "file": "\u4f5c\u4e1a/\u4f5c\u4e1a5/nack-oriented-reliable-multicast-master/norm-1.5r6/.waf3-1.8.11-930623f783bdf2f01355c2002e2b4462/waflib/Task.py", "last_update_at": "2021-09-17T07:35:05+00:00", "pred": {"ppl": 2.8367481231689453, "ppl_lower": 3.0869784355163574, "ppl/lowercase_ppl": -1.081075828236575, "ppl/zlib": 0.003697370103105, "Min_5.0% Prob": 9.256314224667019, "Min_10.0% Prob": 7.407107704564145, "Min_20.0% Prob": 4.77303857375414, "Min_30.0% Prob": 3.353683068085525, "Min_40.0% Prob": 2.568009352193603, "Min_50.0% Prob": 2.0712972252507402, "Min_60.0% Prob": 1.745355162753771}}
{"hexsha": "1407f6d79ec90ec0ceecb5413d805601158c4cae", "ext": "py", "lang": "Python", "content": "def get_bot() -> Bot:\n    for bot in DRIVER.bots.values():\n        return bot\n    return None", "fn_id": 0, "class_fn": false, "repo": "7sDream/nonebot_plugin_bam", "file": "nonebot_plugin_bam/common.py", "last_update_at": "2021-12-28T07:13:51+00:00", "pred": {"ppl": 6.606407642364502, "ppl_lower": 9.573426246643066, "ppl/lowercase_ppl": -1.1964741856405523, "ppl/zlib": 0.023899240923560477, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 8.273275375366211, "Min_20.0% Prob": 6.732465426127116, "Min_30.0% Prob": 5.297354181607564, "Min_40.0% Prob": 4.346938411394755, "Min_50.0% Prob": 3.6281887809435527, "Min_60.0% Prob": 3.102307634221183}}
{"hexsha": "8b6e4daf34e200f38605973d93690899eefdcfed", "ext": "py", "lang": "Python", "content": "def check_build_is_legit(build):\n    build_string = build.lower()\n    build_number = build_string.replace('build', '')\n    if build_number in BUILD_MAP.keys():\n        return True\n    return False", "fn_id": 1, "class_fn": false, "repo": "EBISPOT/gwas-sumstats-validator", "file": "validate/validator.py", "last_update_at": "2021-04-14T17:38:42+00:00", "pred": {"ppl": 4.3722686767578125, "ppl_lower": 5.256906986236572, "ppl/lowercase_ppl": -1.124898699483208, "ppl/zlib": 0.010928014980713309, "Min_5.0% Prob": 8.571186065673828, "Min_10.0% Prob": 7.029598712921143, "Min_20.0% Prob": 5.3109377947720615, "Min_30.0% Prob": 4.163378904847538, "Min_40.0% Prob": 3.3749508961387304, "Min_50.0% Prob": 2.829361656616474, "Min_60.0% Prob": 2.4115923540932793}}
{"hexsha": "eb4e6315d4870bd2d06b1d9423ac6fcf2195cdeb", "ext": "py", "lang": "Python", "content": "def SOIC(A, B, L, T, W, num_pins, pitch=1.27, profile=ipc.LandPatternSize.Nominal):\n    f = fp.Footprint(name='{0}-SOIC'.format(num_pins), description='{0}-pin SOIC'.format(num_pins))\n    f.from_ipc(lib.SOIC(profile, A, B, L, T, W, num_pins, pitch))\n    return f", "fn_id": 2, "class_fn": false, "repo": "TheWylieStCoyote/kidraw", "file": "kidraw/footprint/library.py", "last_update_at": "2021-01-11T20:14:23+00:00", "pred": {"ppl": 5.56913948059082, "ppl_lower": 6.799413204193115, "ppl/lowercase_ppl": -1.116230521545973, "ppl/zlib": 0.009701924012368189, "Min_5.0% Prob": 10.35321502685547, "Min_10.0% Prob": 8.765196019952947, "Min_20.0% Prob": 6.424791688504427, "Min_30.0% Prob": 4.907255833489554, "Min_40.0% Prob": 3.987560852714207, "Min_50.0% Prob": 3.305183623371453, "Min_60.0% Prob": 2.8154725061995642}}
{"hexsha": "4f4f6f8ac9dec0a03002fe61bd6214effc3be501", "ext": "py", "lang": "Python", "content": "def change_request_wrapper(func):\n\n    @functools.wraps(func)\n    def _inner(prep_req, *args, **kwargs):\n        prep_req.url = prep_req.url + '?some=stuff'\n        return func(prep_req, *args, **kwargs)\n    return _inner", "fn_id": 0, "class_fn": false, "repo": "HappyEinara/pytest-vts", "file": "tests/test_request_wrapper.py", "last_update_at": "2021-12-13T23:15:20+00:00", "pred": {"ppl": 3.2559940814971924, "ppl_lower": 3.2559940814971924, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00887592203320789, "Min_5.0% Prob": 8.772097945213318, "Min_10.0% Prob": 6.949665307998657, "Min_20.0% Prob": 4.904311016201973, "Min_30.0% Prob": 3.731884352862835, "Min_40.0% Prob": 2.9119709078222513, "Min_50.0% Prob": 2.3524915531277655, "Min_60.0% Prob": 1.9653164600798239}}
{"hexsha": "5ad02454c22c71588ac4c352b70a914a8fe47bc8", "ext": "py", "lang": "Python", "content": "def test_set_args_settings(mocker):\n    mocker.patch('json.load', new=lambda x: x())\n    args = Namespace()\n    set_args(args)\n    assert args.settings == {}\n    args = Namespace(settings=None)\n    set_args(args)\n    assert args.settings == {}\n    s = list(range(3))\n    mock = MagicMock(return_value=s)\n    args = Namespace(settings=mock)\n    set_args(args)\n    assert args.settings == s\n    mock.close.assert_called_with()", "fn_id": 10, "class_fn": false, "repo": "akx/markovchain", "file": "tests/cli/test_util.py", "last_update_at": "2021-06-05T15:38:34+00:00", "pred": {"ppl": 2.7626893520355225, "ppl_lower": 3.1525611877441406, "ppl/lowercase_ppl": -1.129905521643347, "ppl/zlib": 0.005292732334469394, "Min_5.0% Prob": 7.922489983694894, "Min_10.0% Prob": 6.242086478642055, "Min_20.0% Prob": 4.338709098952157, "Min_30.0% Prob": 3.2344005292370204, "Min_40.0% Prob": 2.522218882771475, "Min_50.0% Prob": 2.0182469188117644, "Min_60.0% Prob": 1.693958814551725}}
{"hexsha": "714d3dfaa367d1733c257ba0266824ee7c931162", "ext": "py", "lang": "Python", "content": "def getAllClass(p, period):\n    data = {}\n    data['{}'.format(period)] = getRawAssignments(p, period)\n    data['assignments'] = data.pop('{}'.format(period))\n    data['info'] = getRawClass(p)['{}'.format(period)]\n    return data", "fn_id": 5, "class_fn": false, "repo": "Grant2464/powerschool_api", "file": "powerschool.py", "last_update_at": "2021-11-02T17:43:43+00:00", "pred": {"ppl": 5.30889892578125, "ppl_lower": 5.704022407531738, "ppl/lowercase_ppl": -1.043002171327381, "ppl/zlib": 0.013144759489308223, "Min_5.0% Prob": 10.126201311747232, "Min_10.0% Prob": 8.257438250950404, "Min_20.0% Prob": 6.2187062422434485, "Min_30.0% Prob": 4.915717259697292, "Min_40.0% Prob": 4.062772136926651, "Min_50.0% Prob": 3.3100479433411047, "Min_60.0% Prob": 2.766896054148674}}
{"hexsha": "4bf042cd1a9ebeebeb1cce1bd259939ff32e8532", "ext": "py", "lang": "Python", "content": "def ret_a_dict(existing):\n    \"\"\"\n    Append a key-value to 'existing' (if it exists)\n    \"\"\"\n    existing = existing or {}\n    ret = {'secret': 42}\n    ret.update(existing)\n    return ret", "fn_id": 1, "class_fn": false, "repo": "siriobalmelli/replacement", "file": "tests/demo.py", "last_update_at": "2021-02-07T16:24:31+00:00", "pred": {"ppl": 5.394710063934326, "ppl_lower": 5.579142093658447, "ppl/lowercase_ppl": -1.0199452866942218, "ppl/zlib": 0.013271014611347935, "Min_5.0% Prob": 8.952772776285807, "Min_10.0% Prob": 7.528142054875691, "Min_20.0% Prob": 5.8235194484392805, "Min_30.0% Prob": 4.606100747459813, "Min_40.0% Prob": 3.8661940240859987, "Min_50.0% Prob": 3.237190021201968, "Min_60.0% Prob": 2.797987059935143}}
{"hexsha": "0e12d22364ddbf0f90693961db9219ea9d1c3443", "ext": "py", "lang": "Python", "content": "def get_uwsgi_emperor_opts(settings, port):\n    if settings['DATABASES']['default'].get('PASSWORD'):\n        os.environ['DB_PASSWORD'] = settings['DATABASES']['default']['PASSWORD']\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} password=$(DB_PASSWORD) dbname={NAME};{query}'\n    else:\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} dbname={NAME};{query}'\n    return get_uwsgi_regular_opts(settings, port) + ['http = 0.0.0.0:{}'.format(port or settings.get('PORT')), 'http-to = /tmp/fastrouter.sock', 'fastrouter = /tmp/fastrouter.sock', 'fastrouter-use-code-string = 0:{}:get'.format(os.path.join(HERE, 'fastrouter_lookup.py')), 'emperor = {}'.format(pg_str.format(query=VASSALS_SQL_QUERY, **settings['DATABASES']['default']))]", "fn_id": 3, "class_fn": false, "repo": "yakky/django-multisite-plus", "file": "django_multisite_plus/cli.py", "last_update_at": "2021-08-17T20:18:51+00:00", "pred": {"ppl": 4.126290798187256, "ppl_lower": 4.240118503570557, "ppl/lowercase_ppl": -1.0191990485817775, "ppl/zlib": 0.003841135207614685, "Min_5.0% Prob": 9.294991676624004, "Min_10.0% Prob": 7.886497625937829, "Min_20.0% Prob": 5.812738450068347, "Min_30.0% Prob": 4.400534358620644, "Min_40.0% Prob": 3.454971725417075, "Min_50.0% Prob": 2.8103477526734126, "Min_60.0% Prob": 2.3684260138776154}}
{"hexsha": "d83d43b9c49703cda927b344f9e7b3b7da45f5b3", "ext": "py", "lang": "Python", "content": "def read_kitti_annotations(label_paths, calib_paths):\n    all_labels = []\n    all_calib = []\n    for label_file, calib_file in zip(label_paths, calib_paths):\n        calib = o3d.ml.datasets.KITTI.read_calib(calib_file)\n        labels = o3d.ml.datasets.KITTI.read_label(label_file, calib)\n        all_labels.append(labels)\n        all_calib.append(calib)\n    return (all_labels, all_calib)", "fn_id": 1, "class_fn": false, "repo": "supervisely-ecosystem/Open3D-ML", "file": "supervisely/src_backup/convert_kitty3d_to_sly.py", "last_update_at": "2021-08-31T09:06:08+00:00", "pred": {"ppl": 1.9336730241775513, "ppl_lower": 1.9219412803649902, "ppl/lowercase_ppl": -0.9907713677057095, "ppl/zlib": 0.003833844858204939, "Min_5.0% Prob": 6.916626862117222, "Min_10.0% Prob": 5.271091086523874, "Min_20.0% Prob": 3.1338304014041505, "Min_30.0% Prob": 2.168493169275197, "Min_40.0% Prob": 1.6407980874054513, "Min_50.0% Prob": 1.3147177519528448, "Min_60.0% Prob": 1.1078876539514484}}
{"hexsha": "07fe364d937fe8b983df03d9c0471b986fbd990b", "ext": "py", "lang": "Python", "content": "def _add_workload_inner():\n    OpArgMngr.add_workload('inner', np.zeros(shape=(1, 80), dtype=np.float64), np.zeros(shape=(1, 80), dtype=np.float64))\n    for dt in [np.float32, np.float64]:\n        A = np.array([[1, 2], [3, 4]], dtype=dt)\n        B = np.array([[1, 3], [2, 4]], dtype=dt)\n        C = np.array([1, 1], dtype=dt)\n        OpArgMngr.add_workload('inner', A.T, C)\n        OpArgMngr.add_workload('inner', C, A.T)\n        OpArgMngr.add_workload('inner', B, C)\n        OpArgMngr.add_workload('inner', C, B)\n        OpArgMngr.add_workload('inner', A, B)\n        OpArgMngr.add_workload('inner', A, A)\n        OpArgMngr.add_workload('inner', A, A.copy())\n        a = np.arange(5).astype(dt)\n        b = a[::-1]\n        OpArgMngr.add_workload('inner', b, a)\n        a = np.arange(24).reshape(2, 3, 4).astype(dt)\n        b = np.arange(24, 48).reshape(2, 3, 4).astype(dt)\n        OpArgMngr.add_workload('inner', a, b)\n        OpArgMngr.add_workload('inner', b, a)", "fn_id": 74, "class_fn": false, "repo": "sxjscience/mxnet", "file": "tests/python/unittest/test_numpy_interoperability.py", "last_update_at": "2021-03-23T03:07:38+00:00", "pred": {"ppl": 1.5873404741287231, "ppl_lower": 1.7207205295562744, "ppl/lowercase_ppl": -1.1746162077986864, "ppl/zlib": 0.001743622483009683, "Min_5.0% Prob": 5.449019602366856, "Min_10.0% Prob": 3.6627556473709815, "Min_20.0% Prob": 2.149599342845207, "Min_30.0% Prob": 1.5130974180245584, "Min_40.0% Prob": 1.151812341757292, "Min_50.0% Prob": 0.9250769174462834, "Min_60.0% Prob": 0.7716901303790582}}
{"hexsha": "0460f6e42c23c688c2c6afb0f673aa2cf4d651bf", "ext": "py", "lang": "Python", "content": "def load_state(network, state_dict):\n    net_state_keys = list(network.state_dict().keys())\n    net_state_keys_copy = net_state_keys.copy()\n    sup_string = ''\n    for key in state_dict.keys():\n        if 'backbone' in key:\n            sup_string = 'backbone.'\n        elif 'module' in key:\n            sup_string = 'module.'\n    for i, _ in enumerate(net_state_keys_copy):\n        name = net_state_keys_copy[i]\n        if name.startswith('classifier') or name.startswith('fc'):\n            continue\n        if not sup_string:\n            name_pretrained = name\n        else:\n            name_pretrained = sup_string + name\n        if name_pretrained in state_dict.keys():\n            dst_param_shape = network.state_dict()[name].shape\n            if state_dict[name_pretrained].shape == dst_param_shape:\n                network.state_dict()[name].copy_(state_dict[name_pretrained].view(dst_param_shape))\n                net_state_keys.remove(name)\n    if net_state_keys:\n        num_batches_list = []\n        for i in range(len(net_state_keys)):\n            if 'num_batches_tracked' in net_state_keys[i]:\n                num_batches_list.append(net_state_keys[i])\n        pruned_additional_states = [x for x in net_state_keys if x not in num_batches_list]\n        if pruned_additional_states:\n            logging.info('There are layers in current network not initialized by pretrained')\n            logging.warning('>> Failed to load: {}'.format(pruned_additional_states))\n        return False\n    return True", "fn_id": 0, "class_fn": false, "repo": "xuyu0010/PATAN", "file": "network/util.py", "last_update_at": "2021-12-27T19:45:45+00:00", "pred": {"ppl": 2.0630440711975098, "ppl_lower": 2.114339590072632, "ppl/lowercase_ppl": -1.033913983521923, "ppl/zlib": 0.0013953421898563467, "Min_5.0% Prob": 6.995681589299982, "Min_10.0% Prob": 5.083851072523329, "Min_20.0% Prob": 3.2559435885031145, "Min_30.0% Prob": 2.3454493742217037, "Min_40.0% Prob": 1.795850563385002, "Min_50.0% Prob": 1.4443540953736949, "Min_60.0% Prob": 1.2088010634923347}}
{"hexsha": "f6b4cf055a04d3fdf48e80ef79e23515af8b5c83", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='function')\ndef boto_status():\n    status_mock = Mock()\n    status_mock.get_status.side_effect = ['PENDING', 'INSYNC']\n\n    def update():\n        status_mock.status = status_mock.get_status()\n    status_mock.update.side_effect = update\n    status_mock.status = 'PENDING'\n    return status_mock", "fn_id": 0, "class_fn": false, "repo": "dron22/r53dyndns", "file": "r53dyndns/tests/test_r53updater.py", "last_update_at": "2021-05-13T21:14:44+00:00", "pred": {"ppl": 2.8337392807006836, "ppl_lower": 3.1109073162078857, "ppl/lowercase_ppl": -1.0895905734463003, "ppl/zlib": 0.006274681566907341, "Min_5.0% Prob": 7.558588886260987, "Min_10.0% Prob": 5.854141569137573, "Min_20.0% Prob": 4.209730297327042, "Min_30.0% Prob": 3.234568007530705, "Min_40.0% Prob": 2.5847681368269573, "Min_50.0% Prob": 2.071363623325641, "Min_60.0% Prob": 1.7450162936302442}}
{"hexsha": "cc8172756946d110aef633b85d99fdb465e813dc", "ext": "py", "lang": "Python", "content": "def used_tracks_set(image, all=False):\n    \"\"\"Determine the set of tracks used by directory and files on the disk\"\"\"\n    bam = Disk.from_image(image).bam()\n    used_tracks = set()\n    for head in range(2):\n        for cyl in range(80):\n            track = head << 7 | cyl\n            offset = (80 * head + cyl - 4) * image.spt\n            if all or track <= 4 or bam[offset:offset + image.spt].any():\n                used_tracks.add(track)\n    return used_tracks", "fn_id": 1, "class_fn": false, "repo": "simonowen/writeusb", "file": "mgtwriteusb/writeusb.py", "last_update_at": "2021-08-03T21:10:03+00:00", "pred": {"ppl": 5.427599906921387, "ppl_lower": 5.905207633972168, "ppl/lowercase_ppl": -1.0498597276778152, "ppl/zlib": 0.006793160763616592, "Min_5.0% Prob": 9.127144064222064, "Min_10.0% Prob": 7.561105378468832, "Min_20.0% Prob": 5.960387841860453, "Min_30.0% Prob": 4.791023879581028, "Min_40.0% Prob": 3.937036623557409, "Min_50.0% Prob": 3.277910035053889, "Min_60.0% Prob": 2.789458911948734}}
{"hexsha": "0261d48fadbcba94432255ef1726dce932739202", "ext": "py", "lang": "Python", "content": "@deprecated(version='0.2.0', reason='Use AnyLE instead')\ndef any_le(bound: Any) -> Any:\n    \"\"\"\n    Returns a matcher that matches any value less than or equal to ``bound``\n    \"\"\"\n    return AnyLE(bound)", "fn_id": 13, "class_fn": false, "repo": "jwodder/anys", "file": "src/anys/__init__.py", "last_update_at": "2021-12-14T23:07:16+00:00", "pred": {"ppl": 5.163805961608887, "ppl_lower": 6.195840358734131, "ppl/lowercase_ppl": -1.1109868776418246, "ppl/zlib": 0.010591444497207341, "Min_5.0% Prob": 10.366825103759766, "Min_10.0% Prob": 8.596157391866049, "Min_20.0% Prob": 5.771093166791475, "Min_30.0% Prob": 4.612826108932495, "Min_40.0% Prob": 3.676573070196005, "Min_50.0% Prob": 3.1301807537674904, "Min_60.0% Prob": 2.6589134327876263}}
{"hexsha": "8521926dba5b85612435ecc4000212db9efd4499", "ext": "py", "lang": "Python", "content": "def test_previous_benefit_put_unauthenticated(anonymous_client, previous_benefit):\n    data = PreviousBenefitSerializer(previous_benefit).data\n    data['monthly_amount'] = '1234.56'\n    response = anonymous_client.put(get_previous_benefits_detail_url(previous_benefit), data)\n    assert response.status_code == 403", "fn_id": 7, "class_fn": false, "repo": "City-of-Helsinki/kesaseteli", "file": "backend/benefit/calculator/tests/test_previous_benefits_api.py", "last_update_at": "2021-05-17T12:15:34+00:00", "pred": {"ppl": 3.0123798847198486, "ppl_lower": 3.535614013671875, "ppl/lowercase_ppl": -1.1452363608739702, "ppl/zlib": 0.006058958383130143, "Min_5.0% Prob": 9.717429542541504, "Min_10.0% Prob": 7.42944495677948, "Min_20.0% Prob": 4.739132875487918, "Min_30.0% Prob": 3.5140387819659327, "Min_40.0% Prob": 2.7047130948021296, "Min_50.0% Prob": 2.2103834533347535, "Min_60.0% Prob": 1.8353336599492838}}
{"hexsha": "9c1f3df34d1f27d3dbdd982cd272b1268f3600c6", "ext": "py", "lang": "Python", "content": "def inference(net, data_label, use_aux):\n    if use_aux:\n        img, cls_label, seg_label = data_label\n        img, cls_label, seg_label = (img.cuda(), cls_label.long().cuda(), seg_label.long().cuda())\n        cls_out, seg_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label, 'seg_out': seg_out, 'seg_label': seg_label}\n    else:\n        img, cls_label = data_label\n        img, cls_label = (img.cuda(), cls_label.long().cuda())\n        cls_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label}", "fn_id": 0, "class_fn": false, "repo": "kjannakh/Ultra-Fast-Lane-Detection", "file": "train.py", "last_update_at": "2021-09-12T20:02:53+00:00", "pred": {"ppl": 1.7459722757339478, "ppl_lower": 1.7459722757339478, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0032214542113257424, "Min_5.0% Prob": 6.6956456184387205, "Min_10.0% Prob": 4.7451103806495665, "Min_20.0% Prob": 2.685553010643982, "Min_30.0% Prob": 1.8499758849378491, "Min_40.0% Prob": 1.3872129598905036, "Min_50.0% Prob": 1.118567576622773, "Min_60.0% Prob": 0.9284756416322406}}
{"hexsha": "9cf488ea53f16e45eefa82773cf77f48e6b49c9a", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef mock_trained_emulator(mock_emulator):\n    filename = os.path.join(test_base, 'data', 'emu.hdf5')\n    if os.path.exists(filename):\n        yield Emulator.load(filename)\n    else:\n        mock_emulator.train()\n        mock_emulator.save(filename)\n        yield mock_emulator", "fn_id": 6, "class_fn": false, "repo": "spencerhurt/Starfish", "file": "tests/conftest.py", "last_update_at": "2021-05-13T16:23:26+00:00", "pred": {"ppl": 3.030931234359741, "ppl_lower": 3.1807234287261963, "ppl/lowercase_ppl": -1.043502626776195, "ppl/zlib": 0.006974024593554269, "Min_5.0% Prob": 8.352436065673828, "Min_10.0% Prob": 6.970025804307726, "Min_20.0% Prob": 4.680876411889729, "Min_30.0% Prob": 3.4556145565263154, "Min_40.0% Prob": 2.771780712824119, "Min_50.0% Prob": 2.221499651360015, "Min_60.0% Prob": 1.8491055616659338}}
{"hexsha": "511d2698d35dc4f9fe7517171c56725c07784116", "ext": "py", "lang": "Python", "content": "def make_char_dict():\n    chars = string.ascii_lowercase\n    char_dict = {'<blank>': 0}\n    for idx, c in enumerate(chars):\n        char_dict[c] = idx + 1\n    current_len = len(list(char_dict.keys()))\n    char_dict['<eos>'] = current_len\n    print(char_dict)\n    return char_dict", "fn_id": 0, "class_fn": false, "repo": "duguqiankun/lips_reading", "file": "cnn2d/cnn2d_image_generator.py", "last_update_at": "2021-11-14T13:10:30+00:00", "pred": {"ppl": 2.532815456390381, "ppl_lower": 2.532815456390381, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005371858454436155, "Min_5.0% Prob": 8.27018985748291, "Min_10.0% Prob": 6.3203541278839115, "Min_20.0% Prob": 4.270800471305847, "Min_30.0% Prob": 3.0502196957667667, "Min_40.0% Prob": 2.3305612195283176, "Min_50.0% Prob": 1.84802155781026, "Min_60.0% Prob": 1.5509716425946012}}
{"hexsha": "67a636a6cf8ea63426b938047e0e18deaa078baf", "ext": "py", "lang": "Python", "content": "def test_project_creation_without_pylint(cookies):\n    with generate_temporary_project(cookies, extra_context=NO_PLINT) as result:\n        assert_successful_creation(result)\n        assert_expected_files_exist(result, files=EXPECTED_PROJECT_FILES_NO_PYLINT)\n        assert_expected_files_do_not_exist(result, files=('pylintrc',))", "fn_id": 4, "class_fn": false, "repo": "mendix/python-project-template", "file": "tests/test_project_creation.py", "last_update_at": "2021-07-31T12:31:00+00:00", "pred": {"ppl": 3.657650947570801, "ppl_lower": 4.020961284637451, "ppl/lowercase_ppl": -1.0730246246651027, "ppl/zlib": 0.006419906553250396, "Min_5.0% Prob": 8.318672847747802, "Min_10.0% Prob": 6.580242395401001, "Min_20.0% Prob": 5.123626867930095, "Min_30.0% Prob": 3.9177118986845016, "Min_40.0% Prob": 3.144440997478574, "Min_50.0% Prob": 2.586008946928713, "Min_60.0% Prob": 2.1671488389372824}}
{"hexsha": "4ab2bfd86a6ca0acdb74024739a1d2b31d9cbebd", "ext": "py", "lang": "Python", "content": "def zero_shot_transform(image, caption, p=0.5, transform_to_apply='solarized'):\n    \"\"\"\n    Output PIL.Image of a two-panel style transfer image with an english word describing the transform included in the caption.\n    See OpenAI DALL-E blog post for more details:\n    The top half of the image is the original image, and the bottom half is a stylized image.\n    \"\"\"\n    if p >= 0.5:\n        friendly_transform = transform_to_apply.replace('_', ' ')\n        style_caption = 'Two panel image of the exact same picture.' + f'On the top {caption} and on the bottom the same image but with {friendly_transform} applied.' + f'The original image is on the top and the {friendly_transform} image on the bottom. The caption is {caption}.'\n        style_image_transform = transform_lookup[transform_to_apply]\n        return (two_panel_style_transfer(image, img_transform=style_image_transform, resize_ratio=1.0), style_caption)\n    return (image, style_caption)", "fn_id": 3, "class_fn": false, "repo": "afiaka87/ZeroShotTransform", "file": "transforms.py", "last_update_at": "2021-07-20T00:07:04+00:00", "pred": {"ppl": 5.857731342315674, "ppl_lower": 6.465649127960205, "ppl/lowercase_ppl": -1.0558565046939827, "ppl/zlib": 0.003919650522572502, "Min_5.0% Prob": 9.755454063415527, "Min_10.0% Prob": 8.271598100662231, "Min_20.0% Prob": 6.225598861586373, "Min_30.0% Prob": 4.886305004358292, "Min_40.0% Prob": 4.040638864597428, "Min_50.0% Prob": 3.3905378664607433, "Min_60.0% Prob": 2.8946029114427034}}
{"hexsha": "b605c74be7fc59d0693eaf81e6720e58b5e14ac4", "ext": "py", "lang": "Python", "content": "def func_645e7dad5f4c4c1db11925e9517ff3b9(infile):\n    n, p, q, r, s = [int(x) for x in infile.readline().split()]\n    dev = [(i * p + q) % r + s for i in range(n)]\n    tot = sum(dev)\n    i = 0\n    return q", "fn_id": 88, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y14R5P1/Smithers/generated_py_263a1af396df4e8fa1f96950f5309feb.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 4.517942905426025, "ppl_lower": 4.517942905426025, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009366812303300592, "Min_5.0% Prob": 8.731274604797363, "Min_10.0% Prob": 6.91651349067688, "Min_20.0% Prob": 4.973699864887056, "Min_30.0% Prob": 4.249061769054782, "Min_40.0% Prob": 3.662758069378989, "Min_50.0% Prob": 3.0330428266181397, "Min_60.0% Prob": 2.513161169786361}}
{"hexsha": "fa024eaa7abd499c2cfb6beea3f81e7389c03dac", "ext": "py", "lang": "Python", "content": "def get_pblog(*args, **kwargs):\n    global pblog\n    if pblog is None:\n        pblog = ProgressBarLog(*args, **kwargs)\n    return pblog", "fn_id": 0, "class_fn": false, "repo": "youngyzzZ/Sonographic_Gallbladder_Diagnose", "file": "src/logger.py", "last_update_at": "2021-07-16T10:20:23+00:00", "pred": {"ppl": 4.08223819732666, "ppl_lower": 6.119974613189697, "ppl/lowercase_ppl": -1.2878568600328502, "ppl/zlib": 0.014964312933813095, "Min_5.0% Prob": 10.193311214447021, "Min_10.0% Prob": 8.842937350273132, "Min_20.0% Prob": 6.434351548552513, "Min_30.0% Prob": 4.6867063244183855, "Min_40.0% Prob": 3.4565739281037273, "Min_50.0% Prob": 2.8415451298157373, "Min_60.0% Prob": 2.404557277262211}}
{"hexsha": "1183023f80519f66fa1c64d6437b4cc896c39a21", "ext": "py", "lang": "Python", "content": "def main():\n    args = arguments().parse_args()\n    sys.path.insert(0, os.getcwd())\n    conn = get_connection(args)\n    headers = None\n    editfile = tempfile.NamedTemporaryFile()\n    with open(editfile.name, 'w', newline='') as cfile:\n        headers = write_csv(cfile, conn, args.table)\n    reffile = tempfile.NamedTemporaryFile()\n    shutil.copy(editfile.name, reffile.name)\n    call_vim(editfile.name)\n    while True:\n        try:\n            process_changes(reffile, editfile, conn, args.table, headers)\n            break\n        except Exception as err:\n            print('Failed to save changes: ', err)\n            q = '(C)ancel, (r)etry save, (e)dit the file again?'\n            cmd = query_options(q, ('c', 'r', 'e'))\n            if cmd == 'c':\n                print('Changes cancelled')\n                break\n            elif cmd == 'r':\n                continue\n            elif cmd == 'e':\n                call_vim(editfile.name)\n            else:\n                raise ValueError('Not a command')", "fn_id": 14, "class_fn": false, "repo": "BnMcGn/vibase", "file": "src/vibase.py", "last_update_at": "2021-10-17T07:52:04+00:00", "pred": {"ppl": 2.732104539871216, "ppl_lower": 3.049842119216919, "ppl/lowercase_ppl": -1.1094624032998377, "ppl/zlib": 0.002315834575890876, "Min_5.0% Prob": 7.483822379793439, "Min_10.0% Prob": 6.057567859518117, "Min_20.0% Prob": 4.227001099263207, "Min_30.0% Prob": 3.139208098475853, "Min_40.0% Prob": 2.4537896987269905, "Min_50.0% Prob": 1.9950307995180956, "Min_60.0% Prob": 1.67888865975684}}
{"hexsha": "93702be6e0d4de5b5113d03f1b9b9f088babbad8", "ext": "py", "lang": "Python", "content": "def macro_do_exist_op(macro: str, specs: typ.Dict[str, str]) -> str:\n    macro_no_encloser = macro[1:-1]\n    l, r = macro_no_encloser.split(MACRO_OP_EXIST)\n    if l in specs:\n        return specs[with_encloser(l)]\n    else:\n        return specs[with_encloser(r)]", "fn_id": 2, "class_fn": false, "repo": "Tootooroo/VerManager", "file": "manager/basic/macros.py", "last_update_at": "2021-03-18T12:03:54+00:00", "pred": {"ppl": 4.809665203094482, "ppl_lower": 5.344167232513428, "ppl/lowercase_ppl": -1.0670930907709053, "ppl/zlib": 0.00963575139477861, "Min_5.0% Prob": 11.078083419799805, "Min_10.0% Prob": 9.260911321640014, "Min_20.0% Prob": 6.552798214412871, "Min_30.0% Prob": 4.873976029455662, "Min_40.0% Prob": 3.8178122667379157, "Min_50.0% Prob": 3.1041356857728073, "Min_60.0% Prob": 2.6359363608062267}}
{"hexsha": "0778557121cb9d3021b5bcd3f81aaa9f8612eb04", "ext": "py", "lang": "Python", "content": "def write_glottal_tier(utterance, tao):\n    return_str = ''\n    glottal_dur = utterance.duration\n    for ii in range(len(utterance.duration)):\n        return_str += f'    <gesture value=\"{utterance.glottal[ii]}\" slope=\"0.000000\" duration_s=\"{utterance.duration[ii]:.6f}\" time_constant_s=\"{tao:.6f}\" neutral=\"0\" />\\n'\n    return return_str", "fn_id": 4, "class_fn": false, "repo": "quantling/create_vtl_corpus", "file": "generate_gestural_score.py", "last_update_at": "2021-11-01T02:35:12+00:00", "pred": {"ppl": 5.7748894691467285, "ppl_lower": 5.7748894691467285, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009229047982542114, "Min_5.0% Prob": 11.015613396962484, "Min_10.0% Prob": 8.858351349830627, "Min_20.0% Prob": 6.521153507232666, "Min_30.0% Prob": 5.013968709268068, "Min_40.0% Prob": 4.101472665071487, "Min_50.0% Prob": 3.3912498686048718, "Min_60.0% Prob": 2.879720735706781}}
{"hexsha": "9ec5c4528bc5fd84b15a1a39d42df73c0372c253", "ext": "py", "lang": "Python", "content": "def make_parser():\n    parser = argparse.ArgumentParser('Extract frames from a video. If `-r` and `-n N` parameters are specified, then dump `N` randomly selected frames. If `-s START -i STRIDE` are specified then dump every `STRIDE`-th frame starting from `START` frame.')\n    parser.add_argument('-f', dest='fname', type=str, help='input filename')\n    parser.add_argument('-s', dest='start', default=0, type=int, help='starting frame')\n    parser.add_argument('-i', dest='stride', default=1, type=int, help='stride, interval between successive frames to save.')\n    parser.add_argument('-c', dest='cmap', default='', type=str, help='colormap to conevrt to, default same as original')\n    parser.add_argument('-x', dest='scale', default=1, type=float, help='factor by which to scale the images')\n    parser.add_argument('-r', dest='random', action='store_true', help='extract random frames')\n    parser.add_argument('-n', dest='num', default=-1, type=int, help='number of frames to extract.')\n    parser.add_argument('-o', dest='outdir', default='.', type=str, help='output directory')\n    return parser", "fn_id": 0, "class_fn": false, "repo": "subhacom/argos", "file": "argos/extract_frames.py", "last_update_at": "2021-05-18T01:07:16+00:00", "pred": {"ppl": 2.5842487812042236, "ppl_lower": 2.69250750541687, "ppl/lowercase_ppl": -1.0432236696891009, "ppl/zlib": 0.002138366799193205, "Min_5.0% Prob": 7.391806066036224, "Min_10.0% Prob": 5.8663796707987785, "Min_20.0% Prob": 4.07336374612955, "Min_30.0% Prob": 3.0088572581203614, "Min_40.0% Prob": 2.338162262589877, "Min_50.0% Prob": 1.8942317977638505, "Min_60.0% Prob": 1.5830247517731892}}
{"hexsha": "328dbe2b5b1e986ae40f5e053574fec17b83fbb1", "ext": "py", "lang": "Python", "content": "def trio_perf_counter():\n    \"\"\"Trio task-local equivalent of time.perf_counter().\n\n    For the current Trio task, return the value (in fractional seconds) of a\n    performance counter, i.e. a clock with the highest available resolution to\n    measure a short duration.  It includes time elapsed during time.sleep,\n    but not trio.sleep.  The reference point of the returned value is\n    undefined, so that only the difference between the results of consecutive\n    calls is valid.\n\n    Performance note: calling this function installs instrumentation on the\n    Trio scheduler which may affect application performance.  The\n    instrumentation is automatically removed when the corresponding tasks\n    have exited.\n    \"\"\"\n    trio_lowlevel.add_instrument(_instrument)\n    task = trio_lowlevel.current_task()\n    return perf_counter() - _instrument.get_elapsed_descheduled_time(task)", "fn_id": 0, "class_fn": false, "repo": "belm0/perf-timer", "file": "src/perf_timer/_trio.py", "last_update_at": "2021-05-29T02:50:31+00:00", "pred": {"ppl": 4.327366828918457, "ppl_lower": 4.822384357452393, "ppl/lowercase_ppl": -1.073933286875823, "ppl/zlib": 0.003198600948430555, "Min_5.0% Prob": 9.039700768210672, "Min_10.0% Prob": 7.428785237399015, "Min_20.0% Prob": 5.5376968654719265, "Min_30.0% Prob": 4.3433156422714685, "Min_40.0% Prob": 3.5149849981404424, "Min_50.0% Prob": 2.875217934538211, "Min_60.0% Prob": 2.4343270985270613}}
{"hexsha": "1c1c76f7c4bea462b7291fe3d05a036ce7b22f07", "ext": "py", "lang": "Python", "content": "def main():\n    if not os.path.exists('benchmark.py'):\n        logging.warning('Please change current path to %s', PYARMOR_PATH)\n        return\n    output = '.benchtest'\n    name = 'bfoo'\n    filename = os.path.join(output, name + '.py')\n    obname = 'obfoo'\n    obfilename = os.path.join(output, obname + '.py')\n    if len(sys.argv) > 1 and 'bootstrap'.startswith(sys.argv[1]):\n        if len(sys.argv) < 5:\n            sys.argv.extend(['1', '1', '1'])\n        obf_mod, obf_code, wrap_mode = sys.argv[2:5]\n        if not os.path.exists(output):\n            logging.info('Create output path: %s', output)\n            os.makedirs(output)\n        else:\n            logging.info('Output path: %s', output)\n        logging.info('Generate test script %s ...', filename)\n        make_test_script(filename)\n        logging.info('Obffuscate test script ...')\n        shutil.copy(filename, obfilename)\n        obffuscate_scripts(output, os.path.basename(obfilename), obf_mod, obf_code, wrap_mode)\n        if not os.path.exists(obfilename):\n            logging.info('Something is wrong to obsfucate the script')\n            return\n        logging.info('Generate obffuscated script %s', obfilename)\n        logging.info('Copy benchmark.py to %s', output)\n        shutil.copy('benchmark.py', output)\n        logging.info('')\n        logging.info('Now change to \"%s\"', output)\n        logging.info('Run \"%s benchmark.py\".', sys.executable)\n        return\n    filename = os.path.basename(filename)\n    if os.path.exists(filename):\n        logging.info('Test script: %s', filename)\n    else:\n        logging.warning('Test script: %s not found', filename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    obfilename = os.path.basename(obfilename)\n    if os.path.exists(obfilename):\n        logging.info('Obfuscated script: %s', obfilename)\n    else:\n        logging.warning('Obfuscated script: %s not found', obfilename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    logging.info('--------------------------------------')\n    logging.info('')\n    total_extra_init_time()\n    logging.info('')\n    foo = import_no_obfuscated_module(name)\n    obfoo = import_obfuscated_module(obname)\n    logging.info('')\n    foo = re_import_no_obfuscated_module(name)\n    obfoo = re_import_obfuscated_module(obname)\n    logging.info('')\n    run_empty_no_obfuscated_code_object(foo)\n    run_empty_obfuscated_code_object(obfoo)\n    logging.info('')\n    run_one_thousand_no_obfuscated_bytecode(foo)\n    run_one_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    run_ten_thousand_no_obfuscated_bytecode(foo)\n    run_ten_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    logging.info('--------------------------------------')", "fn_id": 6, "class_fn": false, "repo": "HildeTeamTNT/pyarmor", "file": "src/benchmark.py", "last_update_at": "2021-04-23T16:33:54+00:00", "pred": {"ppl": 2.103505849838257, "ppl_lower": 2.115615129470825, "ppl/lowercase_ppl": -1.0077194254959219, "ppl/zlib": 0.0010172440561516181, "Min_5.0% Prob": 6.485734780629476, "Min_10.0% Prob": 5.0561712794833715, "Min_20.0% Prob": 3.360857642028067, "Min_30.0% Prob": 2.416795723857703, "Min_40.0% Prob": 1.8454631127602836, "Min_50.0% Prob": 1.485204095115881, "Min_60.0% Prob": 1.2402814379884637}}
{"hexsha": "07d1a12410a8c57d20254595d70eb26c45d6f0ba", "ext": "py", "lang": "Python", "content": "@app.route('/robots.txt')\n@app.route('/AI_list.xml')\ndef static_from_root():\n    return send_from_directory(app.static_folder, request.path[1:])", "fn_id": 0, "class_fn": false, "repo": "mattarderne/CommitLearn", "file": "src/app.py", "last_update_at": "2021-12-13T20:29:20+00:00", "pred": {"ppl": 3.0073633193969727, "ppl_lower": 2.861260175704956, "ppl/lowercase_ppl": -0.954769581791177, "ppl/zlib": 0.009099700175615056, "Min_5.0% Prob": 10.660041809082031, "Min_10.0% Prob": 8.382637405395508, "Min_20.0% Prob": 5.459207040071488, "Min_30.0% Prob": 3.7669909556706744, "Min_40.0% Prob": 2.8484240788966417, "Min_50.0% Prob": 2.1968956467910457, "Min_60.0% Prob": 1.8450805101423495}}
{"hexsha": "241dc5d98f8878f2c0b9e622971ebdf6ac69b24e", "ext": "py", "lang": "Python", "content": "def dye(image, lw=5, rw=5, sh=3, value=255):\n    h, w = image.shape\n    mask = np.ones([h, w], np.uint8)\n    mask *= value\n    mask[2 * int(h / sh):h, int(w / lw):int(w - w / rw)] = 0\n    dst = cv.add(mask, image)\n    return dst", "fn_id": 5, "class_fn": false, "repo": "shinki-alice/-", "file": "V3.py", "last_update_at": "2021-12-08T10:42:49+00:00", "pred": {"ppl": 3.7828562259674072, "ppl_lower": 3.7828562259674072, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00836779458888835, "Min_5.0% Prob": 7.949330139160156, "Min_10.0% Prob": 6.734370279312134, "Min_20.0% Prob": 5.0103551887330555, "Min_30.0% Prob": 3.8707187175750732, "Min_40.0% Prob": 3.1522801248800185, "Min_50.0% Prob": 2.59141679473643, "Min_60.0% Prob": 2.186891478486359}}
{"hexsha": "585c8c30c7d2aa1d2bbdf2724d7af40b9b92f226", "ext": "py", "lang": "Python", "content": "def get_straightline_path_to(target, robot_pos):\n    pts = []\n    cur_pos = robot_pos\n    while np.linalg.norm(target[:2] - cur_pos[:2]) > 0.5:\n        t = get_step_target_for_move(cur_pos, [target[0], CAMERA_HEIGHT, target[1]], step_size=0.5)\n        pts.append(t)\n        cur_pos = t\n    return np.asarray(pts)", "fn_id": 7, "class_fn": false, "repo": "Jigyasu/droidlet", "file": "droidlet/lowlevel/robot_mover_utils.py", "last_update_at": "2021-09-13T13:25:16+00:00", "pred": {"ppl": 3.302839517593384, "ppl_lower": 3.4788644313812256, "ppl/lowercase_ppl": -1.0434584259569881, "ppl/zlib": 0.005856777246891372, "Min_5.0% Prob": 8.24216596285502, "Min_10.0% Prob": 6.566629370053609, "Min_20.0% Prob": 4.788724508285522, "Min_30.0% Prob": 3.6343758796390735, "Min_40.0% Prob": 2.8804733303247714, "Min_50.0% Prob": 2.355325991054997, "Min_60.0% Prob": 1.9848538938087303}}
{"hexsha": "60f2593114913a3c96f097967b6e4f643d2df767", "ext": "py", "lang": "Python", "content": "def root_sum_squares(arr1, arr2):\n    \"\"\"\n    Function to calculate magnitude of two arrays of vectors.\n    \"\"\"\n    rss_arr = np.sqrt(arr1 ** 2 + arr2 ** 2)\n    v_line = np.median(rss_arr)\n    return (rss_arr, v_line)", "fn_id": 5, "class_fn": false, "repo": "geohackweek/ghw2019_planetpieces", "file": "contributors/matt/data_tools.py", "last_update_at": "2021-08-15T12:01:11+00:00", "pred": {"ppl": 4.013727188110352, "ppl_lower": 4.165956974029541, "ppl/lowercase_ppl": -1.026786492495231, "ppl/zlib": 0.009264801886465557, "Min_5.0% Prob": 9.340516567230225, "Min_10.0% Prob": 7.481027364730835, "Min_20.0% Prob": 5.528516128659248, "Min_30.0% Prob": 4.1477844476699826, "Min_40.0% Prob": 3.3720614928187747, "Min_50.0% Prob": 2.7353612070991877, "Min_60.0% Prob": 2.3230072620511053}}
{"hexsha": "70e4742585e29853d1350672ced44f958ac66764", "ext": "py", "lang": "Python", "content": "def _extract_metrics(out_lines) -> Tuple[pd.DataFrame, Dict[str, Optional[Union[str, int, float]]]]:\n    loss_table = {'i': [], 'loss': [], 'since_last': []}\n    metrics = {}\n    try:\n        record = False\n        for line in out_lines:\n            line = line.strip()\n            if record:\n                if line == '':\n                    record = False\n                else:\n                    counter_line = line.split()\n                    try:\n                        count, average_loss, since_last = (counter_line[2], counter_line[0], counter_line[1])\n                        average_loss_f = float(average_loss)\n                        since_last_f = float(since_last)\n                        loss_table['i'].append(count)\n                        loss_table['loss'].append(average_loss_f)\n                        loss_table['since_last'].append(since_last_f)\n                    except (ValueError, TypeError):\n                        ...\n            elif line.startswith('loss'):\n                fields = line.split()\n                if fields[0] == 'loss' and fields[1] == 'last' and (fields[2] == 'counter'):\n                    record = True\n            elif '=' in line:\n                key_value = [p.strip() for p in line.split('=')]\n                if key_value[0] == 'average loss':\n                    metrics[key_value[0]] = _parse_loss(key_value[1])\n                else:\n                    metrics[key_value[0]] = _to(key_value[1], [int, float])\n    finally:\n        return (pd.DataFrame(loss_table).set_index('i'), metrics)", "fn_id": 3, "class_fn": false, "repo": "ataymano/data-science", "file": "from_mwt_ds/DataScience/vw_executor/artifacts.py", "last_update_at": "2021-12-15T21:45:13+00:00", "pred": {"ppl": 2.272355556488037, "ppl_lower": 2.4712283611297607, "ppl/lowercase_ppl": -1.1022132306629757, "ppl/zlib": 0.0016253801654415151, "Min_5.0% Prob": 6.821236269814627, "Min_10.0% Prob": 5.512363042150225, "Min_20.0% Prob": 3.67052822674022, "Min_30.0% Prob": 2.632637062575668, "Min_40.0% Prob": 2.0239546763443808, "Min_50.0% Prob": 1.6336914323897005, "Min_60.0% Prob": 1.3701359894184861}}
{"hexsha": "ee05a0d4fc4e0216722d78972336a384e87d7578", "ext": "py", "lang": "Python", "content": "def show_video():\n    mp4list = glob.glob('video/*.mp4')\n    if len(mp4list) > 0:\n        mp4 = mp4list[0]\n        video = io.open(mp4, 'r+b').read()\n        encoded = base64.b64encode(video)\n        ipythondisplay.display(HTML(data='<video alt=\"test\" autoplay\\n                 controls style=\"height: 400px;\">\\n                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\\n             </video>'.format(encoded.decode('ascii'))))\n    else:\n        print('Could not find video')", "fn_id": 6, "class_fn": false, "repo": "perceptualrobots/pct", "file": "pct/putils.py", "last_update_at": "2021-11-17T14:33:13+00:00", "pred": {"ppl": 2.2519540786743164, "ppl_lower": 2.4080801010131836, "ppl/lowercase_ppl": -1.0825715835707925, "ppl/zlib": 0.0027993045473003533, "Min_5.0% Prob": 8.52755606174469, "Min_10.0% Prob": 6.149846722097958, "Min_20.0% Prob": 3.779142528772354, "Min_30.0% Prob": 2.646741090485683, "Min_40.0% Prob": 2.028144624678121, "Min_50.0% Prob": 1.6181784927545266, "Min_60.0% Prob": 1.356627340374801}}
{"hexsha": "e2638a4bcd52d33f3d9e3b6ccc08e027bf129a22", "ext": "py", "lang": "Python", "content": "def build_random_ts(num_samples, length_of_ts):\n    data = {}\n    labels = []\n    for s in range(0, num_samples):\n        labels.append(np.random.choice([1, 2]))\n    data['y'] = labels\n    for col in range(0, length_of_ts):\n        key = 'feature_' + str(col + 1)\n        values = []\n        for s in range(0, num_samples):\n            values.append(np.random.normal())\n        data[key] = values\n    df = pd.DataFrame.from_dict(data)\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, :1]\n    return (X, y)", "fn_id": 19, "class_fn": false, "repo": "AkashPushkar/dsitributed-time-series", "file": "src/full.py", "last_update_at": "2021-06-18T20:51:28+00:00", "pred": {"ppl": 2.196707010269165, "ppl_lower": 2.353712797164917, "ppl/lowercase_ppl": -1.087723162528311, "ppl/zlib": 0.0031228548631182713, "Min_5.0% Prob": 6.126798682742649, "Min_10.0% Prob": 4.73256606525845, "Min_20.0% Prob": 3.491564177804523, "Min_30.0% Prob": 2.5350539016502873, "Min_40.0% Prob": 1.9542093864745564, "Min_50.0% Prob": 1.5639488999578324, "Min_60.0% Prob": 1.3109791672557867}}
{"hexsha": "a2ffeaa240b71382db18bba9227270f5573e50fb", "ext": "py", "lang": "Python", "content": "@Transform_Wrapper()\ndef Annotate_Script_Names(empty_diffs=0):\n    \"\"\"\n    For every ai script, annotate the pilot entity with the name\n    of the script running.\n    \"\"\"\n    aiscript_files = Load_Files('aiscripts/*.xml')\n    for game_file in aiscript_files:\n        xml_root = game_file.Get_Root()\n        changed = False\n        for tag in ['dock_masstraffic_drone', 'execute_custom_trade', 'execute_trade', 'move_approach_path', 'move_docking', 'move_undocking', 'move_gate', 'move_navmesh', 'move_strafe', 'move_target_points', 'move_waypoints', 'move_to', 'detach_from_masstraffic', 'wait_for_prev_script', 'wait']:\n            nodes = xml_root.xpath('.//{}'.format(tag))\n            if not nodes:\n                continue\n            changed = True\n            if empty_diffs:\n                continue\n            for node in nodes:\n                script_name = etree.Element('set_value', name='this.$script_name', exact=\"'{}'\".format(game_file.name.replace('.xml', '')))\n                node.addprevious(script_name)\n                element_name = etree.Element('set_value', name='this.$element_name', exact=\"'{}'\".format(tag))\n                node.addprevious(element_name)\n                if node.sourceline:\n                    name_line = \"'${} {}'\".format(game_file.name.replace('.xml', ''), node.sourceline)\n                    script_line_node = etree.Element('set_value', name='this.$script_line_name', exact=name_line)\n                    node.addprevious(script_line_node)\n                    record_group = [etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts?\">\\n                              <set_value name=\"this.$script_line_counts\" exact=\"table[]\"/>\\n                            </do_if>'), etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts.{FIELD}?\">\\n                              <set_value name=\"this.$script_line_counts.{FIELD}\" exact=\"0.0\"/>\\n                            </do_if>'.replace('FIELD', name_line)), etree.fromstring('\\n                            <set_value name=\"this.$script_line_counts.{FIELD}\" operation=\"add\"/>'.replace('FIELD', name_line))]\n                    for record_node in record_group:\n                        node.addprevious(record_node)\n        if changed:\n            game_file.Update_Root(xml_root)\n    return", "fn_id": 1, "class_fn": false, "repo": "abouquet/x4-projects", "file": "extensions/sn_measure_perf/Customizer_Script.py", "last_update_at": "2021-03-17T13:54:15+00:00", "pred": {"ppl": 3.202313184738159, "ppl_lower": 3.2683608531951904, "ppl/lowercase_ppl": -1.0175407152301783, "ppl/zlib": 0.0015664514386157632, "Min_5.0% Prob": 8.953158098108629, "Min_10.0% Prob": 7.228411674499512, "Min_20.0% Prob": 4.918842287829323, "Min_30.0% Prob": 3.6788891463744933, "Min_40.0% Prob": 2.8641081850459105, "Min_50.0% Prob": 2.3156745798299334, "Min_60.0% Prob": 1.9395612791506913}}
{"hexsha": "b2384578a7677f29cd7e0fe11a8a0c2097dd4658", "ext": "py", "lang": "Python", "content": "def export_result(request, uid):\n    if request.method == 'GET':\n        data = request.GET.get('data')\n        img = request.GET.get('image')\n        gif = request.GET.get('gif')\n        if data == '1':\n            data = True\n        else:\n            data = False\n        if img == '1':\n            img = True\n        else:\n            img = False\n        if gif == '1':\n            gif = True\n        else:\n            gif = False\n        work = Work(uid)\n        zip_path, file_name = work.export(data, img, gif)\n        response = StreamingHttpResponse(Tools.file_iterator(zip_path))\n        response['Content-Type'] = 'application/octet-stream'\n        response['Content-Disposition'] = 'attachment; filename={0}'.format(file_name)\n        response['Access-Control-Expose-Headers'] = 'Content-Disposition'\n        return response", "fn_id": 3, "class_fn": false, "repo": "Mr-Gump/Bamboo-Web", "file": "src/BambooReConstruct/BackEnd/views.py", "last_update_at": "2021-07-03T09:36:27+00:00", "pred": {"ppl": 1.9758472442626953, "ppl_lower": 2.381614923477173, "ppl/lowercase_ppl": -1.2742764304295056, "ppl/zlib": 0.002002933208242282, "Min_5.0% Prob": 7.273884892463684, "Min_10.0% Prob": 5.042454332113266, "Min_20.0% Prob": 3.1630727971593537, "Min_30.0% Prob": 2.223205886160334, "Min_40.0% Prob": 1.6918967009987682, "Min_50.0% Prob": 1.3591547481405237, "Min_60.0% Prob": 1.1340871506383539}}
{"hexsha": "521ca7e8f2b91498b1cecc645438b8f39926f276", "ext": "py", "lang": "Python", "content": "def test_haversine():\n    \"\"\"\n    TODO...\n    \"\"\"\n    pass", "fn_id": 1, "class_fn": false, "repo": "peterprescott/optimize-nn", "file": "tests/test_given.py", "last_update_at": "2021-10-12T04:46:20+00:00", "pred": {"ppl": 10.394139289855957, "ppl_lower": 10.90185546875, "ppl/lowercase_ppl": -1.0203699068113168, "ppl/zlib": 0.04682484234966353, "Min_5.0% Prob": 9.726016998291016, "Min_10.0% Prob": 9.586297035217285, "Min_20.0% Prob": 8.831389427185059, "Min_30.0% Prob": 7.039441704750061, "Min_40.0% Prob": 5.523402340710163, "Min_50.0% Prob": 4.582918018102646, "Min_60.0% Prob": 3.858829798797766}}
{"hexsha": "aa06ab4636c128273f66fb5d6c82aabd460f2220", "ext": "py", "lang": "Python", "content": "@mock.patch('six.moves.builtins.super')\ndef test_algosec_servers_http_adapter(mock_super, mocker):\n    adapter = AlgoSecServersHTTPAdapter()\n    adapter.send()\n    assert super.return_value.send.call_args == mocker.call(timeout=(AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_CONNECT_TIMEOUT, AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_READ_TIMEOUT))\n    assert mock_super(AlgoSecServersHTTPAdapter, adapter).calls[0]", "fn_id": 0, "class_fn": false, "repo": "chanilurya/algosec-python", "file": "tests/test_helpers.py", "last_update_at": "2021-09-25T13:15:19+00:00", "pred": {"ppl": 3.7334628105163574, "ppl_lower": 4.420037746429443, "ppl/lowercase_ppl": -1.1281465349088817, "ppl/zlib": 0.005752559696156611, "Min_5.0% Prob": 9.080435480390276, "Min_10.0% Prob": 7.62654049055917, "Min_20.0% Prob": 5.262719486440931, "Min_30.0% Prob": 4.006654063860576, "Min_40.0% Prob": 3.1986774557403157, "Min_50.0% Prob": 2.622198690899781, "Min_60.0% Prob": 2.204177824336858}}
{"hexsha": "1ac41f241705a181f54bcd99f611ca86824ed455", "ext": "py", "lang": "Python", "content": "def Hosts_Ping(context, nameSpace, className, methodName, instanceName, parameters):\n    be = BookEnd('Hosts_Ping')\n    outParams = context.NewParameters('Hosts', 'Ping')\n    outParams.SetValue('MIReturn', MI_Uint64(123))\n    context.PostInstance(outParams)\n    context.PostResult(MI_RESULT_OK)", "fn_id": 5, "class_fn": false, "repo": "Bhaskers-Blu-Org2/omi-script-provider", "file": "samples/hosts/_mi_main.py", "last_update_at": "2021-04-20T16:09:19+00:00", "pred": {"ppl": 6.415866851806641, "ppl_lower": 12.224035263061523, "ppl/lowercase_ppl": -1.3468038386984416, "ppl/zlib": 0.009731801664005101, "Min_5.0% Prob": 10.81182599067688, "Min_10.0% Prob": 9.313123650021023, "Min_20.0% Prob": 6.932419877303274, "Min_30.0% Prob": 5.454971699879088, "Min_40.0% Prob": 4.440576712290446, "Min_50.0% Prob": 3.666578033748938, "Min_60.0% Prob": 3.0910716809458654}}
{"hexsha": "73401fdbf7f3329cc097f204980f1eaf451bd20d", "ext": "py", "lang": "Python", "content": "def updateStateByKey(ssc):\n\n    def processStateUpdateByKey(input_stream, state):\n        print('i', input_stream)\n        print('s', state)\n        return state if not input_stream else input_stream[-1]\n    ssc.checkpoint('checkpoints/')\n    ssc.queueStream([[('a', 1), ('b', 3)], [('a', 2), ('a', 5), ('c', 4)]]).updateStateByKey(processStateUpdateByKey).pprint()", "fn_id": 0, "class_fn": false, "repo": "svaningelgem/pyspark_fast_tester", "file": "src/main/scripts/pyspark_streaming.py", "last_update_at": "2021-08-02T13:59:46+00:00", "pred": {"ppl": 4.31706428527832, "ppl_lower": 5.195830345153809, "ppl/lowercase_ppl": -1.126681204446703, "ppl/zlib": 0.007617581289869983, "Min_5.0% Prob": 7.095473051071167, "Min_10.0% Prob": 6.146852731704712, "Min_20.0% Prob": 4.807931652069092, "Min_30.0% Prob": 3.967116537847017, "Min_40.0% Prob": 3.371408731329675, "Min_50.0% Prob": 2.83633842272684, "Min_60.0% Prob": 2.4361384560010935}}
{"hexsha": "00cef5ab0b6c71719e9da7da7a1b9a6407ebc5d7", "ext": "py", "lang": "Python", "content": "def main():\n    N = 7\n    M = 10\n    key = gfdb.Management.retrieval.Retrieve.create_key(N, M)\n    print('key: ' + key)\n    r_configuration = 'rectangle'\n    r = gfdb.Management.retrieval.Retrieve(r_configuration)\n    library_boundaries = r.query_database()\n    r_data = r.retrieve(N, M)\n    print(r_data)\n    r_level = r.levels[r_configuration]\n    L_configuration = 'L'\n    L = gfdb.Management.retrieval.Retrieve(L_configuration)\n    library_boundaries = L.query_database()\n    L_data = L.retrieve(N, M)\n    print(L_data)\n    LopU_configuration = 'LopU'\n    LopU = gfdb.Management.retrieval.Retrieve(LopU_configuration)\n    LopU_data = LopU.retrieve(N, M)\n    print(LopU_data)\n    U_configuration = 'U'\n    U = gfdb.Management.retrieval.Retrieve(U_configuration)\n    U_data = U.retrieve(N, M)\n    print(U_data)\n    c_configuration = 'C'\n    c = gfdb.Management.retrieval.Retrieve(c_configuration)\n    library_boundaries = c.query_database()\n    c_data = c.retrieve(N, M)\n    print(c_data)\n    Open_configuration = 'Open'\n    Open = gfdb.Management.retrieval.Retrieve(Open_configuration)\n    Open_data = Open.retrieve(N, M)\n    print(Open_data)\n    zoned_configuration = 'zoned'\n    zoned = gfdb.Management.retrieval.Retrieve(zoned_configuration)\n    zoned_data = zoned.retrieve(N, M)\n    print(zoned_data)", "fn_id": 0, "class_fn": false, "repo": "j-c-cook/gFunctionDatabase", "file": "gFunctionDatabase/Management/examples/retreive.py", "last_update_at": "2021-03-13T11:23:49+00:00", "pred": {"ppl": 1.9670227766036987, "ppl_lower": 1.928529977798462, "ppl/lowercase_ppl": -0.9707872008867486, "ppl/zlib": 0.002062564386284124, "Min_5.0% Prob": 8.111776790618897, "Min_10.0% Prob": 5.538841327031453, "Min_20.0% Prob": 3.257114650864227, "Min_30.0% Prob": 2.2489167662227856, "Min_40.0% Prob": 1.6881125446590708, "Min_50.0% Prob": 1.3539908593538712, "Min_60.0% Prob": 1.1298124181123372}}
{"hexsha": "e357f5174eb4389ae8c75eadb4fb65ed5718efd2", "ext": "py", "lang": "Python", "content": "def initialize_routes(api, limiter):\n    RegisterApi.decorators = [limiter.limit('10/hour', methods=['POST'])]\n    LoginApi.decorators = [limiter.limit('30/minute', methods=['POST'])]\n    PasswordChangeApi.decorators = [limiter.limit('5/day', methods=['POST'])]\n    CaffSearchApi.decorators = [limiter.limit('1/second', methods=['GET'])]\n    CaffDownloadApi.decorators = [limiter.limit('10/minute', methods=['GET'])]\n    CaffUploadApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    CommentApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    UserDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    CaffDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    api.add_resource(RegisterApi, '/user/register')\n    api.add_resource(LoginApi, '/user/login')\n    api.add_resource(LogoutApi, '/user/logout')\n    api.add_resource(PasswordChangeApi, '/user/password')\n    api.add_resource(UsersListApi, '/user/')\n    api.add_resource(UserDataApi, '/user/<username>')\n    api.add_resource(CaffDataApi, '/caff/<caff_id>')\n    api.add_resource(CaffSearchApi, '/caff/search')\n    api.add_resource(CaffUploadApi, '/caff/upload')\n    api.add_resource(CaffDownloadApi, '/caff/download/<caff_id>')\n    api.add_resource(CommentApi, '/comment')", "fn_id": 0, "class_fn": false, "repo": "nemkrisz11/Computer-Security-Homework-2021-SHAjt", "file": "Backend/flaskapp/resources/routes.py", "last_update_at": "2021-12-03T09:58:04+00:00", "pred": {"ppl": 1.6639933586120605, "ppl_lower": 1.7326087951660156, "ppl/lowercase_ppl": -1.0793524757554365, "ppl/zlib": 0.0014632768711848802, "Min_5.0% Prob": 6.0774924104863945, "Min_10.0% Prob": 4.216284995608859, "Min_20.0% Prob": 2.459302598303491, "Min_30.0% Prob": 1.6865413506535718, "Min_40.0% Prob": 1.2726803465843037, "Min_50.0% Prob": 1.019287506669483, "Min_60.0% Prob": 0.8494784296676516}}
{"hexsha": "fe661c2264845a793c67f4141a080dbf2325c8ac", "ext": "py", "lang": "Python", "content": "def get_significance_matrix(df):\n    \"\"\"\n    returns matrix in which item[y,x] is test of whether y-x is center around zero\n    \"\"\"\n    return df.apply(lambda x: df.apply(lambda y: wilcox_test(x, y)))", "fn_id": 4, "class_fn": false, "repo": "nweir127/COD3S", "file": "src/utils/metrics.py", "last_update_at": "2021-12-10T16:33:52+00:00", "pred": {"ppl": 9.72463321685791, "ppl_lower": 9.72463321685791, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01590672848463688, "Min_5.0% Prob": 10.72382895151774, "Min_10.0% Prob": 9.287216583887735, "Min_20.0% Prob": 7.0218514662522535, "Min_30.0% Prob": 5.802279913425446, "Min_40.0% Prob": 5.0491599303025465, "Min_50.0% Prob": 4.300512288555955, "Min_60.0% Prob": 3.6877973854541777}}
{"hexsha": "4aa6ab3efd6286da2d8af7db8b33a3b6c6534a0f", "ext": "py", "lang": "Python", "content": "def test_object_beside_object():\n    ball = situation_object(BALL)\n    table = situation_object(TABLE)\n    situation = HighLevelSemanticsSituation(ontology=GAILA_PHASE_1_ONTOLOGY, salient_objects=[ball, table], always_relations=[Relation(IN_REGION, ball, Region(table, distance=PROXIMAL, direction=Direction(positive=True, relative_to_axis=HorizontalAxisOfObject(table, index=0))))])\n    assert generated_tokens(situation) == ('a', 'ball', 'beside', 'a', 'table')", "fn_id": 37, "class_fn": false, "repo": "Tubbz-alt/adam", "file": "tests/language_specific/english/test_english_language_generator.py", "last_update_at": "2021-04-26T23:59:57+00:00", "pred": {"ppl": 8.110881805419922, "ppl_lower": 12.122037887573242, "ppl/lowercase_ppl": -1.191963142850257, "ppl/zlib": 0.00709561556897588, "Min_5.0% Prob": 11.39136518750872, "Min_10.0% Prob": 9.690238189697265, "Min_20.0% Prob": 7.54488566716512, "Min_30.0% Prob": 6.004378742641872, "Min_40.0% Prob": 4.871465116739273, "Min_50.0% Prob": 4.061004360516866, "Min_60.0% Prob": 3.453871331612269}}
{"hexsha": "4fc83d3fdc1d39e0640dd521e048db83a30a09cb", "ext": "py", "lang": "Python", "content": "@task\ndef prepare_python_packages():\n    local('mkdir -p {local_python_packages_dir}'.format(**env))\n    local('cp {local_project_root}/requirements.txt {local_python_packages_dir}/'.format(**env))\n    existing_files = set((filenameToRequirement(filename) for filename in os.listdir(env.local_python_packages_dir)))\n    missing_requirements = tempfile.NamedTemporaryFile()\n    for raw_line in open(os.path.join(env.local_project_root, 'requirements.txt')):\n        line = raw_line.strip()\n        if not line or line.startswith('#') or line not in existing_files:\n            missing_requirements.write(raw_line)\n    missing_requirements.flush()\n    local('pip install --no-use-wheel -d {env.local_python_packages_dir} --exists-action=i -r {missing_requirements_file}'.format(env=env, missing_requirements_file=missing_requirements.name))\n    missing_requirements.close()", "fn_id": 8, "class_fn": false, "repo": "jsavikko/futurice-ldap-user-manager", "file": "fabfile.py", "last_update_at": "2021-05-06T07:57:56+00:00", "pred": {"ppl": 2.3545620441436768, "ppl_lower": 2.5341997146606445, "ppl/lowercase_ppl": -1.0858559514568757, "ppl/zlib": 0.002352622916641777, "Min_5.0% Prob": 8.204623185671293, "Min_10.0% Prob": 6.0220345717210035, "Min_20.0% Prob": 3.875800314939247, "Min_30.0% Prob": 2.780497233569622, "Min_40.0% Prob": 2.1250525209530493, "Min_50.0% Prob": 1.707507345630829, "Min_60.0% Prob": 1.4330091393028852}}
{"hexsha": "073a2f50e72052b77841f9cbe00704769b1c08c3", "ext": "py", "lang": "Python", "content": "def predict(pdb_file: Path) -> float:\n    \"\"\"\n    The function that puts it all together: parsing the PDB file, generating\n    features from it and performing inference with the ML model.\n    \"\"\"\n    parser = PDBParser()\n    structure = parser.get_structure(pdb_file.stem, pdb_file)\n    features = featurize(structure)\n    predicted_solubility = ml_inference(features)\n    return predicted_solubility", "fn_id": 0, "class_fn": false, "repo": "krmstrong322/cbh21-protein-solubility-challenge", "file": "predict.py", "last_update_at": "2021-05-03T20:23:32+00:00", "pred": {"ppl": 3.4866185188293457, "ppl_lower": 4.277228355407715, "ppl/lowercase_ppl": -1.1636380519815017, "ppl/zlib": 0.005406633596286395, "Min_5.0% Prob": 7.6670129776000975, "Min_10.0% Prob": 5.998170549219305, "Min_20.0% Prob": 4.7812723246487705, "Min_30.0% Prob": 3.742048789473141, "Min_40.0% Prob": 3.011122577720218, "Min_50.0% Prob": 2.450227778208883, "Min_60.0% Prob": 2.0789429833564688}}
{"hexsha": "6a51a788efc3cd04bcda0ebddae5641c0b5fd64a", "ext": "py", "lang": "Python", "content": "def AdvSrch_Type_f(AdvSrch_Type):\n    if AdvSrch_Type == 'Computer':\n        return ('advancedcomputersearches', 'advanced_computer_search', 'computers')\n    if AdvSrch_Type == 'Mobile':\n        return ('advancedmobiledevicesearches', 'advanced_mobile_device_search', 'mobile_devices')\n    else:\n        print('Failed to set AdvSrch_Type properly.\\rPlease uncomment AdvSrch_Type = \"Computer\" or AdvSrch_Type = \"Mobile\"')", "fn_id": 0, "class_fn": false, "repo": "distorted-fields/jamf-to-google-reporting", "file": "jamf-to-google.py", "last_update_at": "2021-11-29T16:15:17+00:00", "pred": {"ppl": 3.5086987018585205, "ppl_lower": 3.9374516010284424, "ppl/lowercase_ppl": -1.0918453869639153, "ppl/zlib": 0.006641509145636953, "Min_5.0% Prob": 8.844820635659355, "Min_10.0% Prob": 7.045475959777832, "Min_20.0% Prob": 5.256966097014291, "Min_30.0% Prob": 3.999973468837284, "Min_40.0% Prob": 3.078868250052134, "Min_50.0% Prob": 2.5114512162309297, "Min_60.0% Prob": 2.107850659594816}}
{"hexsha": "35daad5aecd0ac3a78c0c2339cbf51e0014f3f74", "ext": "py", "lang": "Python", "content": "def Predict(Phi, b, mu, s, t, r, outd):\n    print(t, '--t')\n    dt = t[1] - t[0]\n    tmin = min(t)\n    tmax = max(t)\n    t2 = np.linspace(tmin, tmax, num_pred)\n    Psi = np.zeros([r, len(t2)], dtype='complex')\n    for i, _x in enumerate(t2):\n        print(_x, '_x')\n        print(b, 'b')\n        print(i)\n        print(shape(Psi))\n        Psi[:, i] = multiply(power(mu, _x / dt), b)\n    D2 = dot(Phi, Psi)\n    sigmaps = []\n    tps = []\n    for i in range(len(D2[0, :])):\n        print(str(i) + '--predicted...' + str(t2[i]))\n        F = D2[:, i]\n        if i == 0:\n            F0 = average(F)\n        eps = t2[i]\n        sigma = MakeImagePred(F - F0, i, s, eps, outd)\n        tps.append(t2[i])\n        sigmaps.append(sigma + eps)\n    return (tps, sigmaps)", "fn_id": 10, "class_fn": false, "repo": "PapStatMechMat/SeaPy", "file": "RunSEAmodes.py", "last_update_at": "2021-05-26T05:16:05+00:00", "pred": {"ppl": 4.33004903793335, "ppl_lower": 4.203988552093506, "ppl/lowercase_ppl": -0.9798406364483243, "ppl/zlib": 0.003806698356124901, "Min_5.0% Prob": 9.04250356554985, "Min_10.0% Prob": 7.473844483494759, "Min_20.0% Prob": 5.6270993012648365, "Min_30.0% Prob": 4.39067328097869, "Min_40.0% Prob": 3.491502320038453, "Min_50.0% Prob": 2.8685036241644766, "Min_60.0% Prob": 2.4319967670100078}}
{"hexsha": "70f2b74641e7867f742d38f95ce15e96044fc424", "ext": "py", "lang": "Python", "content": "def _predict(X_, theta_, model_):\n    n = X_.shape[0]\n    t_init = time()\n    Z_hat_ = _predict_proba(X_, model_)\n    W_hat_ = _classify(Z_hat_, prob=theta_[0], invert_label=model_[-1])\n    tm = time() - t_init\n    return (W_hat_, tm)", "fn_id": 2, "class_fn": false, "repo": "gterren/cloud_segmentation", "file": "GDA_segm.py", "last_update_at": "2021-11-18T07:50:33+00:00", "pred": {"ppl": 5.420875072479248, "ppl_lower": 5.365677833557129, "ppl/lowercase_ppl": -0.9939449789976728, "ppl/zlib": 0.01090488551552549, "Min_5.0% Prob": 8.172520756721497, "Min_10.0% Prob": 7.110783365037706, "Min_20.0% Prob": 5.778752201481869, "Min_30.0% Prob": 4.765509412206453, "Min_40.0% Prob": 3.9180151468668227, "Min_50.0% Prob": 3.275455558786587, "Min_60.0% Prob": 2.8159499630845826}}
{"hexsha": "0e47d06b09a13065c0203d222fb5c4959d610194", "ext": "py", "lang": "Python", "content": "def checkIfRange(request, response):\n    \"\"\"Checks for the If-Range header, and if it exists, checks if the\n    test passes. Returns true if the server should return partial data.\"\"\"\n    ifrange = request.headers.getHeader('if-range')\n    if ifrange is None:\n        return True\n    if isinstance(ifrange, http_headers.ETag):\n        return ifrange.match(response.headers.getHeader('etag'), strongCompare=True)\n    else:\n        return ifrange == response.headers.getHeader('last-modified')", "fn_id": 4, "class_fn": false, "repo": "twonds/twisted", "file": "twisted/web2/http.py", "last_update_at": "2021-01-27T19:11:21+00:00", "pred": {"ppl": 3.662369966506958, "ppl_lower": 4.513856887817383, "ppl/lowercase_ppl": -1.1610352192777764, "ppl/zlib": 0.00499273257572115, "Min_5.0% Prob": 8.086582978566488, "Min_10.0% Prob": 6.7800080592815695, "Min_20.0% Prob": 4.847387684716119, "Min_30.0% Prob": 3.810598963499069, "Min_40.0% Prob": 3.0595788337566234, "Min_50.0% Prob": 2.560248994115573, "Min_60.0% Prob": 2.1451276955597196}}
{"hexsha": "68c4a5c1dfedd1f00d406e741e54edfced34cff1", "ext": "py", "lang": "Python", "content": "def user_info_strlist(user: telegram.User) -> list[str]:\n    keys = ['User ID', 'First Name', 'Last Name', 'User Name', 'Language Code']\n    values = [user.id, user.first_name, user.last_name, user.username, user.language_code]\n    return combine_no_none(keys, values)", "fn_id": 5, "class_fn": false, "repo": "punch-dango/telegram-bot", "file": "dango_bot.py", "last_update_at": "2021-06-15T11:47:09+00:00", "pred": {"ppl": 3.333638906478882, "ppl_lower": 3.518235445022583, "ppl/lowercase_ppl": -1.0447609734152548, "ppl/zlib": 0.006959910243167541, "Min_5.0% Prob": 10.173154592514038, "Min_10.0% Prob": 8.475074172019958, "Min_20.0% Prob": 5.451448398477891, "Min_30.0% Prob": 3.8718329071998596, "Min_40.0% Prob": 2.9697615904467445, "Min_50.0% Prob": 2.388222661885348, "Min_60.0% Prob": 2.0299410270527005}}
{"hexsha": "039644328490858f1aa80d268898976f6bf2523f", "ext": "py", "lang": "Python", "content": "def deploy():\n    execute(checkout)\n    execute(dependencies)\n    execute(make_current)\n    execute(restart)\n    execute(cleanup)", "fn_id": 1, "class_fn": false, "repo": "anupam123148/shaaaaaaaaaaaaa", "file": "fabfile.py", "last_update_at": "2021-04-24T16:37:31+00:00", "pred": {"ppl": 6.1356120109558105, "ppl_lower": 6.1356120109558105, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.022123290615542173, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 8.570302327473959, "Min_20.0% Prob": 7.036557129451206, "Min_30.0% Prob": 5.549463976513255, "Min_40.0% Prob": 4.3446513414382935, "Min_50.0% Prob": 3.5470380187034607, "Min_60.0% Prob": 3.098825542086905}}
{"hexsha": "d7d328944b6c85472fc3b3a7461b51d1e20de3b9", "ext": "py", "lang": "Python", "content": "def punctuation_count(documents: list) -> int:\n    \"\"\"Count number of punctuation characters in a list of textual documents\n\n    Keyword arguments:\n    documents -- the list of textual documents.\n    \"\"\"\n    __check_documents_param(documents)\n    char_cnt = char_count(documents, ignore_spaces=True)\n    char_wo_punctuation = letter_count(documents, ignore_spaces=True, ignore_digits=False)\n    return char_cnt - char_wo_punctuation", "fn_id": 4, "class_fn": false, "repo": "Perevalov/language_features", "file": "linguaf/descriptive_statistics.py", "last_update_at": "2021-09-21T00:47:55+00:00", "pred": {"ppl": 3.7512354850769043, "ppl_lower": 4.2907843589782715, "ppl/lowercase_ppl": -1.1016457162967586, "ppl/zlib": 0.006356179078887406, "Min_5.0% Prob": 9.212679862976074, "Min_10.0% Prob": 7.224643853994516, "Min_20.0% Prob": 5.364603409400353, "Min_30.0% Prob": 4.041860264081222, "Min_40.0% Prob": 3.199473432623423, "Min_50.0% Prob": 2.6185837365113773, "Min_60.0% Prob": 2.204776458728772}}
{"hexsha": "8e9b1c035fd0fe23e9e05c70dd0f5fd3d8067103", "ext": "py", "lang": "Python", "content": "def _read_version_file():\n    \"\"\"\n    Attempt to read the `version.py` file from the top level package.\n    \"\"\"\n    version_file = configuration.version_path()\n    logging.info(\"Attempting to open '%s' and read the current version.\", version_file)\n    loader = importlib.machinery.SourceFileLoader('version_module', version_file)\n    spec = importlib.util.spec_from_loader('version_module', loader)\n    version_module = importlib.util.module_from_spec(spec)\n    try:\n        loader.exec_module(version_module)\n        logging.info(\"Version file found. Using version '%s' found within.\", version_module.__version__)\n        return version_module.__version__\n    except FileNotFoundError:\n        logging.warning(\"Version file was not found at '%s'. Attempting to determine version another way.\", version_file)\n    except AttributeError as err:\n        logging.error(err)\n        logging.warning(\"Version file was found at '%s', however it did not contain the variable __version__. Attempting to determine version another way.\", version_file)\n    return None", "fn_id": 3, "class_fn": false, "repo": "timepieces141/dynamic-versioning", "file": "src/dynamic_versioning/utils.py", "last_update_at": "2021-10-20T21:33:32+00:00", "pred": {"ppl": 2.337827205657959, "ppl_lower": 2.950155735015869, "ppl/lowercase_ppl": -1.2739401709286293, "ppl/zlib": 0.0020413989264769653, "Min_5.0% Prob": 6.646389997922457, "Min_10.0% Prob": 5.149098811326204, "Min_20.0% Prob": 3.4845700589093296, "Min_30.0% Prob": 2.6423623634547724, "Min_40.0% Prob": 2.0782952945340765, "Min_50.0% Prob": 1.6961973480825876, "Min_60.0% Prob": 1.4136689318400442}}
{"hexsha": "ac9620fc76910d66d5eadf9c78f39e41ea6edc77", "ext": "py", "lang": "Python", "content": "def plot_14(id, query):\n    if 'category__in' in query:\n        del query['category__in']\n    query['category'] = 'B'\n    data = data_plot_groupby_category(query, values=['category', 'cloud'], sum_param='jobdefcount', label_cols=['cloud'], label_translation=False)\n    colors = prepare_colors_for_piechart(data)\n    title = PLOT_TITLES['title' + id]\n    unit = PLOT_UNITS[id]\n    return (data, colors, title, unit)", "fn_id": 16, "class_fn": false, "repo": "PanDAWMS/panda-bigmon-core-new", "file": "core/pbm/utils.py", "last_update_at": "2021-11-18T04:57:18+00:00", "pred": {"ppl": 8.431618690490723, "ppl_lower": 9.243203163146973, "ppl/lowercase_ppl": -1.0431051610268254, "ppl/zlib": 0.008527955076241912, "Min_5.0% Prob": 9.39360509599958, "Min_10.0% Prob": 8.318106072289604, "Min_20.0% Prob": 6.936518720218113, "Min_30.0% Prob": 5.783260112717038, "Min_40.0% Prob": 4.813335446374757, "Min_50.0% Prob": 4.094443877254213, "Min_60.0% Prob": 3.4937580043361303}}
{"hexsha": "8502057a4b3bf916aba610da48747e7b8d5604e4", "ext": "py", "lang": "Python", "content": "def load_data():\n    moon_data = np.load('moon_data.npz')\n    x_s = moon_data['x_s']\n    y_s = moon_data['y_s']\n    x_t = moon_data['x_t']\n    return (torch.from_numpy(x_s).float(), torch.from_numpy(y_s).float(), torch.from_numpy(x_t).float())", "fn_id": 2, "class_fn": false, "repo": "krumo/swd_pytorch", "file": "swd_pytorch.py", "last_update_at": "2021-11-09T07:08:23+00:00", "pred": {"ppl": 2.013225793838501, "ppl_lower": 2.013225793838501, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00559790646556544, "Min_5.0% Prob": 8.239452075958251, "Min_10.0% Prob": 5.680493426322937, "Min_20.0% Prob": 3.285337805747986, "Min_30.0% Prob": 2.2920680241659284, "Min_40.0% Prob": 1.7385633690066116, "Min_50.0% Prob": 1.3961553116225534, "Min_60.0% Prob": 1.180061498627765}}
{"hexsha": "85d7907789cbbb8ce6e2019eb09711694ee29577", "ext": "py", "lang": "Python", "content": "def test_main():\n\n    def cmd(*args, **kwargs):\n        try:\n            main.callback(*args, **kwargs)\n            return 0\n        except SystemExit as e:\n            return e.code\n    inpath = 'examples/test.py'\n    outpath = 'examples/test.xml'\n    assert cmd(inpath, outpath, verbose=True, string=True) == 0\n    assert cmd(inpath, outpath, help=True) == 0\n    assert cmd(inpath, outpath, reload=True) == 0\n    assert cmd(inpath, outpath, version=True) == 0\n    assert cmd(inpath, outpath, list_peripherals=True) == 0", "fn_id": 0, "class_fn": false, "repo": "loggerhead/Easy-Karabiner", "file": "tests/test_main.py", "last_update_at": "2021-05-26T00:28:59+00:00", "pred": {"ppl": 2.6289360523223877, "ppl_lower": 2.9394357204437256, "ppl/lowercase_ppl": -1.1154984579925284, "ppl/zlib": 0.004537930617356542, "Min_5.0% Prob": 8.403361320495605, "Min_10.0% Prob": 6.471049827687881, "Min_20.0% Prob": 4.3925173738423515, "Min_30.0% Prob": 3.134380534583447, "Min_40.0% Prob": 2.3769836255173753, "Min_50.0% Prob": 1.9265471851929676, "Min_60.0% Prob": 1.616113564740975}}
{"hexsha": "dbdac17e96cf66994ed82d897eac1d43424c6c6f", "ext": "py", "lang": "Python", "content": "def collect_bstock(pop, sp_idcs, farm_idx):\n    \"\"\"Migrate marked broodstock from source subpopulation\n    to farm subpopulation.\"\"\"\n    for sp_idx in sp_idcs:\n        for ind in pop.individuals([sp_idx]):\n            if ind.broodstock == 1:\n                ind.migrate_to = farm_idx\n            else:\n                ind.migrate_to = sp_idx\n    sim.migrate(pop, mode=sim.BY_IND_INFO)", "fn_id": 12, "class_fn": false, "repo": "nwfsc-cb/shellfish-genetic-risks", "file": "inst/GRs.py", "last_update_at": "2021-09-14T05:30:49+00:00", "pred": {"ppl": 7.027915954589844, "ppl_lower": 7.348033428192139, "ppl/lowercase_ppl": -1.0228435964076292, "ppl/zlib": 0.009605370500496506, "Min_5.0% Prob": 10.311230500539144, "Min_10.0% Prob": 9.397462209065756, "Min_20.0% Prob": 7.238513793945312, "Min_30.0% Prob": 5.6701225230568335, "Min_40.0% Prob": 4.63204814639746, "Min_50.0% Prob": 3.8087807008996606, "Min_60.0% Prob": 3.253148468113259}}
{"hexsha": "b85923ab8b9e16da8df9357a1215d9b3530c1988", "ext": "py", "lang": "Python", "content": "def detect(image):\n    detector = dlib.get_frontal_face_detector()\n    img_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    rects = detector(img_gray, 0)\n    return rects", "fn_id": 1, "class_fn": false, "repo": "ForrestPi/FaceProjects", "file": "facialLandmarker/pfld/algin_dlib.py", "last_update_at": "2021-06-22T06:21:29+00:00", "pred": {"ppl": 1.903444766998291, "ppl_lower": 2.464364528656006, "ppl/lowercase_ppl": -1.4012468976666081, "ppl/zlib": 0.005028634998984888, "Min_5.0% Prob": 7.117338498433431, "Min_10.0% Prob": 5.080795685450236, "Min_20.0% Prob": 3.2098390826812158, "Min_30.0% Prob": 2.1804294377565383, "Min_40.0% Prob": 1.6354848743864783, "Min_50.0% Prob": 1.304062640732702, "Min_60.0% Prob": 1.0828589787933884}}
{"hexsha": "b36f29adbca75035b8a5747f2e0405b7dd6b8caf", "ext": "py", "lang": "Python", "content": "def roll20(querry=None):\n    \"\"\"\n    Searches roll20.net for a querry and opens the search in a webbrowser.\n    :param querry: String to search for.  If none is provided, asks the user.\n    :return: None\n    \"\"\"\n    if querry is None:\n        querry = simpledialog.askstring('Search Roll20', 'Search Roll20.net for:')\n    if querry is not None:\n        url = 'https://roll20.net/compendium/dnd5e/searchbook/?terms=' + querry\n        webbrowser.open(url)", "fn_id": 1, "class_fn": false, "repo": "spudhunter/DnD-Combat-Manager", "file": "CombatManager.py", "last_update_at": "2021-01-20T05:11:23+00:00", "pred": {"ppl": 3.052565097808838, "ppl_lower": 3.3558578491210938, "ppl/lowercase_ppl": -1.084880541239434, "ppl/zlib": 0.004410997046793782, "Min_5.0% Prob": 8.809988226209368, "Min_10.0% Prob": 6.48717033068339, "Min_20.0% Prob": 4.357091041405996, "Min_30.0% Prob": 3.314255085256365, "Min_40.0% Prob": 2.6582970798015593, "Min_50.0% Prob": 2.2017249397436776, "Min_60.0% Prob": 1.8592491389148764}}
{"hexsha": "31a0f40f5b3b73886fe6be3847e4043e0c0b0471", "ext": "py", "lang": "Python", "content": "def checkEntries(DataSetFile, preprocess=lambda x: x, dataType='jpg'):\n    dataset = wds.WebDataset(DataSetFile)\n    itemsTouched = 0\n    for element in dataset:\n        print(element['__key__'])\n        preprocess(element[dataType])\n        tmp = element[0]\n        if not tmp == None:\n            itemsTouched += 1\n    return itemsTouched", "fn_id": 8, "class_fn": false, "repo": "AaltoRSE/ImageNetTools", "file": "ImageNetTools/IOTesters.py", "last_update_at": "2021-11-15T11:21:55+00:00", "pred": {"ppl": 5.827385902404785, "ppl_lower": 6.488278865814209, "ppl/lowercase_ppl": -1.0609501329100606, "ppl/zlib": 0.009132479339736698, "Min_5.0% Prob": 10.64566879272461, "Min_10.0% Prob": 8.976159048080444, "Min_20.0% Prob": 6.810142254829406, "Min_30.0% Prob": 5.246699178218842, "Min_40.0% Prob": 4.182517811655998, "Min_50.0% Prob": 3.436002041697502, "Min_60.0% Prob": 2.9060722060501574}}
{"hexsha": "db491fb88dce762693e7f13205150b53101924e2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize(['augmentation_cls', 'params'], get_dual_transforms(custom_arguments={A.Crop: {'y_min': 0, 'y_max': 10, 'x_min': 0, 'x_max': 10}, A.CenterCrop: {'height': 10, 'width': 10}, A.CropNonEmptyMaskIfExists: {'height': 10, 'width': 10}, A.RandomCrop: {'height': 10, 'width': 10}, A.RandomResizedCrop: {'height': 10, 'width': 10}, A.RandomSizedCrop: {'min_max_height': (4, 8), 'height': 10, 'width': 10}, A.CropAndPad: {'px': 10}, A.Resize: {'height': 10, 'width': 10}}, except_augmentations={A.RandomCropNearBBox, A.RandomSizedBBoxSafeCrop}))\ndef test_dual_augmentations(augmentation_cls, params, image, mask):\n    aug = augmentation_cls(p=1, **params)\n    data = aug(image=image, mask=mask)\n    assert data['image'].dtype == np.uint8\n    assert data['mask'].dtype == np.uint8", "fn_id": 2, "class_fn": false, "repo": "rayxke/albumentations", "file": "tests/test_augmentations.py", "last_update_at": "2021-08-25T08:41:00+00:00", "pred": {"ppl": 1.7231202125549316, "ppl_lower": 2.2909562587738037, "ppl/lowercase_ppl": -1.523457751367509, "ppl/zlib": 0.0015772078969323014, "Min_5.0% Prob": 5.938613787293434, "Min_10.0% Prob": 3.945583054513642, "Min_20.0% Prob": 2.4592607409665077, "Min_30.0% Prob": 1.7501336070895195, "Min_40.0% Prob": 1.348628485617333, "Min_50.0% Prob": 1.0834224555909098, "Min_60.0% Prob": 0.9071847519977019}}
{"hexsha": "1b67a7d9d4167a9df6ed58c7d637b09510718d46", "ext": "py", "lang": "Python", "content": "def spider(headers, conferences_url):\n    for conference_url in conferences_url:\n        html_level1 = requests.get(conference_url, headers=headers).content\n        tree_level1 = etree.HTML(html_level1)\n        conferences = tree_level1.xpath(\"//a[contains(@href, 'dblp.uni-trier.de/db/conf/') and contains(@href, 'html')]/@href\")\n        conferences = list(set(conferences))\n        fp_dir = os.path.split(os.path.realpath(sys.argv[0]))[0] + os.sep + 'source' + os.sep + 'conf' + os.sep + conference_url.split('/')[-2]\n        if not os.path.exists(fp_dir):\n            os.makedirs(fp_dir)\n        for conference in conferences:\n            fp_name = fp_dir + os.sep + conference.split('/')[-1].split('.')[0] + '.csv'\n            if os.path.exists(fp_name):\n                print('History: ', fp_name.encode('utf-8'))\n                continue\n            html_level2 = requests.get(conference, headers=headers).content\n            tree_level2 = etree.HTML(html_level2)\n            if tree_level2.xpath(\"//li[@class='entry inproceedings']\"):\n                extractor(tree_level2, fp_name)\n            else:\n                volumes = tree_level2.xpath(\"//*[@id='main']/ul/li/a/@href\")\n                for volume in volumes:\n                    fp_name = fp_dir + os.sep + volume.split('/')[-1].split('.')[0] + '.csv'\n                    if os.path.exists(fp_name):\n                        print('History: ', fp_name.encode('utf-8'))\n                        continue\n                    html_level3 = requests.get(volume, headers=headers).content\n                    tree_level3 = etree.HTML(html_level3)\n                    extractor(tree_level3, fp_name)", "fn_id": 1, "class_fn": false, "repo": "Aticode/spider_dblp", "file": "conferences.py", "last_update_at": "2021-01-18T09:00:14+00:00", "pred": {"ppl": 1.790587306022644, "ppl_lower": 1.814426302909851, "ppl/lowercase_ppl": -1.0227032957703401, "ppl/zlib": 0.0011117245609954332, "Min_5.0% Prob": 6.735807428359985, "Min_10.0% Prob": 4.538922097168717, "Min_20.0% Prob": 2.7174032041170064, "Min_30.0% Prob": 1.9037102214751704, "Min_40.0% Prob": 1.4485333310485173, "Min_50.0% Prob": 1.162765126549513, "Min_60.0% Prob": 0.9727282769993068}}
{"hexsha": "86b7411d0f37a9a1b85f3b8b0f899c31c9cc6336", "ext": "py", "lang": "Python", "content": "@pytest.mark.filterwarnings('ignore:This function is not safe at the moment')\n@pytest.mark.parametrize('input_type', [tuple, list])\n@requires_tables\ndef test_complete_irradiance_arrays(sapm_dc_snl_ac_system_same_arrays, location, input_type):\n    \"\"\"ModelChain.complete_irradiance can accept a tuple of weather\n    DataFrames.\"\"\"\n    times = pd.date_range(start='2020-01-01 0700-0700', periods=2, freq='H')\n    weather = pd.DataFrame({'dni': [2, 3], 'dhi': [4, 6], 'ghi': [9, 5]}, index=times)\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    with pytest.raises(ValueError, match='Input DataFrames must have same index\\\\.'):\n        mc.complete_irradiance(input_type((weather, weather[1:])))\n    mc.complete_irradiance(input_type((weather, weather)))\n    for mc_weather in mc.results.weather:\n        assert_series_equal(mc_weather['dni'], pd.Series([2, 3], index=times, name='dni'))\n        assert_series_equal(mc_weather['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n        assert_series_equal(mc_weather['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    mc.complete_irradiance(input_type((weather[['ghi', 'dhi']], weather[['dhi', 'dni']])))\n    assert 'dni' in mc.results.weather[0].columns\n    assert 'ghi' in mc.results.weather[1].columns\n    mc.complete_irradiance(input_type((weather, weather[['ghi', 'dni']])))\n    assert_series_equal(mc.results.weather[0]['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n    assert_series_equal(mc.results.weather[0]['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    assert_series_equal(mc.results.weather[0]['dni'], pd.Series([2, 3], index=times, name='dni'))\n    assert 'dhi' in mc.results.weather[1].columns", "fn_id": 104, "class_fn": false, "repo": "Kaustubh1598/pvlib-python", "file": "pvlib/tests/test_modelchain.py", "last_update_at": "2021-08-16T06:47:01+00:00", "pred": {"ppl": 1.8691997528076172, "ppl_lower": 1.9390686750411987, "ppl/lowercase_ppl": -1.0586679195423148, "ppl/zlib": 0.001091641186036841, "Min_5.0% Prob": 6.270074266375917, "Min_10.0% Prob": 4.5245694011005, "Min_20.0% Prob": 2.8965270342650236, "Min_30.0% Prob": 2.0427966557553248, "Min_40.0% Prob": 1.55584633370992, "Min_50.0% Prob": 1.2493591279610112, "Min_60.0% Prob": 1.0442290640851308}}
{"hexsha": "3ad888b6411bf731d2ffa031e8ac7e352cb37d45", "ext": "py", "lang": "Python", "content": "@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        name = request.form['name']\n        description = request.form['description']\n        error = None\n        if not name:\n            error = 'Name is required.'\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute('INSERT INTO dens (name, description, author_id) VALUES (?, ?, ?)', (name, description, g.user['id']))\n            db.commit()\n            return redirect(url_for('dens.index'))\n    return render_template('dens/create.html')", "fn_id": 1, "class_fn": false, "repo": "tsainez/bobchat", "file": "bobchat/dens.py", "last_update_at": "2021-12-14T19:16:11+00:00", "pred": {"ppl": 1.583704948425293, "ppl_lower": 1.889139175415039, "ppl/lowercase_ppl": -1.3835731014236203, "ppl/zlib": 0.0014595777971692326, "Min_5.0% Prob": 6.782539933919907, "Min_10.0% Prob": 4.12882000207901, "Min_20.0% Prob": 2.2359269600022924, "Min_30.0% Prob": 1.5172438159585, "Min_40.0% Prob": 1.1474221193078737, "Min_50.0% Prob": 0.9207694144875166, "Min_60.0% Prob": 0.7676789867922221}}
{"hexsha": "1e6e4ef45a8b40afebac91fb3f7bf135a4a6341f", "ext": "py", "lang": "Python", "content": "def get_tags(pipeline):\n    nodes = pipeline.nodes\n    tags = {node.name: node.tags for node in nodes}\n    return tags", "fn_id": 3, "class_fn": false, "repo": "gcalmettes/kedro-argo", "file": "src/kedro_argo/cli.py", "last_update_at": "2021-01-20T04:23:56+00:00", "pred": {"ppl": 4.263265132904053, "ppl_lower": 4.263265132904053, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.016667072756568285, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 8.566875139872232, "Min_20.0% Prob": 5.894338607788086, "Min_30.0% Prob": 4.501537132263183, "Min_40.0% Prob": 3.429932790143149, "Min_50.0% Prob": 2.769138081206216, "Min_60.0% Prob": 2.424619789634432}}
{"hexsha": "c0e6fb6fdeb419f4456ff38cda990830605dba2c", "ext": "py", "lang": "Python", "content": "def calculate_bead_lims(bead_size, region_revs, region_fors):\n    \"\"\"\n    Divides a region on a chromosome (or rather, the part of it covered by complete\n    restriction fragments) into segments of equal, given length and one last\n    segment which is smaller than the others such that the segments completely\n    cover the region. These segments will be represented by spherical beads later.\n    Returns the limits of the segments\n    \"\"\"\n    region_length = np.max((region_fors[-1, 1], region_revs[1, -1])) - np.min((region_fors[0, 0], region_revs[0, 0]))\n    n_beads = int(round(region_length / bead_size)) + 1\n    bead_lims = [np.min((region_fors[0, 0], region_revs[0, 0])) + i * bead_size for i in range(n_beads)]\n    bead_lims[-1] = np.max((region_fors[-1, 1], region_revs[1, -1]))\n    return np.array(bead_lims)", "fn_id": 2, "class_fn": false, "repo": "simeoncarstens/ensemble_hic", "file": "data/nora2012/make_processed_files.py", "last_update_at": "2021-03-16T04:38:07+00:00", "pred": {"ppl": 3.409470796585083, "ppl_lower": 3.4304006099700928, "ppl/lowercase_ppl": -1.004989545692084, "ppl/zlib": 0.003219309941298379, "Min_5.0% Prob": 8.630626167569842, "Min_10.0% Prob": 7.125539183616638, "Min_20.0% Prob": 5.040117444736617, "Min_30.0% Prob": 3.7997991187231883, "Min_40.0% Prob": 2.9828479144952995, "Min_50.0% Prob": 2.436215045709982, "Min_60.0% Prob": 2.047289239297781}}
{"hexsha": "8086f65407ad32c804e1c9c38b95a0d946baf627", "ext": "py", "lang": "Python", "content": "def _spec_from_colon_separated_text_list(spec_name: str):\n    \"\"\"\n    Get a specification value from a list of colon separated values in\n\n    `_general_specs(...)` returns a list of strings of with the format\n    `Spec Name: Spec Value`.\n    TODO: Implement and use this. Refactor `ttaf(...)`\n    \"\"\"", "fn_id": 14, "class_fn": false, "repo": "jwalleser/plane-finder-app", "file": "planefinder/trade_a_plane.py", "last_update_at": "2021-12-31T02:54:08+00:00", "pred": {"ppl": 16.931001663208008, "ppl_lower": 18.20633888244629, "ppl/lowercase_ppl": -1.0256697445385656, "ppl/zlib": 0.014075355021793889, "Min_5.0% Prob": 10.270529985427856, "Min_10.0% Prob": 9.721428394317627, "Min_20.0% Prob": 8.471232414245605, "Min_30.0% Prob": 7.1639890956878665, "Min_40.0% Prob": 5.955393005819881, "Min_50.0% Prob": 5.129317147787227, "Min_60.0% Prob": 4.529614233503155}}
{"hexsha": "623568b4c78cf9a439d74b2c528e6cff22e0cadb", "ext": "py", "lang": "Python", "content": "def detect_text(content):\n    \"\"\"Detects text in the file.\"\"\"\n    from google.cloud import vision\n    import io\n    client = vision.ImageAnnotatorClient()\n    content_base64 = base64.b64decode(content)\n    image = vision.Image(content=content_base64)\n    response = client.text_detection(image=image)\n    text = response.text_annotations[0].description\n    return text", "fn_id": 0, "class_fn": false, "repo": "OmkarMehta/anuvad", "file": "anuvad/callbacks.py", "last_update_at": "2021-08-18T00:50:53+00:00", "pred": {"ppl": 1.7811092138290405, "ppl_lower": 2.4542083740234375, "ppl/lowercase_ppl": -1.555349546192659, "ppl/zlib": 0.002775174634907716, "Min_5.0% Prob": 6.494477844238281, "Min_10.0% Prob": 4.394615325060758, "Min_20.0% Prob": 2.7286165194077925, "Min_30.0% Prob": 1.9151663274476023, "Min_40.0% Prob": 1.457142783836885, "Min_50.0% Prob": 1.1521316063590348, "Min_60.0% Prob": 0.9643176619255387}}
{"hexsha": "811ab0d25f1780d5e5c2deb38dcaf25cb83fa07a", "ext": "py", "lang": "Python", "content": "def deletecall(bam_url, api_call, call_parameters, delete_entity, header):\n    \"\"\"API request to delete and return values\"\"\"\n    call_url = 'http://' + bam_url + '/Services/REST/v1/' + api_call + '?'\n    print('You are requesting to delete:')\n    print(delete_entity)\n    answer = input('Do you want to proceed (y (yes) or n (no))? ')\n    try:\n        if answer.lower() == 'y':\n            response = requests.delete(call_url, params=call_parameters, headers=header)\n            return response.json()\n        elif answer.lower() == 'n':\n            return 'You aborted deletion'\n        else:\n            return 'You entered an invalid character'\n    except requests.exceptions.RequestException as e:\n        print(e)", "fn_id": 1, "class_fn": false, "repo": "bluecatlabs/making-apis-work-for-you", "file": "Episodes/Episode6/2-getServers-REST.py", "last_update_at": "2021-02-16T12:51:20+00:00", "pred": {"ppl": 3.3564627170562744, "ppl_lower": 3.640040159225464, "ppl/lowercase_ppl": -1.066981488535557, "ppl/zlib": 0.003420586600706976, "Min_5.0% Prob": 8.192871236801148, "Min_10.0% Prob": 6.856101822853089, "Min_20.0% Prob": 4.839516444904048, "Min_30.0% Prob": 3.63774446614327, "Min_40.0% Prob": 2.888931264001203, "Min_50.0% Prob": 2.3728664964437485, "Min_60.0% Prob": 2.0163853947794244}}
{"hexsha": "f6667e4bee5b954c1e12aaebccf65cda7aa78ce7", "ext": "py", "lang": "Python", "content": "def generate_sub_id():\n    timestamp = floor(time() * 1000)\n    random_id = randint(0, 999)\n    return f'sub-{timestamp}-{random_id:03}'", "fn_id": 0, "class_fn": false, "repo": "ChessTerm/jiuqi-runner", "file": "run.py", "last_update_at": "2021-06-13T03:48:20+00:00", "pred": {"ppl": 3.5190036296844482, "ppl_lower": 3.5190036296844482, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01133493594407475, "Min_5.0% Prob": 9.895048141479492, "Min_10.0% Prob": 7.647024250030517, "Min_20.0% Prob": 5.022690632126548, "Min_30.0% Prob": 3.908851705491543, "Min_40.0% Prob": 3.06148778850382, "Min_50.0% Prob": 2.4735621889787063, "Min_60.0% Prob": 2.1147711405699905}}
{"hexsha": "793c76b7aef3c3464b9f0b5785241de95f0cc1ed", "ext": "py", "lang": "Python", "content": "def draw_flow(img, flow, step=16):\n    h, w = img.shape[:2]\n    y, x = np.mgrid[step / 2:h:step, step / 2:w:step].reshape(2, -1).astype(int)\n    fx, fy = flow[y, x].T\n    lines = np.vstack([x, y, x + fx, y + fy]).T.reshape(-1, 2, 2)\n    lines = np.int32(lines + 0.5)\n    vis = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n    cv2.polylines(vis, lines, 0, (0, 255, 0))\n    for (x1, y1), (_x2, _y2) in lines:\n        cv2.circle(vis, (x1, y1), 1, (0, 255, 0), -1)\n    return vis", "fn_id": 4, "class_fn": false, "repo": "mcv-m6-video/mcv-m6-2021-team6", "file": "W4/display.py", "last_update_at": "2021-03-23T18:54:28+00:00", "pred": {"ppl": 1.2055548429489136, "ppl_lower": 1.4971848726272583, "ppl/lowercase_ppl": -2.1589107958809275, "ppl/zlib": 0.0006536360543629049, "Min_5.0% Prob": 3.331848238905271, "Min_10.0% Prob": 1.8159224012245734, "Min_20.0% Prob": 0.9286073211732567, "Min_30.0% Prob": 0.6276773092375226, "Min_40.0% Prob": 0.468734723456413, "Min_50.0% Prob": 0.3737148082710053, "Min_60.0% Prob": 0.3127785553788643}}
{"hexsha": "ff326af30a0e940467d42ebccf60e036d6b028f5", "ext": "py", "lang": "Python", "content": "@bot.command()\nasync def listening(ctx, *, message=None):\n    await ctx.message.delete()\n    if message is None:\n        commandprint(\"Command 'listening' has been used by \" + bot.user.name + ' with no message')\n        embed = discord.Embed(title=f'**Invalid syntax**', description='You have not specified a listening \\nExample: ' + prefix + 'listening flairings piss', color=errorcolor)\n        embed.set_footer(text=footer)\n        await ctx.send(embed=embed, delete_after=deletetimer)\n    else:\n        try:\n            commandprint(\"Command 'listening' has been used by \" + bot.user.name + \" with a message of '\" + message + \"'\")\n            await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=message))\n            em = discord.Embed(title=f'**STATUS CHANGED**', description=\"Your listening status has been set to **'\" + message + \"'**\", color=color)\n            em.set_footer(text=footer)\n            await ctx.send(embed=em, delete_after=deletetimer)\n        except Exception as error:\n            errorprint(\"Exception ' {0} ', expected error message sent to users chat\".format(error))\n            em = discord.Embed(title='Exception Error:', description='Expected Exception: You already have a custom status. \\n Console Exception {0}'.format(error), color=errorcolor)\n            await ctx.send(embed=em, delete_after=deletetimer)", "fn_id": 78, "class_fn": false, "repo": "Flairings/Project-Mars", "file": "Mars.py", "last_update_at": "2021-09-18T03:13:13+00:00", "pred": {"ppl": 3.2040412425994873, "ppl_lower": 3.5432417392730713, "ppl/lowercase_ppl": -1.0864205061643468, "ppl/zlib": 0.0021287255966093758, "Min_5.0% Prob": 8.902221328333804, "Min_10.0% Prob": 6.966001134169729, "Min_20.0% Prob": 4.866757154464722, "Min_30.0% Prob": 3.7006699422131413, "Min_40.0% Prob": 2.8665061521452744, "Min_50.0% Prob": 2.322477062504428, "Min_60.0% Prob": 1.9371543988924136}}
{"hexsha": "d7d3d58fe31aa429507c3843cdedb9be62480884", "ext": "py", "lang": "Python", "content": "def outgoing_message(message):\n    message_label = tk.Label(messages_frame, bg='gray20', fg='snow', text=message, font=('Helvetica', 15))\n    message_label.pack(side=tk.TOP, anchor=tk.E, padx=20, pady=10)\n    message_labels.append(message_label)", "fn_id": 3, "class_fn": false, "repo": "Jothin-kumar/chat-app", "file": "scripts/client/gui.py", "last_update_at": "2021-12-10T13:33:11+00:00", "pred": {"ppl": 3.0735909938812256, "ppl_lower": 3.98592472076416, "ppl/lowercase_ppl": -1.2314855446791964, "ppl/zlib": 0.006764136041413827, "Min_5.0% Prob": 8.297203063964844, "Min_10.0% Prob": 6.108618391884698, "Min_20.0% Prob": 4.344180146853129, "Min_30.0% Prob": 3.282958690609251, "Min_40.0% Prob": 2.6723865657239347, "Min_50.0% Prob": 2.188767191577465, "Min_60.0% Prob": 1.8647297655365296}}
{"hexsha": "82966286972b9d3c71d206d1668d569e596aeedd", "ext": "py", "lang": "Python", "content": "@require_context\ndef quota_class_get_all_by_name(context, class_name):\n    authorize_quota_class_context(context, class_name)\n    rows = model_query(context, models.QuotaClass, read_deleted='no').filter_by(class_name=class_name).all()\n    result = {'class_name': class_name}\n    for row in rows:\n        result[row.resource] = row.hard_limit\n    return result", "fn_id": 105, "class_fn": false, "repo": "scottwedge/OpenStack-Stein", "file": "karbor-1.3.0/karbor/db/sqlalchemy/api.py", "last_update_at": "2021-12-13T20:01:25+00:00", "pred": {"ppl": 1.9530786275863647, "ppl_lower": 2.3779494762420654, "ppl/lowercase_ppl": -1.2940388536540492, "ppl/zlib": 0.0033138955989355755, "Min_5.0% Prob": 7.949658584594727, "Min_10.0% Prob": 5.513554443012584, "Min_20.0% Prob": 3.284650752077932, "Min_30.0% Prob": 2.224347620350974, "Min_40.0% Prob": 1.6739637245364645, "Min_50.0% Prob": 1.3375656502084585, "Min_60.0% Prob": 1.128070669178851}}
{"hexsha": "8c0c41d89d485b342b3470a122b1a94215a4cc9f", "ext": "py", "lang": "Python", "content": "def main():\n    import glob\n    parent = sys.argv[1]\n    folders = glob.glob('{}/*_output'.format(parent))\n    submit_qsub(parent, folders)", "fn_id": 1, "class_fn": false, "repo": "ckrivacic/helix_matcher", "file": "helix/rifdock/submit_align.py", "last_update_at": "2021-06-07T10:56:37+00:00", "pred": {"ppl": 6.394978046417236, "ppl_lower": 6.394978046417236, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01627642984294413, "Min_5.0% Prob": 10.953803539276123, "Min_10.0% Prob": 9.564091920852661, "Min_20.0% Prob": 7.055387761857775, "Min_30.0% Prob": 5.747905547802265, "Min_40.0% Prob": 4.463829904794693, "Min_50.0% Prob": 3.7202929610555824, "Min_60.0% Prob": 3.065743843714396}}
{"hexsha": "f32dd5e74bf9879ee46da2157293834813f6746b", "ext": "py", "lang": "Python", "content": "def _get_package_bin_dir_app_paths(venv: Venv, package_info: PackageInfo, local_bin_dir: Path) -> Set[Path]:\n    suffix = package_info.suffix\n    apps = []\n    if package_info.include_apps:\n        apps += package_info.apps\n    if package_info.include_dependencies:\n        apps += package_info.apps_of_dependencies\n    return get_exposed_app_paths_for_package(venv.bin_path, local_bin_dir, [add_suffix(app, suffix) for app in apps])", "fn_id": 1, "class_fn": false, "repo": "KenMacD/pipx", "file": "src/pipx/commands/uninstall.py", "last_update_at": "2021-05-27T02:34:20+00:00", "pred": {"ppl": 3.9893369674682617, "ppl_lower": 4.439179420471191, "ppl/lowercase_ppl": -1.0772207045021531, "ppl/zlib": 0.006588690683459826, "Min_5.0% Prob": 8.067476068224225, "Min_10.0% Prob": 7.142665420259748, "Min_20.0% Prob": 5.3254544488314925, "Min_30.0% Prob": 4.1880106011102365, "Min_40.0% Prob": 3.306111205240776, "Min_50.0% Prob": 2.7348548889988, "Min_60.0% Prob": 2.2943099600145187}}
{"hexsha": "c039023785903aca6301e71b8b73beaa059d6ec4", "ext": "py", "lang": "Python", "content": "def duplicateGroup(id):\n    group = CreatureGroup.objects.get(id=id)\n    newGroup = CreatureGroup(name='%s_duplicate' % group.name, Augmented=group.Augmented)\n    newGroup.Grouping = group.Grouping\n    newGroup.save()\n    for item in group.AllowedExtraType.all():\n        newGroup.AllowedExtraType.add(item)\n    for item in group.DefaultExtraType.all():\n        newGroup.DefaultExtraType.add(item)\n    for item in group.groupentry_set.all():\n        GroupEntry(Group=newGroup, creature=item.creature).save()", "fn_id": 1, "class_fn": false, "repo": "mkarasch/pfss", "file": "pfss/models.py", "last_update_at": "2021-09-14T09:55:03+00:00", "pred": {"ppl": 2.8505001068115234, "ppl_lower": 2.856872797012329, "ppl/lowercase_ppl": -1.0021318910227826, "ppl/zlib": 0.004894833901685292, "Min_5.0% Prob": 10.374862968921661, "Min_10.0% Prob": 7.734684184193611, "Min_20.0% Prob": 4.805949028581381, "Min_30.0% Prob": 3.409591749931375, "Min_40.0% Prob": 2.605970724951476, "Min_50.0% Prob": 2.100602110940963, "Min_60.0% Prob": 1.7541875933044746}}
{"hexsha": "21093aba0c887e3f2abc8c2d98ef2ec29048b249", "ext": "py", "lang": "Python", "content": "def time_stamps(seconds, sample_rate, sample_length, sample_duration):\n    \"\"\"Process to calculate the intervals based on the window size or time intervals.\n    Parameters\n    ----------\n    seconds : int or list\n        Can be of two types. int; a single value that determines the window size (seconds). list; a set of intervals, where each value is in (seconds).\n    sample_rate : float\n        Sample frequency used in the EEG (Hz).\n    sample_length : float\n        Sample length in data points (seconds x sample frequency).\n    sample_duration : float\n        Duration of the EEG (seconds).\n    \n    Returns\n    -------\n    intervals : list\n        List with the intervals, pairs of (Start, End) values in data points (seconds x sample frequency).\n    \"\"\"\n    intervals, i, flag = ([], 0, 0)\n    if type(seconds) == list:\n        if len(seconds) == 1:\n            seconds = seconds[0]\n        else:\n            if seconds[-1] > sample_duration.round():\n                raise Exception('Error in Window size. Intervals exceeds sample length.')\n            if seconds[0] != 0:\n                raise Exception('Error in Window size. First interval must be 0.')\n            else:\n                diff = np.diff(seconds)\n                for j, value in enumerate(diff):\n                    samples_per_frame = value * sample_rate\n                    intervals.append((i, i + samples_per_frame))\n                    i += samples_per_frame\n    if type(seconds) == int or type(seconds) == float:\n        samples_per_frame = seconds * sample_rate\n        while i + samples_per_frame <= sample_length:\n            intervals.append((i, i + samples_per_frame))\n            i = i + samples_per_frame\n        if i + samples_per_frame > sample_length:\n            intervals.append((i, sample_length))\n    intervals_rounded = [(round(steps[0], 2), round(steps[1], 2)) for steps in intervals]\n    print('Intervals: ', intervals_rounded)\n    if len(intervals) == 1:\n        intervals.append((0, sample_rate))\n        flag = 1\n    return (intervals, flag)", "fn_id": 5, "class_fn": false, "repo": "danive97/EEGRAPH", "file": "eegraph/tools.py", "last_update_at": "2021-03-26T09:28:21+00:00", "pred": {"ppl": 2.8482894897460938, "ppl_lower": 2.960557222366333, "ppl/lowercase_ppl": -1.0369333888390138, "ppl/zlib": 0.001532530944457637, "Min_5.0% Prob": 7.176612430148655, "Min_10.0% Prob": 5.594733723887691, "Min_20.0% Prob": 4.064063810427254, "Min_30.0% Prob": 3.1747627458194407, "Min_40.0% Prob": 2.5431345076462546, "Min_50.0% Prob": 2.0725052423584156, "Min_60.0% Prob": 1.7379394207127028}}
{"hexsha": "df37bb46962a858756a40ea08c445056a8eba2a4", "ext": "py", "lang": "Python", "content": "def config_to_functions(config):\n    \"\"\"\n    Takes in the data for a config and returns a list of functions to call the meet it's criteria.\n    list of str -> list of (none -> (str, any))\n    \"\"\"\n    functions = []\n    in_multiline_comment = False\n    for line in config:\n        line = remove_new_lines(line)\n        in_multiline_comment = in_multiline_comment or line_starts_multiline_comment_start(line)\n        multiline_comment_end = line_starts_multiline_comment_end(line)\n        if not in_multiline_comment and multiline_comment_end:\n            message = 'Multiline comment end: ' + constants.MULTILINE_COMMENT_END\n            message += ' must inclose a comment.'\n            raise Exception(message)\n        if multiline_comment_end:\n            in_multiline_comment = False\n        if is_line_commented(line) or is_empty_line(line) or in_multiline_comment or multiline_comment_end:\n            continue\n        check_config_line(line)\n        command_type = get_command_type(line)\n        if not is_type(command_type) and (not is_complex_type(command_type)):\n            on_not_valid_type(command_type)\n        definition = get_command_definition(line)\n        functions.append(build_input_func(any_type_to_input_functions(command_type, definition), command_type))\n    if in_multiline_comment:\n        message = 'Multiline comment start: ' + constants.MULTILINE_COMMENT_START\n        message += ' must be inclosed with: ' + constants.MULTILINE_COMMENT_END\n        raise Exception(message)\n    return functions", "fn_id": 1, "class_fn": false, "repo": "FroshTheFrog/life_logger", "file": "config_utils.py", "last_update_at": "2021-03-19T03:40:42+00:00", "pred": {"ppl": 3.013415813446045, "ppl_lower": 3.204784393310547, "ppl/lowercase_ppl": -1.0558172386458935, "ppl/zlib": 0.00215444190835976, "Min_5.0% Prob": 9.00694751739502, "Min_10.0% Prob": 6.8782787111070425, "Min_20.0% Prob": 4.671871527036031, "Min_30.0% Prob": 3.4638779940428557, "Min_40.0% Prob": 2.716763442920314, "Min_50.0% Prob": 2.194724220353945, "Min_60.0% Prob": 1.8367881191433906}}
{"hexsha": "4fbd04e883334dd6fb994cd9cbab874f5c4a5931", "ext": "py", "lang": "Python", "content": "def load_spectrum(filename, grid):\n    \"\"\"\n    Load a single spectrum\n    \"\"\"\n    file_in = pyfits.open(filename)\n    wl = np.array(file_in[0].data[2])\n    flux = np.array(file_in[0].data[0])\n    ivar = np.array(file_in[0].data[1])\n    redshift = file_in[0].header['Z']\n    wl_shifted = wl - redshift * wl\n    flux_rs = interpolate.interp1d(wl_shifted, flux)(grid)\n    ivar_rs = interpolate.interp1d(wl_shifted, ivar)(grid)\n    ivar_rs[ivar_rs < 0] = 0.0\n    return (flux_rs, ivar_rs)", "fn_id": 1, "class_fn": false, "repo": "HaifengWangNAOC/Cannon", "file": "TheCannon/lamost.py", "last_update_at": "2021-07-22T12:57:40+00:00", "pred": {"ppl": 2.1184263229370117, "ppl_lower": 2.1505165100097656, "ppl/lowercase_ppl": -1.0200280650759932, "ppl/zlib": 0.0033512210381298215, "Min_5.0% Prob": 6.406034183502197, "Min_10.0% Prob": 5.096807324886322, "Min_20.0% Prob": 3.31831743077534, "Min_30.0% Prob": 2.392155293495424, "Min_40.0% Prob": 1.8590246335398861, "Min_50.0% Prob": 1.4987793147419264, "Min_60.0% Prob": 1.250734433201292}}
{"hexsha": "60a398f13b9ba05c02fed5b550c7fed93451f969", "ext": "py", "lang": "Python", "content": "def serializedATN():\n    with StringIO() as buf:\n        buf.write('\\x03\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\\x03\\x1a')\n        buf.write('\\x82\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07')\n        buf.write('\\x04\\x08\\t\\x08\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0b\\t\\x0b\\x04\\x0c\\t\\x0c\\x04\\r\\t\\r\\x04\\x0e')\n        buf.write('\\t\\x0e\\x04\\x0f\\t\\x0f\\x03\\x02\\x05\\x02 \\n\\x02\\x03\\x02\\x03\\x02\\x05\\x02$\\n\\x02\\x03\\x02\\x03\\x02')\n        buf.write('\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x05\\x03,\\n\\x03\\x07\\x03.\\n\\x03\\x0c\\x03\\x0e\\x031\\x0b\\x03\\x03')\n        buf.write('\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x04;\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03')\n        buf.write('\\x06\\x03\\x06\\x05\\x06B\\n\\x06\\x03\\x06\\x06\\x06E\\n\\x06\\r\\x06\\x0e\\x06F\\x03\\x07\\x03\\x07\\x03\\x07\\x05\\x07')\n        buf.write('L\\n\\x07\\x03\\x07\\x05\\x07O\\n\\x07\\x06\\x07Q\\n\\x07\\r\\x07\\x0e\\x07R\\x03\\x08\\x03\\x08\\x05\\x08W\\n\\x08')\n        buf.write('\\x03\\x08\\x03\\x08\\x05\\x08[\\n\\x08\\x03\\t\\x03\\t\\x03\\t\\x05\\t`\\n\\t\\x06\\tb\\n\\t\\r\\t\\x0e')\n        buf.write('\\tc\\x03\\n\\x03\\n\\x03\\x0b\\x03\\x0b\\x05\\x0bj\\n\\x0b\\x03\\x0c\\x03\\x0c\\x05\\x0cn\\n\\x0c\\x03\\r')\n        buf.write('\\x03\\r\\x03\\r\\x03\\r\\x05\\rt\\n\\r\\x03\\x0e\\x03\\x0e\\x05\\x0ex\\n\\x0e\\x05\\x0ez\\n\\x0e')\n        buf.write('\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0f\\x03\\x0f\\x03\\x0f\\x02\\x02\\x10\\x02\\x04\\x06\\x08\\n\\x0c')\n        buf.write('\\x0e\\x10\\x12\\x14\\x16\\x18\\x1a\\x1c\\x02\\x06\\x03\\x02\\x0e\\x0f\\x04\\x02\\x0e\\x0e\\x10\\x11')\n        buf.write('\\x03\\x02\\n\\x0b\\x03\\x02\\x13\\x16\\x02\\x89\\x02\\x1f\\x03\\x02\\x02\\x02\\x04/\\x03\\x02\\x02\\x02\\x06')\n        buf.write(':\\x03\\x02\\x02\\x02\\x08<\\x03\\x02\\x02\\x02\\nD\\x03\\x02\\x02\\x02\\x0cP\\x03\\x02\\x02\\x02\\x0eV\\x03\\x02\\x02\\x02')\n        buf.write('\\x10a\\x03\\x02\\x02\\x02\\x12e\\x03\\x02\\x02\\x02\\x14g\\x03\\x02\\x02\\x02\\x16k\\x03\\x02\\x02\\x02\\x18o\\x03')\n        buf.write('\\x02\\x02\\x02\\x1ay\\x03\\x02\\x02\\x02\\x1c\\x7f\\x03\\x02\\x02\\x02\\x1e \\x07\\r\\x02\\x02\\x1f\\x1e\\x03')\n        buf.write('\\x02\\x02\\x02\\x1f \\x03\\x02\\x02\\x02 !\\x03\\x02\\x02\\x02!#\\t\\x02\\x02\\x02\"$\\x05\\x1c\\x0f\\x02#\"')\n        buf.write(\"\\x03\\x02\\x02\\x02#$\\x03\\x02\\x02\\x02$%\\x03\\x02\\x02\\x02%&\\x07\\x03\\x02\\x02&'\\x05\\x04\\x03\\x02'(\\x07\")\n        buf.write('\\x04\\x02\\x02(\\x03\\x03\\x02\\x02\\x02)+\\x05\\x06\\x04\\x02*,\\x07\\x05\\x02\\x02+*\\x03\\x02\\x02\\x02+,\\x03\\x02')\n        buf.write('\\x02\\x02,.\\x03\\x02\\x02\\x02-)\\x03\\x02\\x02\\x02.1\\x03\\x02\\x02\\x02/-\\x03\\x02\\x02\\x02/0\\x03\\x02')\n        buf.write('\\x02\\x020\\x05\\x03\\x02\\x02\\x021/\\x03\\x02\\x02\\x022;\\x05\\x14\\x0b\\x023;\\x05\\x0e\\x08')\n        buf.write('\\x024;\\x05\\x08\\x05\\x0256\\x05\\x1c\\x0f\\x0267\\x07\\x06\\x02\\x0278\\x05\\x1c')\n        buf.write('\\x0f\\x028;\\x03\\x02\\x02\\x029;\\x05\\x1a\\x0e\\x02:2\\x03\\x02\\x02\\x02:3\\x03\\x02\\x02\\x02:4')\n        buf.write('\\x03\\x02\\x02\\x02:5\\x03\\x02\\x02\\x02:9\\x03\\x02\\x02\\x02;\\x07\\x03\\x02\\x02\\x02<=\\t\\x03\\x02\\x02=>')\n        buf.write('\\x05\\n\\x06\\x02>\\t\\x03\\x02\\x02\\x02?A\\x07\\x07\\x02\\x02@B\\x05\\x0c\\x07\\x02A@\\x03\\x02\\x02\\x02AB\\x03')\n        buf.write('\\x02\\x02\\x02BC\\x03\\x02\\x02\\x02CE\\x07\\x08\\x02\\x02D?\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02FD\\x03\\x02\\x02')\n        buf.write('\\x02FG\\x03\\x02\\x02\\x02G\\x0b\\x03\\x02\\x02\\x02HK\\x05\\x1c\\x0f\\x02IJ\\x07\\x06\\x02\\x02JL\\x05\\x1c')\n        buf.write('\\x0f\\x02KI\\x03\\x02\\x02\\x02KL\\x03\\x02\\x02\\x02LN\\x03\\x02\\x02\\x02MO\\x07\\t\\x02\\x02NM\\x03\\x02\\x02')\n        buf.write('\\x02NO\\x03\\x02\\x02\\x02OQ\\x03\\x02\\x02\\x02PH\\x03\\x02\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02R')\n        buf.write('S\\x03\\x02\\x02\\x02S\\r\\x03\\x02\\x02\\x02TW\\x05\\x16\\x0c\\x02UW\\x05\\x1a\\x0e\\x02VT\\x03\\x02\\x02\\x02')\n        buf.write('VU\\x03\\x02\\x02\\x02WX\\x03\\x02\\x02\\x02XZ\\x05\\x10\\t\\x02Y[\\x05\\n\\x06\\x02ZY\\x03\\x02\\x02\\x02Z[')\n        buf.write('\\x03\\x02\\x02\\x02[\\x0f\\x03\\x02\\x02\\x02\\\\_\\x05\\x12\\n\\x02]`\\x05\\x16\\x0c\\x02^`\\x05\\x1a\\x0e')\n        buf.write('\\x02_]\\x03\\x02\\x02\\x02_^\\x03\\x02\\x02\\x02`b\\x03\\x02\\x02\\x02a\\\\\\x03\\x02\\x02\\x02bc\\x03\\x02\\x02\\x02')\n        buf.write('ca\\x03\\x02\\x02\\x02cd\\x03\\x02\\x02\\x02d\\x11\\x03\\x02\\x02\\x02ef\\t\\x04\\x02\\x02f\\x13\\x03\\x02\\x02\\x02')\n        buf.write('gi\\x05\\x16\\x0c\\x02hj\\x05\\n\\x06\\x02ih\\x03\\x02\\x02\\x02ij\\x03\\x02\\x02\\x02j\\x15\\x03\\x02\\x02\\x02')\n        buf.write('km\\x05\\x1c\\x0f\\x02ln\\x05\\x18\\r\\x02ml\\x03\\x02\\x02\\x02mn\\x03\\x02\\x02\\x02n\\x17\\x03\\x02\\x02')\n        buf.write('\\x02op\\x07\\x0c\\x02\\x02ps\\x05\\x1c\\x0f\\x02qr\\x07\\x0c\\x02\\x02rt\\x05\\x1c\\x0f\\x02sq\\x03\\x02\\x02')\n        buf.write('\\x02st\\x03\\x02\\x02\\x02t\\x19\\x03\\x02\\x02\\x02uw\\x07\\x12\\x02\\x02vx\\x05\\x1c\\x0f\\x02wv\\x03\\x02')\n        buf.write('\\x02\\x02wx\\x03\\x02\\x02\\x02xz\\x03\\x02\\x02\\x02yu\\x03\\x02\\x02\\x02yz\\x03\\x02\\x02\\x02z{\\x03\\x02\\x02\\x02')\n        buf.write('{|\\x07\\x03\\x02\\x02|}\\x05\\x04\\x03\\x02}~\\x07\\x04\\x02\\x02~\\x1b\\x03\\x02\\x02\\x02\\x7f\\x80\\t')\n        buf.write('\\x05\\x02\\x02\\x80\\x1d\\x03\\x02\\x02\\x02\\x15\\x1f#+/:AFKNRVZ_cimswy')\n        return buf.getvalue()", "fn_id": 0, "class_fn": false, "repo": "qwang70/GraphVizDotToDatabaseParsing", "file": "script/DOTParser.py", "last_update_at": "2021-08-13T04:55:13+00:00", "pred": {"ppl": 1.307104229927063, "ppl_lower": 1.348771333694458, "ppl/lowercase_ppl": -1.1171703307644378, "ppl/zlib": 0.00022638561193576498, "Min_5.0% Prob": 3.8762238938361406, "Min_10.0% Prob": 2.4504952825509108, "Min_20.0% Prob": 1.330804920685175, "Min_30.0% Prob": 0.8922392996517493, "Min_40.0% Prob": 0.6696795575197544, "Min_50.0% Prob": 0.5355920166973424, "Min_60.0% Prob": 0.44642192725018265}}
{"hexsha": "79b07cf6f3f380f296c7ce80ec1c84c5aa0ae81e", "ext": "py", "lang": "Python", "content": "def deep_seq_design():\n    root_dir = f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep'\n    mut_matrix_anneal = np.zeros((20, 20))\n    native_aa_all = []\n    design_aa_all = []\n    seq_len = []\n    recovery = []\n    pdb_id_all = []\n    recovery_res = np.zeros(20)\n    count_res = np.zeros(20)\n    num = 100\n    for pdb_id in pdb_selected:\n        seq_best_all = []\n        for j in range(num):\n            data_anneal = h5py.File(f'{root_dir}/{pdb_id}_profile_{j}.h5', 'r')\n            designed_seq = data_anneal['profile'][()]\n            seq_best = designed_seq[1]\n            seq_best_all.append(seq_best)\n            seq_native = designed_seq[0]\n            recovery_fraction = np.sum(seq_best == seq_native) / float(len(seq_native))\n            recovery.append(recovery_fraction)\n            seq_len.append(len(seq_native))\n            pdb_id_all.append(pdb_id)\n            for i in range(seq_native.shape[0]):\n                mut_matrix_anneal[map_aa[seq_native[i]], map_aa[seq_best[i]]] += 1\n                native_aa_all.append(map_aa[seq_native[i]])\n                design_aa_all.append(map_aa[seq_best[i]])\n            for i in range(20):\n                idx = seq_native == i\n                recovery_res[i] += np.sum(seq_best[idx] == seq_native[idx])\n                count_res[i] += len(seq_native[idx])\n        with open(f'{root_dir}/{pdb_id}_seq_best.fasta', 'w') as mf:\n            s = ''.join([idx2aa[x] for x in seq_native])\n            mf.write(f'>0\\n{s}\\n')\n            for j in range(len(seq_best_all)):\n                s = ''.join([idx2aa[x] for x in seq_best_all[j]])\n                mf.write(f'>{j + 1}\\n')\n                mf.write(f'{s}\\n')\n    df = pd.DataFrame({'pdb': pdb_id_all, 'seq_len': seq_len, 'recovery': recovery})\n    df.to_csv(f'{root_dir}/recovery.csv', index=False)\n    np.save(f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep/mut_matrix_anneal.npy', mut_matrix_anneal)\n    df = pd.DataFrame({'native_aa': native_aa_all, 'design_aa': design_aa_all})\n    df.to_csv(f'{root_dir}/native_design_aa.csv', index=False)\n    fig = pl.figure()\n    pl.plot(df['seq_len'], df['recovery'], 'bo')\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_seqlen_recovery.pdf')\n    fig = pl.figure()\n    pl.hist(df['recovery'], bins=np.arange(10) * 0.05 + 0.05)\n    pl.xlabel('native sequence recovery fraction')\n    pl.ylabel('N')\n    pl.savefig(f'{root_dir}/full_seq_design_recovery_hist.pdf')\n    fig = pl.figure()\n    pl.plot(np.arange(20), recovery_res / count_res)\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue recovery fraction in full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_recovery.pdf')\n    fig = pl.figure()\n    mut_matrix_anneal_freq = mut_matrix_anneal / mut_matrix_anneal.sum(axis=1)[:, None]\n    pl.imshow(mut_matrix_anneal_freq, cmap='jet')\n    pl.xlabel('mutated residue')\n    pl.ylabel('native residue')\n    pl.xticks(np.arange(20), labels=ordered_aa)\n    pl.yticks(np.arange(20), labels=ordered_aa)\n    pl.colorbar()\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use.pdf')\n    fig = pl.figure()\n    res_all = np.concatenate(seq_best_all).flatten()\n    aa_bins = np.arange(21) - 0.5\n    pl.hist(res_all, bins=aa_bins, histtype='step')\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue use frequency')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use_frequency.pdf')", "fn_id": 2, "class_fn": false, "repo": "lahplover/nnef", "file": "nnef/scripts/designed_seq.py", "last_update_at": "2021-06-30T06:47:00+00:00", "pred": {"ppl": 1.9542295932769775, "ppl_lower": 2.0125186443328857, "ppl/lowercase_ppl": -1.0438673464997117, "ppl/zlib": 0.0006600946264397221, "Min_5.0% Prob": 6.957277703641066, "Min_10.0% Prob": 4.9539596522295914, "Min_20.0% Prob": 3.0572650553555505, "Min_30.0% Prob": 2.1726850046606487, "Min_40.0% Prob": 1.658149188363794, "Min_50.0% Prob": 1.336648973425853, "Min_60.0% Prob": 1.1155802578485468}}
{"hexsha": "1d58be5f8c298cf630d37e7dc4f29b9760416dc5", "ext": "py", "lang": "Python", "content": "def parse_net_xml(doc):\n    total = len(list(doc.getiterator('wireless-network')))\n    tenth = total / 10\n    count = 0\n    clients = list()\n    parsed_list = []\n    for network in doc.getiterator('wireless-network'):\n        count += 1\n        try:\n            if count % tenth == 0:\n                continue\n        except ZeroDivisionError:\n            print('Division by zero error')\n        type = network.attrib['type']\n        channel = network.find('channel').text\n        bssid = network.find('BSSID').text\n        if type == 'probe' or channel == '0':\n            continue\n        encryption = network.getiterator('encryption')\n        privacy = ''\n        cipher = ''\n        auth = ''\n        if encryption is not None:\n            for item in encryption:\n                if item.text.startswith('WEP'):\n                    privacy = 'WEP'\n                    cipher = 'WEP'\n                    auth = ''\n                    break\n                elif item.text.startswith('WPA'):\n                    if item.text.endswith('PSK'):\n                        auth = 'PSK'\n                    elif item.text.endswith('AES-CCM'):\n                        cipher = 'CCMP ' + cipher\n                    elif item.text.endswith('TKIP'):\n                        cipher += 'TKIP '\n                elif item.text == 'None':\n                    privacy = 'OPN'\n        cipher = cipher.strip()\n        if cipher.find('CCMP') > -1:\n            privacy = 'WPA2'\n        if cipher.find('TKIP') > -1:\n            privacy += 'WPA'\n        power = network.find('snr-info')\n        dbm = ''\n        if power is not None:\n            dbm = power.find('max_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('last_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('min_signal_dbm').text\n        ssid = network.find('SSID')\n        essid_text = ''\n        if ssid is not None:\n            essid_text = network.find('SSID').find('essid').text\n        gps = network.find('gps-info')\n        lat, lon = ('', '')\n        if gps is not None:\n            lat = network.find('gps-info').find('min-lat').text\n            lon = network.find('gps-info').find('min-lon').text\n        data = dict(ESSID=essid_text, BSSID=bssid, Channel=channel, Privacy=privacy, Cipher=cipher, Authenticaiton=auth, DBM=dbm)\n        if lat and lon is not None:\n            google_map = 'https://maps.google.com/maps?q=' + lat + ',' + lon + '&ll=' + lat + ',' + lon + '&z=17'\n            google_map_link = '<a href=\"' + google_map + '\" target=\"_blank\"> Google map link</a>'\n            location = dict(Latitude=lat, Longitude=lon, Googlemap=google_map_link)\n        else:\n            not_found = 'Not coordinates available'\n            location = dict(Latitude=not_found, Longitude=not_found)\n        client_list = associatedClients(network, bssid, essid_text)\n        if client_list is not None:\n            data['client'] = client_list\n        else:\n            not_found = 'No clients found'\n            data['client'] = not_found\n        data['location'] = location\n        parsed_list.append(data)\n    return parsed_list", "fn_id": 1, "class_fn": false, "repo": "binkybear/kismet_web_viewer", "file": "app/netxml_to_csv.py", "last_update_at": "2021-05-22T03:59:05+00:00", "pred": {"ppl": 2.1363577842712402, "ppl_lower": 2.1858417987823486, "ppl/lowercase_ppl": -1.0301653737483512, "ppl/zlib": 0.0007769727830815754, "Min_5.0% Prob": 6.911470433498951, "Min_10.0% Prob": 5.162443746911719, "Min_20.0% Prob": 3.393868445081914, "Min_30.0% Prob": 2.443217103574293, "Min_40.0% Prob": 1.875298450562231, "Min_50.0% Prob": 1.5121172665122975, "Min_60.0% Prob": 1.2641615324937705}}
{"hexsha": "bc9332449ba47eee635aabdc3d23964f3b29f165", "ext": "py", "lang": "Python", "content": "def get_ratings(path, users_file_name, books_file_name):\n    df_users = pd.read_csv(path + users_file_name, encoding='UTF8')\n    df_books = pd.read_csv(path + books_file_name, encoding='UTF8')\n    df_users_books = pd.DataFrame(df_users, columns=['user_id', 'like'])\n    sr_users = []\n    sr_books = []\n    sr_ratings = []\n    str_like = list(np.array(df_users_books['like'].tolist()))\n    list_like = []\n    for i in str_like:\n        i = i.lstrip('[').rstrip(']')\n        i = i.split(', ')\n        list_like.append(i)\n    for user_idx in df_users_books['user_id']:\n        for book_idx in list_like[user_idx]:\n            if book_idx == '':\n                break\n            sr_users.append(user_idx)\n            sr_books.append(book_idx)\n            sr_ratings.append(1)\n    for book_idx in range(len(df_books)):\n        if sr_users[0]:\n            sr_users.append(sr_users[0])\n        if sr_books[0]:\n            sr_books.append(book_idx)\n        if sr_ratings[0]:\n            sr_ratings.append(0)\n    R = pd.DataFrame({'user_idx': sr_users, 'book_idx': sr_books, 'ratings': sr_ratings})\n    R = R.pivot_table('ratings', index='user_idx', columns='book_idx').fillna(0)\n    R.rename(columns=lambda x: int(x), inplace=True)\n    R = R.sort_index(axis=1)\n    return R", "fn_id": 0, "class_fn": false, "repo": "osamhack2021/AI_APP_handylib_devlib", "file": "AI/recommendation/ALS.py", "last_update_at": "2021-12-16T10:41:16+00:00", "pred": {"ppl": 1.981156826019287, "ppl_lower": 2.030174732208252, "ppl/lowercase_ppl": -1.0357490367328313, "ppl/zlib": 0.001486262890567191, "Min_5.0% Prob": 6.351186795668169, "Min_10.0% Prob": 4.728080129623413, "Min_20.0% Prob": 3.018181310905205, "Min_30.0% Prob": 2.174509839202366, "Min_40.0% Prob": 1.687874133524659, "Min_50.0% Prob": 1.3632245401998884, "Min_60.0% Prob": 1.138359545057055}}
{"hexsha": "876c7c08adc0ef2ebe9987da8f1125f3cf04b813", "ext": "py", "lang": "Python", "content": "def word_bag_list(org_text):\n    \"\"\"Take text and do sum, return sumed sentence list.\"\"\"\n    nlp = spacy.load('en_core_web_sm')\n    tr = pytextrank.TextRank(logger=None)\n    nlp.add_pipe(tr.PipelineComponent, name='textrank', last=True)\n    doc = nlp(org_text)\n    whole_sent = ''\n    for sent in doc._.textrank.summary(limit_phrases=15, limit_sentences=5):\n        whole_sent = whole_sent + repr(sent).rstrip() + ' '\n    return [whole_sent]", "fn_id": 0, "class_fn": false, "repo": "liux2/Allegheny-College-CMPSC-COMP-liux2", "file": "music_sug/music_main/text_proc.py", "last_update_at": "2021-05-21T01:37:44+00:00", "pred": {"ppl": 4.293537139892578, "ppl_lower": 5.857827663421631, "ppl/lowercase_ppl": -1.2132081554794092, "ppl/zlib": 0.005357025372622369, "Min_5.0% Prob": 9.353527545928955, "Min_10.0% Prob": 7.771657079458237, "Min_20.0% Prob": 5.610362641513348, "Min_30.0% Prob": 4.393783867359161, "Min_40.0% Prob": 3.516022915020585, "Min_50.0% Prob": 2.876128941401839, "Min_60.0% Prob": 2.417255998045827}}
{"hexsha": "6e58f05000ac2f4b1655ab9325ef2cbb23caea8b", "ext": "py", "lang": "Python", "content": "def remapchunk(seg, chunk, chunkindex, scratchpath, layer=1, bits_per_dim=10, maxmip=11, correctvers=True):\n    x, y, z = chunkindex\n    pcgchunkid = io.pcg.get_chunk_id(layer=layer, x=x, y=y, z=z, bits_per_dim=bits_per_dim)\n    data = seg[chunk.index()]\n    try:\n        if correctvers:\n            mappings = readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n        else:\n            mappings = _readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n    except subprocess.CalledProcessError as e:\n        if data.max() == 0:\n            return data\n        else:\n            raise e\n    for mapping in mappings:\n        data = fastremap.remap(data, mapping, in_place=False, preserve_missing_labels=True)\n    seg[chunk.index()] = data\n    return seg", "fn_id": 2, "class_fn": false, "repo": "ZettaAI/Synaptor", "file": "synaptor/proc/io/agglomeration.py", "last_update_at": "2021-09-13T07:02:16+00:00", "pred": {"ppl": 4.126108646392822, "ppl_lower": 4.652737140655518, "ppl/lowercase_ppl": -1.0847512788956626, "ppl/zlib": 0.004168631607171469, "Min_5.0% Prob": 9.487389234396128, "Min_10.0% Prob": 7.706104384528266, "Min_20.0% Prob": 5.655088486494841, "Min_30.0% Prob": 4.3163445937780685, "Min_40.0% Prob": 3.422086555648733, "Min_50.0% Prob": 2.80079485155918, "Min_60.0% Prob": 2.3546594959902176}}
{"hexsha": "639b37fb1f2788f702b824b85cd19c165e09f9f6", "ext": "py", "lang": "Python", "content": "def test_cached_property():\n    \"\"\"Test the cached_property decorator\"\"\"\n    new_value = '99999'\n\n    class DummyClass:\n\n        def __init__(self):\n            self.value = '11111'\n\n        def change_value_in_instance(self, value):\n            self.value = value\n\n        @cached_property\n        def test_property(self):\n            return self.value\n\n        @property\n        def test_uncached_property(self):\n            return self.value\n    testClass = DummyClass()\n    first_cached_test_property = testClass.test_property\n    first_uncached_test_property = testClass.test_uncached_property\n    testClass.change_value_in_instance(new_value)\n    second_cached_test_property = testClass.test_property\n    second_uncached_test_property = testClass.test_uncached_property\n    assert first_cached_test_property == second_cached_test_property\n    assert first_cached_test_property == '11111'\n    assert first_uncached_test_property != second_uncached_test_property\n    assert first_uncached_test_property == '11111'\n    assert second_uncached_test_property == '99999'", "fn_id": 0, "class_fn": false, "repo": "musa-atlihan/jina", "file": "tests/unit/test_helper.py", "last_update_at": "2021-04-22T17:14:32+00:00", "pred": {"ppl": 1.6640357971191406, "ppl_lower": 1.690305233001709, "ppl/lowercase_ppl": -1.030757774189955, "ppl/zlib": 0.0018450936770268603, "Min_5.0% Prob": 5.303078919649124, "Min_10.0% Prob": 3.9972044341266155, "Min_20.0% Prob": 2.4308752834796907, "Min_30.0% Prob": 1.6848941619450948, "Min_40.0% Prob": 1.274392488007327, "Min_50.0% Prob": 1.0205424103329368, "Min_60.0% Prob": 0.8501847216961101}}
{"hexsha": "b93ceb63b6b34d7c97ec44530d47645b54199e3e", "ext": "py", "lang": "Python", "content": "def ndcg_at_ks(r, k_list, method=1, include_dcg=False):\n    \"\"\"\n\n    :param r: \u5339\u914darray \u957f\u5ea6\u4e3a\u6bcf\u4e2a\u9884\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u7ed3\u679c\n    :param k_list:\n    :param method:\n    :param include_dcg:\n    :return:\n    \"\"\"\n    if r.shape[0] == 0:\n        ndcg_array = [0.0] * len(k_list)\n        dcg_array = [0.0] * len(k_list)\n    else:\n        dcg_array = dcg_at_ks(r, k_list, method)\n        ideal_r = np.array(sorted(r, reverse=True))\n        dcg_max_array = dcg_at_ks(ideal_r, k_list, method)\n        ndcg_array = dcg_array / dcg_max_array\n        ndcg_array = np.nan_to_num(ndcg_array)\n    if include_dcg:\n        return (ndcg_array, dcg_array)\n    else:\n        return ndcg_array", "fn_id": 18, "class_fn": false, "repo": "qtli/AOT", "file": "utils/common.py", "last_update_at": "2021-09-07T14:49:29+00:00", "pred": {"ppl": 1.8600263595581055, "ppl_lower": 1.9800697565078735, "ppl/lowercase_ppl": -1.1007772422367768, "ppl/zlib": 0.002028074050425241, "Min_5.0% Prob": 5.941912206013997, "Min_10.0% Prob": 4.363562663396199, "Min_20.0% Prob": 2.8142009605964025, "Min_30.0% Prob": 2.0101562892397244, "Min_40.0% Prob": 1.5405059120307365, "Min_50.0% Prob": 1.2411007075135907, "Min_60.0% Prob": 1.0366785405824581}}
{"hexsha": "7d0de049fa37b3a2b53aa13e4a8de6bd43d360ad", "ext": "py", "lang": "Python", "content": "def update_progress(value):\n    global PROGRESS\n    PROGRESS['value'] = value\n    return PROGRESS['value']", "fn_id": 0, "class_fn": false, "repo": "scyv/Smiley", "file": "smiley/utils.py", "last_update_at": "2021-12-10T23:49:05+00:00", "pred": {"ppl": 4.105530261993408, "ppl_lower": 4.94820499420166, "ppl/lowercase_ppl": -1.132185342822292, "ppl/zlib": 0.018106857810583334, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 7.097299098968506, "Min_20.0% Prob": 5.376344561576843, "Min_30.0% Prob": 4.496228509479099, "Min_40.0% Prob": 3.559539720416069, "Min_50.0% Prob": 2.778950087726116, "Min_60.0% Prob": 2.361255315573592}}
{"hexsha": "6494d7e235268c91bde539243623f44dd265dd50", "ext": "py", "lang": "Python", "content": "def create_fake_server(messages=[]):\n    all_messages = _standard_join_messages() + messages\n\n    async def _fake_server(websocket, _path):\n        _join_message = await websocket.recv()\n        for message in all_messages:\n            await websocket.send(json.dumps(message))\n    return _fake_server", "fn_id": 1, "class_fn": false, "repo": "UrbanOS-Examples/PredictiveParking", "file": "tests/fake_websocket_server.py", "last_update_at": "2021-07-01T16:51:18+00:00", "pred": {"ppl": 3.967749834060669, "ppl_lower": 3.967749834060669, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00856024311542551, "Min_5.0% Prob": 9.17568325996399, "Min_10.0% Prob": 7.477244218190511, "Min_20.0% Prob": 5.363882462183635, "Min_30.0% Prob": 4.194015926784939, "Min_40.0% Prob": 3.341597788863712, "Min_50.0% Prob": 2.737677608927091, "Min_60.0% Prob": 2.2920632771457785}}
{"hexsha": "be45de239f2a958420b5ae5de4b313cf3431599f", "ext": "py", "lang": "Python", "content": "def get_playlist_tracks(args):\n    playlists = []\n    current_user_id = args.get('current_user_id')\n    limit = args.get('limit')\n    offset = args.get('offset')\n    db = get_db_read_replica()\n    with db.scoped_session() as session:\n        try:\n            playlist_id = args.get('playlist_id')\n            playlist = session.query(Playlist).filter(Playlist.is_current == True, Playlist.playlist_id == playlist_id).first()\n            if playlist is None:\n                return None\n            playlist_track_ids = [track_id['track'] for track_id in playlist.playlist_contents['track_ids']]\n            if limit and offset:\n                playlist_track_ids = playlist_track_ids[offset:offset + limit]\n            playlist_tracks = session.query(Track).filter(Track.is_current == True, Track.track_id.in_(playlist_track_ids)).all()\n            tracks = helpers.query_result_to_list(playlist_tracks)\n            tracks = populate_track_metadata(session, playlist_track_ids, tracks, current_user_id)\n            if args.get('with_users', False):\n                add_users_to_tracks(session, tracks)\n            tracks_dict = {track['track_id']: track for track in tracks}\n            playlist_tracks = []\n            for track_id in playlist_track_ids:\n                playlist_tracks.append(tracks_dict[track_id])\n            return playlist_tracks\n        except sqlalchemy.orm.exc.NoResultFound:\n            pass\n    return playlists", "fn_id": 0, "class_fn": false, "repo": "raymondjacobson/audius-protocol", "file": "discovery-provider/src/queries/get_playlist_tracks.py", "last_update_at": "2021-05-29T04:25:03+00:00", "pred": {"ppl": 1.699174165725708, "ppl_lower": 1.9107533693313599, "ppl/lowercase_ppl": -1.2213655459483044, "ppl/zlib": 0.0010976032053069242, "Min_5.0% Prob": 4.945121855962844, "Min_10.0% Prob": 3.7170450091362, "Min_20.0% Prob": 2.354936488936929, "Min_30.0% Prob": 1.6977897712330179, "Min_40.0% Prob": 1.3079800292849542, "Min_50.0% Prob": 1.0550636104504827, "Min_60.0% Prob": 0.884259819820085}}
{"hexsha": "e739faa956bee4ffde5b12e2607b0430bc975de6", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef archive_repositories(archive_repositories_raw: bytes) -> ArchiveRepositories:\n    \"\"\"Provides an ArchiveRepositories instance for the sample archive manifest.\"\"\"\n    return ArchiveRepositories(archive_repositories_raw)", "fn_id": 0, "class_fn": false, "repo": "crashvb/docker-sign-verify", "file": "tests/test_archiverepositories.py", "last_update_at": "2021-09-16T18:44:39+00:00", "pred": {"ppl": 4.903543472290039, "ppl_lower": 6.200475692749023, "ppl/lowercase_ppl": -1.1475937712872053, "ppl/zlib": 0.011777467417587556, "Min_5.0% Prob": 8.514540672302246, "Min_10.0% Prob": 7.4353775183359785, "Min_20.0% Prob": 5.870133141676585, "Min_30.0% Prob": 4.644327527946896, "Min_40.0% Prob": 3.8211777806282043, "Min_50.0% Prob": 3.112418370862161, "Min_60.0% Prob": 2.6495170669781194}}
{"hexsha": "f2e5aa3454e20bde6dfc287c3f2e7fede42c0287", "ext": "py", "lang": "Python", "content": "@overload\ndef assert_equal(actual: scipy.special.orthogonal.orthopoly1d, desired: numpy.poly1d):\n    \"\"\"\n    usage.scipy: 2\n    \"\"\"\n    ...", "fn_id": 2892, "class_fn": false, "repo": "pydata-apis/python-api-record", "file": "data/typing/numpy.testing._private.utils.py", "last_update_at": "2021-11-08T20:16:06+00:00", "pred": {"ppl": 5.261209487915039, "ppl_lower": 5.261209487915039, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.014564569657768187, "Min_5.0% Prob": 9.499876976013184, "Min_10.0% Prob": 8.038693523406982, "Min_20.0% Prob": 5.971553111076355, "Min_30.0% Prob": 4.800124684969584, "Min_40.0% Prob": 3.952187144756317, "Min_50.0% Prob": 3.3081516706943512, "Min_60.0% Prob": 2.7941623225808145}}
{"hexsha": "bcc284a877dbebcbe1f579fbdd8c29590594f15e", "ext": "py", "lang": "Python", "content": "@unittest.skipIf(sys.platform == 'win32', 'Fail to create temp dir.')\n@pytest.mark.parametrize('client_mode', [True, False])\ndef test_two_node(two_node_cluster, working_dir, client_mode):\n    cluster, _ = two_node_cluster\n    address, env, PKG_DIR = start_client_server(cluster, client_mode)\n    runtime_env = f'{{  \"working_dir\": \"{working_dir}\" }}'\n    execute_statement = 'print(sum(ray.get([run_test.remote()] * 1000)))'\n    script = driver_script.format(**locals())\n    out = run_string_as_driver(script, env)\n    assert out.strip().split()[-1] == '1000'\n    assert len(list(Path(PKG_DIR).iterdir())) == 1", "fn_id": 7, "class_fn": false, "repo": "jenhaoyang/ray", "file": "python/ray/tests/test_runtime_env.py", "last_update_at": "2021-04-30T05:22:12+00:00", "pred": {"ppl": 2.9250004291534424, "ppl_lower": 3.3909261226654053, "ppl/lowercase_ppl": -1.1377147014734093, "ppl/zlib": 0.0028697717310238896, "Min_5.0% Prob": 8.04980806870894, "Min_10.0% Prob": 6.2502008784901015, "Min_20.0% Prob": 4.279354553331029, "Min_30.0% Prob": 3.2216761952096764, "Min_40.0% Prob": 2.5757387900217013, "Min_50.0% Prob": 2.1117049055593506, "Min_60.0% Prob": 1.783214481253373}}
{"hexsha": "a318f13cb13b18c46060393025e55c03c4986095", "ext": "py", "lang": "Python", "content": "@MSC.route('/candidates')\ndef candidates():\n    text = request.args.get('text', default='', type=str)\n    limit = request.args.get('limit', default=5, type=int)\n    htmlflag = request.args.get('html', default=0, type=int)\n    rval = {}\n    rval['input'] = text\n    runningOffset = 0\n    if text == '':\n        return 'No text received. Usage: url/candidates?html=0&limit=2&text=texttomedicalspellcheck'\n    respJSONstring = corrector.GetALLCandidatesScoredJSON(text)\n    print(respJSONstring)\n    rval = json.loads(respJSONstring)\n    for result in rval['results']:\n        result['candidates'] = result['candidates'][:limit]\n    if 'results' not in rval.keys() or len(rval['results']) == 0:\n        rval['results'] = 'CORRECT'\n    if bool(htmlflag):\n        return json2html.convert(json.dumps(rval)) + '<br><br><br>Try me out: <br><br>' + formcode\n    else:\n        return json.dumps(rval, indent=2)", "fn_id": 2, "class_fn": false, "repo": "jackneil/medSpellCheck", "file": "webserver.py", "last_update_at": "2021-07-07T02:07:24+00:00", "pred": {"ppl": 3.857285261154175, "ppl_lower": 3.736626386642456, "ppl/lowercase_ppl": -0.97645827910306, "ppl/zlib": 0.0031033646800597598, "Min_5.0% Prob": 9.21786937713623, "Min_10.0% Prob": 7.5537852625693045, "Min_20.0% Prob": 5.4723347425460815, "Min_30.0% Prob": 4.151295613217098, "Min_40.0% Prob": 3.2815377166674984, "Min_50.0% Prob": 2.6765323108242405, "Min_60.0% Prob": 2.247404764957165}}
{"hexsha": "c908d4e2fcbe9433c55ec3ffa39b22b2f66872dd", "ext": "py", "lang": "Python", "content": "def calc_data_maxima(data, order):\n    \"\"\"Calculate the local maxima using an exclusion of order to avoid multiple close maxima.\n\n    :param data: 3D numpy array (axis 0: time)\n    :param order: number of points to consider for maxima\n    :return: 3D numpy bool array with same shape as data, True if maximum\n    \"\"\"\n    argrelmax = signal.argrelmax(data, order=order, mode='wrap')\n    dmean = data.mean(axis=0)\n    data_maxima = np.zeros(data.shape, dtype=bool)\n    for i, j, k in zip(*argrelmax):\n        if data[i, j, k] > dmean[j, k]:\n            data_maxima[i, j, k] = True\n    return data_maxima", "fn_id": 0, "class_fn": false, "repo": "markmuetz/cosmic", "file": "cosmic/WP2/multipeak.py", "last_update_at": "2021-01-26T02:25:48+00:00", "pred": {"ppl": 3.0038881301879883, "ppl_lower": 3.2821223735809326, "ppl/lowercase_ppl": -1.0805365777584077, "ppl/zlib": 0.0034372109153900814, "Min_5.0% Prob": 8.031057405471802, "Min_10.0% Prob": 6.442235159873962, "Min_20.0% Prob": 4.371003273129463, "Min_30.0% Prob": 3.3329022963841757, "Min_40.0% Prob": 2.648757133260369, "Min_50.0% Prob": 2.1701757124066354, "Min_60.0% Prob": 1.8271812126040459}}
{"hexsha": "6fb0abbb3b81f5bf6e666d791414fa75ce85b499", "ext": "py", "lang": "Python", "content": "def _read_checkpoint_file(checkpoint_file: Optional[str]) -> Tuple[Set[str], Set[str]]:\n    colls, users = (set(), set())\n    if checkpoint_file:\n        with open(checkpoint_file) as fd:\n            for line in fd.readlines():\n                if line.startswith('CHECKPOINT'):\n                    _, type_, oid = line.split()\n                    if type_ == 'collection':\n                        colls.add(oid)\n                    elif type_ == 'user':\n                        users.add(oid)\n    return (colls, users)", "fn_id": 6, "class_fn": false, "repo": "girder/dkc-next", "file": "dkc/core/management/commands/migrate_dkc_db.py", "last_update_at": "2021-02-17T20:34:11+00:00", "pred": {"ppl": 2.285256862640381, "ppl_lower": 2.46716046333313, "ppl/lowercase_ppl": -1.0926696280873314, "ppl/zlib": 0.0034436601273434837, "Min_5.0% Prob": 7.707848412649972, "Min_10.0% Prob": 5.952064450581869, "Min_20.0% Prob": 3.805379742383957, "Min_30.0% Prob": 2.6905276901192137, "Min_40.0% Prob": 2.0608183171600105, "Min_50.0% Prob": 1.6591062779476244, "Min_60.0% Prob": 1.3854595383939643}}
{"hexsha": "567e27ecd176008a4a9c4c66d72d8200e72ba772", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='session', autouse=True)\ndef cleanup(request):\n\n    def remove_test_dir():\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/consensus.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.info2'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.newick'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.png'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_map'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_tmp'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/test'))\n    request.addfinalizer(remove_test_dir)", "fn_id": 0, "class_fn": false, "repo": "faridrashidi/trisicell", "file": "tests/test_commands.py", "last_update_at": "2021-11-16T03:14:36+00:00", "pred": {"ppl": 1.6544544696807861, "ppl_lower": 1.6876617670059204, "ppl/lowercase_ppl": -1.0394713085690366, "ppl/zlib": 0.0019439047448650759, "Min_5.0% Prob": 7.142695769667625, "Min_10.0% Prob": 4.646313081337856, "Min_20.0% Prob": 2.5015813723779643, "Min_30.0% Prob": 1.6789067051397302, "Min_40.0% Prob": 1.2613304022251843, "Min_50.0% Prob": 1.006651883337081, "Min_60.0% Prob": 0.8394731347202895}}
{"hexsha": "454c918ee83d8f3c85828d2e941785840208d81e", "ext": "py", "lang": "Python", "content": "def text_error(code: int, error: Exception, url: str, usage: str='') -> Response:\n    \"\"\"Format error message as plain text\n\n    Returns\n    -------\n    error message formatted as plain text.\n    \"\"\"\n    return PlainTextResponse(content=f'Error {code}: {ERROR_CODE_MESSAGES[code]}\\n\\n{error}\\n\\nUsage details are available from {usage}\\n\\nRequest:\\n{url}\\n\\nRequest Submitted:\\n{UTCDateTime().isoformat()}Z\\n\\nService Version:\\n{VERSION}\\n', status_code=code)", "fn_id": 5, "class_fn": false, "repo": "alejandrodelcampillo/geomag-algorithms", "file": "geomagio/api/ws/app.py", "last_update_at": "2021-02-22T23:45:22+00:00", "pred": {"ppl": 4.962205410003662, "ppl_lower": 6.323736190795898, "ppl/lowercase_ppl": -1.15136241180625, "ppl/zlib": 0.005467065805555629, "Min_5.0% Prob": 9.207467351640974, "Min_10.0% Prob": 7.55671375138419, "Min_20.0% Prob": 5.607779091802136, "Min_30.0% Prob": 4.4894718430763065, "Min_40.0% Prob": 3.6982267540076683, "Min_50.0% Prob": 3.11088878992531, "Min_60.0% Prob": 2.631501602372904}}
{"hexsha": "8c985af6b5bde8b51d64a34a81f930b1cbbde109", "ext": "py", "lang": "Python", "content": "def decode_UHFRFModeTable(data):\n    logger.debug(func())\n    par = {}\n    if len(data) == 0:\n        return (None, data)\n    header = data[0:par_header_len]\n    msgtype, length = struct.unpack(par_header, header)\n    msgtype = msgtype & BITMASK(10)\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    if msgtype != Message_struct['UHFRFModeTable']['type']:\n        return (None, data)\n    body = data[par_header_len:length]\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    i = 0\n    ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n    while ret:\n        par['UHFC1G2RFModeTableEntry' + str(i)] = ret\n        ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n        i += 1\n    return (par, data[length:])", "fn_id": 18, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/llrp_proto.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 2.876415729522705, "ppl_lower": 3.2547171115875244, "ppl/lowercase_ppl": -1.1169475834449945, "ppl/zlib": 0.0032710370919711213, "Min_5.0% Prob": 7.880484853472028, "Min_10.0% Prob": 6.380043693951198, "Min_20.0% Prob": 4.420260499630656, "Min_30.0% Prob": 3.2936489908468154, "Min_40.0% Prob": 2.586640514699476, "Min_50.0% Prob": 2.1027244784470116, "Min_60.0% Prob": 1.7614729569648349}}
{"hexsha": "b0b49ffed87028f7676ecd3a3526e65ea082c9a2", "ext": "py", "lang": "Python", "content": "def obtain_pcaplot(model):\n    for idx, layer in enumerate(model.layers):\n        if layer.__class__.__name__ == 'Dense':\n            all_weights = layer.get_weights()\n            weights = all_weights[0]\n            pca = applyPCA(weights, np.array(weights).shape[1], drawPlot=True, isReshape=False)\n            break", "fn_id": 10, "class_fn": false, "repo": "kilinco/spec-img-finesse", "file": "CNN_version/final.py", "last_update_at": "2021-06-03T16:52:44+00:00", "pred": {"ppl": 4.668266773223877, "ppl_lower": 5.786782264709473, "ppl/lowercase_ppl": -1.1394017567939785, "ppl/zlib": 0.008024936782050981, "Min_5.0% Prob": 10.567024230957031, "Min_10.0% Prob": 8.589372899797228, "Min_20.0% Prob": 6.337042846177754, "Min_30.0% Prob": 4.762366442844786, "Min_40.0% Prob": 3.754386616058839, "Min_50.0% Prob": 3.060308750490753, "Min_60.0% Prob": 2.5694975839075394}}
{"hexsha": "af3e93794d127b40b4269b409917fdaa6143f215", "ext": "py", "lang": "Python", "content": "def parse_function_args(query_param_definition, is_strict=False):\n\n    def inner_get_fu(fu):\n        return FuncArgParser(query_param_definition, is_strict=is_strict)(fu)\n    return inner_get_fu", "fn_id": 0, "class_fn": false, "repo": "sabariramc/funcargparser", "file": "testimplementation.py", "last_update_at": "2021-05-05T09:56:14+00:00", "pred": {"ppl": 6.887333393096924, "ppl_lower": 8.980999946594238, "ppl/lowercase_ppl": -1.1375495917707668, "ppl/zlib": 0.015947801524268293, "Min_5.0% Prob": 9.421634356180826, "Min_10.0% Prob": 8.098071654637655, "Min_20.0% Prob": 6.607368505918062, "Min_30.0% Prob": 5.503612367730391, "Min_40.0% Prob": 4.484683036804199, "Min_50.0% Prob": 3.7561175841273684, "Min_60.0% Prob": 3.2363519366735067}}
{"hexsha": "80c466f827f74902bd68bfb5f88abcaf94f6d86e", "ext": "py", "lang": "Python", "content": "def test_handle_xevent_atom_ok(monkeypatch):\n    \"\"\"Return false when event type is invalid\"\"\"\n    event = MagicMock(spec=Xlib.protocol.event.PropertyNotify)\n    event.type = xwindow.Xlib.X.PropertyNotify\n    event.atom = xwindow.NET_ACTIVE_WINDOW\n    monkeypatch.setattr(xwindow, 'ROOT', MagicMock())\n    monkeypatch.setattr(xwindow, 'DISP', MagicMock())\n    result = xwindow.handle_xevent(event, callback=lambda *args, **kwargs: 'callback')\n    assert result is True", "fn_id": 6, "class_fn": false, "repo": "eddie-dunn/swytcher", "file": "tests/test_xwindow.py", "last_update_at": "2021-07-07T08:52:49+00:00", "pred": {"ppl": 3.258023738861084, "ppl_lower": 4.798384666442871, "ppl/lowercase_ppl": -1.3277891119363159, "ppl/zlib": 0.004423673395066207, "Min_5.0% Prob": 8.10192837033953, "Min_10.0% Prob": 6.678209114074707, "Min_20.0% Prob": 4.837379519144694, "Min_30.0% Prob": 3.6242504106915514, "Min_40.0% Prob": 2.8698803245044147, "Min_50.0% Prob": 2.331664376638152, "Min_60.0% Prob": 1.9688705134650935}}
{"hexsha": "a6247751a993a8d45edcb88a38537df9fdda2f2e", "ext": "py", "lang": "Python", "content": "def decode_vector_type(contract_address, abi):\n    wasm_contract_obj = platon.wasmcontract(address=contract_address, abi=abi, vmtype=1)\n    tx_hash = wasm_contract_obj.functions.clearElement().transact({'from': from_address, 'gas': gas})\n    tx_receipt = platon.waitForTransactionReceipt(tx_hash)\n    topic_param = wasm_contract_obj.events.clear().processReceipt(tx_receipt)\n    print(topic_param)", "fn_id": 4, "class_fn": false, "repo": "AlayaNetwork/client-sdk-python", "file": "tests/wasm_unit_test.py", "last_update_at": "2021-05-06T07:41:02+00:00", "pred": {"ppl": 3.9801809787750244, "ppl_lower": 4.635676383972168, "ppl/lowercase_ppl": -1.1103683600424759, "ppl/zlib": 0.0064548004220399535, "Min_5.0% Prob": 9.180698235829672, "Min_10.0% Prob": 7.896128067603478, "Min_20.0% Prob": 5.700966340524179, "Min_30.0% Prob": 4.298063673624179, "Min_40.0% Prob": 3.3843802657994355, "Min_50.0% Prob": 2.752109181837759, "Min_60.0% Prob": 2.305578515517065}}
{"hexsha": "3931e032c422dda461181a2d4fc71a72aab1d761", "ext": "py", "lang": "Python", "content": "def main():\n    \"\"\"Main function.\"\"\"\n    try:\n        tickers = os.listdir('data')\n        tickers = (os.path.basename(t) for t in tickers if t.endswith('.csv.gz'))\n        tickers = [t.split('.')[0] for t in tickers]\n        epilog = '\\nValid values for ticker are: %s' % tickers\n        epilog += '\\n\\nSample usage: ./predict.py IBM 2010-01-01 2011-01-01 21'\n    except OSError:\n        tickers = []\n        epilog = ''\n    parser = argparse.ArgumentParser(description='Predicts stock prices.', epilog=epilog, add_help=True)\n    parser.add_argument('ticker', metavar='TICKER', help='The stock item to predict')\n    parser.add_argument('start_date', metavar='START_DATE', help='The initial date to start looking into history.')\n    parser.add_argument('end_date', metavar='END_DATE', help='The final date to stop looking into history.')\n    parser.add_argument('shift', metavar='SHIFT', type=int, help='How many days in advance to predict.')\n    options = parser.parse_args()\n    if not tickers:\n        print('\"No tickers available. Unable to predict.')\n        raise SystemExit\n    ticker = options.ticker\n    if ticker not in tickers:\n        print('\"ticker\" must be one of %s' % tickers)\n        raise SystemExit\n    try:\n        start_date = pd.to_datetime(options.start_date)\n    except ValueError:\n        print('\"start_date\" must be a valid date. Not %s' % start_date)\n        raise SystemExit\n    try:\n        end_date = pd.to_datetime(options.end_date)\n    except ValueError:\n        print('\"end_date\" must be a valid date. Not %s' % end_date)\n        raise SystemExit\n    shift = options.shift\n    if shift <= 0:\n        print('\"shift\" must be a positive integer')\n        raise SystemExit\n    print('Loading data...')\n    X, y, tX, _, scaler = models.get_processed_dataset(ticker, 0.9999999999, shift, 0, False, start_date, end_date)\n    print('Training model...')\n    _, _, model = models.cross_validate_model('huber', X, y)\n    print('Predicting...')\n    yhat = model.predict(tX)\n    prediction = scaler.inverse_transform(np.array([[yhat[0]] + [0] * (X.shape[1] - 1)]))\n    print('Predicted value:', prediction[0, 0])", "fn_id": 0, "class_fn": false, "repo": "renatolfc/stock-prediction", "file": "predict.py", "last_update_at": "2021-07-01T12:17:06+00:00", "pred": {"ppl": 2.1520633697509766, "ppl_lower": 2.328974723815918, "ppl/lowercase_ppl": -1.1030770577115505, "ppl/zlib": 0.0009059421853147651, "Min_5.0% Prob": 6.583302266257149, "Min_10.0% Prob": 4.944405586378915, "Min_20.0% Prob": 3.280228059765295, "Min_30.0% Prob": 2.4225394663945683, "Min_40.0% Prob": 1.8896897173096947, "Min_50.0% Prob": 1.5279775200459167, "Min_60.0% Prob": 1.2764056443900116}}
{"hexsha": "73ef8d1f69375bfcaedacdc382f9d2e3fbedc2b8", "ext": "py", "lang": "Python", "content": "def sig_gen_multi(public_as, private_as, public_ams, private_ams, body, amsh, arsh, fold=False, verbose=False, as_tmp=None, ams_tmp=None):\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h.update(body)\n    bh = base64.b64encode(h.digest())\n    print('ams bh= ')\n    print(bh)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in amsh(bh)]))\n    if verbose:\n        print('\\nsign ams hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_ams)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    msb = base64.b64encode(bytes(sig2))\n    if fold:\n        msb = msb[:70] + b' ' + msb[70:142] + b' ' + msb[142:214]\n    print('ams b= ')\n    print(msb)\n    pk_ams = parse_public_key(base64.b64decode(public_ams))\n    signature = base64.b64decode(msb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_ams)\n    print('ams sig valid: %r' % ams_valid)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in arsh(msb, bh)]))\n    if verbose:\n        print('\\nsign ars hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_as)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    sb = base64.b64encode(bytes(sig2))\n    print('arsh b=')\n    print(sb)\n    pk_as = parse_public_key(base64.b64decode(public_as))\n    signature = base64.b64decode(sb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_as)\n    print('arsh sig valid: %r' % ams_valid)\n    spc = fold and b'' or b'  '\n    accum = ''\n    if as_tmp:\n        sb = sb[:70] + b'\\n    ' + spc + sb[70:142] + b'\\n    ' + spc + sb[142:214]\n        res = as_tmp.replace(b'%b', sb)\n        accum = res\n        print(res.decode('utf-8'))\n    if ams_tmp:\n        msb = msb.replace(b' ', b'')\n        msb = msb[:70] + b'\\n    ' + spc + msb[70:142] + b'\\n    ' + spc + msb[142:214]\n        res = ams_tmp.replace(b'%bh', bh)\n        res = res.replace(b'%b', msb)\n        accum += b'\\n' + res\n        print(res.decode('utf-8'))\n    os.system(b'echo \"' + accum + b'\" | pbcopy')", "fn_id": 1, "class_fn": false, "repo": "ValiMail/arc_test_suite", "file": "sig_gen/sig_gen.py", "last_update_at": "2021-02-25T00:59:54+00:00", "pred": {"ppl": 2.1723792552948, "ppl_lower": 2.2707598209381104, "ppl/lowercase_ppl": -1.0570896977308333, "ppl/zlib": 0.001171938063326762, "Min_5.0% Prob": 7.50523175795873, "Min_10.0% Prob": 5.638606300059053, "Min_20.0% Prob": 3.5870539063062425, "Min_30.0% Prob": 2.531708768711969, "Min_40.0% Prob": 1.925919912031392, "Min_50.0% Prob": 1.5476260817893506, "Min_60.0% Prob": 1.2937348115181633}}
{"hexsha": "8e27225db54d8f1ce0cedbcc4f4b9dfe2b6fdaf9", "ext": "py", "lang": "Python", "content": "def draw_iterations(g, eval_map_function, x0, n):\n\n    def draw_mid_point_arrows(x, x_next, both=True):\n        if x_next > x:\n            arrow_direction_angles = (0.5 * math.pi, 0)\n        else:\n            arrow_direction_angles = (-0.5 * math.pi, math.pi)\n        g.draw_arrow_tip((x, mid_value), arrow_direction_angles[0])\n        if both:\n            g.draw_arrow_tip((mid_value, x_next), arrow_direction_angles[1])\n    xs = [x0]\n    for i in range(n):\n        xs.append(eval_map_function(xs[-1]))\n    g.set_dash_dash_structure(12, 4, units='svg')\n    g.set_dash_mode('dash')\n    g.set_svg_options(stroke_width=iterations_stroke_w, units='svg')\n    g.set_arrow_options(width=iteration_arrow_rel_size * arrow_size, curvature=0, units='svg')\n    g.set_point_size(0.01)\n    g.draw_line_segment((x0, 0), (x0, x0))\n    for i, x in enumerate(xs[:-2]):\n        x_next = xs[i + 1]\n        g.draw_polyline([(x, x), (x, x_next), (x_next, x_next)])\n        mid_value = 0.5 * (x + x_next)\n        draw_mid_point_arrows(x, x_next)\n    g.draw_polyline([(xs[-2], xs[-2]), (xs[-2], xs[-1])])\n    g.draw_point((xs[-2], xs[-1]))\n    draw_mid_point_arrows(xs[-2], xs[-1], both=False)\n    g.reset_dash_and_dot_structures()", "fn_id": 2, "class_fn": false, "repo": "alexn11/mathsvg", "file": "more-examples/iteration-graph.py", "last_update_at": "2021-11-27T08:46:20+00:00", "pred": {"ppl": 2.8566057682037354, "ppl_lower": 2.902195930480957, "ppl/lowercase_ppl": -1.015084820289478, "ppl/zlib": 0.002209756054103828, "Min_5.0% Prob": 8.424838920434317, "Min_10.0% Prob": 6.319863285337176, "Min_20.0% Prob": 4.3067794016429355, "Min_30.0% Prob": 3.252369366535524, "Min_40.0% Prob": 2.562770685675193, "Min_50.0% Prob": 2.0842840013759476, "Min_60.0% Prob": 1.7477283577377698}}
{"hexsha": "47fe8ba25f624d3f52e3accc1fc3872135959f05", "ext": "py", "lang": "Python", "content": "def main(args):\n    \"\"\"\n    The starting point of the program.\n    \"\"\"\n    while True:\n        num_items = 1\n        read_data = ReadData() if len(args) == 1 else ReadData(args)\n        data_log_df = get_file_df(read_data.get_data_log())\n        exe_table_df = get_file_df(read_data.get_exe_table())\n        doses_delta_df = get_file_df(read_data.get_doses_delta())\n        summary = get_summary(read_data.get_summary())\n        dfs = [('data_log', data_log_df[-num_items:]), ('exe_table', exe_table_df[-num_items:]), ('doses_delta', doses_delta_df[-num_items:])]\n        data_json = get_json(dfs, summary, read_data.json_name)\n        read_data.json = data_json\n        time.sleep(5)", "fn_id": 3, "class_fn": false, "repo": "cs481-ekh/s21-team-jat", "file": "python/read_data.py", "last_update_at": "2021-04-06T17:16:24+00:00", "pred": {"ppl": 3.1244211196899414, "ppl_lower": 3.38641095161438, "ppl/lowercase_ppl": -1.070679560104064, "ppl/zlib": 0.004083329836307468, "Min_5.0% Prob": 8.5053102572759, "Min_10.0% Prob": 6.977237244447072, "Min_20.0% Prob": 4.79536956670333, "Min_30.0% Prob": 3.596422635529139, "Min_40.0% Prob": 2.7796753581081117, "Min_50.0% Prob": 2.2545953406308725, "Min_60.0% Prob": 1.900788570367763}}
{"hexsha": "7848c02f06f57265c259b7cf28bbf7fbc43f4a4a", "ext": "py", "lang": "Python", "content": "def fecha_caixa():\n    global aberto\n    tot = 0\n    for elemento in transacoes_finalizadas:\n        tot += elemento[1]\n    print(f'TOTAL DE VENDAS R${tot:.2f}')\n    print()\n    while len(transacoes_finalizadas) != 0:\n        print('ELIMINE AS TRANSA\u00c7\u00d5ES FINALIZADAS:')\n        for i, elemento in enumerate(transacoes_finalizadas):\n            print(f'{i:<1}', end='|    ')\n            print(f'{elemento[0]:<17}', end='|')\n            print(f'{elemento[1]:>5.2f}')\n        try:\n            aux = int(input(''))\n            tot -= transacoes_finalizadas[aux][1]\n            tot = round(tot, 2)\n            transacoes_finalizadas.pop(aux)\n        except ValueError:\n            print('[ERRO]: Digite valores v\u00e1lidos')\n            return fecha_caixa()\n        except IndexError:\n            print(f' Indice <= {len(transacoes_finalizadas)}')\n    print(f'TRANSA\u00c7\u00d5ES ELIMINADAS TOTAL: R${tot}')\n    print('CAIXA FECHADO COM SUCESSO!')\n    aberto = False", "fn_id": 17, "class_fn": false, "repo": "FelipeECarvalho/Projetos", "file": "Sistema Caixa Supermercados/principal.py", "last_update_at": "2021-08-22T17:10:08+00:00", "pred": {"ppl": 2.6304214000701904, "ppl_lower": 3.0425772666931152, "ppl/lowercase_ppl": -1.1505058921637643, "ppl/zlib": 0.002203061643549163, "Min_5.0% Prob": 8.07008866702809, "Min_10.0% Prob": 6.218226748354295, "Min_20.0% Prob": 4.213194933007745, "Min_30.0% Prob": 3.0723031423255507, "Min_40.0% Prob": 2.3827685705002617, "Min_50.0% Prob": 1.928792871008901, "Min_60.0% Prob": 1.6134441316164299}}
{"hexsha": "c370b87e8143a97ff5064d02515dc7a0a2cf09a6", "ext": "py", "lang": "Python", "content": "def patch():\n    global _patched\n    if not _patched:\n        conf.Settings = Settings\n        conf.LazySettings = LazySettings\n        conf.settings = settings\n        _patched = True", "fn_id": 0, "class_fn": false, "repo": "jayvdb/django-service-urls", "file": "service_urls/patch.py", "last_update_at": "2021-01-13T02:41:26+00:00", "pred": {"ppl": 4.356584548950195, "ppl_lower": 5.77454137802124, "ppl/lowercase_ppl": -1.1914606720134227, "ppl/zlib": 0.015996612935232416, "Min_5.0% Prob": 9.76560354232788, "Min_10.0% Prob": 8.539384484291077, "Min_20.0% Prob": 6.106490294138591, "Min_30.0% Prob": 4.601737567356655, "Min_40.0% Prob": 3.649158477783203, "Min_50.0% Prob": 2.960761805375417, "Min_60.0% Prob": 2.4713041397004294}}
{"hexsha": "a9d142291ba38842e31d3177869d6447f084d025", "ext": "py", "lang": "Python", "content": "def time_model(model: nn.Module, test_set: Type[LightFieldDataset], device) -> np.ndarray:\n    model.eval()\n    custom = CustomProgressBar('N/A')\n    loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=1, sampler=SequentialSampler(test_set), num_workers=1, pin_memory=True)\n    test_set.set_only_x_dataset()\n    model.eval()\n    torch.set_grad_enabled(False)\n    print('Timing')\n    all_times = []\n    for input_data in custom.bar(loader):\n        tick = time.time()\n        input_var = input_data.to(device).float().div_(255.0)\n        _ = model(input_var)\n        tock = time.time()\n        time_taken = tock - tick\n        all_times.append(time_taken)\n    test_set.revert_only_x_dataset()\n    return np.array(all_times)", "fn_id": 0, "class_fn": false, "repo": "leaveitout/deep_light_field_interp", "file": "deeplfinterp/util/train_tools.py", "last_update_at": "2021-08-06T13:39:19+00:00", "pred": {"ppl": 3.0507819652557373, "ppl_lower": 3.643841505050659, "ppl/lowercase_ppl": -1.1592620333330186, "ppl/zlib": 0.0028237922526838477, "Min_5.0% Prob": 8.295299750107985, "Min_10.0% Prob": 6.5250561604133015, "Min_20.0% Prob": 4.774514205180681, "Min_30.0% Prob": 3.5653855319206533, "Min_40.0% Prob": 2.7624005319980474, "Min_50.0% Prob": 2.229042686092166, "Min_60.0% Prob": 1.8629747905935614}}
{"hexsha": "e8bc0e0cfb812d7c32521e012f61a1e17efddd71", "ext": "py", "lang": "Python", "content": "def save_mel_dataset(out_path, *paths, in_db=True, root_path=None):\n    \"\"\"\n    \"\"\"\n    ds_len = len(paths)\n    with IncrementalHDF5(out_path, CONF.NUM_MELS, np.float32) as ihdf5:\n        LOGGER.info(f'Writing to {out_path}')\n        for i, abspath in enumerate(paths, 1):\n            if root_path is not None:\n                metadata_str = str(abspath.relative_to(root_path))\n            else:\n                metadata_str = str(abspath)\n            if i % 100 == 0:\n                LOGGER.info(f'[{i}/{ds_len}] save_mel_dataset: {metadata_str}')\n            arr = wavpath_to_mel(str(abspath), CONF.WAV_SR, wav_norm=CONF.WAV_NORM, n_mels=CONF.NUM_MELS, hop_length=CONF.STFT_HOPSIZE, pad_mode='constant', in_decibels=in_db, logger=LOGGER)\n            if arr is None:\n                continue\n            ihdf5.append(arr, metadata_str)\n            _, arr_w = arr.shape\n            assert (arr == ihdf5.data_ds[:, -arr_w:]).all(), 'Should never happen'\n        LOGGER.info(f'Finished writing to {out_path}')", "fn_id": 1, "class_fn": false, "repo": "andres-fr/dcase2021_umaps", "file": "00c_precompute_fraunhofer_fixed.py", "last_update_at": "2021-11-30T09:28:21+00:00", "pred": {"ppl": 3.2773852348327637, "ppl_lower": 3.6918516159057617, "ppl/lowercase_ppl": -1.1003181116651533, "ppl/zlib": 0.002442481316817508, "Min_5.0% Prob": 8.092131031884087, "Min_10.0% Prob": 6.900938206248814, "Min_20.0% Prob": 4.9095575989109195, "Min_30.0% Prob": 3.6466217561201617, "Min_40.0% Prob": 2.872184204001005, "Min_50.0% Prob": 2.3401465339019247, "Min_60.0% Prob": 1.975978438014334}}
{"hexsha": "5a93cf64a2f1ac340c8208f986a4fd8f35d03148", "ext": "py", "lang": "Python", "content": "def view(location, browser=None, new='same', autoraise=True):\n    \"\"\" Opens a browser to view the specified location.\n\n        Args:\n            location (str) : location to open\n                If location does not begin with \"http:\" it is assumed\n                to be a file path on the local filesystem.\n            browser (str) : what browser to use\n            new (str) : how to open the location\n                Valid values are:\n                    * \"same\" - open in the current tab\n                    * \"tab\" - open a new tab in the current window\n                    * \"window\" - open in a new window\n            autoraise (bool) : whether to raise the new location\n\n        Returns:\n            None\n\n        \"\"\"\n    new_map = {'same': 0, 'window': 1, 'tab': 2}\n    if location.startswith('http'):\n        url = location\n    else:\n        url = 'file://' + abspath(location)\n    try:\n        controller = get_browser_controller(browser)\n        controller.open(url, new=new_map[new], autoraise=autoraise)\n    except (SystemExit, KeyboardInterrupt):\n        raise\n    except:\n        pass", "fn_id": 1, "class_fn": false, "repo": "tswicegood/bokeh", "file": "bokeh/browserlib.py", "last_update_at": "2021-11-17T10:48:36+00:00", "pred": {"ppl": 2.438352108001709, "ppl_lower": 2.7835028171539307, "ppl/lowercase_ppl": -1.1485295201746948, "ppl/zlib": 0.001864691308723802, "Min_5.0% Prob": 6.622891289847238, "Min_10.0% Prob": 5.074063490177023, "Min_20.0% Prob": 3.503179502898249, "Min_30.0% Prob": 2.666074646615434, "Min_40.0% Prob": 2.134614006712519, "Min_50.0% Prob": 1.7462382004277346, "Min_60.0% Prob": 1.4749286844900675}}
{"hexsha": "ad091436c7271a654fb820601c6d942f23f49ff5", "ext": "py", "lang": "Python", "content": "def get_rna(fq_dict):\n    \"\"\"\n    Obtain a numpy array with all detected spots in the image. Detection results\n    are saved in a dictionary (see read_FQ_results_matlab for more details).\n    \"\"\"\n    RNAall = nested_lookup('spots', fq_dict)\n    for idx, val in enumerate(RNAall):\n        if idx == 0:\n            spots_all = np.copy(val)\n        else:\n            spots_all = np.append(spots_all, val, axis=0)\n    return spots_all", "fn_id": 3, "class_fn": false, "repo": "muellerflorian/parker-rna-loc-elegans", "file": "rnaloc/FQtoolbox.py", "last_update_at": "2021-01-12T16:51:38+00:00", "pred": {"ppl": 4.708157062530518, "ppl_lower": 4.9027838706970215, "ppl/lowercase_ppl": -1.026145176052917, "ppl/zlib": 0.006172496213613378, "Min_5.0% Prob": 8.848136288779122, "Min_10.0% Prob": 7.2321111134120395, "Min_20.0% Prob": 5.602841641221728, "Min_30.0% Prob": 4.54093307672545, "Min_40.0% Prob": 3.707322415552641, "Min_50.0% Prob": 3.0437333720425763, "Min_60.0% Prob": 2.5783086751782616}}
{"hexsha": "8b2fa9137563469049632eeb151af101a87de1b0", "ext": "py", "lang": "Python", "content": "@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        if message.content == 'Authentication invalid':\n            await renew_auth(message)\n        return\n    if message.content.startswith('>'):\n        return\n        await parse(message)\n    if isinstance(message.channel, discord.channel.DMChannel):\n        if message.content == 'quit':\n            await do_quit(message)\n        if message.content == 'test':\n            return\n            await do_tests(message)\n        if message.content == 'renew' or message.content == 'reset':\n            await renew_auth(message)\n    if message.content.startswith('/'):\n        await client.process_commands(message)", "fn_id": 5, "class_fn": false, "repo": "joshmiller17/venntbot", "file": "venntbot.py", "last_update_at": "2021-09-11T23:15:38+00:00", "pred": {"ppl": 2.8588361740112305, "ppl_lower": 3.0100786685943604, "ppl/lowercase_ppl": -1.0490773869984802, "ppl/zlib": 0.0042016584393939765, "Min_5.0% Prob": 8.865485846996307, "Min_10.0% Prob": 6.882211460786707, "Min_20.0% Prob": 4.453087776047843, "Min_30.0% Prob": 3.237160566842781, "Min_40.0% Prob": 2.545111343054704, "Min_50.0% Prob": 2.0763175700152856, "Min_60.0% Prob": 1.7564696964790236}}
{"hexsha": "385dabe838e94b3bc682d337123e8384c47a3724", "ext": "py", "lang": "Python", "content": "def parse_patterns(query, graph=False):\n    \"\"\"\n    if query['patterns'] looks like so:\n    ['target_type=', 'what=', '!tag_k=not_equals_thistag_v', 'tag_k:match_this_val', 'arbitrary', 'words']\n\n    then the patterns will look like so:\n    {\n    'tag_k=not_equals_thistag_v': {'negate': True, 'match_tag_equality': ['tag_k', 'not_equals_thistag_v']},\n    'target_type=':               {'negate': False, 'match_tag_equality': ['target_type', '']},\n    'what=':                      {'negate': False, 'match_tag_equality': ['what', '']},\n    'tag_k:match_this_val':       {'negate': False, 'match_tag_regex': ['tag_k', 'match_this_val']},\n    'words':                      {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x2612cb0>},\n    'arbitrary':                  {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x7f6cc000bd90>}\n    }\n    \"\"\"\n    patterns = {}\n    for pattern in query['patterns']:\n        negate = False\n        if pattern.startswith('!'):\n            negate = True\n            pattern = pattern[1:]\n        patterns[pattern] = {'negate': negate}\n        if '=' in pattern:\n            if not graph or pattern not in ('target_type=', 'what='):\n                patterns[pattern]['match_tag_equality'] = pattern.split('=')\n            else:\n                del patterns[pattern]\n        elif ':' in pattern:\n            if not graph or pattern not in ('target_type:', 'what:'):\n                patterns[pattern]['match_tag_regex'] = pattern.split(':')\n            else:\n                del patterns[pattern]\n        else:\n            patterns[pattern]['match_id_regex'] = re.compile(pattern)\n    return patterns", "fn_id": 2, "class_fn": false, "repo": "bittorrent/graph-explorer", "file": "query.py", "last_update_at": "2021-03-14T19:37:11+00:00", "pred": {"ppl": 2.2562739849090576, "ppl_lower": 2.391188383102417, "ppl/lowercase_ppl": -1.0713710776902845, "ppl/zlib": 0.0016339654085806396, "Min_5.0% Prob": 7.468719207323515, "Min_10.0% Prob": 5.790494767519144, "Min_20.0% Prob": 3.7300522764523825, "Min_30.0% Prob": 2.641856718855568, "Min_40.0% Prob": 2.0177603113637153, "Min_50.0% Prob": 1.623024839780886, "Min_60.0% Prob": 1.3554444246740325}}
{"hexsha": "c465816e2eca187bfd4fc478284eec3b6c703e51", "ext": "py", "lang": "Python", "content": "def generalInquiry(choiceList, message):\n    choiceList.append(colored('Return', 'red'))\n    options = [inquirer.List('inputVal', message=message, choices=choiceList)]\n    print(colored('Use arrow keys to navigate\\n', 'blue'))\n    print(colored('Proceed --> Enter / Return key\\n', 'green'))\n    return inquirer.prompt(options)['inputVal']", "fn_id": 15, "class_fn": false, "repo": "HiLabTufts/GailBot-3", "file": "gailbot-3.py", "last_update_at": "2021-06-28T10:26:20+00:00", "pred": {"ppl": 5.465428829193115, "ppl_lower": 5.800072193145752, "ppl/lowercase_ppl": -1.034989571146921, "ppl/zlib": 0.008285085789453072, "Min_5.0% Prob": 9.551579093933105, "Min_10.0% Prob": 8.477874422073365, "Min_20.0% Prob": 6.620457065105438, "Min_30.0% Prob": 5.097122246219266, "Min_40.0% Prob": 4.103269918662746, "Min_50.0% Prob": 3.3415472432971, "Min_60.0% Prob": 2.829818855250074}}
{"hexsha": "3b7d7e72a7f0b786dd6d72495ed17a1c7b0e1e9f", "ext": "py", "lang": "Python", "content": "@card('Rolling Spoil')\ndef rolling_spoil(card, abilities):\n\n    def rolling_spoil():\n        return AbilityNotImplemented\n    return (rolling_spoil,)", "fn_id": 155, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/ravnica_city_of_guilds.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 4.791172504425049, "ppl_lower": 8.809568405151367, "ppl/lowercase_ppl": -1.388736878573073, "ppl/zlib": 0.015360540815547026, "Min_5.0% Prob": 10.170696258544922, "Min_10.0% Prob": 9.475697898864746, "Min_20.0% Prob": 7.376556444168091, "Min_30.0% Prob": 5.260387667020162, "Min_40.0% Prob": 4.058518940210343, "Min_50.0% Prob": 3.131578830966296, "Min_60.0% Prob": 2.6276866610973113}}
{"hexsha": "d090023df2a9fa2d3a531ad91449ef05aefa4e12", "ext": "py", "lang": "Python", "content": "def dice_loss(pred, target, smooth=1.0):\n    pred = pred.contiguous()\n    target = target.contiguous()\n    intersection = (pred * target).sum(dim=1).sum(dim=1)\n    loss = 1 - (2.0 * intersection + smooth) / (pred.sum(dim=1).sum(dim=1) + target.sum(dim=1).sum(dim=1) + smooth)\n    return loss.mean()", "fn_id": 1, "class_fn": false, "repo": "rispoli-lab/Deep-Learning-Breast-FGT", "file": "loss.py", "last_update_at": "2021-09-17T17:10:52+00:00", "pred": {"ppl": 1.640644907951355, "ppl_lower": 1.640644907951355, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.003278737755593247, "Min_5.0% Prob": 5.7982288837432865, "Min_10.0% Prob": 3.720332763411782, "Min_20.0% Prob": 2.2787135351787913, "Min_30.0% Prob": 1.6220821164774173, "Min_40.0% Prob": 1.2284869634442859, "Min_50.0% Prob": 0.9956867507592376, "Min_60.0% Prob": 0.8338541526333498}}
{"hexsha": "20fd1f5105839af2bba28ff254523016e1e09b8f", "ext": "py", "lang": "Python", "content": "def _get_pipeline_definition_args(dag):\n    check.inst_param(dag, 'dag', DAG)\n    pipeline_dependencies = {}\n    solid_defs = []\n    seen_tasks = []\n    dag_roots = sorted(dag.roots, key=lambda x: x.task_id)\n    for task in dag_roots:\n        _traverse_airflow_dag(task, seen_tasks, pipeline_dependencies, solid_defs)\n    return (pipeline_dependencies, solid_defs)", "fn_id": 1, "class_fn": false, "repo": "uranusbeam/bit-dagster", "file": "python_modules/libraries/dagster-airflow/dagster_airflow/dagster_pipeline_factory.py", "last_update_at": "2021-11-08T02:10:42+00:00", "pred": {"ppl": 3.3055198192596436, "ppl_lower": 3.554626941680908, "ppl/lowercase_ppl": -1.0607701198429276, "ppl/zlib": 0.005860753645179923, "Min_5.0% Prob": 8.257033665974935, "Min_10.0% Prob": 7.14750091234843, "Min_20.0% Prob": 5.093041114807129, "Min_30.0% Prob": 3.8426919273428015, "Min_40.0% Prob": 2.9533592209219934, "Min_50.0% Prob": 2.372976874193502, "Min_60.0% Prob": 2.0039011045296986}}
{"hexsha": "200733e11c459547d9421419b37fface7ce8edae", "ext": "py", "lang": "Python", "content": "def test_qcovariate_num_qs(exreaddata):\n    test = covariate.QCovariate()\n    assert test.num_qs() == 0\n    test.consume_read(exreaddata)\n    assert test.num_qs() == 11", "fn_id": 11, "class_fn": false, "repo": "adamjorr/kbbq-py", "file": "tests/test_covariate.py", "last_update_at": "2021-06-02T00:07:35+00:00", "pred": {"ppl": 5.503297328948975, "ppl_lower": 5.877284049987793, "ppl/lowercase_ppl": -1.0385536289837052, "ppl/zlib": 0.01655677113549366, "Min_5.0% Prob": 9.692941983540853, "Min_10.0% Prob": 8.398908410753522, "Min_20.0% Prob": 6.662357023784092, "Min_30.0% Prob": 5.178604971794855, "Min_40.0% Prob": 4.1154220423528125, "Min_50.0% Prob": 3.38691657441003, "Min_60.0% Prob": 2.8620017114139737}}
{"hexsha": "eac9bfadf6afe42b2ba6db1b9064946fdf240cf1", "ext": "py", "lang": "Python", "content": "@card('Goblin Archaeologist')\ndef goblin_archaeologist(card, abilities):\n\n    def goblin_archaeologist():\n        return AbilityNotImplemented\n    return (goblin_archaeologist,)", "fn_id": 17, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/darksteel.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 2.889606475830078, "ppl_lower": 5.106528282165527, "ppl/lowercase_ppl": -1.5366021530056115, "ppl/zlib": 0.009825188197406073, "Min_5.0% Prob": 9.431459426879883, "Min_10.0% Prob": 7.951303005218506, "Min_20.0% Prob": 5.389260183681142, "Min_30.0% Prob": 3.6316455173141815, "Min_40.0% Prob": 2.710745571586101, "Min_50.0% Prob": 2.1561081225759, "Min_60.0% Prob": 1.7877140130714646}}
{"hexsha": "d2beff782efe625c4f930164ec0ecae6152de846", "ext": "py", "lang": "Python", "content": "def get_final_seats_occupied_based_on_sight(seats: list[str]) -> int:\n    old_grid = Grid(seats)\n    while (new_grid := transform_based_on_los(old_grid)) != old_grid:\n        old_grid = new_grid\n    return new_grid.count('#')", "fn_id": 2, "class_fn": false, "repo": "pviafore/AdventOfCode2020", "file": "challenge11.py", "last_update_at": "2021-12-09T09:54:54+00:00", "pred": {"ppl": 4.071475028991699, "ppl_lower": 3.9415018558502197, "ppl/lowercase_ppl": -0.9768921703571829, "ppl/zlib": 0.009422854689823698, "Min_5.0% Prob": 8.731904029846191, "Min_10.0% Prob": 7.478786110877991, "Min_20.0% Prob": 5.831884905695915, "Min_30.0% Prob": 4.453756468991439, "Min_40.0% Prob": 3.436409814791246, "Min_50.0% Prob": 2.8201172638957095, "Min_60.0% Prob": 2.372339198859979}}
{"hexsha": "65d2c4247e06b070e56286e1c0516a47f5fdba82", "ext": "py", "lang": "Python", "content": "def generate_testcase_files(instance, env, testcase_dir_path):\n    testcases_list = []\n    config = {'config': {'name': instance.name, 'variables': [], 'request': {'base_url': env.base_url if env else ''}}}\n    testcases_list.append(config)\n    include = json.loads(instance.include, encoding='utf-8')\n    request = json.loads(instance.request, encoding='utf-8')\n    module_name = instance.module.name\n    project_name = instance.module.project.name\n    testcase_dir_path = os.path.join(testcase_dir_path, project_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n        debugtalk_obj = Projects.objects.get(name=project_name).debugtalk\n        if debugtalk_obj:\n            debugtalk = debugtalk_obj.debugtalk\n        else:\n            debugtalk = ''\n        with open(os.path.join(testcase_dir_path, 'debugtalk.py'), mode='w', encoding='utf-8') as one_file:\n            one_file.write(debugtalk)\n    testcase_dir_path = os.path.join(testcase_dir_path, module_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n    if 'testcases' in include:\n        for t_id in include.get('testcases'):\n            testcase_obj = Testcases.objects.filter(id=t_id).first()\n            if testcase_obj:\n                try:\n                    testcase_request = json.loads(testcase_obj.request, encoding='utf-8')\n                except Exception as e:\n                    logger.error(e)\n                    continue\n                else:\n                    extract = testcase_request['test'].get('extract')\n                    if extract:\n                        for e in extract:\n                            testcases_list[0]['config']['variables'].append({[i for i in e.keys()][0]: ''})\n                    testcase_request['test'] = OrderedDict(testcase_request['test'])\n                    testcases_list.append(OrderedDict(testcase_request))\n    request['test'] = OrderedDict(request['test'])\n    testcases_list.append(request)\n    with open(os.path.join(testcase_dir_path, instance.name + '.yml'), mode='w', encoding='utf-8') as one_file:\n        ordered_yaml_dump(testcases_list, one_file, default_flow_style=False, allow_unicode=True)", "fn_id": 1, "class_fn": false, "repo": "op896898466/apitest", "file": "utils/common.py", "last_update_at": "2021-08-16T05:48:43+00:00", "pred": {"ppl": 1.921589732170105, "ppl_lower": 2.006906032562256, "ppl/lowercase_ppl": -1.0665103448824322, "ppl/zlib": 0.0009881283342723882, "Min_5.0% Prob": 6.622721513112386, "Min_10.0% Prob": 4.791847254290725, "Min_20.0% Prob": 2.960254633337035, "Min_30.0% Prob": 2.1125684551894666, "Min_40.0% Prob": 1.6230618205565708, "Min_50.0% Prob": 1.3051023846240462, "Min_60.0% Prob": 1.0884810777613894}}
{"hexsha": "679616cb8b1011d2bf2813d8352a4c19d23a2b17", "ext": "py", "lang": "Python", "content": "def save_current_window_and_open_tools_window():\n    \"\"\"\n    Save the current window with `save_current_window' and open the eiffel\n    tools buffer in a window. The window containing the eiffel tools buffer\n    will be selected after the launch of this routine. To reselect the\n    window saved by this routine, use the `select_saved_window' routine.\n    \"\"\"\n    tools_buffer_name = environment.get_global_variable('eiffel_tools_buffer_name')\n    tools_buffer_number = get_tools_buffer_number()\n    if tools_buffer_number < 0:\n        save_current_window_and_open_new_tools_window(tools_buffer_name)\n    else:\n        tools_buffer_window_number = int(environment.evaluate('bufwinnr(\"' + tools_buffer_name + '\")'))\n        if tools_buffer_window_number < 0:\n            save_current_window_and_open_existing_tools_window(tools_buffer_name)\n        else:\n            save_current_window_and_select_tools_window(tools_buffer_window_number)\n    environment.execute('setlocal filetype=')", "fn_id": 8, "class_fn": false, "repo": "tioui/Vim_Eiffel_IDE", "file": "pyplugin/eiffel_ide.py", "last_update_at": "2021-11-23T20:12:06+00:00", "pred": {"ppl": 2.7928881645202637, "ppl_lower": 2.8658063411712646, "ppl/lowercase_ppl": -1.0250940583216037, "ppl/zlib": 0.002860936615084221, "Min_5.0% Prob": 7.623112916946411, "Min_10.0% Prob": 5.9436691743986945, "Min_20.0% Prob": 4.16035332805232, "Min_30.0% Prob": 3.12778527029725, "Min_40.0% Prob": 2.5008810068431653, "Min_50.0% Prob": 2.03766991015706, "Min_60.0% Prob": 1.7081165943554668}}
{"hexsha": "a1475fa68fd62c2546f13e320d8164046b674af2", "ext": "py", "lang": "Python", "content": "def sub_special_tokens(text):\n    text = re.sub(' www.', ' http://www.', text)\n    text = re.sub('(https|http)?:\\\\/\\\\/(\\\\w|\\\\.|\\\\/|\\\\?|\\\\=|\\\\&|\\\\%)*\\\\b', ' xxurl ', text)\n    pat = '\\\\d{3}[-\\\\.\\\\s]??\\\\d{4}[-\\\\.\\\\s]??\\\\d{4}|\\\\d{5}[-\\\\.\\\\s]??\\\\d{3}[-\\\\.\\\\s]??\\\\d{3}|(?:\\\\d{4}\\\\)?[\\\\s-]?\\\\d{3}[\\\\s-]?\\\\d{4})'\n    text = re.sub(pat, ' xxphone ', text)\n    text = text.replace('\u00a3', '$ ')\n    text = re.sub('(\\\\d+)[ ]{0,1}p', '$ 0.\\x01', text)\n    text = re.sub('\\\\$[ ]*(\\\\d+[,\\\\.])*\\\\d+', ' xxmon ', text)\n    text = re.sub('(\\\\b[A-Z][A-Z0-9]*\\\\b)', ' xxup \\\\1 ', text)\n    text = re.sub('(\\\\b[A-Z][a-z0-9]+\\\\b)', ' xxcap \\\\1 ', text)\n    text = re.sub('[:;][ ]*[-]*[ ]*[()]', ' xxemoji ', text)\n    return text", "fn_id": 0, "class_fn": false, "repo": "rkingery/ml_tutorials", "file": "notebooks/utils.py", "last_update_at": "2021-01-15T10:26:34+00:00", "pred": {"ppl": 3.0382559299468994, "ppl_lower": 3.128941297531128, "ppl/lowercase_ppl": -1.026465844588717, "ppl/zlib": 0.0035167203909203916, "Min_5.0% Prob": 7.616647428936428, "Min_10.0% Prob": 5.803113076421949, "Min_20.0% Prob": 4.112230550911692, "Min_30.0% Prob": 3.2565761197496346, "Min_40.0% Prob": 2.6497927801362398, "Min_50.0% Prob": 2.1940050850421686, "Min_60.0% Prob": 1.8499004532527263}}
{"hexsha": "10e63bec5b7e172368421e76129581befebd5bc0", "ext": "py", "lang": "Python", "content": "def part_sum(bitlist, indices):\n    \"\"\"Compute the mod 2 sum of the subset of bits in bitlist given by the list of indices.\"\"\"\n    sum = 0\n    for x in indices:\n        sum = sum ^ bitlist[x]\n    return sum", "fn_id": 6, "class_fn": false, "repo": "wmkirby1/CS-VQE", "file": "misc/legacy/fermions/yaferp/general/fermions.py", "last_update_at": "2021-11-10T18:03:49+00:00", "pred": {"ppl": 4.341558933258057, "ppl_lower": 4.709139347076416, "ppl/lowercase_ppl": -1.055353374300634, "ppl/zlib": 0.010562830826090192, "Min_5.0% Prob": 9.258421897888184, "Min_10.0% Prob": 7.877028624216716, "Min_20.0% Prob": 5.841164668401082, "Min_30.0% Prob": 4.3703894928882, "Min_40.0% Prob": 3.5528984880447387, "Min_50.0% Prob": 2.8563622646033764, "Min_60.0% Prob": 2.4408110646825087}}
{"hexsha": "90681b31e1662f4f8ed10dcfc71a183b60796d93", "ext": "py", "lang": "Python", "content": "def experimental_parallel_interleave_dataset(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f, output_types, output_shapes, name=None):\n    \"\"\"Creates a dataset that applies `f` to the outputs of `input_dataset`.\n\n  The resulting dataset is similar to the `InterleaveDataset`, with the exception\n  that if retrieving the next value from a dataset would cause the requester to\n  block, it will skip that input dataset. This dataset is especially useful\n  when loading data from a variable-latency datastores (e.g. HDFS, GCS), as it\n  allows the training step to proceed so long as some data is available.\n\n  !! WARNING !! This dataset is not deterministic!\n\n  Args:\n    input_dataset: A `Tensor` of type `variant`.\n    other_arguments: A list of `Tensor` objects.\n    cycle_length: A `Tensor` of type `int64`.\n    block_length: A `Tensor` of type `int64`.\n    sloppy: A `Tensor` of type `bool`.\n    buffer_output_elements: A `Tensor` of type `int64`.\n    prefetch_input_elements: A `Tensor` of type `int64`.\n    f: A function decorated with @Defun.\n      A function mapping elements of `input_dataset`, concatenated with\n      `other_arguments`, to a Dataset variant that contains elements matching\n      `output_types` and `output_shapes`.\n    output_types: A list of `tf.DTypes` that has length `>= 1`.\n    output_shapes: A list of shapes (each a `tf.TensorShape` or list of `ints`) that has length `>= 1`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A `Tensor` of type `variant`.\n  \"\"\"\n    _ctx = _context._context or _context.context()\n    tld = _ctx._thread_local_data\n    if tld.is_eager:\n        try:\n            _result = pywrap_tfe.TFE_Py_FastPathExecute(_ctx._context_handle, tld.device_name, 'ExperimentalParallelInterleaveDataset', name, tld.op_callbacks, input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, 'f', f, 'output_types', output_types, 'output_shapes', output_shapes)\n            return _result\n        except _core._NotOkStatusException as e:\n            _ops.raise_from_not_ok_status(e, name)\n        except _core._FallbackException:\n            pass\n        try:\n            return experimental_parallel_interleave_dataset_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name, ctx=_ctx)\n        except _core._SymbolicException:\n            pass\n    if not isinstance(output_types, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_types' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_types)\n    output_types = [_execute.make_type(_t, 'output_types') for _t in output_types]\n    if not isinstance(output_shapes, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_shapes' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_shapes)\n    output_shapes = [_execute.make_shape(_s, 'output_shapes') for _s in output_shapes]\n    _, _, _op, _outputs = _op_def_library._apply_op_helper('ExperimentalParallelInterleaveDataset', input_dataset=input_dataset, other_arguments=other_arguments, cycle_length=cycle_length, block_length=block_length, sloppy=sloppy, buffer_output_elements=buffer_output_elements, prefetch_input_elements=prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name)\n    _result = _outputs[:]\n    if _execute.must_record_gradient():\n        _attrs = ('f', _op.get_attr('f'), 'Targuments', _op.get_attr('Targuments'), 'output_types', _op.get_attr('output_types'), 'output_shapes', _op.get_attr('output_shapes'))\n        _inputs_flat = _op.inputs\n        _execute.record_gradient('ExperimentalParallelInterleaveDataset', _inputs_flat, _attrs, _result)\n    _result, = _result\n    return _result", "fn_id": 68, "class_fn": false, "repo": "Lube-Project/ProgettoLube", "file": "ProgettoLube/WebInspector/venv/Lib/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py", "last_update_at": "2021-01-28T01:57:41+00:00", "pred": {"ppl": 1.6067980527877808, "ppl_lower": 2.0309066772460938, "ppl/lowercase_ppl": -1.4939212964923154, "ppl/zlib": 0.0003757871724603899, "Min_5.0% Prob": 6.361803098519643, "Min_10.0% Prob": 4.247692253964006, "Min_20.0% Prob": 2.3530652002113346, "Min_30.0% Prob": 1.581559945844522, "Min_40.0% Prob": 1.1867089522256682, "Min_50.0% Prob": 0.9491960052530815, "Min_60.0% Prob": 0.7908270221352309}}
{"hexsha": "5d67dd4c40040dcf2e4bbcd0df1123cacc8a09a7", "ext": "py", "lang": "Python", "content": "def get_conversion_rate(response_data):\n    data = str(response_data)\n    keyword_conversion = 'conversion_rate'\n    slen = len(keyword_conversion)\n    start_index = data.find(keyword_conversion)\n    extra_len = 9\n    extracted_str = data[start_index:start_index + slen + extra_len]\n    word_list = extracted_str.split(':')\n    conversion_rate = word_list[1]\n    result = float(conversion_rate)\n    loginfo('Conversion Rate = ' + str(result), get_conversion_rate.__name__)\n    return result", "fn_id": 3, "class_fn": false, "repo": "jamesjallorina/currency_exchange", "file": "backend/backend.py", "last_update_at": "2021-12-15T17:54:21+00:00", "pred": {"ppl": 3.0725252628326416, "ppl_lower": 3.0949904918670654, "ppl/lowercase_ppl": -1.0064900229580376, "ppl/zlib": 0.005102271748474223, "Min_5.0% Prob": 8.347852885723114, "Min_10.0% Prob": 6.931122601032257, "Min_20.0% Prob": 4.753612548112869, "Min_30.0% Prob": 3.515243931363026, "Min_40.0% Prob": 2.7424179466906935, "Min_50.0% Prob": 2.2206319390796123, "Min_60.0% Prob": 1.8618756762395303}}
{"hexsha": "b740c4349aa6a00f9a664792b9a5d497e887cbae", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('value,expected', (('', ''), (None, ''), ('very long ' * 100, '')))\ndef test_mobile_number_clean(value, expected):\n    field = forms.MobileNumberField(max_length=100)\n    assert field.to_python(value) == expected", "fn_id": 0, "class_fn": false, "repo": "konradko/directory-api", "file": "company/tests/test_forms.py", "last_update_at": "2021-11-06T12:08:26+00:00", "pred": {"ppl": 3.413557767868042, "ppl_lower": 4.577469348907471, "ppl/lowercase_ppl": -1.238965592522197, "ppl/zlib": 0.007138110936550897, "Min_5.0% Prob": 8.852339267730713, "Min_10.0% Prob": 6.939930498600006, "Min_20.0% Prob": 4.776010274887085, "Min_30.0% Prob": 3.6742154955863953, "Min_40.0% Prob": 2.9625040628015995, "Min_50.0% Prob": 2.4142007624230732, "Min_60.0% Prob": 2.0427552843276335}}
{"hexsha": "eedf072c408246eee339cda55c42a69c694380b4", "ext": "py", "lang": "Python", "content": "def extract_bucket_reference_for_param_reference(template, param_name):\n    param_value = template.get_parameter_default(param_name)\n    if param_value is None:\n        return\n    for resource in template.resources('AWS::Serverless::Function'):\n        policies = resource['Properties'].get('Policies')\n        if policies is None:\n            continue\n        for policy in policies:\n            for statement in policy['Statement']:\n                if param_value not in statement.get('Resource', ''):\n                    continue\n                old_value = statement['Resource']\n                parts = list(old_value.partition(param_value))\n                parts[1] = {'Ref': param_name}\n                new_value = {'Fn::Join': ['', parts]}\n                statement['Resource'] = new_value", "fn_id": 2, "class_fn": false, "repo": "jmespath/jmespath-playground", "file": "template-fixups.py", "last_update_at": "2021-11-24T14:33:45+00:00", "pred": {"ppl": 2.794633388519287, "ppl_lower": 3.284648895263672, "ppl/lowercase_ppl": -1.1572041330610072, "ppl/zlib": 0.0031237110367952747, "Min_5.0% Prob": 8.675596767001682, "Min_10.0% Prob": 6.871271334196392, "Min_20.0% Prob": 4.5525719993992855, "Min_30.0% Prob": 3.2709031957283354, "Min_40.0% Prob": 2.53924902097175, "Min_50.0% Prob": 2.0413764400873333, "Min_60.0% Prob": 1.7111107748973629}}
{"hexsha": "6f11be4ebd108a94cb1027e16e858ff097fa14e5", "ext": "py", "lang": "Python", "content": "def text_to_spreadsheet(directory='.', output_file='text_to_sheet.xlsx'):\n    \"\"\"\n    Searches for all text files at the given directory. Each individual\n    text file is converted to a column in the output_file spreadsheet.\n\n    :param str directory: path to directory to search\n    :param str output_file: name of output file\n    \"\"\"\n    path = os.path.abspath(directory)\n    wb = openpyxl.Workbook()\n    wb.create_sheet(title='Text to Columns', index=0)\n    sheet = wb.active\n    bold = Font(bold=True)\n    print(f'Searching for text files...')\n    files = [file for file in os.listdir(path) if file.lower().endswith('.txt')]\n    column = 1\n    print(f'Writing lines of text to columns...')\n    for file in files:\n        row = 2\n        with open(os.path.join(path, file)) as text:\n            sheet.cell(row=1, column=column).value = file\n            sheet.cell(row=1, column=column).font = bold\n            for line in text:\n                sheet.cell(row=row, column=column).value = line\n                row += 1\n        column += 1\n    wb.save(filename=output_file)\n    print(f\"Resulting file saved as '{output_file}'\")", "fn_id": 0, "class_fn": false, "repo": "zspatter/automate-the-boring-stuff", "file": "text_to_spreadsheet/text_to_spreadsheet.py", "last_update_at": "2021-09-05T20:19:40+00:00", "pred": {"ppl": 2.2394509315490723, "ppl_lower": 2.478431224822998, "ppl/lowercase_ppl": -1.1257643394112478, "ppl/zlib": 0.0015901986508402468, "Min_5.0% Prob": 6.484532580656164, "Min_10.0% Prob": 5.036441817003138, "Min_20.0% Prob": 3.3632379355637925, "Min_30.0% Prob": 2.5110600801926215, "Min_40.0% Prob": 1.957622034718161, "Min_50.0% Prob": 1.5996118853691705, "Min_60.0% Prob": 1.3390753451500825}}
{"hexsha": "1b7c720289e99957b1d1e5c9b70d89bb7e355da1", "ext": "py", "lang": "Python", "content": "@tf.function\ndef train_step(x_target, y_target, model, optimizer, model_loss):\n    with tf.GradientTape() as model_tape:\n        y_predic = model(x_target, training=True)\n        loss = model_loss(y_target, y_predic)\n    gradients_of_model = model_tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients_of_model, model.trainable_variables))\n    return loss", "fn_id": 1, "class_fn": false, "repo": "awagot/CNN-POD", "file": "training/training.py", "last_update_at": "2021-08-18T11:23:05+00:00", "pred": {"ppl": 1.9207028150558472, "ppl_lower": 2.2487006187438965, "ppl/lowercase_ppl": -1.241555862314759, "ppl/zlib": 0.003279855118433002, "Min_5.0% Prob": 8.0868452390035, "Min_10.0% Prob": 5.443657269844642, "Min_20.0% Prob": 3.1239080807337394, "Min_30.0% Prob": 2.1714594150200868, "Min_40.0% Prob": 1.6455525227894003, "Min_50.0% Prob": 1.3017755079675803, "Min_60.0% Prob": 1.0893971893724195}}
{"hexsha": "49f5a6884183e7a4dcbfcde101a491ad27898026", "ext": "py", "lang": "Python", "content": "def _get_eval_config_from_service_classification(classification: configuration_pb2.ClassificationProblemSpec, eval_config: model_evaluation_pb2.EvaluationConfig) -> None:\n    if classification.HasField('ground_truth_column_spec'):\n        eval_config.data_spec.label_key_spec.CopyFrom(classification.ground_truth_column_spec)\n    if classification.HasField('example_weight_column_spec'):\n        eval_config.data_spec.example_weight_key_spec.CopyFrom(classification.example_weight_column_spec)\n    if classification.HasField('prediction_score_column_spec'):\n        eval_config.data_spec.predicted_score_key_spec.CopyFrom(classification.prediction_score_column_spec)\n    if classification.HasField('prediction_label_column_spec'):\n        eval_config.data_spec.predicted_label_key_spec.CopyFrom(classification.prediction_label_column_spec)\n    if classification.HasField('prediction_id_column_spec'):\n        eval_config.data_spec.predicted_label_id_key_spec.CopyFrom(classification.prediction_id_column_spec)\n    eval_config.data_spec.labels.extend(classification.class_names)\n    num_classes = len(classification.class_names)\n    if classification.type == configuration_pb2.ClassificationProblemSpec.MULTICLASS:\n        problem_type = constants.ProblemType.MULTICLASS\n    elif classification.type == configuration_pb2.ClassificationProblemSpec.MULTILABEL:\n        problem_type = constants.ProblemType.MULTILABEL\n    else:\n        raise NotImplementedError('Classification type %r not implemented' % classification.type)\n    adapter = tfma_adapter.TFMAToME(class_name_list=list(classification.class_names))\n    tfma_metric_specs = _get_metric_specs(problem_type, list(classification.class_names), list(classification.evaluation_options.positive_classes), list(classification.evaluation_options.top_k_list))\n    for tfma_metric_spec in tfma_metric_specs:\n        eval_config.metrics_specs.append(adapter.metrics_spec(tfma_metric_spec))", "fn_id": 3, "class_fn": false, "repo": "tomar27/pipelines", "file": "components/google-cloud/google_cloud_pipeline_components/experimental/evaluation/flex/lib/config.py", "last_update_at": "2021-10-23T00:39:47+00:00", "pred": {"ppl": 1.99020254611969, "ppl_lower": 2.2715024948120117, "ppl/lowercase_ppl": -1.1920925513644343, "ppl/zlib": 0.0013655484435052803, "Min_5.0% Prob": 7.087923577853611, "Min_10.0% Prob": 5.120027638318246, "Min_20.0% Prob": 3.2108997080637063, "Min_30.0% Prob": 2.2572580402813895, "Min_40.0% Prob": 1.7191910596483428, "Min_50.0% Prob": 1.3774606796764095, "Min_60.0% Prob": 1.147431625380999}}
{"hexsha": "02819a01b041692ac69ff145ea5f13a590fc9b34", "ext": "py", "lang": "Python", "content": "def _guess_package_name(file_type, file_name):\n    if not file_type:\n        return None\n    file_name = file_name.lower()\n    if 'Bourne-Again' in file_type or 'bash' in file_type:\n        return 'bash'\n    elif 'Mach-O' in file_type and 'executable' in file_type:\n        return 'macho'\n    elif 'directory' in file_type or (file_name.endswith('.app') or file_name.endswith('.app/')) or (file_name.endswith('.pkg') or file_name.endswith('.pkg/')):\n        return 'app'\n    elif 'Zip archive' in file_type and file_name.endswith('.zip'):\n        return 'zip'\n    elif 'PDF' in file_type or file_name.endswith('.pdf'):\n        return 'pdf'\n    elif 'Microsoft Word' in file_type or 'Microsoft Office Word' in file_type or file_name.endswith('.docx') or file_name.endswith('.doc'):\n        return 'doc'\n    elif 'Rich Text Format' in file_type or file_name.endswith('.rtf') or 'property list' in file_type or file_name.endswith('.plist'):\n        return 'rtf'\n    elif 'HTML' in file_type or file_name.endswith('.htm') or file_name.endswith('.html'):\n        return 'html'\n    elif file_name.endswith('.jar'):\n        return 'jar'\n    elif file_name.endswith('.py') or 'Python script' in file_type:\n        return 'python'\n    elif file_name.endswith('.pl') or 'perl script' in file_type.lower():\n        return 'perl'\n    elif file_name.endswith('.dmg'):\n        return 'dmg'\n    else:\n        return 'generic'", "fn_id": 2, "class_fn": false, "repo": "phdphuc/mac-a-mal-cuckoo", "file": "analyzer/darwin/lib/core/packages.py", "last_update_at": "2021-04-07T08:26:25+00:00", "pred": {"ppl": 1.7741647958755493, "ppl_lower": 1.846515417098999, "ppl/lowercase_ppl": -1.069716473399357, "ppl/zlib": 0.0014478024612498803, "Min_5.0% Prob": 5.880650715394453, "Min_10.0% Prob": 4.211525922351413, "Min_20.0% Prob": 2.6251601498205583, "Min_30.0% Prob": 1.8672282287084006, "Min_40.0% Prob": 1.4239617274193974, "Min_50.0% Prob": 1.1430940208629818, "Min_60.0% Prob": 0.9565078590437087}}
{"hexsha": "6576548aed0db505fcd1e0ff4f67a6208131321a", "ext": "py", "lang": "Python", "content": "def login0(auth=None):\n    \"\"\"Handle secure login for performance and stress testing.\n\n    Signature is the signature of email value with the application key.\n    \"\"\"\n    if not auth:\n        auth = request.headers.get('Authorization')\n        if not auth:\n            resp = Response()\n            resp.headers['WWW-Authenticate'] = 'Basic realm=\"Access to the load-testing login\"'\n            resp.status_code = 401\n            return resp\n        if ':' not in auth:\n            auth = base64.b64decode(auth).decode()\n    email, signature = auth.split(':')\n    s = Signer(app.secret_key)\n    if s.validate(email + '.' + signature):\n        try:\n            u = User.get(email=email)\n            login_user(u)\n            return redirect(get_next_url() or url_for('index'))\n        except User.DoesNotExist:\n            return handle_login()\n    abort(403)", "fn_id": 7, "class_fn": false, "repo": "tenet-ac-za/NZ-ORCID-Hub", "file": "orcid_hub/authcontroller.py", "last_update_at": "2021-07-22T08:53:40+00:00", "pred": {"ppl": 3.439363956451416, "ppl_lower": 4.236128330230713, "ppl/lowercase_ppl": -1.1686759749637408, "ppl/zlib": 0.0028011033059171467, "Min_5.0% Prob": 8.869683543841044, "Min_10.0% Prob": 7.095442533493042, "Min_20.0% Prob": 4.9301126246549645, "Min_30.0% Prob": 3.7821132883633655, "Min_40.0% Prob": 2.9958472349205794, "Min_50.0% Prob": 2.440327291929625, "Min_60.0% Prob": 2.0589843940268566}}
{"hexsha": "782e47ae6e2a1bc565a53c10fee16a15dc5e46b5", "ext": "py", "lang": "Python", "content": "def readStr_qm9():\n    f = open(current_dir + '/../_dataset/QM9/qm9.smi', 'r')\n    L = []\n    for line in f:\n        line = line.strip()\n        L.append(line)\n    f.close()\n    np.random.seed(1)\n    np.random.shuffle(L)\n    return L", "fn_id": 2, "class_fn": false, "repo": "drigoni/ComparisonsDGM", "file": "_utils/read_dataset.py", "last_update_at": "2021-04-12T13:17:50+00:00", "pred": {"ppl": 3.360818862915039, "ppl_lower": 3.108483076095581, "ppl/lowercase_ppl": -0.9356122823838491, "ppl/zlib": 0.007482621317800951, "Min_5.0% Prob": 8.13503384590149, "Min_10.0% Prob": 7.10189167658488, "Min_20.0% Prob": 5.049429893493652, "Min_30.0% Prob": 3.8072735433067595, "Min_40.0% Prob": 2.962089464068413, "Min_50.0% Prob": 2.3970062153724334, "Min_60.0% Prob": 2.0320530036431657}}
{"hexsha": "cbd6d9414697897c65c3690922a074fdd0eec5b2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('method_name', ['from_pandas', 'iter_from_pandas'])\ndef test_dynamic_defines_key_fields(pandas_data, method_name):\n    model = PandasToRecordsTransformer(pandas_data, 'MyRecord', key_fields={'key_field'})\n    from_pandas_method = getattr(model, method_name)\n    record = list(from_pandas_method(pandas_data))[0]\n    assert record.key_fields == {'key_field'}", "fn_id": 4, "class_fn": false, "repo": "AbsaOSS/py2k", "file": "tests/test_models.py", "last_update_at": "2021-09-08T12:33:46+00:00", "pred": {"ppl": 3.904474973678589, "ppl_lower": 4.96773624420166, "ppl/lowercase_ppl": -1.1768128652227374, "ppl/zlib": 0.006517336480814664, "Min_5.0% Prob": 8.422831296920776, "Min_10.0% Prob": 7.384479721387227, "Min_20.0% Prob": 5.373090248107911, "Min_30.0% Prob": 4.12863006089863, "Min_40.0% Prob": 3.267519760949939, "Min_50.0% Prob": 2.678178068716079, "Min_60.0% Prob": 2.2820653439940592}}
{"hexsha": "6b441b738c1e2efec58e60abe442cbe344419f54", "ext": "py", "lang": "Python", "content": "def avro_schema(avsc: Union[dict, str]) -> dict:\n    \"\"\" Create avro schema from dictionary or filepath string \"\"\"\n    logging.info('Parsing avro schema')\n    if isinstance(avsc, dict):\n        avsc = avro.schema.parse_schema(avsc)\n    elif isinstance(avsc, str):\n        avsc = avro.schema.load_schema(avsc)\n    return avsc", "fn_id": 3, "class_fn": false, "repo": "staylorx/cupyopt", "file": "src/cupyopt/nuggets/schema.py", "last_update_at": "2021-03-12T20:46:34+00:00", "pred": {"ppl": 2.8139798641204834, "ppl_lower": 3.05743145942688, "ppl/lowercase_ppl": -1.0802004483556664, "ppl/zlib": 0.0058123584441522, "Min_5.0% Prob": 7.665890884399414, "Min_10.0% Prob": 5.768904066085815, "Min_20.0% Prob": 4.118430035454886, "Min_30.0% Prob": 3.181364284407708, "Min_40.0% Prob": 2.5076242153133665, "Min_50.0% Prob": 2.0412643608057275, "Min_60.0% Prob": 1.7341481462002746}}
{"hexsha": "f4365a09ba1797e4fafc8682981c9fb04235a5c1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('space_group', ['P2', 'P3', 'P6', 'R3:h', 'I23'][:])\ndef test_determine_space_group(space_group):\n    sgi = sgtbx.space_group_info(symbol=space_group)\n    sg = sgi.group()\n    cs = sgi.any_compatible_crystal_symmetry(volume=10000)\n    cs = cs.best_cell()\n    cs = cs.minimum_cell()\n    intensities = generate_fake_intensities(cs)\n    result = LaueGroupAnalysis([intensities], normalisation=None)\n    print(result)\n    assert result.best_solution.subgroup['best_subsym'].space_group() == sg.build_derived_patterson_group()\n    assert result.best_solution.likelihood > 0.8\n    for score in result.subgroup_scores[1:]:\n        assert score.likelihood < 0.1", "fn_id": 1, "class_fn": false, "repo": "TiankunZhou/dials", "file": "algorithms/symmetry/test_laue_group.py", "last_update_at": "2021-11-18T04:20:54+00:00", "pred": {"ppl": 3.0404088497161865, "ppl_lower": 3.3165903091430664, "ppl/lowercase_ppl": -1.078188731335753, "ppl/zlib": 0.0030974707420985377, "Min_5.0% Prob": 8.48284343878428, "Min_10.0% Prob": 6.575143899917602, "Min_20.0% Prob": 4.57331830146266, "Min_30.0% Prob": 3.407499352832893, "Min_40.0% Prob": 2.683125646947657, "Min_50.0% Prob": 2.1945646696312484, "Min_60.0% Prob": 1.8460529357194901}}
{"hexsha": "3f0ef81e04475f7801a661ee804b85c33aca42e7", "ext": "py", "lang": "Python", "content": "def get_installed_packages():\n    reqs = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze'])\n    installed_packages = [r.decode().split('==')[0] for r in reqs.split()]\n    return installed_packages", "fn_id": 0, "class_fn": false, "repo": "vymana/nlpwiz", "file": "nlpwiz/utils/pkg_utils.py", "last_update_at": "2021-04-20T18:46:52+00:00", "pred": {"ppl": 1.8127110004425049, "ppl_lower": 1.8127110004425049, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00399210412757281, "Min_5.0% Prob": 8.11138884226481, "Min_10.0% Prob": 5.507832249005635, "Min_20.0% Prob": 2.894951418042183, "Min_30.0% Prob": 2.0173717831310474, "Min_40.0% Prob": 1.495785821802341, "Min_50.0% Prob": 1.1851043831557035, "Min_60.0% Prob": 1.004832704169437}}
{"hexsha": "9cb1075cc24b8fabc3e7e078623e7b3ba9e43ca3", "ext": "py", "lang": "Python", "content": "def run_sample_whole_range():\n    log_file = '../results/DBEsti_tpcds_100k_all.log'\n    db = DBEst(dataset='tpcds', logger_file=log_file)\n    table = 'store_sales'\n    file = '../data/tpcDs10k/store_sales.csv'\n    num_of_points = {'store_sales': '2685596178'}\n    tableColumnSets = [['ss_list_price', 'ss_wholesale_cost']]\n    db.init_whole_range(file=file, table=table, columnItems=tableColumnSets, num_of_points=num_of_points)\n    db.clear_training_data()\n    db.logger.logger.info('Total size of DBEst is ' + str(db.get_size()) + ' bytes.')", "fn_id": 7, "class_fn": false, "repo": "qingzma/CRegressionRDBM", "file": "dbest/dbestclient.py", "last_update_at": "2021-08-04T06:39:19+00:00", "pred": {"ppl": 5.35762357711792, "ppl_lower": 5.37858772277832, "ppl/lowercase_ppl": -1.0023266444047967, "ppl/zlib": 0.0053798734432388045, "Min_5.0% Prob": 9.26870211687955, "Min_10.0% Prob": 7.876643137498335, "Min_20.0% Prob": 6.187267623164437, "Min_30.0% Prob": 4.896016749468717, "Min_40.0% Prob": 3.974784108725461, "Min_50.0% Prob": 3.2718512238682926, "Min_60.0% Prob": 2.776653684283558}}
{"hexsha": "41a7419f7ecd636b33374eda954170a04c2d6f82", "ext": "py", "lang": "Python", "content": "def get_cert(client, service, file_path, local_path, remote_cert_path, remote_csr_path):\n    \"\"\"\n    Gets the certificate (sign or auth) from the CA.\n\n    NB! This requires the user to have sudo rights without password prompt.\n    :param client: SSHClient object\n    :param service: str - service type: sign-sign (signing certificates) or sign-auth (authentication certificates)\n    :param file_path: str - local CSR path (input)\n    :param local_path: str - local certificate path (output)\n    :param remote_cert_path: str - remote certificate path (output)\n    :param remote_csr_path: str - remote CSR path (input)\n    :return: None\n    \"\"\"\n    client.exec_command('rm temp*')\n    sftp = client.get_client().open_sftp()\n    sftp.put(file_path, remote_csr_path)\n    client.exec_command('cat ' + remote_csr_path + ' | ' + service + ' > ' + remote_cert_path)\n    time.sleep(3)\n    sftp.get(remote_cert_path, local_path)\n    sftp.close()\n    client.close()", "fn_id": 2, "class_fn": false, "repo": "ria-ee/XTM", "file": "common/xrd-ui-tests-python/tests/xroad_ss_delete_hardware_token_certificate/del_management.py", "last_update_at": "2021-11-08T10:30:35+00:00", "pred": {"ppl": 2.700676679611206, "ppl_lower": 2.888610601425171, "ppl/lowercase_ppl": -1.0677132380757817, "ppl/zlib": 0.0025088443527475786, "Min_5.0% Prob": 7.509703826904297, "Min_10.0% Prob": 6.071068382263183, "Min_20.0% Prob": 4.234841146071752, "Min_30.0% Prob": 3.1392428596814472, "Min_40.0% Prob": 2.453077630077799, "Min_50.0% Prob": 1.9739248087222607, "Min_60.0% Prob": 1.653220905042485}}
{"hexsha": "2cf7ecb49570612ea3ef106c4439aab58551dc8a", "ext": "py", "lang": "Python", "content": "def render_bokeh_figure(result, state):\n    from bokeh.resources import CDN\n    if 'headers' not in state:\n        state['headers'] = set()\n    state['headers'].update(['<script src=\"%s\" async=\"\"></script>' % CDN.js_files[0], '<link rel=\"stylesheet\" href=\"%s\" type=\"text/css\"/>' % CDN.css_files[0]])\n    from bokeh.embed import components\n    script, div = components(result, CDN)\n    if 'footers' not in state:\n        state['footers'] = list()\n    state['footers'].append(script)\n    return [closing_fence(state['code']), div, state['code']]", "fn_id": 9, "class_fn": false, "repo": "mrocklin/pymarkdown", "file": "pymarkdown/core.py", "last_update_at": "2021-12-25T10:56:53+00:00", "pred": {"ppl": 2.8249824047088623, "ppl_lower": 3.132869005203247, "ppl/lowercase_ppl": -1.0996117966818113, "ppl/zlib": 0.0036184743420117275, "Min_5.0% Prob": 8.896503210067749, "Min_10.0% Prob": 6.659629022373872, "Min_20.0% Prob": 4.500292760985238, "Min_30.0% Prob": 3.3122211008701683, "Min_40.0% Prob": 2.55754746139889, "Min_50.0% Prob": 2.064633977044834, "Min_60.0% Prob": 1.7402546030275945}}
{"hexsha": "17fa8f3d90779608a0fa731c756323ee0bb02290", "ext": "py", "lang": "Python", "content": "def set_up_outputs(OutputObj):\n    OutputObj.add_output('lead_snps_matching_quality_file', 'lead_snps_matching_quality.tsv', add_root=True)\n    OutputObj.add_output('ldscore_for_expanded_control_sets_quality_file', 'ldscore_matching_quality_for_ldexpanded_sets.tsv', add_root=True)\n    OutputObj.add_output('ldsnp_coverage_by_input_snp', 'ldsnp_coverage_by_input_snp.tsv', add_root=True)\n    return OutputObj", "fn_id": 6, "class_fn": false, "repo": "abraham-abin13/gsel_vec", "file": "gsel_vec/scripts/check_ld_expanded_control_sets.py", "last_update_at": "2021-07-22T23:14:33+00:00", "pred": {"ppl": 4.621423721313477, "ppl_lower": 4.811681747436523, "ppl/lowercase_ppl": -1.0263564133111869, "ppl/zlib": 0.008847993193104621, "Min_5.0% Prob": 8.99883610861642, "Min_10.0% Prob": 8.14947017033895, "Min_20.0% Prob": 6.469075241396504, "Min_30.0% Prob": 4.9008423647982005, "Min_40.0% Prob": 3.792495604072298, "Min_50.0% Prob": 3.057781277955333, "Min_60.0% Prob": 2.553611163167577}}
{"hexsha": "44f8ed8d741874b6b1b7ec273d09a2bf1be84c93", "ext": "py", "lang": "Python", "content": "def test_schemakey():\n    typemap = {'BareAsset': 'Asset', 'PublishedAsset': 'Asset', 'PublishedDandiset': 'Dandiset'}\n    for val in dir(models):\n        if val in ['BaseModel']:\n            continue\n        klass = getattr(models, val)\n        if isinstance(klass, pydantic.main.ModelMetaclass):\n            assert 'schemaKey' in klass.__fields__\n            if val in typemap:\n                assert typemap[val] == klass.__fields__['schemaKey'].default\n            else:\n                assert val == klass.__fields__['schemaKey'].default", "fn_id": 3, "class_fn": false, "repo": "dandi/dandischema", "file": "dandischema/tests/test_models.py", "last_update_at": "2021-09-19T10:56:25+00:00", "pred": {"ppl": 3.2021992206573486, "ppl_lower": 3.4404804706573486, "ppl/lowercase_ppl": -1.0616695052037015, "ppl/zlib": 0.004750358490647064, "Min_5.0% Prob": 8.457854339054652, "Min_10.0% Prob": 7.102542368570964, "Min_20.0% Prob": 4.938004982471466, "Min_30.0% Prob": 3.697428696685367, "Min_40.0% Prob": 2.8438641981023256, "Min_50.0% Prob": 2.3194713268036904, "Min_60.0% Prob": 1.9499023608290231}}
{"hexsha": "2888eb7991df8f7416f4f9dbfa57abb2f621d817", "ext": "py", "lang": "Python", "content": "def plot_mne_circular_connectivity_network(con_mat, labels, perc_conn=0.25, cfc=False, fig=None, subplot=111, fig_title=None, node_name=True, vmax=None, vmin=0, colormap='Blues', facecolor='white', textcolor='black'):\n    from mne.viz import circular_layout, plot_connectivity_circle\n    fig_title = '' if fig_title is None else fig_title\n    node_colors = [label.color for label in labels]\n    label_names = [label.name for label in labels]\n    lh_labels = [name for name in label_names if name.endswith('lh')]\n    rh_labels = [name for name in label_names if name.endswith('rh')]\n    labels_network_sorted, idx_lbl_sort = rearrange_labels_network(labels)\n    label_names_sorted = [label_names[ii] for ii in idx_lbl_sort]\n    lh_labels = [name[:-3] for name in label_names_sorted if name.endswith('lh')]\n    rh_labels = [name[:-3] for name in label_names_sorted if name.endswith('rh')]\n    label_names = [name[:-3] for name in label_names]\n    node_order = lh_labels[::-1] + rh_labels\n    node_angles = circular_layout(label_names, node_order, start_pos=90, group_boundaries=[0, len(label_names) // 2])\n    if not node_name:\n        label_names = [''] * len(label_names)\n    else:\n        label_names = [label.name[13:-3] for label in labels]\n    if perc_conn < 1:\n        n_lines = int(np.prod(con_mat.shape) / 2 * perc_conn)\n    else:\n        n_lines = None\n    if fig is None:\n        fig = plt.figure(num=None, figsize=(8, 8), facecolor='black')\n    if cfc:\n        return plot_connectivity_circle_cfc(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)\n    else:\n        plot_connectivity_circle(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)", "fn_id": 3, "class_fn": false, "repo": "harmonic-minimization/harmoni_manuscript_codes", "file": "tools_connectivity_plot.py", "last_update_at": "2021-12-16T08:00:15+00:00", "pred": {"ppl": 2.096419095993042, "ppl_lower": 2.201211929321289, "ppl/lowercase_ppl": -1.065894847389228, "ppl/zlib": 0.001174969360078957, "Min_5.0% Prob": 6.182807867867606, "Min_10.0% Prob": 4.860017013549805, "Min_20.0% Prob": 3.2712485063160566, "Min_30.0% Prob": 2.3807464432659873, "Min_40.0% Prob": 1.8280135243602678, "Min_50.0% Prob": 1.4772844703084873, "Min_60.0% Prob": 1.2324349742149383}}
{"hexsha": "27b7373c43ce0501e65b8ff161bfcf8803e53e2c", "ext": "py", "lang": "Python", "content": "def showmesh(node, elem, **kwargs):\n    triangulation = tri.Triangulation(node[:, 0], node[:, 1], elem)\n    markersize = 3000 / len(node)\n    if kwargs.items():\n        h = plt.triplot(triangulation, 'b-h', **kwargs)\n    else:\n        h = plt.triplot(triangulation, 'b-h', linewidth=0.5, alpha=0.5, markersize=markersize)\n    return h", "fn_id": 0, "class_fn": false, "repo": "scaomath/torch-fem", "file": "mesh/utils.py", "last_update_at": "2021-11-14T04:02:54+00:00", "pred": {"ppl": 3.315556287765503, "ppl_lower": 3.5453007221221924, "ppl/lowercase_ppl": -1.0558953334617978, "ppl/zlib": 0.006622239883094576, "Min_5.0% Prob": 9.334231694539389, "Min_10.0% Prob": 7.437743067741394, "Min_20.0% Prob": 4.914545555114746, "Min_30.0% Prob": 3.703855655695263, "Min_40.0% Prob": 2.92134409032616, "Min_50.0% Prob": 2.3712575556710362, "Min_60.0% Prob": 2.0117233313227953}}
{"hexsha": "6e9344b369513894bde3339419e2b7d6be02f344", "ext": "py", "lang": "Python", "content": "def load_character_json(path):\n    with open(path, 'r') as f:\n        raw = f.read()\n        raw = raw.replace('inf,', '999999999,')\n        logging.info('Returning python object')\n        return json.loads(raw)", "fn_id": 1, "class_fn": false, "repo": "trainb0y1/PyMultibound", "file": "editor.py", "last_update_at": "2021-09-18T17:59:47+00:00", "pred": {"ppl": 3.9712982177734375, "ppl_lower": 3.9498097896575928, "ppl/lowercase_ppl": -0.996065802078969, "ppl/zlib": 0.009445842796162963, "Min_5.0% Prob": 9.848566691080729, "Min_10.0% Prob": 8.601381710597447, "Min_20.0% Prob": 5.98729635987963, "Min_30.0% Prob": 4.363487306095305, "Min_40.0% Prob": 3.3247953704718887, "Min_50.0% Prob": 2.7279401450521417, "Min_60.0% Prob": 2.3094502074080845}}
{"hexsha": "58199be75c2f936778ed896013450ada42119647", "ext": "py", "lang": "Python", "content": "def _setup(dataset_dir, label_types=None, classes=None, attrs=None, seed=None, download=False):\n    did_download = False\n    _label_types = _parse_label_types(label_types)\n    if etau.is_str(classes):\n        classes = [classes]\n    if etau.is_str(attrs):\n        attrs = [attrs]\n    if seed is not None:\n        random.seed(seed)\n    classes_map, _did_download = _get_classes_map(dataset_dir, download=download)\n    classes_map_rev = {v: k for k, v in classes_map.items()}\n    did_download |= _did_download\n    all_classes = sorted(classes_map.values())\n    if classes is not None:\n        oi_classes = []\n        missing_classes = []\n        filtered_classes = []\n        for c in classes:\n            if c in classes_map_rev:\n                oi_classes.append(classes_map_rev[c])\n                filtered_classes.append(c)\n            else:\n                missing_classes.append(c)\n        classes = filtered_classes\n        if missing_classes:\n            logger.warning('Ignoring invalid classes %s\\nYou can view the available classes via `fiftyone.utils.openimages.get_classes()`', missing_classes)\n    else:\n        oi_classes = None\n    if 'relationships' in _label_types:\n        attrs_map, _did_download = _get_attrs_map(dataset_dir, download=download)\n        attrs_map_rev = {v: k for k, v in attrs_map.items()}\n        did_download |= _did_download\n        all_attrs = sorted(attrs_map.values())\n        if attrs is None:\n            oi_attrs = [attrs_map_rev[a] for a in all_attrs]\n        else:\n            oi_attrs = []\n            missing_attrs = []\n            filtered_attrs = []\n            for a in attrs:\n                if a in attrs_map_rev:\n                    oi_attrs.append(attrs_map_rev[a])\n                    filtered_attrs.append(a)\n                else:\n                    missing_attrs.append(a)\n            attrs = filtered_attrs\n            if missing_attrs:\n                logger.warning('Ignoring invalid attributes %s\\nYou can view the available attributes via `fiftyone.utils.openimages.get_attributes()`', missing_attrs)\n    else:\n        attrs = None\n        attrs_map = None\n        oi_attrs = None\n        all_attrs = None\n    if 'segmentations' in _label_types:\n        seg_classes, _did_download = _get_seg_classes(dataset_dir, classes_map=classes_map, download=download)\n        did_download |= _did_download\n    else:\n        seg_classes = None\n    return (classes_map, all_classes, classes, oi_classes, attrs_map, all_attrs, attrs, oi_attrs, seg_classes, did_download)", "fn_id": 4, "class_fn": false, "repo": "Fariborzzz/fiftyone", "file": "fiftyone/utils/openimages.py", "last_update_at": "2021-12-17T10:11:37+00:00", "pred": {"ppl": 1.702745795249939, "ppl_lower": 1.7560309171676636, "ppl/lowercase_ppl": -1.0578946660511606, "ppl/zlib": 0.0007991623449676438, "Min_5.0% Prob": 6.224278098658512, "Min_10.0% Prob": 4.234853139171353, "Min_20.0% Prob": 2.5328125663342016, "Min_30.0% Prob": 1.757358795192478, "Min_40.0% Prob": 1.3272490948979412, "Min_50.0% Prob": 1.0651712878895996, "Min_60.0% Prob": 0.8869067815565554}}
{"hexsha": "55c73198735716cc50f10f1745bd41508e18f45d", "ext": "py", "lang": "Python", "content": "def count_verbose_skip(func):\n\n    def decorator(obj, *args, **kw):\n        fname = check_parameters(func, args, kw)\n        if obj.is_truncated() or obj.is_canceled() or obj.is_aborted():\n            return 0\n        if obj.testing_syntax:\n            func(obj, *args, calc_time=True, **kw)\n            return 0\n        obj.debug('{} {} {}'.format(fname, args, kw))\n        return func(obj, *args, **kw)\n    return decorator", "fn_id": 0, "class_fn": false, "repo": "ael-noblegas/pychron", "file": "pychron/pyscripts/decorators.py", "last_update_at": "2021-08-17T15:38:24+00:00", "pred": {"ppl": 4.739760875701904, "ppl_lower": 5.056474685668945, "ppl/lowercase_ppl": -1.0415703118496773, "ppl/zlib": 0.00733955984089754, "Min_5.0% Prob": 10.26522159576416, "Min_10.0% Prob": 8.343531710760933, "Min_20.0% Prob": 6.1182566199983865, "Min_30.0% Prob": 4.690419214112418, "Min_40.0% Prob": 3.743046121937888, "Min_50.0% Prob": 3.051509878165285, "Min_60.0% Prob": 2.576760076249347}}
{"hexsha": "ae4b7326c41a7e04e0d0c89af9536dff4cc979a0", "ext": "py", "lang": "Python", "content": "def process_ccdlab(output=None, time_list=None, XY_integers=None, XY_fractions=None, flat_list=None, framecount_per_sec=framecount_per_sec):\n    \"\"\"Generate a Curvit compatible events list from CCDLAB files.\n\n    Parameters\n    ----------\n    output : file path\n        The name of the output events list FITS file.\n        \n    time_list : file path\n        The name of the CCDLAB time list FITS file\n        \n    XY_integers : file path\n        The name of the CCDLAB XY integers FITS file\n        \n    XY_fractions : file path\n        The name of the CCDLAB XY fractions FITS file\n        \n    flat_list : file path\n        The name of the CCDLAB flat list FITS file\n        \n    framecount_per_sec : float, optional\n        The framerate of the observation, with a default value of 28.7185\n        frames per second for 512 x 512 window mode. \n        The most accurate way to get the framerate would be to take the value \n        of (``1 / INT_TIME``). \n        ``INT_TIME`` value can be found from the corresponding image header. \n        Approximate values of framerate for different window modes of UVIT \n        are given in the table below.\n\n        +---------------+---------------------+\n        | window mode   | frames per second   |\n        +===============+=====================+\n        | 512 x 512     | 28.7                |\n        +---------------+---------------------+\n        | 350 x 350     | 61                  |\n        +---------------+---------------------+\n        | 300 x 300     | 82                  |\n        +---------------+---------------------+\n        | 250 x 250     | 115                 |\n        +---------------+---------------------+\n        | 200 x 200     | 180                 |\n        +---------------+---------------------+\n        | 150 x 150     | 300                 |\n        +---------------+---------------------+\n        | 100 x 100     | 640                 |\n        +---------------+---------------------+ \n        \n\n    Note\n    ---- \n    It is essential to set the correct value of the framerate. \n    Most UVIT observations are carried out in 512 x 512 window mode.\n            \n    Warning\n    -------\n    This function is new; please report if you find any bugs.\n        \n    Example\n    --------\n    >>> import curvit\n    >>> process_ccdlab(output = 'output_events_list.fits',\n    ...                time_list = 'sample_TimeList.fits', \n    ...                XY_integers = 'sample_XYInts_List.fits',\n    ...                XY_fractions = 'sample_XYFrac_List.fits',\n    ...                flat_list = 'sample_FlatList.fits',\n    ...                framecount_per_sec = 28.7185)\n    \n    The above script will generate a FITS table called ``output_events_list.fits``.\n    You may then use it as input to ``curve`` or ``makecurves``. \n    \"\"\"\n    time = fits.open(time_list)[0].data / 1000\n    XYFrac = fits.open(XY_fractions)[0].data\n    XYInts = fits.open(XY_integers)[0].data\n    weight = fits.open(flat_list)[0].data\n    photons = weight * framecount_per_sec\n    fx = CCDLAB_to_4k(XYInts[:, 0], XYFrac[:, 0])\n    fy = CCDLAB_to_4k(XYInts[:, 1], XYFrac[:, 1])\n    col1 = fits.Column(name='MJD_L2', format='D', array=time)\n    col2 = fits.Column(name='Fx', format='D', array=fx)\n    col3 = fits.Column(name='Fy', format='D', array=fy)\n    col4 = fits.Column(name='EFFECTIVE_NUM_PHOTONS', format='D', array=photons)\n    cols = fits.ColDefs([col1, col2, col3, col4])\n    tbhdu = fits.BinTableHDU.from_columns(cols)\n    tbhdu.writeto(output, overwrite=True)\n    return", "fn_id": 14, "class_fn": false, "repo": "prajwel/curvit", "file": "curvit/curvit.py", "last_update_at": "2021-11-15T12:01:29+00:00", "pred": {"ppl": 2.349501132965088, "ppl_lower": 2.528513193130493, "ppl/lowercase_ppl": -1.0859613413275255, "ppl/zlib": 0.000751277943514529, "Min_5.0% Prob": 7.502491223184686, "Min_10.0% Prob": 5.651061355021962, "Min_20.0% Prob": 3.7673637596280294, "Min_30.0% Prob": 2.7477333981457144, "Min_40.0% Prob": 2.1149732878265297, "Min_50.0% Prob": 1.703954928866117, "Min_60.0% Prob": 1.4241849598731997}}
{"hexsha": "7d9f104ac0e3008ea503327f64672715cc84a452", "ext": "py", "lang": "Python", "content": "def encode_routing_info(r_tags):\n    result = bitstring.BitArray()\n    for route in r_tags:\n        result.append(bitstring.pack('uint:8', len(route)))\n        for step in route:\n            pubkey, channel, feebase, feerate, cltv = step\n            result.append(bitstring.BitArray(pubkey) + bitstring.BitArray(channel) + bitstring.pack('intbe:32', feebase) + bitstring.pack('intbe:32', feerate) + bitstring.pack('intbe:16', cltv))\n    return result.tobytes()", "fn_id": 0, "class_fn": false, "repo": "RonSherfey/electrum", "file": "electrum/trampoline.py", "last_update_at": "2021-04-22T07:51:24+00:00", "pred": {"ppl": 2.2711002826690674, "ppl_lower": 2.449598550796509, "ppl/lowercase_ppl": -1.0922382251107923, "ppl/zlib": 0.003797520463346798, "Min_5.0% Prob": 8.099684715270996, "Min_10.0% Prob": 5.873022858301798, "Min_20.0% Prob": 3.5815056158650305, "Min_30.0% Prob": 2.6140127641999205, "Min_40.0% Prob": 2.012756102267773, "Min_50.0% Prob": 1.639749808890092, "Min_60.0% Prob": 1.363466962671248}}
{"hexsha": "a016e584bf0e1d2da7b3d8766cb1e7cb07b0e46c", "ext": "py", "lang": "Python", "content": "def preprocess(paragraph):\n    result = []\n    sentences = tokenizer.tokenize(paragraph)\n    for sentence in sentences:\n        words = nltk.regexp_tokenize(sentence, pattern)\n        temp = []\n        for word in words:\n            toDeal = []\n            if camelCase1.match(word) or camelCase2.match(word):\n                toDeal = splitCode(word)\n            elif upperExtCase.match(word):\n                toDeal = splitFinalExt(word)\n            else:\n                toDeal.append(word)\n            for deal in toDeal:\n                if not isDelete(deal.lower()):\n                    temp.append(stemmer.stem(deal))\n        result.append(temp)\n    return result", "fn_id": 1, "class_fn": false, "repo": "anonym-user-1/ICSME2021", "file": "preprocessor.py", "last_update_at": "2021-07-01T17:13:10+00:00", "pred": {"ppl": 3.018533229827881, "ppl_lower": 3.0230636596679688, "ppl/lowercase_ppl": -1.001357517587853, "ppl/zlib": 0.004046780322036344, "Min_5.0% Prob": 9.220452043745253, "Min_10.0% Prob": 7.738302177853054, "Min_20.0% Prob": 5.059590984035182, "Min_30.0% Prob": 3.5994808173605373, "Min_40.0% Prob": 2.74577649195989, "Min_50.0% Prob": 2.2115002429865775, "Min_60.0% Prob": 1.845337953748165}}
{"hexsha": "225b550790ae56458e3be71c37a81107f822f14e", "ext": "py", "lang": "Python", "content": "def find_boost(self):\n    global boost_pos\n    boost_pos = pyAG.locateCenterOnScreen('images/{}.png'.format(self))\n    if boost_pos == None:\n        print('No', self.replace('_', ' '), 'found')\n        return False\n    else:\n        return True", "fn_id": 7, "class_fn": false, "repo": "nebelorz/NST", "file": "NST v1.3 (source)/functions.py", "last_update_at": "2021-11-30T22:09:13+00:00", "pred": {"ppl": 5.060273170471191, "ppl_lower": 6.150205135345459, "ppl/lowercase_ppl": -1.1203049871018345, "ppl/zlib": 0.00965131231012677, "Min_5.0% Prob": 10.924044291178385, "Min_10.0% Prob": 8.54653297151838, "Min_20.0% Prob": 5.927867539723715, "Min_30.0% Prob": 4.679355263710022, "Min_40.0% Prob": 3.7298474033673603, "Min_50.0% Prob": 3.0944930346388566, "Min_60.0% Prob": 2.685390567779541}}
{"hexsha": "63b326f4f249f15f3d820d4b7228b3b70a34e6a6", "ext": "py", "lang": "Python", "content": "def write_file(filename, data):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w+') as f:\n        print('writing file %s' % filename)\n        f.write(data)", "fn_id": 0, "class_fn": false, "repo": "ahmednofal/DFFRAM", "file": "openlane/rtl/RTL_openlane_flow.py", "last_update_at": "2021-11-08T09:13:45+00:00", "pred": {"ppl": 2.1787846088409424, "ppl_lower": 2.5680267810821533, "ppl/lowercase_ppl": -1.211065144471204, "ppl/zlib": 0.005811695540666096, "Min_5.0% Prob": 7.933032830556233, "Min_10.0% Prob": 5.725095828374227, "Min_20.0% Prob": 3.584284947468684, "Min_30.0% Prob": 2.5591424593799994, "Min_40.0% Prob": 1.9122621225049863, "Min_50.0% Prob": 1.5671878480352461, "Min_60.0% Prob": 1.29201333071941}}
{"hexsha": "67b6579ce4e0d25dfadfeb81d73e475c2f423051", "ext": "py", "lang": "Python", "content": "def millify(n):\n    n = float(n)\n    millidx = max(0, min(len(millnames) - 1, int(math.floor(0 if n == 0 else math.log10(abs(n)) / 3))))\n    return '{:.0f}{}'.format(n / 10 ** (3 * millidx), millnames[millidx])", "fn_id": 0, "class_fn": false, "repo": "ZhiruiFeng/CarsMemory", "file": "web/app.py", "last_update_at": "2021-08-13T11:55:56+00:00", "pred": {"ppl": 1.7711260318756104, "ppl_lower": 1.7711260318756104, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0036878420678216244, "Min_5.0% Prob": 8.777172803878784, "Min_10.0% Prob": 5.019723428620233, "Min_20.0% Prob": 2.816358558005757, "Min_30.0% Prob": 1.925983423160182, "Min_40.0% Prob": 1.4562462902524405, "Min_50.0% Prob": 1.142425278586376, "Min_60.0% Prob": 0.9560165157266469}}
{"hexsha": "e3f7b9dd2486d6d82391b6ab2cce6e07c345cb5c", "ext": "py", "lang": "Python", "content": "def uninitializePlugin(mobject):\n    mplugin = OpenMayaMPx.MFnPlugin(mobject)\n    try:\n        mplugin.deregisterNode(spSimpleSpringNodeId)\n    except:\n        sys.stderr.write('Failed to deregister node: %s' % kPluginNodeTypeName)\n        raise", "fn_id": 2, "class_fn": false, "repo": "leegoonz/Maya-devkit", "file": "osx/devkit/plug-ins/scripted/simpleSpring.py", "last_update_at": "2021-12-07T07:29:19+00:00", "pred": {"ppl": 2.240830659866333, "ppl_lower": 6.338131427764893, "ppl/lowercase_ppl": -2.2886431383154537, "ppl/zlib": 0.0048899795601445905, "Min_5.0% Prob": 8.40670665105184, "Min_10.0% Prob": 7.163597924368722, "Min_20.0% Prob": 4.121049543221791, "Min_30.0% Prob": 2.7432834253362985, "Min_40.0% Prob": 2.0467491208785966, "Min_50.0% Prob": 1.6315725036920645, "Min_60.0% Prob": 1.3554440874586555}}
{"hexsha": "67782e299b60e3d6714308f0cda66ce9bb82d1a5", "ext": "py", "lang": "Python", "content": "def get_depths(flows, x, h, roughness=0.01, slope=0.001, conv=1.0, dd=0.0001, verbose=False):\n    if isinstance(flows, float):\n        flows = np.array([flows], dtype=float)\n    if isinstance(roughness, float):\n        roughness = np.ones(x.shape, dtype=float) * roughness\n    depths = np.zeros(flows.shape, dtype=float)\n    for idx, q in enumerate(flows):\n        depths[idx] = qtodepth(x, h, q, roughness=roughness, slope=slope, conv=conv, dd=dd, verbose=False)\n    return depths", "fn_id": 7, "class_fn": false, "repo": "scharlton2/modflow6", "file": "autotest/scripts/cross_section_functions.py", "last_update_at": "2021-10-08T00:56:20+00:00", "pred": {"ppl": 2.8607683181762695, "ppl_lower": 3.1363680362701416, "ppl/lowercase_ppl": -1.0875045927361402, "ppl/zlib": 0.0044918385960373616, "Min_5.0% Prob": 8.398281309339735, "Min_10.0% Prob": 6.417217665248447, "Min_20.0% Prob": 4.310255927008551, "Min_30.0% Prob": 3.2272899118336764, "Min_40.0% Prob": 2.528966758702252, "Min_50.0% Prob": 2.0820554517533467, "Min_60.0% Prob": 1.743088285061153}}
{"hexsha": "6a706ba112e6e0c7b57c1e46bd9b0418402db376", "ext": "pyde", "lang": "Python", "content": "def draw():\n    loadPixels()\n    x = 4.0\n    y = 0.0\n    for i in range(1, 120000, 1):\n        x1 = b * y + f(x)\n        y = -x + f(x1)\n        x = x1\n        pixels[350 + int(x * 26) + (280 - int(y * 26)) * width] = color(i % 255, 100, 100)\n    updatePixels()", "fn_id": 1, "class_fn": false, "repo": "kantel/processingpy", "file": "sketches/mira/mira.pyde", "last_update_at": "2021-08-18T19:55:15+00:00", "pred": {"ppl": 3.6053011417388916, "ppl_lower": 3.8004963397979736, "ppl/lowercase_ppl": -1.0411152169737328, "ppl/zlib": 0.007543560598300244, "Min_5.0% Prob": 8.026192744572958, "Min_10.0% Prob": 6.369766345390906, "Min_20.0% Prob": 4.517878276330453, "Min_30.0% Prob": 3.581741394066229, "Min_40.0% Prob": 2.973989062839084, "Min_50.0% Prob": 2.4780344450298477, "Min_60.0% Prob": 2.1063616092248663}}
{"hexsha": "704ba9392622d555589cf12d7af04a6f1811b620", "ext": "py", "lang": "Python", "content": "def energy_plot(scenarios, color_dict):\n    \"\"\"\n    \"\"\"\n    layout = go.Layout(barmode='relative', legend_orientation='h', title='Aggregated supply and demand', paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', yaxis=dict(title='Energy in {}'.format('TWh'), titlefont=dict(size=16, color='rgb(107, 107, 107)'), tickfont=dict(size=14, color='rgb(107, 107, 107)')))\n    data = []\n    for idx, row in scenarios.T.iteritems():\n        if '-cos' in idx:\n            legend = False\n        else:\n            legend = True\n        data.append(go.Bar(x=row.index, y=row.values, text=[v.round(1) if v > 20 or v < -20 else None for v in row.values], hovertext=[', '.join([str(v.round(2)), idx.replace('-cos', '')]) for v in row.values], hoverinfo='text', textposition='auto', showlegend=legend, name=idx, marker=dict(color=color_dict.get(idx.replace('-cos', ''), 'gray'))))\n    return {'data': data, 'layout': layout}", "fn_id": 3, "class_fn": false, "repo": "znes/angus-scenarios", "file": "documentation/plotly_plots.py", "last_update_at": "2021-06-02T01:43:57+00:00", "pred": {"ppl": 2.5989317893981934, "ppl_lower": 3.0839154720306396, "ppl/lowercase_ppl": -1.179142964057483, "ppl/zlib": 0.001998118222539523, "Min_5.0% Prob": 7.58681058883667, "Min_10.0% Prob": 5.828705419193614, "Min_20.0% Prob": 4.019874839640376, "Min_30.0% Prob": 2.9963404465429853, "Min_40.0% Prob": 2.3396012095389542, "Min_50.0% Prob": 1.8950958113963081, "Min_60.0% Prob": 1.5938404244140234}}
{"hexsha": "bb6e599aba13747a581a01c8843fac9626122356", "ext": "py", "lang": "Python", "content": "def show_image_series(image_series: ImageSeries, neurodata_vis_spec: dict):\n    if len(image_series.data.shape) == 3:\n        return show_grayscale_image_series(image_series, neurodata_vis_spec)\n\n    def show_image(index=0, mode='rgb'):\n        fig, ax = plt.subplots(subplot_kw={'xticks': [], 'yticks': []})\n        image = image_series.data[index]\n        if mode == 'bgr':\n            image = image[:, :, ::-1]\n        ax.imshow(image.transpose([1, 0, 2]), cmap='gray', aspect='auto')\n        fig.show()\n        return fig2widget(fig)\n    slider = widgets.IntSlider(value=0, min=0, max=image_series.data.shape[0] - 1, orientation='horizontal', continuous_update=False, description='index')\n    mode = widgets.Dropdown(options=('rgb', 'bgr'), layout=Layout(width='200px'), description='mode')\n    controls = {'index': slider, 'mode': mode}\n    out_fig = widgets.interactive_output(show_image, controls)\n    vbox = widgets.VBox(children=[out_fig, slider, mode])\n    return vbox", "fn_id": 0, "class_fn": false, "repo": "NeurodataWithoutBorders/nwb-jupyter-widgets", "file": "nwbwidgets/image.py", "last_update_at": "2021-11-16T11:50:33+00:00", "pred": {"ppl": 2.2084193229675293, "ppl_lower": 2.5531809329986572, "ppl/lowercase_ppl": -1.1830962926695656, "ppl/zlib": 0.0016540230086604635, "Min_5.0% Prob": 6.61438775062561, "Min_10.0% Prob": 4.9936104863882065, "Min_20.0% Prob": 3.3997043481239904, "Min_30.0% Prob": 2.496173929195015, "Min_40.0% Prob": 1.935437333379083, "Min_50.0% Prob": 1.5718875257071199, "Min_60.0% Prob": 1.318000539796909}}
{"hexsha": "ca0dd379bf0cfd2ef3ea5b0e3ce3a98b03b1d3f8", "ext": "py", "lang": "Python", "content": "@api.route('/send_code/<email>', methods=['POST'])\n@cross_domain\ndef send_code(email):\n    \"\"\"\n    This endpoint generates a unique code that will be used to allow\n    the user to change his/her password. The unique code is send to\n    the specified email address.\n    \"\"\"\n    from zeeguu.core.emailer.password_reset import send_password_reset_email\n    try:\n        User.find(email)\n    except sqlalchemy.orm.exc.NoResultFound:\n        return bad_request('Email unknown')\n    code = UniqueCode(email)\n    db_session.add(code)\n    db_session.commit()\n    send_password_reset_email(email, code)\n    return 'OK'", "fn_id": 2, "class_fn": false, "repo": "zeeguu-ecosystem/zeeguu-api", "file": "zeeguu/api/api/accounts.py", "last_update_at": "2021-05-26T15:24:49+00:00", "pred": {"ppl": 2.8750863075256348, "ppl_lower": 3.50521183013916, "ppl/lowercase_ppl": -1.1876446442817634, "ppl/zlib": 0.003097016697383105, "Min_5.0% Prob": 6.803046332465278, "Min_10.0% Prob": 5.480921228726705, "Min_20.0% Prob": 3.9978384810525016, "Min_30.0% Prob": 3.130643488060344, "Min_40.0% Prob": 2.498815664971197, "Min_50.0% Prob": 2.0790813408144144, "Min_60.0% Prob": 1.746220033716511}}
{"hexsha": "861044681bbdc6a4088c31b9167d9eb267f0536d", "ext": "py", "lang": "Python", "content": "@app.route('/rest/<jobname>/<jobid>/executionduration')\ndef get_executionduration(jobname, jobid):\n    \"\"\"Get the maximum execution duration of job <jobid>\n\n    Returns:\n        200 OK: text/plain: integer number of seconds (on success)\n        404 Not Found: Job not found (on NotFoundWarning)\n        500 Internal Server Error (on error)\n    \"\"\"\n    user = set_user()\n    try:\n        logger.info('{} {}'.format(jobname, jobid))\n        job = Job(jobname, jobid, user)\n        response.content_type = 'text/plain; charset=UTF-8'\n        return str(job.execution_duration)\n    except JobAccessDenied as e:\n        abort_403(str(e))\n    except storage.NotFoundWarning as e:\n        abort_404(str(e))\n    except:\n        abort_500_except()", "fn_id": 45, "class_fn": false, "repo": "ParisAstronomicalDataCentre/OPUS", "file": "uws_server/uws_server.py", "last_update_at": "2021-01-06T08:54:54+00:00", "pred": {"ppl": 3.4334726333618164, "ppl_lower": 3.6930453777313232, "ppl/lowercase_ppl": -1.059079838205815, "ppl/zlib": 0.003254807859019144, "Min_5.0% Prob": 8.421111540360885, "Min_10.0% Prob": 6.745463599329409, "Min_20.0% Prob": 4.905308215514474, "Min_30.0% Prob": 3.731012329675149, "Min_40.0% Prob": 2.9435106503066195, "Min_50.0% Prob": 2.4311259828250984, "Min_60.0% Prob": 2.052774907391277}}
{"hexsha": "2c2b3fa036cbe03c2fdfc1bafeba98b37b90d378", "ext": "py", "lang": "Python", "content": "def bbox_sample(region, metric):\n    \"\"\"Extract image that lies within region bounding box\n\n    Parameters\n    ----------\n    region: skimage.RegionProperties\n        Region defining pixels within image to analyse\n    metric: array-like\n        Metric for all pixels in image to be analysed\n    \"\"\"\n    indices = bbox_indices(region)\n    return metric[indices]", "fn_id": 1, "class_fn": false, "repo": "franklongford/ImageCol", "file": "pyfibre/model/tools/utilities.py", "last_update_at": "2021-07-26T05:53:01+00:00", "pred": {"ppl": 5.873759746551514, "ppl_lower": 6.967185020446777, "ppl/lowercase_ppl": -1.0964229485451737, "ppl/zlib": 0.00867889671948066, "Min_5.0% Prob": 9.166035890579224, "Min_10.0% Prob": 7.978291935390896, "Min_20.0% Prob": 6.582191065738075, "Min_30.0% Prob": 5.227378640856061, "Min_40.0% Prob": 4.206056613671152, "Min_50.0% Prob": 3.447343855475386, "Min_60.0% Prob": 2.948013565257976}}
{"hexsha": "2b6b31ac1b8a4e33d35999ea6fa8cea0493f8cb2", "ext": "py", "lang": "Python", "content": "@njit(fastmath=False, cache=True)\ndef get_mean_curvature(traj_list, num_traj):\n    out = np.empty((num_traj,))\n    for i in range(num_traj):\n        out[i] = np.mean(np.abs(traj_list[i * trajectory_generator.NUM_STEPS:(i + 1) * trajectory_generator.NUM_STEPS, 3]))\n    return out", "fn_id": 9, "class_fn": false, "repo": "travelbureau/f0_icml_code", "file": "Simulator/python/mpc/trajectory_generator_utils.py", "last_update_at": "2021-02-17T20:53:38+00:00", "pred": {"ppl": 3.053215980529785, "ppl_lower": 3.515937089920044, "ppl/lowercase_ppl": -1.1264210775695482, "ppl/zlib": 0.006066279646494595, "Min_5.0% Prob": 8.899267292022705, "Min_10.0% Prob": 6.996178150177002, "Min_20.0% Prob": 4.691042438797329, "Min_30.0% Prob": 3.4938841325896126, "Min_40.0% Prob": 2.7623343072507693, "Min_50.0% Prob": 2.2306103621577393, "Min_60.0% Prob": 1.860912431350776}}
{"hexsha": "5148fe31f1a672fe0541555158917c8256ff125f", "ext": "py", "lang": "Python", "content": "def test_dataframe_barh(dataframe, with_plotting_backend):\n    chart = dataframe.plot.barh()\n    spec = chart.to_dict()\n    assert spec['mark'] == {'type': 'bar', 'orient': 'horizontal'}\n    assert spec['encoding']['y']['field'] == 'index'\n    assert spec['encoding']['x']['field'] == 'value'\n    assert spec['encoding']['color']['field'] == 'column'\n    assert spec['transform'][0]['fold'] == ['x', 'y']", "fn_id": 5, "class_fn": false, "repo": "altair-viz/altair_pandas", "file": "altair_pandas/test_plotting.py", "last_update_at": "2021-12-15T21:34:00+00:00", "pred": {"ppl": 2.6809568405151367, "ppl_lower": 2.6809568405151367, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.004764124448529793, "Min_5.0% Prob": 7.93790062268575, "Min_10.0% Prob": 6.229800184567769, "Min_20.0% Prob": 4.208770915865898, "Min_30.0% Prob": 3.033423839388667, "Min_40.0% Prob": 2.383618891847377, "Min_50.0% Prob": 1.9310336137010204, "Min_60.0% Prob": 1.6394549118908677}}
{"hexsha": "ac18a96ded8e760d6d2a171c418c6b63db8231ef", "ext": "py", "lang": "Python", "content": "def init_estimators_train(columns, null_value, no_compression=False):\n    if no_compression:\n        res = [NoCompressionEstimatorTrain(columns, null_value)]\n    else:\n        res = [NoCompressionEstimatorTrain(columns, null_value), DictEstimatorTrain(columns, null_value, max_dict_size), RleEstimatorTrain(columns, null_value), ForEstimatorTrain(columns, null_value)]\n    return res", "fn_id": 1, "class_fn": false, "repo": "bogdanghita/whitebox-compression", "file": "evaluation/theoretical_evaluation.py", "last_update_at": "2021-12-28T05:31:03+00:00", "pred": {"ppl": 3.4597952365875244, "ppl_lower": 4.868876934051514, "ppl/lowercase_ppl": -1.2752588663674993, "ppl/zlib": 0.00821992984861855, "Min_5.0% Prob": 8.794540405273438, "Min_10.0% Prob": 7.240158557891846, "Min_20.0% Prob": 5.3132823467254635, "Min_30.0% Prob": 4.013988607638591, "Min_40.0% Prob": 3.069403464794159, "Min_50.0% Prob": 2.4918009156301135, "Min_60.0% Prob": 2.065504806985458}}
{"hexsha": "0629068ef6b33dbfeb46975094295e4a4c07df96", "ext": "py", "lang": "Python", "content": "def which(program):\n    \"\"\"Determines if and where an executable exists on the users path.\n    This code was contributed by Jay at http://stackoverflow.com/a/377028\n    Args:\n        program (str): The name, or path for the program.\n    Returns:\n        The program or executable.\n    \"\"\"\n    import os\n\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n    fpath, fname = os.path.split(program)\n    if fpath and is_exe(program):\n        return program\n    else:\n        for path in os.environ['PATH'].split(os.pathsep):\n            path = path.strip('\"')\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n    return None", "fn_id": 5, "class_fn": false, "repo": "wsmorgan/phonon-enumeration", "file": "phenum/io_utils.py", "last_update_at": "2021-05-30T21:02:08+00:00", "pred": {"ppl": 2.0037615299224854, "ppl_lower": 2.478020668029785, "ppl/lowercase_ppl": -1.3056488389547152, "ppl/zlib": 0.0019146726696893672, "Min_5.0% Prob": 7.166531779549339, "Min_10.0% Prob": 5.296076861294833, "Min_20.0% Prob": 3.3739681379361586, "Min_30.0% Prob": 2.3074614982774007, "Min_40.0% Prob": 1.7465505858966976, "Min_50.0% Prob": 1.3892931355970046, "Min_60.0% Prob": 1.1615695870618696}}
{"hexsha": "12f9436289446182577ceaab3eda30ea64c2e38b", "ext": "py", "lang": "Python", "content": "def upscale2d_conv2d(x, fmaps, kernel, gain=np.sqrt(2), use_wscale=False):\n    assert kernel >= 1 and kernel % 2 == 1\n    w = get_weight([kernel, kernel, fmaps, x.shape[1].value], gain=gain, use_wscale=use_wscale, fan_in=kernel ** 2 * x.shape[1].value)\n    w = tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')\n    w = tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])\n    w = tf.cast(w, x.dtype)\n    os = [tf.shape(x)[0], fmaps, x.shape[2] * 2, x.shape[3] * 2]\n    return tf.nn.conv2d_transpose(x, w, os, strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')", "fn_id": 7, "class_fn": false, "repo": "zhuxinqimac/stylegan2", "file": "training/vc2_subnets_pggan.py", "last_update_at": "2021-07-04T09:51:28+00:00", "pred": {"ppl": 1.9606387615203857, "ppl_lower": 2.232231378555298, "ppl/lowercase_ppl": -1.1926884059062521, "ppl/zlib": 0.002015779397855865, "Min_5.0% Prob": 6.674223899841309, "Min_10.0% Prob": 4.821396393435342, "Min_20.0% Prob": 3.0391967861275924, "Min_30.0% Prob": 2.189422169327736, "Min_40.0% Prob": 1.6655105882438652, "Min_50.0% Prob": 1.3461329041993324, "Min_60.0% Prob": 1.1210001114461767}}
{"hexsha": "5306ddb4712ea725043386b81d8c897bbc57d019", "ext": "py", "lang": "Python", "content": "def get_first_pos(vcf):\n    p = {}\n    for line in file_util.gzopen(vcf):\n        line = file_util.decodeb(line)\n        if line[0] != '#':\n            arr = line.split('\\t')\n            print(arr)\n            p['chrom'] = arr[0]\n            p['spos'] = int(arr[1])\n            p['epos'] = int(arr[1])\n            p['str'] = p['chrom'] + ':' + str(p['spos']) + '-' + str(p['epos'])\n    return p", "fn_id": 0, "class_fn": false, "repo": "dbmi-bgm/cgap-annotation-server", "file": "tests/annotviewer.py", "last_update_at": "2021-05-27T14:27:47+00:00", "pred": {"ppl": 2.3166961669921875, "ppl_lower": 2.3166961669921875, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0043757401290675894, "Min_5.0% Prob": 7.419095039367676, "Min_10.0% Prob": 5.9548748050417215, "Min_20.0% Prob": 3.8515664133532295, "Min_30.0% Prob": 2.7430178010186483, "Min_40.0% Prob": 2.0743214739807723, "Min_50.0% Prob": 1.6838477773384914, "Min_60.0% Prob": 1.3976548224066694}}
{"hexsha": "427cceb85af895991c1b9f9596f2e1bb0c5b7263", "ext": "py", "lang": "Python", "content": "def deprecated(version, reason):\n\n    def decorator_deprecated(fn):\n\n        @wraps(fn)\n        def wrapper_deprecated(*args, **kwds):\n            warnings.warn(f'Deprecated since {version}. The reason: {reason}', category=DeprecationWarning)\n            return fn(*args, **kwds)\n        return wrapper_deprecated\n    return decorator_deprecated", "fn_id": 16, "class_fn": false, "repo": "Sberbank-Technology/ignite-python-thin-client", "file": "pyignite/utils.py", "last_update_at": "2021-07-16T01:35:39+00:00", "pred": {"ppl": 2.3802688121795654, "ppl_lower": 2.7809324264526367, "ppl/lowercase_ppl": -1.1793939578367458, "ppl/zlib": 0.005012794379187086, "Min_5.0% Prob": 7.7176261901855465, "Min_10.0% Prob": 5.9338599920272825, "Min_20.0% Prob": 3.8254623770713807, "Min_30.0% Prob": 2.8123846630255382, "Min_40.0% Prob": 2.1868423290550707, "Min_50.0% Prob": 1.731654665889401, "Min_60.0% Prob": 1.4491431207365555}}
{"hexsha": "208074ab27944df3955e997903e9acaee5afdb6b", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef rus_player_json():\n    \"\"\"Expected JSON for rus_player model-fixture\"\"\"\n    return {'name': 'Rus', 'id_': 'PjBYO_8gbf'}", "fn_id": 0, "class_fn": false, "repo": "BenjaminNMitchell/Pyker", "file": "test/encoders/json_fixtures.py", "last_update_at": "2021-04-12T17:18:19+00:00", "pred": {"ppl": 20.88580894470215, "ppl_lower": 21.94086265563965, "ppl/lowercase_ppl": -1.0162157645491492, "ppl/zlib": 0.024508628471662703, "Min_5.0% Prob": 11.703775405883789, "Min_10.0% Prob": 9.936135292053223, "Min_20.0% Prob": 8.626432514190673, "Min_30.0% Prob": 7.3968603909015656, "Min_40.0% Prob": 6.534829991204398, "Min_50.0% Prob": 5.568063100179036, "Min_60.0% Prob": 4.916042160242796}}
{"hexsha": "2c502e5877d8fa61f6c9c0acfe9451fb744aa183", "ext": "py", "lang": "Python", "content": "def create_table(name):\n    name = name.title()\n    name = name.split()\n    name = ''.join(name)\n    with sqlite3.connect('supplies.db') as conn:\n        cur = conn.cursor()\n        cur.execute(f'CREATE TABLE IF NOT EXISTS {name} (Item TEXT, Part Number TEXT, Description TEXT, Vendor TEXT, Price REAL, QOH INT, QNeed INT, Ordering TEXT, Ordered DATE)')", "fn_id": 0, "class_fn": false, "repo": "irondru562/InventoryManagement", "file": "inback.py", "last_update_at": "2021-04-14T18:41:41+00:00", "pred": {"ppl": 3.502812623977661, "ppl_lower": 3.83961820602417, "ppl/lowercase_ppl": -1.0732364031997783, "ppl/zlib": 0.005334324479263934, "Min_5.0% Prob": 8.163710403442384, "Min_10.0% Prob": 6.22674408825961, "Min_20.0% Prob": 4.685932688091112, "Min_30.0% Prob": 3.7481258231050827, "Min_40.0% Prob": 2.9744670041229413, "Min_50.0% Prob": 2.474804948819311, "Min_60.0% Prob": 2.0745805522453957}}
{"hexsha": "5b2a8ea69b3198b3f678cebb3485c95da3b6d811", "ext": "py", "lang": "Python", "content": "def _graph_from_dict(P, weights=False):\n    G = pairDiGraph()\n    for (a, b), n in P.items():\n        if weights:\n            G.add_edge(a, b, weight=n)\n        else:\n            G.add_edge(a, b)\n    if weights:\n        G.addPd()\n    return G", "fn_id": 2, "class_fn": false, "repo": "jpgil/logdelay", "file": "src/theory202105.py", "last_update_at": "2021-05-28T16:03:39+00:00", "pred": {"ppl": 3.8064069747924805, "ppl_lower": 4.290421009063721, "ppl/lowercase_ppl": -1.0895492284510013, "ppl/zlib": 0.00954775494964614, "Min_5.0% Prob": 9.984580993652344, "Min_10.0% Prob": 8.471252600351969, "Min_20.0% Prob": 5.8310239050123425, "Min_30.0% Prob": 4.250637917606919, "Min_40.0% Prob": 3.281123116198513, "Min_50.0% Prob": 2.6516194894909857, "Min_60.0% Prob": 2.2208239078107805}}
{"hexsha": "2c730cc2f3073d60e2b37cd3db6bc2590e864582", "ext": "py", "lang": "Python", "content": "def parse_args():\n    parser = argparse.ArgumentParser(description='Train a network with Detectron')\n    parser.add_argument('--cfg', dest='cfg_file', help='Config file for training (and optionally testing)', default=None, type=str)\n    parser.add_argument('--multi-gpu-testing', dest='multi_gpu_testing', help='Use cfg.NUM_GPUS GPUs for inference', action='store_true')\n    parser.add_argument('--skip-test', dest='skip_test', help='Do not test the final model', action='store_true')\n    parser.add_argument('opts', help='See detectron/core/config.py for all options', default=None, nargs=argparse.REMAINDER)\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "994374821/maskrcnn_body25", "file": "tools/train_stage2.py", "last_update_at": "2021-10-12T22:58:13+00:00", "pred": {"ppl": 1.4188270568847656, "ppl_lower": 1.7825268507003784, "ppl/lowercase_ppl": -1.6523199480162298, "ppl/zlib": 0.0009799174061496034, "Min_5.0% Prob": 4.533230564811013, "Min_10.0% Prob": 2.9801534739407627, "Min_20.0% Prob": 1.6910310079428283, "Min_30.0% Prob": 1.160989976685607, "Min_40.0% Prob": 0.8766000079287385, "Min_50.0% Prob": 0.7023254752349617, "Min_60.0% Prob": 0.5855788691626389}}
{"hexsha": "01415ebda64b25b4823eab1699f9886d6bb0651b", "ext": "py", "lang": "Python", "content": "def get_buildings_in_radius(poly: Polygon, radius: float, excluded_poly: Polygon=None) -> List[Polygon]:\n    \"\"\"\n    Get all buildings within $radius\n    Args:\n        poly: polygon to intersect the buildings in\n        radius: radius from within we will retrieve all buildings\n        excluded_poly: optional polygon to exclude from the nearest\n\n    Returns:\n        A Geoseries with all the polygons of the buildings\n    \"\"\"\n    eng = get_connection('POSTGRES')\n    if excluded_poly is not None:\n        excluded_sql = f\"AND ST_INTERSECTS(way, ST_GEOMFROMTEXT('{excluded_poly.wkt}', 4326))=FALSE\"\n    else:\n        excluded_sql = ''\n    query = f\"\\n        SELECT st_astext(way) as geom FROM (\\n            SELECT way\\n            FROM {OSM_POLYGON_TABLE}\\n            WHERE {BUILDING}\\n                  {excluded_sql}\\n                  AND ST_DWithin(way, ST_GEOMFROMTEXT('{poly.wkt}', 4326), {radius}, true)\\n            ) t\\n        \"\n    df = get_df(query, eng)\n    eng.dispose()\n    gs = [wkt.loads(geom) for geom in df['geom'].unique()]\n    return gs", "fn_id": 3, "class_fn": false, "repo": "jonzarecki/coord2vec", "file": "coord2vec/feature_extraction/osm/osm_utils.py", "last_update_at": "2021-01-25T09:21:17+00:00", "pred": {"ppl": 3.0893774032592773, "ppl_lower": 3.323730707168579, "ppl/lowercase_ppl": -1.0648229146720587, "ppl/zlib": 0.002190232199980466, "Min_5.0% Prob": 7.672497160294476, "Min_10.0% Prob": 5.991348000133739, "Min_20.0% Prob": 4.418206898605122, "Min_30.0% Prob": 3.408606018505844, "Min_40.0% Prob": 2.7120213469161705, "Min_50.0% Prob": 2.2278061882537954, "Min_60.0% Prob": 1.8763173592514266}}
{"hexsha": "0ea7da24a0926bef44f6a6ab9c0f2b679c6306d1", "ext": "py", "lang": "Python", "content": "def get_corner_loss_lidar(pred_bbox3d, gt_bbox3d):\n    \"\"\"\n    :param pred_bbox3d: (N, 7)\n    :param gt_bbox3d: (N, 7)\n    :return: corner_loss: (N)\n    \"\"\"\n    assert pred_bbox3d.shape[0] == gt_bbox3d.shape[0]\n    pred_box_corners = box_torch_ops.center_to_corner_box3d(pred_bbox3d[:, 0:3], pred_bbox3d[:, 3:6], pred_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_box_corners = box_torch_ops.center_to_corner_box3d(gt_bbox3d[:, 0:3], gt_bbox3d[:, 3:6], gt_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_bbox3d_flip = gt_bbox3d.clone()\n    gt_bbox3d_flip[:, 6] += np.pi\n    gt_box_corners_flip = box_torch_ops.center_to_corner_box3d(gt_bbox3d_flip[:, 0:3], gt_bbox3d_flip[:, 3:6], gt_bbox3d_flip[:, 6], [0.5, 0.5, 0], axis=2)\n    corner_dist = torch.min(torch.norm(pred_box_corners - gt_box_corners, dim=2), torch.norm(pred_box_corners - gt_box_corners_flip, dim=2))\n    corner_loss = huber_loss(corner_dist, delta=1.0)\n    return corner_loss.mean(dim=1)", "fn_id": 2, "class_fn": false, "repo": "xy-guo/mmdetection_kitti", "file": "mmdet/utils/det3d/loss_utils.py", "last_update_at": "2021-12-27T10:59:51+00:00", "pred": {"ppl": 1.296773076057434, "ppl_lower": 1.3044921159744263, "ppl/lowercase_ppl": -1.0228369898361598, "ppl/zlib": 0.0008224016752933639, "Min_5.0% Prob": 3.933191628456116, "Min_10.0% Prob": 2.3360324291621937, "Min_20.0% Prob": 1.2698560301395296, "Min_30.0% Prob": 0.8663938487698506, "Min_40.0% Prob": 0.6501968904958983, "Min_50.0% Prob": 0.5196166300957539, "Min_60.0% Prob": 0.43394888847246715}}
{"hexsha": "605df9b62c38bf133d0aa401619574d4bb7f6839", "ext": "py", "lang": "Python", "content": "def get_position(fallback=defaults.CURSOR_POS_FALLBACK):\n    \"\"\" Return the current column number of the terminal cursor.\n        Used to figure out if we need to print an extra newline.\n\n        Returns:\n            tuple(int): (x, y) | (,)  - empty, if an error occurred.\n    \"\"\"\n    values = fallback\n    try:\n        with TermStack() as fd:\n            termios.tcflush(fd, termios.TCIFLUSH)\n            tty.setcbreak(fd, termios.TCSANOW)\n            sys.stdout.write(CSI + '6n')\n            sys.stdout.flush()\n            log.debug('about to read get_position response\u2026')\n            resp = _read_until_select(max_bytes=10, end='R')\n    except AttributeError:\n        return values\n    resp = resp.lstrip(CSI)\n    try:\n        values = tuple((int(token) for token in resp.partition(';')[::-2]))\n    except (ValueError, IndexError) as err:\n        log.error('parse error: %s on %r', err, resp)\n    return values", "fn_id": 16, "class_fn": false, "repo": "Dsa-Terminal/Dsa-Terminal", "file": "Python3/Lib/site-packages/console/detection.py", "last_update_at": "2021-04-02T17:14:25+00:00", "pred": {"ppl": 4.161133766174316, "ppl_lower": 5.041782379150391, "ppl/lowercase_ppl": -1.1346428403643867, "ppl/zlib": 0.00283456774768719, "Min_5.0% Prob": 8.864936794553484, "Min_10.0% Prob": 7.372299892561776, "Min_20.0% Prob": 5.471246748639826, "Min_30.0% Prob": 4.23476123529322, "Min_40.0% Prob": 3.375052975980859, "Min_50.0% Prob": 2.783006646624812, "Min_60.0% Prob": 2.3622001717139405}}
{"hexsha": "5ee4210df799d29db459911536ee02f9a5a1fd24", "ext": "py", "lang": "Python", "content": "def readlines(file):\n    with open(file) as f:\n        content = f.readlines()\n    return [x.strip() for x in content]", "fn_id": 1, "class_fn": false, "repo": "omidroshani/DeepDIA", "file": "code/deepdetect/py/predict_ensemble.py", "last_update_at": "2021-12-25T20:09:40+00:00", "pred": {"ppl": 2.2581307888031006, "ppl_lower": 2.2581307888031006, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.008853667244137142, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 6.616151650746663, "Min_20.0% Prob": 3.9164890561785017, "Min_30.0% Prob": 2.7111609361388465, "Min_40.0% Prob": 2.033357760310173, "Min_50.0% Prob": 1.6196228034402196, "Min_60.0% Prob": 1.4025403095239943}}
{"hexsha": "12e6a066caf160f30a66f07074f6d4b7810f6f9d", "ext": "py", "lang": "Python", "content": "def motion(pin):\n    print('Bewegung erkannt')\n    with picamera.PiCamera() as camera:\n        for filename in camera.capture_continuous('/home/pi/Desktop/Fotos/{timestamp:%d.%m_%H-%M-%S}Uhr.jpg'):\n            print('Captured %s' % filename)\n            break", "fn_id": 0, "class_fn": false, "repo": "meigrafd/Sample-Code", "file": "PIR_interrupt_pic.py", "last_update_at": "2021-03-31T04:22:25+00:00", "pred": {"ppl": 4.033318519592285, "ppl_lower": 6.059255123138428, "ppl/lowercase_ppl": -1.2918402777666862, "ppl/zlib": 0.007538321573510713, "Min_5.0% Prob": 9.434061408042908, "Min_10.0% Prob": 7.705844402313232, "Min_20.0% Prob": 5.328099966049194, "Min_30.0% Prob": 4.2139102697372435, "Min_40.0% Prob": 3.3844568396315857, "Min_50.0% Prob": 2.8001503030813875, "Min_60.0% Prob": 2.3172965650903246}}
{"hexsha": "971e98315817be02de95647ef3faaea39f4b2047", "ext": "py", "lang": "Python", "content": "@export\ndef tlv_pack(*args):\n    if len(args) == 2:\n        tlv = {'type': args[0], 'value': args[1]}\n    else:\n        tlv = args[0]\n    data = ''\n    if tlv['type'] & TLV_META_TYPE_UINT == TLV_META_TYPE_UINT:\n        data = struct.pack('>III', 12, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_QWORD == TLV_META_TYPE_QWORD:\n        data = struct.pack('>IIQ', 16, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_BOOL == TLV_META_TYPE_BOOL:\n        data = struct.pack('>II', 9, tlv['type']) + bytes(chr(int(bool(tlv['value']))), 'UTF-8')\n    else:\n        value = tlv['value']\n        if sys.version_info[0] < 3 and value.__class__.__name__ == 'unicode':\n            value = value.encode('UTF-8')\n        elif not is_bytes(value):\n            value = bytes(value, 'UTF-8')\n        if tlv['type'] & TLV_META_TYPE_STRING == TLV_META_TYPE_STRING:\n            data = struct.pack('>II', 8 + len(value) + 1, tlv['type']) + value + NULL_BYTE\n        elif tlv['type'] & TLV_META_TYPE_RAW == TLV_META_TYPE_RAW:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_GROUP == TLV_META_TYPE_GROUP:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_COMPLEX == TLV_META_TYPE_COMPLEX:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n    return data", "fn_id": 6, "class_fn": false, "repo": "madhavarao-yejarla/VoIP", "file": "data/meterpreter/meterpreter.py", "last_update_at": "2021-04-07T18:00:44+00:00", "pred": {"ppl": 1.4557881355285645, "ppl_lower": 1.6338127851486206, "ppl/lowercase_ppl": -1.3072021770470974, "ppl/zlib": 0.0008899228148670543, "Min_5.0% Prob": 4.768516404288156, "Min_10.0% Prob": 3.1603613836424693, "Min_20.0% Prob": 1.8217364803754859, "Min_30.0% Prob": 1.2417125192487382, "Min_40.0% Prob": 0.9385034500848916, "Min_50.0% Prob": 0.7502673563104889, "Min_60.0% Prob": 0.6264562756911515}}
{"hexsha": "83e9ee54f5b91fb9bed39ac8b9254bc4e100e0bc", "ext": "py", "lang": "Python", "content": "def vector_valued_monomial_basis_fn(nu, i, n):\n    \"\"\"\n    Generate a vector valued monomial basis polynomial :math:`p_{\\\\nu, i}` in the space\n    :math:`\\\\mathcal{P}_r(\\\\mathbb{R}^m, \\\\mathbb{R}^n)`, where :math:`r = |\\\\nu|` and m is equal to the length of nu.\n\n    The vector valued basis polynomial is generated by specifying a scalar valued basis polynomial and the component\n    of the vector valued basis polynomial that should be equal to the scalar valued basis polynomial. All other\n    components of the vector valued basis polynomial will be zero, i.e.\n\n    .. math:: p_{\\\\nu, i}^j (x) = \\\\begin{cases} p_{\\\\nu} (x), & i = j \\\\\\\\ 0, & \\\\text{else} \\\\end{cases}.\n\n    :param nu: Multi-index indicating which scalar valued monomial basis polynomial should be generated for the\n        non-zero component.\n    :type nu: int or :class:`~polynomials_on_simplices.algebra.multiindex.MultiIndex` or Tuple[int, ...]\n    :param int i: Index of the vector component that is non-zero.\n    :param int n: Dimension of the target.\n    :return: The monomial base polynomial as specified by nu, r, i and n.\n    :rtype: :class:`Polynomial`.\n\n    .. rubric:: Examples\n\n    >>> import sympy as sp\n    >>> x1, x2 = sp.symbols('x1 x2')\n    >>> vector_valued_monomial_basis_fn(0, 0, 2)(x1)\n    array([1, 0])\n    >>> vector_valued_monomial_basis_fn(1, 1, 2)(x1)\n    array([0, x1], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 0), 0, 2)((x1, x2))\n    array([x1, 0], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 1), 1, 3)((x1, x2))\n    array([0, x1*x2, 0], dtype=object)\n    \"\"\"\n    if n == 1:\n        assert i == 0\n        return monomial_basis_fn(nu)\n    assert i >= 0\n    assert i < n\n    try:\n        m = len(nu)\n    except TypeError:\n        m = 1\n    if not isinstance(nu, multiindex.MultiIndex):\n        nu = multiindex.MultiIndex(nu)\n    r = multiindex.norm(nu)\n    dim = get_dimension(r, m)\n    coeff = np.zeros((dim, n), dtype=int)\n    j = multiindex.get_index(nu, r)\n    coeff[j][i] = 1\n    return Polynomial(coeff, r, m)", "fn_id": 3, "class_fn": false, "repo": "FAndersson/polynomials_on_simplices", "file": "polynomials_on_simplices/polynomial/polynomials_monomial_basis.py", "last_update_at": "2021-03-17T11:41:21+00:00", "pred": {"ppl": 2.3818159103393555, "ppl_lower": 2.615187883377075, "ppl/lowercase_ppl": -1.1077044869068986, "ppl/zlib": 0.0010701149004857084, "Min_5.0% Prob": 6.4989744954639015, "Min_10.0% Prob": 5.134862978164464, "Min_20.0% Prob": 3.5653981705234474, "Min_30.0% Prob": 2.67731379999962, "Min_40.0% Prob": 2.111967777960921, "Min_50.0% Prob": 1.7184970849931567, "Min_60.0% Prob": 1.4427051793588728}}
{"hexsha": "6bd2ed2c7bff37b5c4b35bd8f9b870bb8d243202", "ext": "py", "lang": "Python", "content": "def main(argv=None):\n    \"\"\"Main entrance into app.  Setup logging, create App, and enter main loop\n    \"\"\"\n    global DEBUG\n    args = process_command_line(argv)\n    if args.debug:\n        DEBUG = True\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    if another_instance_running(args.srcfiles):\n        print('Another instance of Marcam is already running.  Exiting.')\n        return 1\n    if (const.USER_CONFIG_DIR / 'debug').exists():\n        DEBUG = True\n        log_level = logging.DEBUG\n    logging_setup(log_level)\n    sys.stderr = marcam_extra.StderrToLog()\n    log_debug_main()\n    LOGGER.info(repr(args))\n    sanity_checks()\n    myapp = MarcamApp(args.srcfiles)\n    myapp.MainLoop()\n    return 0", "fn_id": 7, "class_fn": false, "repo": "itsayellow/marcam", "file": "marcam/marcam.py", "last_update_at": "2021-10-05T10:22:16+00:00", "pred": {"ppl": 4.2611775398254395, "ppl_lower": 5.096249103546143, "ppl/lowercase_ppl": -1.1234588734457203, "ppl/zlib": 0.003794621832157897, "Min_5.0% Prob": 9.741307085210627, "Min_10.0% Prob": 7.627661850141442, "Min_20.0% Prob": 5.467627157335696, "Min_30.0% Prob": 4.23598869814389, "Min_40.0% Prob": 3.4266742720552115, "Min_50.0% Prob": 2.839546282135922, "Min_60.0% Prob": 2.4032744072053744}}
{"hexsha": "3ee5df8aa3ce8621360bf2c27434ac72151c3d37", "ext": "py", "lang": "Python", "content": "def context_geo(key, values, dataset, namecount):\n    geoname = '\"' + key + '\"'\n    spar2 = '\\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n    PREFIX gndo: <http://d-nb.info/standards/elementset/gnd#>\\n    PREFIX pro: <http://purl.org/hpi/patchr#>\\n    PREFIX owl: <http://www.w3.org/2002/07/owl#>\\n    PREFIX edm: <http://www.europeana.eu/schemas/edm/>\\n    PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n    PREFIX dblp: <http://dblp.org/rdf/schema-2015-01-26#>\\n    PREFIX dcterms: <http://purl.org/dc/terms/>\\n    PREFIX bibtex: <http://data.bibbase.org/ontology/#>\\n    PREFIX geo: <http://www.opengis.net/ont/geosparql#>\\n\\n        select ?x  (group_concat(?alt; SEPARATOR=\", \") as ?altname) (group_concat(?sameas; SEPARATOR=\", \") as ?same)\\n\\n        WHERE{{\\n\\n          graph <http://maral.wisslab.org/graphs/gnd> {{\\n\\n\\n            \\t?x (gndo:preferredNameForThePlaceOrGeographicName | gndo:variantNameForThePlaceOrGeographicName){0}.\\n                optional {{?x gndo:variantNameForThePlaceOrGeographicName ?alt.}}\\n                optional {{?x owl:sameAs ?sameas.}}\\n               # ?x geo:hasGeometry ?geo.\\n               # optional {{?geo geo:asWKT ?coo}}\\n          }}\\n          }} group by ?x\\n\\n        '.format(geoname)\n    sparql.setQuery(spar2)\n    sparql.setReturnFormat(XML)\n    results = sparql.query().convert()\n    for i in range(0, len(results.bindings)):\n        uri = 'https://data.jhn.ngo/spatial/' + str(dataset) + '/' + str(namecount)\n        graph.add((URIRef(uri), RDF.type, edm.Place))\n        for z in range(0, len(values)):\n            graph.add((URIRef(uri), edm.identifier, Literal(values[z])))\n        graph.add((URIRef(uri), skos.prefLabel, Literal(key)))\n        if 'altname' in results.bindings[i].keys():\n            count1 = results.bindings[i]['altname'].value.count(',')\n            if count1 > 0:\n                for j in range(0, count1 + 1):\n                    graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value.rsplit(', ', count1)[count1 - j])))\n            else:\n                graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value)))\n        if 'same' in results.bindings[i].keys():\n            count2 = results.bindings[i]['same'].value.count(',')\n            if count2 > 0:\n                for j in range(0, count2 + 1):\n                    graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value.rsplit(', ', count2)[count2 - j])))\n            else:\n                graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value)))\n    graph.serialize(destination=dataset + '_Spatial_01.ttl', format='turtle')", "fn_id": 1, "class_fn": false, "repo": "ubffm/judaica-europeana-2-0", "file": "scripts/contextualize_output_spatial_01.py", "last_update_at": "2021-03-17T08:38:58+00:00", "pred": {"ppl": 1.8311707973480225, "ppl_lower": 2.0428740978240967, "ppl/lowercase_ppl": -1.1808432817226129, "ppl/zlib": 0.0006067758698625576, "Min_5.0% Prob": 6.401525069166113, "Min_10.0% Prob": 4.689972760500731, "Min_20.0% Prob": 2.89358162412995, "Min_30.0% Prob": 1.9992491431419666, "Min_40.0% Prob": 1.5086286915938287, "Min_50.0% Prob": 1.2100447073829708, "Min_60.0% Prob": 1.0080342341233017}}
{"hexsha": "00500ee126bf98712c024187bb2a8536d5e82f46", "ext": "py", "lang": "Python", "content": "@login_required\ndef productlist(request):\n    organization = request.user.info.organization\n    if not hasattr(request.user, 'organization'):\n        if not hasattr(request.user, 'permissions'):\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n        if request.user.permissions.product_permissions < 1:\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n    products = Product.objects.filter(organization=organization).order_by('-id').annotate(earmarked=Sum('salesinvoiceentry__quantity', filter=Q(salesinvoiceentry__invoice__finalized=0)))\n    productfilter = ProductFilter(request.GET, queryset=products)\n    paginator = Paginator(productfilter.qs, 25)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    context = {'page_obj': page_obj, 'filter': productfilter}\n    return render(request, 'products/product_list.html', context=context)", "fn_id": 0, "class_fn": false, "repo": "drtweety/busman", "file": "products/views.py", "last_update_at": "2021-06-13T18:12:21+00:00", "pred": {"ppl": 2.1744015216827393, "ppl_lower": 2.865753650665283, "ppl/lowercase_ppl": -1.3554253934981164, "ppl/zlib": 0.001966464466409616, "Min_5.0% Prob": 7.024318184171404, "Min_10.0% Prob": 5.328726155417306, "Min_20.0% Prob": 3.522034777883898, "Min_30.0% Prob": 2.5181008868357715, "Min_40.0% Prob": 1.9165139701544194, "Min_50.0% Prob": 1.551468864188228, "Min_60.0% Prob": 1.2925578355190088}}
{"hexsha": "04feed9797eeb64fb97ec419811711f467958210", "ext": "py", "lang": "Python", "content": "def get_marks(cos_scores, max_marks, bias):\n    max_cos_score = max(cos_scores)\n    marks_obtained = max([(max_cos_score - bias[0]) / (1 - bias[0]) * max_marks if max_cos_score < bias[1] else max_marks, 0])\n    return marks_obtained", "fn_id": 1, "class_fn": false, "repo": "iamyajat/auto-grader", "file": "autograder/text_similarity.py", "last_update_at": "2021-12-24T13:03:22+00:00", "pred": {"ppl": 3.5765795707702637, "ppl_lower": 3.5765795707702637, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01003470013025205, "Min_5.0% Prob": 9.672948837280273, "Min_10.0% Prob": 7.070500744713677, "Min_20.0% Prob": 5.047555671797858, "Min_30.0% Prob": 3.870779033060427, "Min_40.0% Prob": 3.09181593110164, "Min_50.0% Prob": 2.5272293355729847, "Min_60.0% Prob": 2.1285558032492795}}
{"hexsha": "6e4206da9fd80226e539745dda7d6ae8f2010e3a", "ext": "py", "lang": "Python", "content": "@card('Pacifism')\ndef pacifism(card, abilities):\n\n    def pacifism():\n        return AbilityNotImplemented\n\n    def pacifism():\n        return AbilityNotImplemented\n    return (pacifism, pacifism)", "fn_id": 150, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/mirage.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 2.608247995376587, "ppl_lower": 3.9870100021362305, "ppl/lowercase_ppl": -1.4426538673477893, "ppl/zlib": 0.009986236768701811, "Min_5.0% Prob": 9.12323029836019, "Min_10.0% Prob": 7.37304162979126, "Min_20.0% Prob": 4.603794863590827, "Min_30.0% Prob": 3.3001584779275093, "Min_40.0% Prob": 2.429964268580079, "Min_50.0% Prob": 1.916371519409233, "Min_60.0% Prob": 1.6220306165707417}}
{"hexsha": "58f3964892634b3c801b485b006283a9cc644941", "ext": "py", "lang": "Python", "content": "def test_vertex_merger_vertices():\n    merger = MeshVertexMerger()\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    assert merger.vertices == [(1, 2, 3), (4, 5, 6)]", "fn_id": 1, "class_fn": false, "repo": "jpsantos-mf/ezdxf", "file": "tests/test_07_render/test_703_render_mesh.py", "last_update_at": "2021-06-05T09:15:15+00:00", "pred": {"ppl": 1.969637393951416, "ppl_lower": 2.162510871887207, "ppl/lowercase_ppl": -1.137818985941482, "ppl/zlib": 0.00639480624362255, "Min_5.0% Prob": 7.454563236236572, "Min_10.0% Prob": 5.082950866222381, "Min_20.0% Prob": 3.047315912587302, "Min_30.0% Prob": 2.1567256469279528, "Min_40.0% Prob": 1.6643833410601283, "Min_50.0% Prob": 1.344006517764043, "Min_60.0% Prob": 1.1397655467444565}}
{"hexsha": "40c216bc802b50376ba5e2720ccd9e0872685eb7", "ext": "py", "lang": "Python", "content": "def parse_args():\n    global args\n    parser = argparse.ArgumentParser(description='Reset RFID Reader')\n    parser.add_argument('host', help='hostname or IP address of RFID reader', nargs='+')\n    parser.add_argument('-p', '--port', default=llrp.LLRP_PORT, help='port to connect to (default {})'.format(llrp.LLRP_PORT))\n    parser.add_argument('-d', '--debug', action='store_true', help='show debugging output')\n    args = parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/reset.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 2.283320665359497, "ppl_lower": 2.6433541774749756, "ppl/lowercase_ppl": -1.1773405427276311, "ppl/zlib": 0.0033426348808619248, "Min_5.0% Prob": 7.925094468253, "Min_10.0% Prob": 5.525710480553763, "Min_20.0% Prob": 3.5396421679428647, "Min_30.0% Prob": 2.5913286975451877, "Min_40.0% Prob": 2.0173364765942097, "Min_50.0% Prob": 1.6383749180606433, "Min_60.0% Prob": 1.3734948806952507}}
{"hexsha": "81170dea07b0b06f634847b4f0645d72a042dbbb", "ext": "py", "lang": "Python", "content": "def test_laser_timing_delay(lxt):\n    \"\"\"\n    Check basic moves are getting to the fs_tgt_time signal.\n\n    That signal's value is off by 10e9 for the ns to s conversion\n    and negative due to the convention that positive lxt means earlier laser.\n    \"\"\"\n    logger.debug('test_laser_timing_delay')\n    assert lxt.wm() == 0\n    assert lxt._fs_tgt_time.get() == -0\n    lxt.mv(1e-06)\n    assert lxt.wm() == 1e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(-1000)\n    lxt.mv(-5e-06)\n    assert lxt.wm() == -5e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(5000)", "fn_id": 7, "class_fn": false, "repo": "cristinasewell/pcdsdevices", "file": "tests/test_lxe.py", "last_update_at": "2021-06-15T14:09:42+00:00", "pred": {"ppl": 4.631125450134277, "ppl_lower": 4.689589023590088, "ppl/lowercase_ppl": -1.0081843911329595, "ppl/zlib": 0.005698140952945377, "Min_5.0% Prob": 9.118779919364236, "Min_10.0% Prob": 7.6226914447286855, "Min_20.0% Prob": 5.886561321175617, "Min_30.0% Prob": 4.619789500167404, "Min_40.0% Prob": 3.7156777019086094, "Min_50.0% Prob": 3.0259928510620675, "Min_60.0% Prob": 2.550279880867159}}
{"hexsha": "10296073b3cc74d61d9da67e57a17da208e30b41", "ext": "py", "lang": "Python", "content": "def corrSpin2(ra, dec, g1a, g2a, g1b=None, g2b=None, raUnits='degrees', decUnits='degrees', **treecorrKwargs):\n    \"\"\"Function to compute correlations between at most two shear-like fields.\n    This is used to compute Rho statistics, given the appropriate spin-2\n    (shear-like) fields.\n    Parameters\n    ----------\n    ra : `numpy.array`\n        The right ascension values of entries in the catalog.\n    dec : `numpy.array`\n        The declination values of entries in the catalog.\n    g1a : `numpy.array`\n        The first component of the primary shear-like field.\n    g2a : `numpy.array`\n        The second component of the primary shear-like field.\n    g1b : `numpy.array`, optional\n        The first component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    g2b : `numpy.array`, optional\n        The second component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    raUnits : `str`, optional\n        Unit of the right ascension values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    decUnits : `str`, optional\n        Unit of the declination values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    **treecorrKwargs\n        Keyword arguments to be passed to `treecorr.GGCorrelation`.\n    Returns\n    -------\n    xy : `treecorr.GGCorrelation`\n        A `treecorr.GGCorrelation` object containing the correlation function.\n    \"\"\"\n    xy = treecorr.GGCorrelation(**treecorrKwargs)\n    catA = treecorr.Catalog(ra=ra, dec=dec, g1=g1a, g2=g2a, ra_units=raUnits, dec_units=decUnits)\n    if g1b is None or g2b is None:\n        xy.process(catA)\n    else:\n        catB = treecorr.Catalog(ra=ra, dec=dec, g1=g1b, g2=g2b, ra_units=raUnits, dec_units=decUnits)\n        xy.process(catA, catB)\n    return xy", "fn_id": 1, "class_fn": false, "repo": "lsst-dmsst/metric-pipeline-tasks", "file": "python/lsst/faro/utils/tex.py", "last_update_at": "2021-02-23T16:05:17+00:00", "pred": {"ppl": 1.8261897563934326, "ppl_lower": 1.9980299472808838, "ppl/lowercase_ppl": -1.1493278640300835, "ppl/zlib": 0.000982433435460909, "Min_5.0% Prob": 6.915717724830873, "Min_10.0% Prob": 4.663958680245184, "Min_20.0% Prob": 2.808096374511719, "Min_30.0% Prob": 1.9824586910928816, "Min_40.0% Prob": 1.5022448963852992, "Min_50.0% Prob": 1.2043674428959135, "Min_60.0% Prob": 1.0041100602233857}}
{"hexsha": "7cfa76a0e321448c9b715a43fe2ae910c799972c", "ext": "py", "lang": "Python", "content": "def make_summary_file(filename):\n    \"\"\"\n    Given a DLIS file, make a short human readable summary of it.\n    Show things like headers, well parameters and which well curves are\n    available.\n\n    Args:\n    filename: A DLIS file.\n\n    Returns:\n    summaryfile: The DLIS file without the extention and the suffix\n    _summary.txt.\n    \"\"\"\n    summaryfile = open(filename.replace('.DLIS', '_summary.txt'), 'w')\n    f, *f_tail = dlis.load(filename)\n    if len(f_tail):\n        print('There are more logical files in tail')\n    origin, *origin_tail = f.origins\n    if len(origin_tail):\n        print(filename + ' contains multiple origins')\n    header = f.fileheader\n    parameter_table = summarize(f.parameters, name='Name', long_name='Long name', values='Value(s)')\n    mask = ~parameter_table['Name'].isin(['R8', 'RR1', 'WITN', 'ENGI'])\n    parameter_table = parameter_table[mask]\n    parameter_table.sort_values('Name')\n    summaryfile.write(str(f.describe()))\n    summaryfile.write(str(origin.describe()))\n    summaryfile.write(str(header.describe()))\n    summaryfile.write(str(parameter_table))\n    for frame in f.frames:\n        index_channel = next((ch for ch in frame.channels if ch.name == frame.index))\n        summaryfile.write(f'\\nFrame {frame.name}:\\n')\n        summaryfile.write(f'Description      : {frame.description}\\n')\n        summaryfile.write(f'Indexed by       : {frame.index_type}\\n')\n        summaryfile.write(f'Interval         : [{frame.index_min}, {frame.index_max}] {index_channel.units}\\n')\n        summaryfile.write(f'Direction        : {frame.direction}\\n')\n        summaryfile.write(f'Constant spacing : {frame.spacing} {index_channel.units}\\n')\n        summaryfile.write(f'Index channel    : {index_channel}\\n')\n        summaryfile.write(f'No. of channels  : {len(frame.channels)}\\n')\n    channel_table = summarize(f.channels, name='Name', long_name='Long name', units='Units', dimension='Dimension', frame='Frame')\n    channel_table.sort_values('Name')\n    summaryfile.write(str(channel_table))\n    summaryfile.close()\n    return summaryfile", "fn_id": 1, "class_fn": false, "repo": "softwareunderground/northern-lights", "file": "scripts/dlis_summary.py", "last_update_at": "2021-04-17T09:13:20+00:00", "pred": {"ppl": 3.148568630218506, "ppl_lower": 3.2589869499206543, "ppl/lowercase_ppl": -1.030052322055001, "ppl/zlib": 0.0015292639286132378, "Min_5.0% Prob": 8.258448693060107, "Min_10.0% Prob": 6.763597776019384, "Min_20.0% Prob": 4.737963749667791, "Min_30.0% Prob": 3.5479125140225074, "Min_40.0% Prob": 2.7858562220545378, "Min_50.0% Prob": 2.2717143733019367, "Min_60.0% Prob": 1.9064344384126346}}
{"hexsha": "4be3288dc749ae714f5530e0b9af4e86fbcb9c14", "ext": "py", "lang": "Python", "content": "def set_crs(df: GDF, epsg_code: Union[int, str]) -> GDF:\n    \"\"\"Sets dataframe crs in geopandas pipeline.\n\n    TODO: Deprecate with next rasterio version that will integrate set_crs method.\n    \"\"\"\n    df.crs = {'init': f'epsg:{str(epsg_code)}'}\n    return df", "fn_id": 2, "class_fn": false, "repo": "ZakariaELHAJOUY/Remote-sensing-", "file": "utils/geo.py", "last_update_at": "2021-07-12T06:28:31+00:00", "pred": {"ppl": 5.255173206329346, "ppl_lower": 6.146559238433838, "ppl/lowercase_ppl": -1.094430004553272, "ppl/zlib": 0.00846537226569777, "Min_5.0% Prob": 8.63480544090271, "Min_10.0% Prob": 7.4246625900268555, "Min_20.0% Prob": 6.115435719490051, "Min_30.0% Prob": 4.937088570424488, "Min_40.0% Prob": 4.040727911768733, "Min_50.0% Prob": 3.270605906527093, "Min_60.0% Prob": 2.771425147008683}}
{"hexsha": "28241061cc6276467c762df6e87e9db4f4a59e1b", "ext": "py", "lang": "Python", "content": "def total_lights():\n    total_lights_on = 0\n    for y, _ in enumerate(lights):\n        for x, _ in enumerate(lights[y]):\n            if lights[y][x] == 1:\n                total_lights_on += 1\n    return total_lights_on", "fn_id": 6, "class_fn": false, "repo": "josephroquedev/advent-of-code", "file": "2015/day_18/python/day18.py", "last_update_at": "2021-11-30T10:05:29+00:00", "pred": {"ppl": 2.210897207260132, "ppl_lower": 2.210897207260132, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.007278884488802324, "Min_5.0% Prob": 8.804645856221518, "Min_10.0% Prob": 6.19268924849374, "Min_20.0% Prob": 3.7188736041386923, "Min_30.0% Prob": 2.569915370448776, "Min_40.0% Prob": 2.0078832119703294, "Min_50.0% Prob": 1.6000631491800672, "Min_60.0% Prob": 1.3254878160989154}}
{"hexsha": "c85e03d56b4d6fc548188cd588d9ea2d6a3b23be", "ext": "py", "lang": "Python", "content": "def argopen(file, mode, encoding=None, errors=None):\n    closefd = True\n    if file == '-':\n        closefd = False\n        if 'r' in mode:\n            file = sys.stdin.fileno()\n        else:\n            file = sys.stdout.fileno()\n    return io.open(file, mode, encoding=encoding, errors=errors, closefd=closefd)", "fn_id": 0, "class_fn": false, "repo": "olivier-compilatio/uniseg-python", "file": "uniseg/samples/unibreak.py", "last_update_at": "2021-05-11T02:01:47+00:00", "pred": {"ppl": 2.1706976890563965, "ppl_lower": 2.647123336791992, "ppl/lowercase_ppl": -1.2560160452387465, "ppl/zlib": 0.004968260458791444, "Min_5.0% Prob": 8.93949031829834, "Min_10.0% Prob": 5.569594595167372, "Min_20.0% Prob": 3.41219773418025, "Min_30.0% Prob": 2.5400955666388785, "Min_40.0% Prob": 1.9356030641417754, "Min_50.0% Prob": 1.5448078609382112, "Min_60.0% Prob": 1.3036554728945096}}
{"hexsha": "96a9ce1af1b9abc8e61b5491562c9ddee1c883c3", "ext": "py", "lang": "Python", "content": "def infer_replicates(target_labels_long):\n    \"\"\" Infer replicate experiments based on their long form labels.\n\n    In:\n        target_labels_long [str]: list of long form target labels\n    Out:\n        replicate_lists {exp_label -> [target indexes]}\n    \"\"\"\n    replicate_lists = {}\n    rep_re = []\n    rep_re.append(re.compile('rep\\\\d+'))\n    rep_re.append(re.compile('donor\\\\d+'))\n    for ti in range(len(target_labels_long)):\n        label = target_labels_long[ti]\n        for ri in range(len(rep_re)):\n            rep_m = rep_re[ri].search(label)\n            if rep_m:\n                rep_str = rep_m.group(0)\n                label = label.replace(rep_str, '')\n        replicate_lists.setdefault(label, []).append(ti)\n    return replicate_lists", "fn_id": 1, "class_fn": false, "repo": "JasperSnoek/basenji", "file": "bin/basenji_test_reps.py", "last_update_at": "2021-05-12T08:51:44+00:00", "pred": {"ppl": 2.8952271938323975, "ppl_lower": 2.9588475227355957, "ppl/lowercase_ppl": -1.0204468071581017, "ppl/zlib": 0.003322073706104554, "Min_5.0% Prob": 8.43756931478327, "Min_10.0% Prob": 6.585661162500796, "Min_20.0% Prob": 4.518955971332306, "Min_30.0% Prob": 3.3448161465781077, "Min_40.0% Prob": 2.5984843752168594, "Min_50.0% Prob": 2.11973255713526, "Min_60.0% Prob": 1.7681178178056969}}
{"hexsha": "eb9320bc73ea082b4d99c1b4dbcaed9bf2e92e33", "ext": "py", "lang": "Python", "content": "def verify_flow_region_func(height: float, boundary_layer_height: float) -> FlowFieldRegion:\n    if height < boundary_layer_height:\n        return FlowFieldRegion.BOUNDARY_LAYER\n    else:\n        return FlowFieldRegion.FREE_FLOW", "fn_id": 0, "class_fn": false, "repo": "lucasralves/steady-flow-prediction", "file": "src/pre_processing/core/mesh/functions/verify_flow_region.py", "last_update_at": "2021-07-16T19:59:39+00:00", "pred": {"ppl": 4.71893310546875, "ppl_lower": 6.1612548828125, "ppl/lowercase_ppl": -1.1718875365769856, "ppl/zlib": 0.011082733836216404, "Min_5.0% Prob": 9.299146016438803, "Min_10.0% Prob": 8.784224351247152, "Min_20.0% Prob": 6.417556469257061, "Min_30.0% Prob": 4.891391923553066, "Min_40.0% Prob": 3.8005679066364584, "Min_50.0% Prob": 3.074823939439022, "Min_60.0% Prob": 2.619731904508976}}
{"hexsha": "3f5030776c04f54c1b5b6703282b5954e3f6c54c", "ext": "py", "lang": "Python", "content": "def timeit(method):\n\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        if 'log_time' in kw:\n            name = kw.get('log_name', method.__name__.upper())\n            kw['log_time'][name] = int((te - ts) * 1000)\n        else:\n            print('%r  %2.2f ms' % (method.__name__, (te - ts) * 1000))\n        return result\n    return timed", "fn_id": 0, "class_fn": false, "repo": "xiongjuncheng/futu_algo", "file": "strategies/Strategies.py", "last_update_at": "2021-06-09T01:16:13+00:00", "pred": {"ppl": 1.2442398071289062, "ppl_lower": 1.2442398071289062, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0010871877947412395, "Min_5.0% Prob": 3.9726107120513916, "Min_10.0% Prob": 2.168161385825702, "Min_20.0% Prob": 1.0786586660121023, "Min_30.0% Prob": 0.7329831080467895, "Min_40.0% Prob": 0.5449441184996274, "Min_50.0% Prob": 0.43951161039715064, "Min_60.0% Prob": 0.3639661028055239}}
{"hexsha": "89cf74e1d86ffce9e2a638d3306254d23a748771", "ext": "py", "lang": "Python", "content": "def infer_remote_zip_file_directory_name() -> List[str]:\n    from ..version import __version__\n    remote_zip_file_directory_name: List[str] = [__version__]\n    remote_zip_file_directory_name.append(f'python_{PYTHON_VERSION}')\n    if Env.ON_WINDOWS:\n        remote_zip_file_directory_name.append('windows')\n    else:\n        remote_zip_file_directory_name.append('linux')\n    return remote_zip_file_directory_name", "fn_id": 3, "class_fn": false, "repo": "Reefledge/reefledge", "file": "reefledge/remote_zip_file_path/__init__.py", "last_update_at": "2021-09-23T10:44:32+00:00", "pred": {"ppl": 2.695063829421997, "ppl_lower": 2.7995715141296387, "ppl/lowercase_ppl": -1.0383736598699427, "ppl/zlib": 0.005245618457498046, "Min_5.0% Prob": 8.48811149597168, "Min_10.0% Prob": 6.782824552976168, "Min_20.0% Prob": 4.503094494342804, "Min_30.0% Prob": 3.1647327706217765, "Min_40.0% Prob": 2.455074911409954, "Min_50.0% Prob": 1.9717160951512962, "Min_60.0% Prob": 1.6583126477431507}}
{"hexsha": "c8cc0e831e5f48f15a8c98373df38d2e3f24ded3", "ext": "py", "lang": "Python", "content": "def heap_sort(list_item):\n    \"\"\"\n    Heap Sort\n    Time Complexity of Solution:\n    Best - O(nlog(n))\n    Average - O(nlog(n))\n    Worst - O(nlog(n))\n\n    Approach:\n    Heap sort takes place in two steps. In first step, array is\n    transformed into a heap.\n    In second step, heap is continously reduced to a sorted array.\n\n    \"\"\"\n    end = len(list_item)\n    start = end // 2 - 1\n    for i in range(start, -1, -1):\n        heapify(list_item, end, i)\n    for i in range(end - 1, 0, -1):\n        swap(list_item, i, 0)\n        heapify(list_item, i, 0)", "fn_id": 0, "class_fn": false, "repo": "mish24/pydsa", "file": "pydsa/heap_sort.py", "last_update_at": "2021-11-02T09:24:38+00:00", "pred": {"ppl": 2.2466375827789307, "ppl_lower": 2.4697299003601074, "ppl/lowercase_ppl": -1.1169632372215053, "ppl/zlib": 0.0028203299331766196, "Min_5.0% Prob": 6.942457103729248, "Min_10.0% Prob": 5.157462143898011, "Min_20.0% Prob": 3.4995322823524475, "Min_30.0% Prob": 2.534148549447294, "Min_40.0% Prob": 1.9997665418518915, "Min_50.0% Prob": 1.6089479430925613, "Min_60.0% Prob": 1.3505145019286724}}
{"hexsha": "29dcd0e7194a9a266ef5c8a71033e49f8cc50186", "ext": "py", "lang": "Python", "content": "def a_star(grid, h, start, goal):\n    path = []\n    path_cost = 0\n    queue = PriorityQueue()\n    queue.put((0, start))\n    visited = set(start)\n    branch = {}\n    found = False\n    while not queue.empty():\n        item = queue.get()\n        current_node = item[1]\n        if current_node == start:\n            current_cost = 0.0\n        else:\n            current_cost = branch[current_node][0]\n        if current_node == goal:\n            print('Found a path.')\n            found = True\n            break\n        else:\n            for action in valid_actions(grid, current_node):\n                da = action.delta\n                next_node = (current_node[0] + da[0], current_node[1] + da[1])\n                branch_cost = current_cost + action.cost\n                queue_cost = branch_cost + h(next_node, goal)\n                if next_node not in visited:\n                    visited.add(next_node)\n                    branch[next_node] = (branch_cost, current_node, action)\n                    queue.put((queue_cost, next_node))\n    if found:\n        n = goal\n        path_cost = branch[n][0]\n        path.append(goal)\n        while branch[n][1] != start:\n            path.append(branch[n][1])\n            n = branch[n][1]\n        path.append(branch[n][1])\n    else:\n        print('**********************')\n        print('Failed to find a path!')\n        print('**********************')\n    return (path[::-1], path_cost)", "fn_id": 2, "class_fn": false, "repo": "allthatido/Drone_Motion_Planning", "file": "planning_utils.py", "last_update_at": "2021-07-08T18:54:42+00:00", "pred": {"ppl": 1.7421581745147705, "ppl_lower": 1.8401648998260498, "ppl/lowercase_ppl": -1.098591388068099, "ppl/zlib": 0.0011912546670242907, "Min_5.0% Prob": 5.846506369113922, "Min_10.0% Prob": 4.1194752309380505, "Min_20.0% Prob": 2.5175711921898714, "Min_30.0% Prob": 1.7839333971421565, "Min_40.0% Prob": 1.3645202638244773, "Min_50.0% Prob": 1.1057041308298203, "Min_60.0% Prob": 0.9230847235462333}}
{"hexsha": "7fa31603a252cfd1d536877477d7abb4da4bdef3", "ext": "py", "lang": "Python", "content": "def decimal_to_binary(n: int):\n    \"\"\"\n    Function to convert Decimal number to Binary number \n    \n    :param n: \n    :return: \n    \"\"\"\n    return int('{0:b}'.format(n))", "fn_id": 0, "class_fn": false, "repo": "ikostan/python", "file": "secret-handshake/secret_handshake.py", "last_update_at": "2021-08-02T19:20:10+00:00", "pred": {"ppl": 3.1463329792022705, "ppl_lower": 3.0826122760772705, "ppl/lowercase_ppl": -0.9821500696828221, "ppl/zlib": 0.009243851944525138, "Min_5.0% Prob": 9.663936138153076, "Min_10.0% Prob": 6.5750397682189945, "Min_20.0% Prob": 4.650168375535444, "Min_30.0% Prob": 3.5556753453086403, "Min_40.0% Prob": 2.804539408372796, "Min_50.0% Prob": 2.277738801364241, "Min_60.0% Prob": 1.9073400661349296}}
{"hexsha": "66a6d587f9640fe42f4703541334c4465b7b3a16", "ext": "py", "lang": "Python", "content": "def _parse_word(operand):\n    value = OP_EVALUATOR.eval_int(operand)\n    if 0 <= value < 65536:\n        return (value % 256, value // 256)\n    raise ValueError", "fn_id": 6, "class_fn": false, "repo": "skoolkid/sk6502", "file": "sk6502/assembler.py", "last_update_at": "2021-01-26T17:44:49+00:00", "pred": {"ppl": 4.5902485847473145, "ppl_lower": 5.120715618133545, "ppl/lowercase_ppl": -1.071761641248996, "ppl/zlib": 0.01219147344402389, "Min_5.0% Prob": 9.527921040852865, "Min_10.0% Prob": 7.959713141123454, "Min_20.0% Prob": 5.909797980235173, "Min_30.0% Prob": 4.722237342282345, "Min_40.0% Prob": 3.683949500322342, "Min_50.0% Prob": 2.9794027877576426, "Min_60.0% Prob": 2.550935149956972}}
{"hexsha": "f46d4201935576f7c5b0f071b01e8b9a5b4caddc", "ext": "py", "lang": "Python", "content": "def test_proportions_delta_aa(proportions_data_small):\n    exp = Experiment(proportions_data_small, name='proportions-test')\n    test_aa = HypothesisTest(metric='metric', control='A', variation='A', hypothesis='larger', inference_method='proportions_delta')\n    results_aa = exp.run_test(test_aa)\n    assert not results_aa.accept_hypothesis", "fn_id": 4, "class_fn": false, "repo": "quizlet/abracadabra", "file": "test/test_proportions_delta.py", "last_update_at": "2021-09-01T12:25:38+00:00", "pred": {"ppl": 6.1085333824157715, "ppl_lower": 7.097993850708008, "ppl/lowercase_ppl": -1.0829566125432735, "ppl/zlib": 0.009233095452852955, "Min_5.0% Prob": 9.99542760848999, "Min_10.0% Prob": 8.22789833762429, "Min_20.0% Prob": 6.363698482513428, "Min_30.0% Prob": 5.065181804425789, "Min_40.0% Prob": 4.172350168228149, "Min_50.0% Prob": 3.4812239148400046, "Min_60.0% Prob": 2.974765281785618}}
{"hexsha": "dd575f7aaba2cc90075652902b7b83a55562e8f2", "ext": "py", "lang": "Python", "content": "def _load_cache():\n    if not os.path.exists(cache_file_name):\n        raise ValueError('No cache file found.')\n    else:\n        with open(cache_file_name, 'rb') as f:\n            dataset_stats = pickle.load(f)\n    return dataset_stats", "fn_id": 0, "class_fn": false, "repo": "cmusatyalab/dronesearch", "file": "experiments/random_select/plot_random_select_and_filter.py", "last_update_at": "2021-10-08T23:19:12+00:00", "pred": {"ppl": 2.7410972118377686, "ppl_lower": 3.212204694747925, "ppl/lowercase_ppl": -1.157284610450941, "ppl/zlib": 0.0066339360692166185, "Min_5.0% Prob": 8.143248399098715, "Min_10.0% Prob": 6.269298757825579, "Min_20.0% Prob": 4.2588717085974555, "Min_30.0% Prob": 3.094069944186644, "Min_40.0% Prob": 2.4770468750904344, "Min_50.0% Prob": 1.9998060062124923, "Min_60.0% Prob": 1.6926166838542982}}
{"hexsha": "d4e3e838774528218776e66d0b619c26190040dd", "ext": "py", "lang": "Python", "content": "@api_view(['PUT'])\n@permission_classes((IsAuthenticated,))\n@allowed_groups(group_names=['admin'])\ndef updateUser(request: HttpRequest, id):\n    user = get_object_or_404(User, id=id)\n    groups = request.data.pop('authGroups', [])\n    serialised = UserSerializer(user, data=request.data, context={'request': request}, partial=True)\n    if serialised.is_valid():\n        serialised.save()\n        user_group_many.objects.filter(user=user).delete()\n        for group in groups:\n            user_group_many.objects.create(user=user, group_id=group['id'])\n        return Response(status=status.HTTP_200_OK)\n    print(serialised.error_messages)\n    return Response(status=status.HTTP_400_BAD_REQUEST)", "fn_id": 6, "class_fn": false, "repo": "JetLightStudio/Jet-Gest-stock-management", "file": "server/auth_app/views/authViews.py", "last_update_at": "2021-08-18T18:53:02+00:00", "pred": {"ppl": 2.0418739318847656, "ppl_lower": 2.705312967300415, "ppl/lowercase_ppl": -1.394119967096345, "ppl/zlib": 0.0018935490192783994, "Min_5.0% Prob": 6.748681198466908, "Min_10.0% Prob": 5.0273601683703335, "Min_20.0% Prob": 3.151088587262414, "Min_30.0% Prob": 2.2612987318725297, "Min_40.0% Prob": 1.7454849935390733, "Min_50.0% Prob": 1.4161680318415164, "Min_60.0% Prob": 1.1866470291138147}}
{"hexsha": "7a6ac05f5c406402bdf62d0f733ffe486364b813", "ext": "py", "lang": "Python", "content": "def speak_rank_top_10():\n    sql = '\\n        select * \\n        from(select row_number() over(order by user_speak_total desc) as row_number,* from user_info)\\n        where row_number <= 10\\n    '\n    data = sql_dql(sql)\n    msg = f'\ud83d\ude48\u53d1\u8a00\u5149\u8363\u699c\ud83d\ude48\\n__________________\\n'\n    for item in data:\n        rank = item[0]\n        name = item[1]\n        id = item[2]\n        num = item[3]\n        num_emoji = rank_emoji(rank)\n        msg += f'{num_emoji}{name}({id})\ud83d\udde3\ufe0f:{num}\\n'\n    msg += f'\u8fd9\u4e9b\ud83d\udc68\u90fd4\ufe0f\u20e3\u5927\ud83d\udca6\ud83d\udc7e'\n    return msg", "fn_id": 2, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/user/user_speaki_rank/__init__.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 4.441884517669678, "ppl_lower": 4.441884517669678, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.004464307566799884, "Min_5.0% Prob": 8.923967313766479, "Min_10.0% Prob": 7.459880896977016, "Min_20.0% Prob": 5.635687994402509, "Min_30.0% Prob": 4.470932322282057, "Min_40.0% Prob": 3.600033973825389, "Min_50.0% Prob": 2.9426986123990577, "Min_60.0% Prob": 2.4741266565468476}}
{"hexsha": "43ee7c52704e9f62de936933b0306b16b4a79105", "ext": "py", "lang": "Python", "content": "def test_model_default_implementations():\n\n    class MyModel(Model):\n        pass\n    model = MyModel()\n    with pytest.raises(NotImplementedError):\n        model.__prior__()\n    with pytest.raises(NotImplementedError):\n        model.__condition__(None, None)\n    with pytest.raises(NotImplementedError):\n        model.__noiseless__()\n    with pytest.raises(NotImplementedError):\n        model.logpdf(None, None)\n    with pytest.raises(NotImplementedError):\n        model.sample(None)\n\n    class MyModel2(Model):\n\n        def __prior__(self):\n            pass\n\n        def sample(self, x):\n            return 1\n    model = MyModel2()\n    assert model.predict(None, num_samples=100) == (1, 0)", "fn_id": 8, "class_fn": false, "repo": "wesselb/probmods", "file": "tests/test_model.py", "last_update_at": "2021-08-28T16:32:03+00:00", "pred": {"ppl": 2.1433427333831787, "ppl_lower": 2.4798638820648193, "ppl/lowercase_ppl": -1.1912951464151467, "ppl/zlib": 0.003203221156668595, "Min_5.0% Prob": 6.665468909523704, "Min_10.0% Prob": 4.923007607460022, "Min_20.0% Prob": 3.2712068015878852, "Min_30.0% Prob": 2.4265971088951286, "Min_40.0% Prob": 1.8801051054827191, "Min_50.0% Prob": 1.5256709233942356, "Min_60.0% Prob": 1.2754146539196936}}
{"hexsha": "7d2d407dbcaa652ae9d9750427e051162ad2d2e3", "ext": "py", "lang": "Python", "content": "def pattern_loader(path_to_rules='patterns.jsonl') -> List:\n    \"\"\" Loads the patterns from the pattern list. \"\"\"\n    patterns = []\n    patternDicts = []\n    with open(path_to_rules, encoding='utf8') as f:\n        try:\n            for line in f:\n                data = json.loads(line)\n                patternDicts.append(data)\n        except:\n            pass\n    for patternDict in patternDicts:\n        patterns.append(Pattern(**patternDict))\n    return patterns", "fn_id": 5, "class_fn": false, "repo": "ChrisChross/turCy", "file": "turcy/tree_dep_pattern.py", "last_update_at": "2021-04-15T12:29:32+00:00", "pred": {"ppl": 2.9370014667510986, "ppl_lower": 2.825565814971924, "ppl/lowercase_ppl": -0.9640979134292257, "ppl/zlib": 0.004875064034483648, "Min_5.0% Prob": 8.143224954605103, "Min_10.0% Prob": 6.308624188105266, "Min_20.0% Prob": 4.40798553943634, "Min_30.0% Prob": 3.3038223354439986, "Min_40.0% Prob": 2.612974643122916, "Min_50.0% Prob": 2.1281848328653723, "Min_60.0% Prob": 1.8056582535960173}}
{"hexsha": "9a23cc6017e673eb9497903c018a6480ea3f8e60", "ext": "py", "lang": "Python", "content": "def readVDAT(fid, address):\n    vdat = namedtuple('vdat', [])\n    if address != -1:\n        fid.seek(address, 0)\n    [dumCRC, lastSize, lastType, dumMisc] = readARDFpointer(fid, -1)\n    vdat.force = struct.unpack('i', fid.read(4))[0]\n    vdat.line = struct.unpack('i', fid.read(4))[0]\n    vdat.point = struct.unpack('i', fid.read(4))[0]\n    vdat.sizeData = struct.unpack('i', fid.read(4))[0]\n    vdat.forceType = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt0 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt1 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt2 = struct.unpack('i', fid.read(4))[0]\n    dum = struct.unpack('i' * 2, fid.read(4 * 2))[0]\n    sizeData = vdat.sizeData\n    vdat.data = struct.unpack('f' * sizeData, fid.read(4 * sizeData))\n    return vdat", "fn_id": 6, "class_fn": false, "repo": "yu-efremov/ViscoIndent", "file": "import_ARDF.py", "last_update_at": "2021-12-21T13:26:53+00:00", "pred": {"ppl": 2.389153242111206, "ppl_lower": 2.409494161605835, "ppl/lowercase_ppl": -1.0097341177169041, "ppl/zlib": 0.003375732601408915, "Min_5.0% Prob": 8.273127287626266, "Min_10.0% Prob": 6.430625575961488, "Min_20.0% Prob": 4.14238521768086, "Min_30.0% Prob": 2.8883781108260154, "Min_40.0% Prob": 2.1770804111581685, "Min_50.0% Prob": 1.7404421073706111, "Min_60.0% Prob": 1.455620172355945}}
{"hexsha": "4621fba19fcf958d4877519ee2e7db8ca9d513e9", "ext": "py", "lang": "Python", "content": "def search_froms():\n    \"\"\"\n    Search for unique \"from xxx import yyy\" statements, returning a sorted list.\n    \"\"\"\n    _froms = []\n    _lib_dir_regex = '{}\\\\.'.format(LIB_DIR)\n    _regex = '^[ ]*from '\n    print(Fore.GREEN + '\\nimport list contents:' + Style.RESET_ALL)\n    for _items in _find_in_files('^[ ]*from.*import.*'):\n        _item = _items[0]\n        _filename = _items[1]\n        _library_name = re.sub(' import.*', '', _item)\n        _library_name = re.sub(_regex, '', _library_name).strip()\n        if IGNORE_LIB and re.match(_lib_dir_regex, _library_name):\n            pass\n        elif len(_library_name) > 1 and _library_name not in _froms:\n            _froms.append(_library_name)\n    _froms.sort()\n    print(Fore.CYAN + \"\\n-- complete: {:d} instances of '{}' found.\".format(len(_froms), _regex) + Style.RESET_ALL)\n    return _froms", "fn_id": 3, "class_fn": false, "repo": "ifurusato/ros", "file": "import_report.py", "last_update_at": "2021-07-23T14:20:05+00:00", "pred": {"ppl": 3.5830302238464355, "ppl_lower": 3.9161038398742676, "ppl/lowercase_ppl": -1.0696503286736412, "ppl/zlib": 0.0030099265887587705, "Min_5.0% Prob": 8.179678185780842, "Min_10.0% Prob": 6.737797021865845, "Min_20.0% Prob": 4.974738009770712, "Min_30.0% Prob": 3.856729653146532, "Min_40.0% Prob": 3.0756288009385266, "Min_50.0% Prob": 2.5149868034323055, "Min_60.0% Prob": 2.1156347630338534}}
{"hexsha": "f5243a5a3b358ca43895541eb22f25937e8336f3", "ext": "py", "lang": "Python", "content": "def try_to_get_last_line_as_json(file_location: str, max_tries=3, await_in_seconds_between_tries=1) -> Optional[dict]:\n    attempts = 0\n    while True:\n        line = last_line_from_some_file(file_location)\n        line_as_json = json.loads(line) if line else None\n        if line_as_json:\n            return line_as_json\n        if attempts >= max_tries:\n            return None\n        sleep(await_in_seconds_between_tries)\n        attempts += 1", "fn_id": 5, "class_fn": false, "repo": "juntossomosmais/python-fluentd-testing", "file": "python_fluentd_testing/utils.py", "last_update_at": "2021-11-12T20:00:54+00:00", "pred": {"ppl": 2.5722591876983643, "ppl_lower": 2.8881752490997314, "ppl/lowercase_ppl": -1.1226103072210063, "ppl/zlib": 0.004255786369910826, "Min_5.0% Prob": 7.484562124524798, "Min_10.0% Prob": 6.0077477523258755, "Min_20.0% Prob": 4.098725746417868, "Min_30.0% Prob": 3.0336836708146473, "Min_40.0% Prob": 2.3178108588888726, "Min_50.0% Prob": 1.8862596372556355, "Min_60.0% Prob": 1.569901102704221}}
{"hexsha": "b82969bc09d27dd516accba17236411cb1f5adb8", "ext": "py", "lang": "Python", "content": "def test_get_binary_patterns():\n    wl = Wordlist(data_path('wichmannmixezoquean.tsv'))\n    pats, characters = get_binary_patterns(wl, 'cogid')\n    etd = wl.get_etymdict(ref='cogid')\n    assert len(etd) == len(pats)", "fn_id": 0, "class_fn": false, "repo": "WesScivetti/data", "file": "tests/test_wordlist.py", "last_update_at": "2021-05-23T18:25:06+00:00", "pred": {"ppl": 7.486575126647949, "ppl_lower": 7.899921894073486, "ppl/lowercase_ppl": -1.0266957100383065, "ppl/zlib": 0.013244154167727559, "Min_5.0% Prob": 11.80638074874878, "Min_10.0% Prob": 9.784713327884674, "Min_20.0% Prob": 7.220858040977927, "Min_30.0% Prob": 5.803742390412551, "Min_40.0% Prob": 4.683665823936463, "Min_50.0% Prob": 3.92405743626031, "Min_60.0% Prob": 3.3302508342378543}}
{"hexsha": "1609ca3cfecd7e4bdac13a4eed7e722233b86773", "ext": "py", "lang": "Python", "content": "async def get_prefix(bot_, message):\n    \"\"\"Returns the appropriate prefix for the bot.\"\"\"\n    with open('./data/options.json', 'r') as options_file:\n        options_dict = json.load(options_file)\n    if message.guild and str(message.guild.id) in options_dict:\n        prefixes = options_dict[str(message.guild.id)]['prefix']\n    else:\n        prefixes = '.'\n    return commands.when_mentioned_or(*prefixes)(bot_, message)", "fn_id": 0, "class_fn": false, "repo": "ethantv1234567890/ServerAntiRaid", "file": "main.py", "last_update_at": "2021-01-28T06:22:08+00:00", "pred": {"ppl": 2.1637470722198486, "ppl_lower": 2.26421856880188, "ppl/lowercase_ppl": -1.0588051093053457, "ppl/zlib": 0.0034304065529010344, "Min_5.0% Prob": 7.343683401743571, "Min_10.0% Prob": 5.044962057700524, "Min_20.0% Prob": 3.372811665901771, "Min_30.0% Prob": 2.477852641007839, "Min_40.0% Prob": 1.9064586080897312, "Min_50.0% Prob": 1.53835190356924, "Min_60.0% Prob": 1.285216733490905}}
{"hexsha": "9886643486593889d35875fc98bf1b7805dee00d", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('operation', [cirq.CNOT(AspenQubit(0, 1), AspenQubit(0, 2))])\ndef test_rigetti_qcs_aspen_device_valid_operation(operation: cirq.Operation, qcs_aspen8_isa: InstructionSetArchitecture):\n    \"\"\"test RigettiQCSAspenDevice throws no error when validating 2Q operations on\n    adjacent qubits\n    \"\"\"\n    device = RigettiQCSAspenDevice(isa=qcs_aspen8_isa)\n    device.validate_operation(operation)", "fn_id": 14, "class_fn": false, "repo": "dabacon/Cirq", "file": "cirq-rigetti/cirq_rigetti/aspen_device_test.py", "last_update_at": "2021-04-29T15:30:32+00:00", "pred": {"ppl": 5.00537633895874, "ppl_lower": 7.265411376953125, "ppl/lowercase_ppl": -1.2313625592166502, "ppl/zlib": 0.006573520826691882, "Min_5.0% Prob": 11.276437623160225, "Min_10.0% Prob": 9.097630151112874, "Min_20.0% Prob": 6.352206778526306, "Min_30.0% Prob": 4.932151156001621, "Min_40.0% Prob": 3.9493301451206206, "Min_50.0% Prob": 3.197418066427896, "Min_60.0% Prob": 2.6847116759272067}}
{"hexsha": "8090bbc869f16bd9ee00e270a16a5e0352ae7028", "ext": "py", "lang": "Python", "content": "def categoryFilter(doc):\n    categories = doc.Settings.Categories\n    cats = [ElementCategoryFilter(c.Id) for c in categories if c.CategoryType == CategoryType.Model and c.CanAddSubcategory]\n    filter = None\n    if len(cats):\n        try:\n            filter = LogicalOrFilter(List[ElementFilter](cats))\n        except Exception as ex:\n            raise Exception(str(ex) + str(len(cats)))\n    return filter", "fn_id": 0, "class_fn": false, "repo": "pabloderen/pyRevitExtension", "file": "lib/tools.py", "last_update_at": "2021-10-24T00:05:02+00:00", "pred": {"ppl": 3.8345282077789307, "ppl_lower": 7.0192975997924805, "ppl/lowercase_ppl": -1.4498481224207307, "ppl/zlib": 0.006251378625617986, "Min_5.0% Prob": 9.71683464050293, "Min_10.0% Prob": 7.663003401322798, "Min_20.0% Prob": 5.519992427392439, "Min_30.0% Prob": 4.132911044008591, "Min_40.0% Prob": 3.281525030401018, "Min_50.0% Prob": 2.6462642973975132, "Min_60.0% Prob": 2.2380519119255684}}
{"hexsha": "534d6702940b8bc6ddbaba4862587a1683235de5", "ext": "py", "lang": "Python", "content": "def view_form_force(form, force, forcescale=0.5, edge_label=True):\n    if edge_label:\n        form_edge_label = {uv: index for index, uv in enumerate(form.edges())}\n        force_edge_label = force_edge_labels\n    else:\n        form_edge_label = None\n        force_edge_label = None\n    viewer = Viewer(form, force, delay_setup=False)\n    viewer.draw_form(edgelabel=form_edge_label, forces_on=True, forcescale=forcescale, vertexcolor={key: '#000000' for key in form.vertices_where({'is_fixed': True})})\n    viewer.draw_force(edgelabel=force_edge_label)\n    viewer.show()", "fn_id": 0, "class_fn": false, "repo": "BlockResearchGroup/compas_ags", "file": "scripts/paper-CSD/exampleD_truss_constant.py", "last_update_at": "2021-12-15T18:47:04+00:00", "pred": {"ppl": 3.2179505825042725, "ppl_lower": 3.7842953205108643, "ppl/lowercase_ppl": -1.1387086520601337, "ppl/zlib": 0.004583312517120246, "Min_5.0% Prob": 8.602363967895508, "Min_10.0% Prob": 6.7624917984008786, "Min_20.0% Prob": 4.73692906498909, "Min_30.0% Prob": 3.5992784907420474, "Min_40.0% Prob": 2.8511000659316776, "Min_50.0% Prob": 2.3125225066548527, "Min_60.0% Prob": 1.9439417005570467}}
{"hexsha": "b36cd3ac7c6ccf4bb43ebb3004f30af35e47297a", "ext": "py", "lang": "Python", "content": "def generateCoordsForLayersPG(dictDlsLayers, graphvizLayout, isHorizontal):\n    theGraph = pyg.AGraph()\n    for kk, vv in dictDlsLayers.items():\n        for ll in vv['cfg']['wires']:\n            theGraph.add_edge(kk, ll)\n    if isHorizontal:\n        pArgs = '-Grankdir=LR'\n    else:\n        pArgs = '-Grankdir=TB'\n    if graphvizLayout is None:\n        graphvizLayout = 'dot'\n    theGraph.layout(prog=graphvizLayout, args=pArgs)\n    theGraphPos = {}\n    for kk in dictDlsLayers.keys():\n        tnode = theGraph.get_node(kk)\n        tpos = [int(float(xx)) for xx in tnode.attr['pos'].split(',')]\n        theGraphPos[kk] = tuple(tpos)\n    return theGraphPos", "fn_id": 2, "class_fn": false, "repo": "SummaLabs/DLS", "file": "app/backend/core/models/convertors/keras2dls.py", "last_update_at": "2021-02-16T23:08:34+00:00", "pred": {"ppl": 3.035468339920044, "ppl_lower": 3.7931809425354004, "ppl/lowercase_ppl": -1.200689948519187, "ppl/zlib": 0.003480770299670594, "Min_5.0% Prob": 8.722362041473389, "Min_10.0% Prob": 7.038944140724514, "Min_20.0% Prob": 4.846790425320889, "Min_30.0% Prob": 3.5707145580223627, "Min_40.0% Prob": 2.7347421251395914, "Min_50.0% Prob": 2.216177766203371, "Min_60.0% Prob": 1.8461164896449087}}
{"hexsha": "3fa1da9767d379e042b89a14701794778faba152", "ext": "py", "lang": "Python", "content": "@numba.njit([types.Long(types.Keys)], cache=True)\ndef find_depth(tree):\n    \"\"\"\n    Return maximum depth of a linear octree.\n    \"\"\"\n    levels = morton.find_level(np.unique(tree))\n    return np.max(levels)", "fn_id": 7, "class_fn": false, "repo": "Excalibur-SLE/AdapOctree", "file": "adaptoctree/tree.py", "last_update_at": "2021-04-27T10:58:52+00:00", "pred": {"ppl": 8.776861190795898, "ppl_lower": 10.600560188293457, "ppl/lowercase_ppl": -1.086914212561677, "ppl/zlib": 0.014196855218148926, "Min_5.0% Prob": 10.712505976359049, "Min_10.0% Prob": 9.319633620125908, "Min_20.0% Prob": 7.902322701045445, "Min_30.0% Prob": 6.558345068068731, "Min_40.0% Prob": 5.175289030732779, "Min_50.0% Prob": 4.3161974185042915, "Min_60.0% Prob": 3.65797482153704}}
{"hexsha": "52b60b2ec451113de42ad06d277c614499c2007a", "ext": "py", "lang": "Python", "content": "@expose_builtin('del_attrs', unwrap_spec=['obj'])\ndef impl_del_attrs(engine, heap, attvar):\n    if isinstance(attvar, AttVar):\n        if attvar.value_list is not None:\n            for name, index in attvar.attmap.indexes.iteritems():\n                heap.add_trail_atts(attvar, name)\n            attvar.value_list = None", "fn_id": 5, "class_fn": false, "repo": "ForoughA/CORGI", "file": "testnet/prolog/builtin/attvars.py", "last_update_at": "2021-12-11T12:39:51+00:00", "pred": {"ppl": 6.063928127288818, "ppl_lower": 6.9302077293396, "ppl/lowercase_ppl": -1.0740873940343383, "ppl/zlib": 0.009290504102627873, "Min_5.0% Prob": 9.3812762260437, "Min_10.0% Prob": 8.233934354782104, "Min_20.0% Prob": 6.328692504337856, "Min_30.0% Prob": 5.057730257511139, "Min_40.0% Prob": 4.247595409552257, "Min_50.0% Prob": 3.545909450863892, "Min_60.0% Prob": 2.9926880437415093}}
{"hexsha": "504b87ddee9917d8fa486f13be56f5b536985c45", "ext": "py", "lang": "Python", "content": "def test_client_with_wrong_credentials(zendesk_credentials):\n    \"\"\"Test check with wrong credentials\"\"\"\n    client = Client(**zendesk_credentials)\n    alive, error = client.health_check()\n    assert not alive\n    assert error", "fn_id": 0, "class_fn": false, "repo": "rajatariya21/airbyte", "file": "airbyte-integrations/connectors/source-zendesk-talk/unit_tests/unit_test.py", "last_update_at": "2021-04-30T13:53:34+00:00", "pred": {"ppl": 4.151640892028809, "ppl_lower": 4.853620529174805, "ppl/lowercase_ppl": -1.1097442042803933, "ppl/zlib": 0.010390537604116281, "Min_5.0% Prob": 10.200456619262695, "Min_10.0% Prob": 8.09557294845581, "Min_20.0% Prob": 5.843892280872051, "Min_30.0% Prob": 4.538070791646054, "Min_40.0% Prob": 3.505702007275361, "Min_50.0% Prob": 2.8091828814058593, "Min_60.0% Prob": 2.3966046143800783}}
{"hexsha": "241fb0211e37aae619cf601b0686c40ee27576eb", "ext": "py", "lang": "Python", "content": "def update_doing_card():\n    \"\"\"\n    DOING \uc0c1\ud0dc\uc758 \uce74\ub4dc\uc758 DURATION\uc744 \uc0c8\ub85c \uae30\ub85d\ud569\ub2c8\ub2e4.\n    DURATION\uc758 \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0\uc5d0\ub294 \uc2dc\uc791\uc77c\uc744 \ub2f9\uc77c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n    \"\"\"\n    status = notion.CARD_STATUS\n    doing = notion.DOING\n    duration = notion.CARD_DURATION\n    today = date.today()\n    for card_id in notion.get_filtered_card_ids(status, doing):\n        card = notion.client.get_block(card_id)\n        notion_date = card.get_property(duration)\n        if not notion_date or notion_date.start == None:\n            notion_date = NotionDate(start=today)\n        card.set_property(duration, notion_date)", "fn_id": 1, "class_fn": false, "repo": "wormwlrm/notion-scrum-analytics", "file": "commands/run_update_duration.py", "last_update_at": "2021-08-29T03:23:02+00:00", "pred": {"ppl": 2.9942426681518555, "ppl_lower": 3.45202374458313, "ppl/lowercase_ppl": -1.1297259429899495, "ppl/zlib": 0.0031156003812496252, "Min_5.0% Prob": 7.795801509510387, "Min_10.0% Prob": 6.285297231240706, "Min_20.0% Prob": 4.323353950182597, "Min_30.0% Prob": 3.2798567823509672, "Min_40.0% Prob": 2.5924617750777137, "Min_50.0% Prob": 2.147771197238139, "Min_60.0% Prob": 1.8109038291154085}}
{"hexsha": "7354359d5802ce995119a41c90b85838a4204d5d", "ext": "py", "lang": "Python", "content": "@app.route('/commands_per_day')\n@cache(time=datetime.timedelta(minutes=DEFAULT_CACHE_MINUTES))\ndef commands_per_day():\n    command_names = [row.get('command_name') for row in bigquery_client.query('SELECT DISTINCT command_name FROM analytics.commands').result()]\n    print(command_names)\n    command_names = filter(lambda item: item not in ['list', 'set', 'voices', 'languages', 'property'], command_names)\n    result = {}\n    for command_name in command_names:\n        usage = {date: {'text_count': 0, 'slash_count': 0} for date in get_days_in_range(datetime.datetime(2021, 1, 1), datetime.datetime.today())}\n        query = 'SELECT DATE(time) as d, COUNTIF(NOT is_slash) as cnt, COUNTIF(is_slash) as slash_cnt FROM analytics.commands WHERE command_name = @command_name GROUP BY d ORDER BY d'\n        job_config = bigquery.QueryJobConfig(query_parameters=[bigquery.ScalarQueryParameter('command_name', 'STRING', command_name)])\n        for row in bigquery_client.query(query, job_config=job_config).result():\n            d = row_to_dict(row)\n            usage[d['d']]['text_count'] = d['cnt']\n            usage[d['d']]['slash_count'] = d['slash_cnt']\n        result[command_name] = [{'date': date, **usage[date]} for date in usage.keys()]\n    response = jsonify(result)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response", "fn_id": 4, "class_fn": false, "repo": "TychoTheTaco/Discord-Dictionary-Bot", "file": "api/main.py", "last_update_at": "2021-12-12T20:35:49+00:00", "pred": {"ppl": 2.2890491485595703, "ppl_lower": 2.5428714752197266, "ppl/lowercase_ppl": -1.1269807943609362, "ppl/zlib": 0.0013041519879830902, "Min_5.0% Prob": 7.419192450387137, "Min_10.0% Prob": 5.764299824124291, "Min_20.0% Prob": 3.674654739744523, "Min_30.0% Prob": 2.6424052498769015, "Min_40.0% Prob": 2.0484103223856756, "Min_50.0% Prob": 1.651882441950516, "Min_60.0% Prob": 1.3792288706172258}}
{"hexsha": "f31065a13878fbae4e2467fa58de8efe0ace1f13", "ext": "py", "lang": "Python", "content": "def test_delete_all_album():\n    rq_album.delete_all(token=env.env_var['USER_1_TOKEN'], user_id=env.env_var['USER_1_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_2_TOKEN'], user_id=env.env_var['USER_2_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_3_TOKEN'], user_id=env.env_var['USER_3_MAIL'])", "fn_id": 3, "class_fn": false, "repo": "OsiriX-Foundation/IntegrationTest", "file": "test_sharing_with_album_token_no_permission.py", "last_update_at": "2021-06-02T07:41:28+00:00", "pred": {"ppl": 2.150756359100342, "ppl_lower": 2.2382917404174805, "ppl/lowercase_ppl": -1.0520924054822962, "ppl/zlib": 0.006899275452294012, "Min_5.0% Prob": 7.155391148158482, "Min_10.0% Prob": 5.568270121301923, "Min_20.0% Prob": 3.6637874969414304, "Min_30.0% Prob": 2.535371919118223, "Min_40.0% Prob": 1.92392195481807, "Min_50.0% Prob": 1.5417569713866603, "Min_60.0% Prob": 1.2853037234149052}}
{"hexsha": "1b7e2d214e5eeb85cf50702bb2e69e77348f954c", "ext": "py", "lang": "Python", "content": "def _delete_old(old_ids):\n    db = get_db('yahoo')\n    for item in ['financial_data', 'key_stats']:\n        collection = db[item]\n        id_ = old_ids[item]\n        if id_:\n            result = collection.delete_many({'_id': {'$lte': id_}})\n            logger.info(f'\u5220\u9664 {item} \u65e7\u6570\u636e {result.deleted_count} \u884c')", "fn_id": 5, "class_fn": false, "repo": "NeoBert/liudengfeng-cnswd", "file": "cnswd/scripts/yahoo.py", "last_update_at": "2021-06-26T13:23:01+00:00", "pred": {"ppl": 3.6728522777557373, "ppl_lower": 3.6728522777557373, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0058602186829374925, "Min_5.0% Prob": 7.730263423919678, "Min_10.0% Prob": 6.596955299377441, "Min_20.0% Prob": 5.124524893968002, "Min_30.0% Prob": 4.000084210844601, "Min_40.0% Prob": 3.129517324592756, "Min_50.0% Prob": 2.5783845790122686, "Min_60.0% Prob": 2.155862715959117}}
{"hexsha": "a9df1185d80d2c045bcd42e083755fc20bd784de", "ext": "py", "lang": "Python", "content": "def split_indices(idx, n_total, fractions):\n    \"\"\"\n    splits idx containing n_total distinct events into fractions given in fractions list.\n    returns the number of events in each split\n    \"\"\"\n    num_ids = [ceil(n_total * f) for f in fractions]\n    if sum(num_ids) > n_total:\n        num_ids[-1] -= sum(num_ids) - n_total\n    return num_ids", "fn_id": 0, "class_fn": false, "repo": "fact-project/classifier", "file": "aict_tools/scripts/split_data.py", "last_update_at": "2021-01-22T11:57:26+00:00", "pred": {"ppl": 3.599898099899292, "ppl_lower": 3.599898099899292, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006961443149336542, "Min_5.0% Prob": 8.228721046447754, "Min_10.0% Prob": 6.993310668251731, "Min_20.0% Prob": 5.15079895474694, "Min_30.0% Prob": 3.8666869112939546, "Min_40.0% Prob": 3.08419045670466, "Min_50.0% Prob": 2.5435198003595527, "Min_60.0% Prob": 2.1481290660572774}}
{"hexsha": "0e43d54d54e3eafdf583b28f0be4bd0753b4013d", "ext": "py", "lang": "Python", "content": "@app.route('/json-rpc', methods=['GET', 'POST', 'OPTIONS'])\ndef jsonrpc():\n    result = ''\n    if request.headers['CONTENT_LENGTH']:\n        handler = JSONRPCHandler()\n        result = handler.handle(request.data)\n    response = make_response(result, 200)\n    hdr = 'Access-Control-Allow-%s'\n    response.headers[hdr % 'Origin'] = '*'\n    response.headers[hdr % 'Headers'] = 'Content-Type, Authentication'\n    response.headers[hdr % 'Method'] = 'POST, GET, OPTIONS, PUT, DELETE, TRACE'\n    return response", "fn_id": 0, "class_fn": false, "repo": "MasonM/apeye", "file": "examples/api.apeye.org/example_server/rpc.py", "last_update_at": "2021-07-27T18:31:15+00:00", "pred": {"ppl": 2.486753225326538, "ppl_lower": 2.8845114707946777, "ppl/lowercase_ppl": -1.1628772902253366, "ppl/zlib": 0.0031521727821947594, "Min_5.0% Prob": 7.512739479541779, "Min_10.0% Prob": 5.81540983915329, "Min_20.0% Prob": 3.9696951923948345, "Min_30.0% Prob": 2.925357745885849, "Min_40.0% Prob": 2.256411367387914, "Min_50.0% Prob": 1.8215545626091105, "Min_60.0% Prob": 1.5210384183959795}}
{"hexsha": "6461501746c4c91ad65a43d4651b57d08946bf5f", "ext": "py", "lang": "Python", "content": "def contains_inappropriate_phrases(tweet_text):\n    if 'sex' in tweet_text:\n        return True\n    return False", "fn_id": 4, "class_fn": false, "repo": "mgreiler/code-review-twitter-bot", "file": "code-review-bot/matching_rules.py", "last_update_at": "2021-10-04T08:36:17+00:00", "pred": {"ppl": 4.631678104400635, "ppl_lower": 5.807693004608154, "ppl/lowercase_ppl": -1.1476034537973263, "ppl/zlib": 0.017032436044303125, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 7.8754838307698565, "Min_20.0% Prob": 5.791130781173706, "Min_30.0% Prob": 4.750022292137146, "Min_40.0% Prob": 3.7830367407628467, "Min_50.0% Prob": 3.013476693795787, "Min_60.0% Prob": 2.6022293280277933}}
{"hexsha": "dedf80bf95ac67960c80fd880c96b74b9b20d6cf", "ext": "py", "lang": "Python", "content": "def test_local_missing_url(tmpdir):\n    \"\"\" Test creating a toolchain from path to a local feed xml \"\"\"\n    full = '<feed>\\n<feed />\\n</feed>\\n'\n    with pytest.raises(Exception) as e:\n        _generic_test_local(tmpdir, full)\n    assert 'not parse' in str(e)\n    assert \"Non-root 'feed' element must have an 'url' attribute\" in str(e)", "fn_id": 9, "class_fn": false, "repo": "aldebaran/qibuild", "file": "python/qitoolchain/test/test_feed.py", "last_update_at": "2021-07-27T06:46:59+00:00", "pred": {"ppl": 8.043686866760254, "ppl_lower": 8.767343521118164, "ppl/lowercase_ppl": -1.0413194044602285, "ppl/zlib": 0.009433880287779568, "Min_5.0% Prob": 9.097202491760253, "Min_10.0% Prob": 8.393515586853027, "Min_20.0% Prob": 6.927790945226496, "Min_30.0% Prob": 5.684716752081206, "Min_40.0% Prob": 4.780427634716034, "Min_50.0% Prob": 4.0231984051791105, "Min_60.0% Prob": 3.4290645402489286}}
{"hexsha": "3ca816c1fdae9c07f862a54969748690cccccdc9", "ext": "py", "lang": "Python", "content": "def get_authorization_token(event) -> str:\n    cookie = SimpleCookie()\n    cookie.load(', '.join(event['cookies']))\n    if COOKIE_TOKEN_KEY in cookie:\n        return cookie[COOKIE_TOKEN_KEY].value\n    header = event['headers'].get('authorization')\n    if header is None:\n        return None\n    return header.replace('Bearer ', '')", "fn_id": 0, "class_fn": false, "repo": "adacotech/terraform-aws-api-auth-proxy", "file": "modules/oauth2/lambda/authorizer/function.py", "last_update_at": "2021-09-17T03:22:05+00:00", "pred": {"ppl": 2.956596851348877, "ppl_lower": 4.577158451080322, "ppl/lowercase_ppl": -1.4031584915753037, "ppl/zlib": 0.005530810686364984, "Min_5.0% Prob": 9.398708534240722, "Min_10.0% Prob": 7.303772807121277, "Min_20.0% Prob": 4.6824867725372314, "Min_30.0% Prob": 3.4023650527000426, "Min_40.0% Prob": 2.6419295467436315, "Min_50.0% Prob": 2.157732408940792, "Min_60.0% Prob": 1.8178785247107347}}
{"hexsha": "fbbdcaf00a8d9fa8c6f2f80cfad9ef55df7708dc", "ext": "py", "lang": "Python", "content": "def fromList(li: List[int]):\n    if len(li) == 0:\n        return None\n    root = TreeNode(val=li[0])\n    queue = [root]\n    i = 1\n    while i < len(li):\n        node = queue[0]\n        del queue[0]\n        if li[i] is not None:\n            node.left = TreeNode(val=li[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(li):\n            if li[i]:\n                node.right = TreeNode(val=li[i])\n                queue.append(node.right)\n            i += 1\n    return root", "fn_id": 0, "class_fn": false, "repo": "wanglongjiang/leetcode", "file": "easy/897-increasing-order-search-tree.py", "last_update_at": "2021-03-14T11:38:30+00:00", "pred": {"ppl": 1.4822691679000854, "ppl_lower": 1.6605980396270752, "ppl/lowercase_ppl": -1.2886461711618753, "ppl/zlib": 0.0019198738299805115, "Min_5.0% Prob": 5.7414416670799255, "Min_10.0% Prob": 3.5891201496124268, "Min_20.0% Prob": 1.9551433275143306, "Min_30.0% Prob": 1.3176766432821752, "Min_40.0% Prob": 0.989427793298417, "Min_50.0% Prob": 0.7907316196277472, "Min_60.0% Prob": 0.6580764361654897}}
{"hexsha": "9a9f21e89303399d79c67e75c99b8d626266c51f", "ext": "py", "lang": "Python", "content": "def get_maximum_mutation_frequency(counts, distance_matrix, frequencies):\n    \"\"\"\n    # ========================================================================\n\n    GET MAXMIMUM MUTATION FREQUENCY\n\n    PURPOSE\n    -------\n\n    Returns the maximum mutation frequency of the haplotypes.\n\n\n    INPUT\n    -----\n\n    [INT LIST] [counts]\n        A haplotype counts, from the counts of the most abundant to the counts\n        of the least abundant haplotype.\n\n    [FLOAT LIST] [frequencies]\n        A list of (relative) frequencies of the Haplotypes.\n\n    [2D ARRAY] [distance_matrix]\n        A two dimensional array, representing the distance matrix of distances\n        between the sorted haplotypes.\n\n        This is expected to be calculated in a similar manner as:\n            haplotype.build_distiance_matrix(haplotypes)\n\n\n    RETURN\n    ------\n\n    [FLOAT] [maximum_mutation_frequency]\n        The maximum mutation frequency.\n\n    # ========================================================================\n    \"\"\"\n    H = len(counts)\n    F = frequencies\n    D = distance_matrix\n    maximum_mutation_frequency = calculate.maximum_mutation_frequency(H, F, D)\n    return maximum_mutation_frequency", "fn_id": 7, "class_fn": false, "repo": "phac-nml/quasitools", "file": "quasitools/commands/cmd_complexity.py", "last_update_at": "2021-03-15T07:28:20+00:00", "pred": {"ppl": 3.308915615081787, "ppl_lower": 3.6187963485717773, "ppl/lowercase_ppl": -1.0748114721062894, "ppl/zlib": 0.0025733774773696472, "Min_5.0% Prob": 7.803029447793961, "Min_10.0% Prob": 6.649263150764234, "Min_20.0% Prob": 4.7828441271141395, "Min_30.0% Prob": 3.623674491844555, "Min_40.0% Prob": 2.8860142927116423, "Min_50.0% Prob": 2.357542434707284, "Min_60.0% Prob": 1.9828937004255776}}
{"hexsha": "e8db797381a8d4f3d0f04952d696026266dfabdc", "ext": "py", "lang": "Python", "content": "def add_zero(lst):\n    \"\"\" Add pulses for logical zero \"\"\"\n    pulse = 1875\n    space = 1875\n    lst.extend([pulse, space])\n    return lst", "fn_id": 2, "class_fn": false, "repo": "skbobade/UniversalRemote", "file": "src/irxm.py", "last_update_at": "2021-03-31T23:54:12+00:00", "pred": {"ppl": 7.628115177154541, "ppl_lower": 7.779432773590088, "ppl/lowercase_ppl": -1.0096674111948964, "ppl/zlib": 0.018989166232561524, "Min_5.0% Prob": 9.891587734222412, "Min_10.0% Prob": 8.731721782684327, "Min_20.0% Prob": 7.097873306274414, "Min_30.0% Prob": 5.7704975763956705, "Min_40.0% Prob": 4.7619868516922, "Min_50.0% Prob": 3.876527197085894, "Min_60.0% Prob": 3.3367702461058095}}
{"hexsha": "6e0e15f18889c25b4f39d64ec87555d40f8d8c97", "ext": "py", "lang": "Python", "content": "def apply_mask_criteria(column):\n    \"\"\"Apply simple masking criteria to a single column, and return '-' if the\n    column does not meet the criteria, and 'I' if it does.\n    \"\"\"\n    mask_char = '-'\n    num_seqs = len(column)\n    half_num_seqs = num_seqs / 2\n    num_gaps_in_col = column.count('-')\n    column_no_gaps = column.replace('-', '')\n    if column_no_gaps == '':\n        return mask_char\n    elif not column_no_gaps == '':\n        most_common_residue = collections.Counter(column_no_gaps).most_common(1)[0]\n        most_common_residue_count = most_common_residue[1]\n        percent_identity = most_common_residue_count * 100 / num_seqs\n        if num_gaps_in_col < num_seqs * 0.3:\n            mask_char = 'I'\n        if percent_identity >= 50:\n            mask_char = 'I'\n        return mask_char", "fn_id": 0, "class_fn": false, "repo": "laelbarlow/amoebae", "file": "amoebaelib/mask_nex.py", "last_update_at": "2021-11-28T08:32:05+00:00", "pred": {"ppl": 2.497493028640747, "ppl_lower": 2.635990858078003, "ppl/lowercase_ppl": -1.0589669495702607, "ppl/zlib": 0.0027568898801254202, "Min_5.0% Prob": 7.372869082859585, "Min_10.0% Prob": 5.567441531590053, "Min_20.0% Prob": 3.835238122514316, "Min_30.0% Prob": 2.8885375140678313, "Min_40.0% Prob": 2.25053161728595, "Min_50.0% Prob": 1.8164127954143159, "Min_60.0% Prob": 1.5241150444803329}}
{"hexsha": "d24a6419f9fcb2d3facd5e3d432818cfe2776fbb", "ext": "py", "lang": "Python", "content": "def get_activity_rawdata(cfg: DictConfig, id: int) -> pd.DataFrame:\n    \"\"\"query rawdata from strava api for a given id\n\n    Args:\n        cfg (DictConfig): configuration\n        id (int): activity id\n\n    Returns:\n        pd.DataFrame: activity rawdata\n    \"\"\"\n    with MySession(cfg) as session:\n        stream = session.get(cfg.api.BASE_URL + f'/activities/{id}/streams', params={'keys': ','.join(cfg.api.STREAMS)})\n    activity = dict()\n    found = list()\n    for values in stream.json():\n        activity[values['type']] = values['data']\n        found.append(values['type'])\n    res_df = pd.DataFrame(activity)\n    try:\n        res_df['lat'] = res_df['latlng'].apply(lambda x: x[0])\n        res_df['long'] = res_df['latlng'].apply(lambda x: x[-1])\n    except KeyError:\n        res_df['lat'], res_df['long'] = (np.nan, np.nan)\n    missings = set(cfg.api.STREAMS) - set(found)\n    if missings:\n        for missing in missings:\n            res_df[missing] = np.nan\n    res_df['id'] = id\n    if 'latlng' in res_df:\n        del res_df['latlng']\n    if cfg.TO_DB:\n        res_df['last_update'] = save_datetime_now()\n        with sqlite3.connect(call(cfg.DB)) as con:\n            res_df.to_sql('ACTIVITIES_RAW', con=con, if_exists='append', index=False, index_label='id')\n    time.sleep(cfg.api.SLEEP)\n    return res_df", "fn_id": 6, "class_fn": false, "repo": "Ektoplasmakugel/strava_datacollect", "file": "strava_datacollect/strava_query.py", "last_update_at": "2021-01-05T10:58:30+00:00", "pred": {"ppl": 2.394397258758545, "ppl_lower": 2.6657896041870117, "ppl/lowercase_ppl": -1.1229697517055712, "ppl/zlib": 0.0014220383268736616, "Min_5.0% Prob": 8.068952191959728, "Min_10.0% Prob": 5.877650600009495, "Min_20.0% Prob": 3.82449580679883, "Min_30.0% Prob": 2.78862043867146, "Min_40.0% Prob": 2.1572653604009764, "Min_50.0% Prob": 1.7414490283511612, "Min_60.0% Prob": 1.45455728194253}}
{"hexsha": "66ec3f6ee6f74fd6f9a9ebdb2510fc97b493104f", "ext": "py", "lang": "Python", "content": "def get_output_dir(output_dir):\n    if not output_dir or os.path.isfile(output_dir):\n        output_dir = '.'\n    elif not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    return output_dir", "fn_id": 0, "class_fn": false, "repo": "bjwuzh/autocase", "file": "axxac/path_tool.py", "last_update_at": "2021-07-02T09:46:23+00:00", "pred": {"ppl": 2.1666452884674072, "ppl_lower": 2.1666452884674072, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.007225981507697265, "Min_5.0% Prob": 6.949211120605469, "Min_10.0% Prob": 4.8177169391087125, "Min_20.0% Prob": 3.3834909200668335, "Min_30.0% Prob": 2.481163513092768, "Min_40.0% Prob": 1.9149483410375459, "Min_50.0% Prob": 1.542560718527862, "Min_60.0% Prob": 1.2880276442904557}}
{"hexsha": "95f32217242b488480e02ece9bfc4b27508cb75d", "ext": "py", "lang": "Python", "content": "def minimal(input_size=2, output_size=2, weight_low=-2, weight_high=2, depth=3):\n    \"\"\" Builds a minimal genome with specified inputs and\n    outputs, weight bounds, depth and one connected node in\n    the first layer.\n\n    :param input_size: Number of input nodes\n    :param output_size: Number of output nodes\n    :param weight_low: Maximum weight on node and edges\n    :param weight_high: Minimum weight on node and edges\n    :param depth: Number of layers in network.\n    :return: Constructed genome.\n    \"\"\"\n    genome = Genome(input_size=input_size, output_size=output_size, weight_low=weight_low, weight_high=weight_high, depth=depth)\n    genome.layers = [genome.inputs, *[[] for _ in range(depth)], genome.outputs]\n    genome.add_node(1)\n    for n in genome.inputs:\n        genome.add_edge(n, genome.layers[1][0])\n    for n in genome.outputs:\n        genome.add_edge(genome.layers[1][0], n)\n    return genome", "fn_id": 1, "class_fn": false, "repo": "mauicv/genrl", "file": "src/gerel/genome/factories.py", "last_update_at": "2021-03-25T23:29:07+00:00", "pred": {"ppl": 2.3889341354370117, "ppl_lower": 2.4931726455688477, "ppl/lowercase_ppl": -1.0490427613888602, "ppl/zlib": 0.0024123193851344144, "Min_5.0% Prob": 6.7391325405665805, "Min_10.0% Prob": 5.259011622132926, "Min_20.0% Prob": 3.616663811570507, "Min_30.0% Prob": 2.72495107302505, "Min_40.0% Prob": 2.14284880749755, "Min_50.0% Prob": 1.7381556501511384, "Min_60.0% Prob": 1.4504745233636558}}
{"hexsha": "5d7651dffd876fa23e9cd979e7ddb5ed364b6b00", "ext": "py", "lang": "Python", "content": "def validate_bool(value):\n    \"\"\"Check that ``value`` is an boolean value.\"\"\"\n    if value not in (0, 1, False, True):\n        raise ValidationError(value, INVALID_BOOL)\n    return bool(value)", "fn_id": 4, "class_fn": false, "repo": "agarwalrounak/readthedocs.org", "file": "readthedocs/config/validation.py", "last_update_at": "2021-04-26T21:59:29+00:00", "pred": {"ppl": 3.587616205215454, "ppl_lower": 5.459656715393066, "ppl/lowercase_ppl": -1.3286903297729935, "ppl/zlib": 0.008871444251797412, "Min_5.0% Prob": 8.616109132766724, "Min_10.0% Prob": 7.113248729705811, "Min_20.0% Prob": 5.053715098987926, "Min_30.0% Prob": 3.8055658410577213, "Min_40.0% Prob": 3.026312804740408, "Min_50.0% Prob": 2.4962713893117576, "Min_60.0% Prob": 2.1596002626944992}}
{"hexsha": "65836e5e8c8f2024ffb8b16e84f296ad241bb07d", "ext": "py", "lang": "Python", "content": "def run_async(factor, func, *args, **kwargs):\n    \"\"\"\n    Asynchronously executes a callable within a :class:`hiro.Timeline`\n\n    :param int factor: scale factor to use for the timeline during execution\n    :param function func: the function to invoke\n    :param args: the arguments to pass to the function\n    :param kwargs: the keyword arguments to pass to the function\n    :returns: an instance of :class:`hiro.core.ScaledAsyncRunner`\n\n    \"\"\"\n    return ScaledAsyncRunner(factor, func, *args, **kwargs)", "fn_id": 1, "class_fn": false, "repo": "alisaifee/hiro", "file": "hiro/core.py", "last_update_at": "2021-04-07T15:42:23+00:00", "pred": {"ppl": 3.6850085258483887, "ppl_lower": 4.082396507263184, "ppl/lowercase_ppl": -1.0785198869591799, "ppl/zlib": 0.00534538048894134, "Min_5.0% Prob": 9.993856191635132, "Min_10.0% Prob": 7.573014699495756, "Min_20.0% Prob": 5.261762548376013, "Min_30.0% Prob": 3.96749180846098, "Min_40.0% Prob": 3.1455260038375856, "Min_50.0% Prob": 2.5678268297426943, "Min_60.0% Prob": 2.1814762631930957}}
{"hexsha": "f3817abe4aba076e3056537deae3e73cf43cce08", "ext": "py", "lang": "Python", "content": "@patch('inventory.readers._logger', autospec=True)\ndef test_given_error_from_boto_then_account_is_skipped_but_others_still_processed(mock_logger):\n    os.environ['ACCOUNT_LIST'] = '[ { \"name\": \"foo\", \"id\": \"210987654321\" }, { \"name\": \"bar\", \"id\": \"123456789012\" } ]'\n    mock_mapper = Mock(spec=DataMapper)\n    mock_mapper.can_map.return_value = True\n    mock_mapper.map.return_value = [{'test': True}]\n    mock_select_resource_config = Mock(side_effect=[ClientError(error_response={'Error': {'Code': 'ResourceInUseException'}}, operation_name='select_resource_config'), {'NextToken': None, 'Results': [json.dumps({'resourceType': 'foobar'})]}])\n    mock_config_client_factory = Mock()\n    mock_config_client_factory.return_value.select_resource_config = mock_select_resource_config\n    reader = AwsConfigInventoryReader(lambda_context=MagicMock(), sts_client=Mock(), mappers=[mock_mapper])\n    reader._get_config_client = mock_config_client_factory\n    all_inventory = reader.get_resources_from_all_accounts()\n    assert len(all_inventory) == 1, 'inventory from the successful call should be returned'\n    assert len(mock_select_resource_config.mock_calls) == 2, 'boto should have been called twice to page through results'\n    mock_logger.error.assert_called_with(String() & Contains('moving onto next account'), ANY, ANY, exc_info=True)", "fn_id": 2, "class_fn": false, "repo": "Alpacked/fedramp-integrated-inventory-workbook", "file": "tests/test_inventory_reader.py", "last_update_at": "2021-12-15T22:29:08+00:00", "pred": {"ppl": 3.1137073040008545, "ppl_lower": 3.6510684490203857, "ppl/lowercase_ppl": -1.1401688696647962, "ppl/zlib": 0.0016927184432444344, "Min_5.0% Prob": 7.982927430759776, "Min_10.0% Prob": 6.3679308679368765, "Min_20.0% Prob": 4.601271241241031, "Min_30.0% Prob": 3.500061670056096, "Min_40.0% Prob": 2.753797359764576, "Min_50.0% Prob": 2.2444412007596757, "Min_60.0% Prob": 1.8855595273138197}}
{"hexsha": "640f81533781b97654cf6abb19ee0b856a6e367b", "ext": "py", "lang": "Python", "content": "def th_mdn_loss_dense(gt, mu, sigma, pi, mask, V, **kwargs):\n    C = 17\n    BS = gt.shape[0]\n    M = pi.shape[1]\n    H = gt.shape[2]\n    W = gt.shape[3]\n    gt = gt.permute(0, 2, 3, 1)\n    mu = mu.permute(0, 2, 3, 1)\n    sigma = sigma.permute(0, 2, 3, 1)\n    pi = pi.permute(0, 2, 3, 1)\n    mask = mask.permute(0, 2, 3, 1)\n    lmask = (torch.sum(mask, 3) > 0).float()\n    mask = torch.reshape(mask[:, :, :, np.repeat(np.arange(C), 2)], (BS, H, W, 1, C * 2))\n    mask = mask.repeat(1, 1, 1, M, 1)\n    gt = gt.reshape(BS, H, W, 1, 2 * C)\n    gt = gt.repeat(1, 1, 1, M, 1)\n    mu = mu.reshape(BS, H, W, M, 2 * C)\n    V = torch.reshape(V[np.repeat(np.arange(C), 2)], (1, 1, 1, 1, C * 2))\n    sigma = torch.reshape(sigma, (BS, H, W, M, 2))[:, :, :, :, np.concatenate([np.arange(2) for _ in np.arange(C)])]\n    e = 0.5 * ((gt - mu) * torch.reciprocal(sigma) * torch.reciprocal(V)) ** 2\n    e = torch.where(mask > 0.0, e, torch.zeros_like(e))\n    e = torch.sum(e, -1)\n    nviskps = torch.sum(mask[:, :, :, :, 0::2] > 0.0, -1).float().detach()\n    sigma_y = sigma[:, :, :, :, 0]\n    sigma_x = sigma[:, :, :, :, 1]\n    PI = torch.tensor(np.pi).cuda()\n    coef = -nviskps * torch.log(sigma_y) - nviskps * torch.log(sigma_x) - nviskps * torch.log(2 * PI)\n    exponent = torch.log(pi) + coef - e\n    loss = -torch.squeeze(log_sum_exp(exponent, 3), 3)\n    if kwargs.get('debug', False):\n        print('exponent.shape', exponent.shape)\n        print('loss.shape', loss.shape)\n    loss = torch.sum(lmask * loss) / (1.0 + torch.sum(lmask))\n    return loss", "fn_id": 4, "class_fn": false, "repo": "alivaramesh/MixtureDenseRegression", "file": "src/lib/models/losses.py", "last_update_at": "2021-11-30T01:22:48+00:00", "pred": {"ppl": 2.096005916595459, "ppl_lower": 2.134031295776367, "ppl/lowercase_ppl": -1.0242951523921064, "ppl/zlib": 0.0012375143633076733, "Min_5.0% Prob": 6.707996930831518, "Min_10.0% Prob": 4.93100118637085, "Min_20.0% Prob": 3.235651481683087, "Min_30.0% Prob": 2.357897297245391, "Min_40.0% Prob": 1.8203591596406357, "Min_50.0% Prob": 1.4738831520365665, "Min_60.0% Prob": 1.2315899932444603}}
{"hexsha": "075a378bb5687e7c4ee731ece7a5af55df206c93", "ext": "py", "lang": "Python", "content": "def validate(model, dataset, opt, ctx):\n    \"\"\"Test on validation dataset.\"\"\"\n    detector = CenterDetector(opt)\n    detector.model = model\n    results = {}\n    num_iters = len(dataset)\n    bar = Bar('{}'.format(opt.exp_id), max=num_iters)\n    time_stats = ['tot', 'load', 'pre', 'net', 'dec', 'post', 'merge']\n    avg_time_stats = {t: AverageMeter() for t in time_stats}\n    print('Reporting every 1000 images...')\n    for ind in range(num_iters):\n        img_id = dataset.images[ind]\n        img_info = dataset.coco.loadImgs(ids=[img_id])[0]\n        img_path = os.path.join(dataset.img_dir, img_info['file_name'])\n        ret = detector.run(img_path)\n        results[img_id] = ret['results']\n        Bar.suffix = '[{0}/{1}]|Tot: {total:} |ETA: {eta:} '.format(ind, num_iters, total=bar.elapsed_td, eta=bar.eta_td)\n        for t in avg_time_stats:\n            avg_time_stats[t].update(ret[t])\n            Bar.suffix = Bar.suffix + '|{} {:.3f} '.format(t, avg_time_stats[t].avg)\n        if ind % 1000 == 0:\n            bar.next()\n    bar.finish()\n    val_dataset.run_eval(results=results, save_dir='./output/')", "fn_id": 3, "class_fn": false, "repo": "Guanghan/mxnet-centernet", "file": "train.py", "last_update_at": "2021-05-12T08:41:33+00:00", "pred": {"ppl": 1.63239586353302, "ppl_lower": 2.034186840057373, "ppl/lowercase_ppl": -1.4490315362692472, "ppl/zlib": 0.0009091814296243248, "Min_5.0% Prob": 6.660186398029327, "Min_10.0% Prob": 4.280880532613614, "Min_20.0% Prob": 2.386262252567762, "Min_30.0% Prob": 1.6238441039323808, "Min_40.0% Prob": 1.223630366055016, "Min_50.0% Prob": 0.979412048179478, "Min_60.0% Prob": 0.8192296798769385}}
{"hexsha": "2b63ae4e99c2f9a3f9a1f7f166698e9931cfc29c", "ext": "py", "lang": "Python", "content": "def get_roc_data(df_test, df_prob, encoding):\n    tprs = []\n    aucs = []\n    mean_fpr = np.linspace(0, 1, 100)\n    for i in range(df_test.shape[0]):\n        y_true = df_test.iloc[i, :].dropna().values\n        y_pred = df_prob.iloc[i, :].dropna().values\n        fpr, tpr, _ = roc_curve(y_true, y_pred)\n        interp_tpr = np.interp(mean_fpr, fpr, tpr)\n        interp_tpr[0] = 0.0\n        tprs.append(interp_tpr)\n        aucs.append(roc_auc_score(y_true, y_pred))\n    mean_tpr = np.mean(tprs, axis=0)\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n    std_auc = np.std(aucs)\n    std_tpr = np.std(tprs, axis=0)\n    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)\n    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)\n    df = pd.DataFrame({'x': mean_fpr, 'y': mean_tpr, 'tprs_lower': tprs_lower, 'tprs_upper': tprs_upper})\n    df['Encoding'] = encoding\n    df['mean_auc'] = np.round(mean_auc, 2)\n    df['legend_label'] = df.apply(lambda row: f\"{row['Encoding']} (AUC: {row['mean_auc']})\", axis=1)\n    return df", "fn_id": 1, "class_fn": false, "repo": "spaenigs/peptidereactor", "file": "nodes/vis/sds_3_Curves/scripts/roc_pr_curve.py", "last_update_at": "2021-06-07T07:03:38+00:00", "pred": {"ppl": 1.463409185409546, "ppl_lower": 1.4851661920547485, "ppl/lowercase_ppl": -1.0387581879191905, "ppl/zlib": 0.0008537416417205929, "Min_5.0% Prob": 4.885591828304788, "Min_10.0% Prob": 3.227207624393961, "Min_20.0% Prob": 1.8466405242040593, "Min_30.0% Prob": 1.2660178198016805, "Min_40.0% Prob": 0.9517499484492326, "Min_50.0% Prob": 0.7609971136678122, "Min_60.0% Prob": 0.6358382308381646}}
{"hexsha": "d7d0cc76bd9ced96d824215c265e0b8c9d95c87b", "ext": "py", "lang": "Python", "content": "def get_unique_changed_packages(diffs):\n    packages_changed = {}\n    for change in diffs:\n        if len(change) != 2:\n            logging.debug(change)\n            continue\n        change_type, path = change\n        path_tokens = path.split('/')\n        if path_tokens[-1] in IGNORE_CHANGES_FILES:\n            continue\n        try:\n            package = Package(package_dir=path_tokens[0])\n        except PackageDoesNotExistException:\n            continue\n        if package.package_name not in packages_changed:\n            packages_changed.update({package.package_name: package})\n    return packages_changed", "fn_id": 2, "class_fn": false, "repo": "r-kells/scream", "file": "scream/detect_changed_packages.py", "last_update_at": "2021-11-22T18:45:19+00:00", "pred": {"ppl": 2.670236110687256, "ppl_lower": 3.2460405826568604, "ppl/lowercase_ppl": -1.1988145517903557, "ppl/zlib": 0.003507738926683501, "Min_5.0% Prob": 6.540238320827484, "Min_10.0% Prob": 5.251390755176544, "Min_20.0% Prob": 3.8413029006033232, "Min_30.0% Prob": 2.988064793907866, "Min_40.0% Prob": 2.354452321023652, "Min_50.0% Prob": 1.942420976554475, "Min_60.0% Prob": 1.6262272326181633}}
{"hexsha": "bc24e936ef606bdcce7d65b0ddb291682889d4ea", "ext": "py", "lang": "Python", "content": "def tx_register(tx, cursor):\n    payload = json.loads(tx.payload)\n    owner = models.Account(tx.chain_id, tx.sender, cursor)\n    parcel = models.Parcel(tx.chain_id, payload['target'], owner.address, cursor)\n    storage = models.Storage(tx.chain_id, parcel.storage_id, None, cursor)\n    host = models.Account(tx.chain_id, storage.owner, cursor)\n    parcel.custody = payload['custody']\n    if parcel.custody != None and len(parcel.custody) > 100:\n        parcel.custody = parcel.custody[:100]\n    parcel.proxy_account = payload.get('proxy_account', None)\n    if parcel.proxy_account != None and len(parcel.proxy_account) > 40:\n        parcel.proxy_account = parcel.proxy_account[:40]\n    parcel.extra = payload.get('extra', '{}')\n    parcel.on_sale = True\n    parcel.save(cursor)\n    owner.balance -= storage.registration_fee\n    owner.save(cursor)\n    host.balance += storage.registration_fee\n    host.save(cursor)", "fn_id": 7, "class_fn": false, "repo": "MECTrace/edge-data-chain-explorer", "file": "crawler/tx.py", "last_update_at": "2021-12-17T08:52:58+00:00", "pred": {"ppl": 2.3848369121551514, "ppl_lower": 2.5038795471191406, "ppl/lowercase_ppl": -1.0560452003627696, "ppl/zlib": 0.0025866986349836496, "Min_5.0% Prob": 7.974099477132161, "Min_10.0% Prob": 5.975640942973476, "Min_20.0% Prob": 3.9104120542132663, "Min_30.0% Prob": 2.7895435725387774, "Min_40.0% Prob": 2.142664931538537, "Min_50.0% Prob": 1.730359311116004, "Min_60.0% Prob": 1.4526223268703018}}
{"hexsha": "a6ecbbb0e40168d4238d3a4dc7a1087809d1ed3f", "ext": "py", "lang": "Python", "content": "@box.cron('0 3 * * *')\nasync def refresh_db(bot):\n    logger.info('refresh subway')\n    tasks = []\n    for service_region, api_version in REGION_TABLE.values():\n        tasks.append(fetch_station_db(bot, service_region, api_version))\n    await asyncio.wait(tasks)", "fn_id": 2, "class_fn": false, "repo": "item4/yui", "file": "yui/apps/search/subway.py", "last_update_at": "2021-01-31T17:57:41+00:00", "pred": {"ppl": 5.496845245361328, "ppl_lower": 5.722236633300781, "ppl/lowercase_ppl": -1.0235805762385681, "ppl/zlib": 0.009312428065132557, "Min_5.0% Prob": 8.75595498085022, "Min_10.0% Prob": 7.3902867436409, "Min_20.0% Prob": 5.961513561360976, "Min_30.0% Prob": 4.960886047436641, "Min_40.0% Prob": 4.053782067980085, "Min_50.0% Prob": 3.365269089964303, "Min_60.0% Prob": 2.8350946194720716}}
{"hexsha": "70836ca1748caea3d326c0101f9ea4804dc8b95e", "ext": "py", "lang": "Python", "content": "def save_3D_animation(embeddings, emb_space_sizes, train_losses, test_losses, opt_name, n_bins=10, horizon_size=10, cmap_name='jet', **plotting_kwargs):\n    \"\"\"Utility function for visualizing the changes in weights over time in\n    UMAP space. The visualization is in 3D for better appreciating the descent\n    on the error surface.\n\n        Args:\n            - embeddings: list of embeddings, result of alligned UMAP\n            - emb_space_sizes: list of arrays, define the limits of the\n                embedding space for the three layers of the MLP.\n            - train_losses: list, training losses history.\n            - test_losses: list, test losses.\n            - opt_name: string, name of the optimizer used.\n            - n_bins: int, number of bins for discretizing the training loss.\n            -  horizon_size: int, maximum number of points simultaneously\n                on screen.\n            - cmap_name: string, name of the colormap used for representing\n                the change in train losses.\n            - **plotting_kwargs: keyword arguments, keyword arguments for the\n                plotting function.\n\n        Returns:\n            - None\n    \"\"\"\n    discretizer = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy='uniform')\n    cmap = matplotlib.cm.get_cmap(cmap_name)\n    colors = np.array(train_losses)\n    colors = discretizer.fit_transform(colors.reshape(-1, 1)).flatten()\n    norm = plt.Normalize(colors.min(), colors.max())\n    for i in tqdm(range(embeddings[0].shape[0])):\n        fig, axs = plt.subplots(1, 3, figsize=(30, 10), subplot_kw=dict(projection='3d'))\n        for index, emb in enumerate(embeddings):\n            min_sizes, max_sizes = emb_space_sizes[index]\n            past_horizon = max(0, i - horizon_size)\n            axs[index].scatter(emb[past_horizon:i, 0], emb[past_horizon:i, 1], train_losses[past_horizon:i], c=[cmap(norm(color)) for color in colors[past_horizon:i]], **plotting_kwargs)\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=train_losses[past_horizon:i], c='grey', zdir='y', zs=max_sizes[1], linewidth=5, alpha=0.25)\n            axs[index].plot(xs=emb[past_horizon:i, 1], ys=train_losses[past_horizon:i], c='grey', zdir='x', linewidth=5, alpha=0.25, zs=min_sizes[0])\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=emb[past_horizon:i, 1], c='grey', zdir='z', linewidth=5, alpha=0.25, zs=min_sizes[2])\n            axs[index].text2D(0.05, 0.95, f'Layer {index + 1}', transform=axs[index].transAxes)\n            if index == 1:\n                axs[index].text2D(0.5, 1.1, f'Optimizer: {opt_name}                     \\nTrain Loss: {round(train_losses[i], 3)}                     \\n Test Loss: {round(test_losses[i], 3)}', transform=axs[index].transAxes)\n            elif index == 2:\n                axs[index].set_xlabel('Weights Space \\n UMAP 1')\n                axs[index].set_ylabel('Weights Space \\n UMAP 2')\n                axs[index].set_zlabel('Trainining Loss')\n        if not os.path.exists(f'results\\\\3D_{opt_name}'):\n            os.makedirs(f'results\\\\3D_{opt_name}')\n        plt.savefig(f'results\\\\3D_{opt_name}\\\\{i}.png', bbox_inches='tight')\n        plt.close('all')\n    return None", "fn_id": 0, "class_fn": false, "repo": "vb690/machine_learning_exercises", "file": "shops/visualize_gradient_descent/utilities/viz_utils.py", "last_update_at": "2021-04-26T19:06:06+00:00", "pred": {"ppl": 2.2179322242736816, "ppl_lower": 2.397979736328125, "ppl/lowercase_ppl": -1.097983545228958, "ppl/zlib": 0.0006802522043773664, "Min_5.0% Prob": 7.464863308993253, "Min_10.0% Prob": 5.535698763959043, "Min_20.0% Prob": 3.5651526569246172, "Min_30.0% Prob": 2.556961014285102, "Min_40.0% Prob": 1.9675521424526836, "Min_50.0% Prob": 1.5860721809226725, "Min_60.0% Prob": 1.3263173288368304}}
{"hexsha": "2096e74d026f92b88f279c71ae6c465be2f77b95", "ext": "py", "lang": "Python", "content": "def is_accuracy_aware_training(config: NNCFConfig, compression_config_passed: bool=False) -> bool:\n    \"\"\"\n    Returns True if the compression config contains an accuracy-aware\n    training related section, False otherwise.\n    \"\"\"\n    compression_config = config.get('compression', {}) if not compression_config_passed else config\n    if isinstance(compression_config, list):\n        for algo_config in compression_config:\n            if algo_config.get('accuracy_aware_training') is not None:\n                return True\n        return False\n    if compression_config.get('accuracy_aware_training') is not None:\n        return True\n    return False", "fn_id": 0, "class_fn": false, "repo": "sarthakpati/nncf", "file": "nncf/config/utils.py", "last_update_at": "2021-07-23T07:46:52+00:00", "pred": {"ppl": 2.372114658355713, "ppl_lower": 2.998631715774536, "ppl/lowercase_ppl": -1.2713350370532623, "ppl/zlib": 0.0032110848261281957, "Min_5.0% Prob": 6.46364563703537, "Min_10.0% Prob": 4.956304207444191, "Min_20.0% Prob": 3.569561622359536, "Min_30.0% Prob": 2.72103768825531, "Min_40.0% Prob": 2.13809791794329, "Min_50.0% Prob": 1.7269050730280129, "Min_60.0% Prob": 1.4398884093016386}}
{"hexsha": "f4d5118418f49eeb3e5a0e0d7756f5a28b10fda6", "ext": "py", "lang": "Python", "content": "def decoder_layer(input_prob, input_aspect, n_hidden, n_class, n_aspects, random_base, l2_reg, sub_vocab, FLAGS, scope_name='1', use_aspect=True):\n    \"\"\"\n    Decoder structure of the autoencoder-like model taht reconstructs the sentence using the sentimenet embedding matrix\n\n    :param input_prob:\n    :param input_aspect:\n    :param n_hidden:\n    :param n_class:\n    :param n_aspects:\n    :param random_base:\n    :param l2_reg:\n    :param sub_vocab:\n    :param FLAGS:\n    :param scope_name:\n    :param use_aspect:\n    :return:\n    \"\"\"\n    w = tf.get_variable(name='sentiment_embedding' + scope_name, shape=[n_class, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    if use_aspect:\n        w_aspect = tf.get_variable(name='aspect_w' + scope_name, shape=[n_aspects, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    batch_size = tf.shape(input_prob)[0]\n    if use_aspect:\n        outputs = tf.matmul(input_prob, w) + tf.matmul(input_aspect, w_aspect)\n    else:\n        outputs = tf.matmul(input_prob, w)\n    return (outputs, w)", "fn_id": 3, "class_fn": false, "repo": "LucaZampierin/ABSE", "file": "nn_layer.py", "last_update_at": "2021-10-17T13:53:20+00:00", "pred": {"ppl": 2.1216061115264893, "ppl_lower": 2.2340762615203857, "ppl/lowercase_ppl": -1.0686735732548935, "ppl/zlib": 0.0017094850036970845, "Min_5.0% Prob": 7.416537024758079, "Min_10.0% Prob": 5.585556956854734, "Min_20.0% Prob": 3.4939843375574458, "Min_30.0% Prob": 2.454382610388268, "Min_40.0% Prob": 1.873995911540453, "Min_50.0% Prob": 1.5009345781930663, "Min_60.0% Prob": 1.2545253927539335}}
{"hexsha": "c4ee4862ccbeff5f750d6e6bb757e31dbab056f4", "ext": "py", "lang": "Python", "content": "def solve_format_ArithOperation(optree, integer_size_func=lambda lhs_prec, rhs_prec: None, frac_size_func=lambda lhs_prec, rhs_prec: None, signed_func=lambda lhs, lhs_prec, rhs, rhs_prec: False, format_solver=None):\n    \"\"\" determining fixed-point format for a generic 2-op arithmetic\n        operation (e.g. Multiplication, Addition, Subtraction)\n    \"\"\"\n    lhs = optree.get_input(0)\n    rhs = optree.get_input(1)\n    lhs_precision = lhs.get_precision()\n    rhs_precision = rhs.get_precision()\n    abstract_operation = lhs_precision is ML_Integer and rhs_precision is ML_Integer\n    if abstract_operation:\n        return ML_Integer\n    if lhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(lhs, input_prec_solver=format_solver)\n        lhs_precision = solve_format_Constant(Constant(cst_eval))\n    if rhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(rhs, input_prec_solver=format_solver)\n        rhs_precision = solve_format_Constant(Constant(cst_eval))\n    if is_fixed_point(lhs_precision) and is_fixed_point(rhs_precision):\n        int_size = integer_size_func(lhs_precision, rhs_precision)\n        frac_size = frac_size_func(lhs_precision, rhs_precision)\n        is_signed = signed_func(lhs, lhs_precision, rhs, rhs_precision)\n        return fixed_point(int_size, frac_size, signed=is_signed)\n    else:\n        return optree.get_precision()", "fn_id": 3, "class_fn": false, "repo": "nibrunie/metalibm", "file": "metalibm_core/opt/p_size_datapath.py", "last_update_at": "2021-03-12T18:54:53+00:00", "pred": {"ppl": 2.4904069900512695, "ppl_lower": 2.557922601699829, "ppl/lowercase_ppl": -1.029316029772389, "ppl/zlib": 0.00206903888194997, "Min_5.0% Prob": 8.635323586671248, "Min_10.0% Prob": 6.48111825293683, "Min_20.0% Prob": 4.13570242053584, "Min_30.0% Prob": 2.9574164352216923, "Min_40.0% Prob": 2.273173696626174, "Min_50.0% Prob": 1.8257193623752404, "Min_60.0% Prob": 1.5212205570432116}}
{"hexsha": "bc8a29dc53319c769a4b51f92593b8f3fdee45c6", "ext": "py", "lang": "Python", "content": "def update_df_all(df_all, training_data, validation_data, test_data):\n    \"\"\"Add a column \"group\" to df_all indicating train/validation or test\"\"\"\n    df_all['group'] = 0\n    for simu_name in training_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'train'\n    for simu_name in validation_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'validation'\n    for simu_name in test_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'test'\n    return df_all", "fn_id": 1, "class_fn": false, "repo": "louisletoumelin/wind_downscaling_cnn", "file": "pre_process/preprocess_folds.py", "last_update_at": "2021-12-13T16:26:31+00:00", "pred": {"ppl": 2.138131856918335, "ppl_lower": 2.1418676376342773, "ppl/lowercase_ppl": -1.0022971679855956, "ppl/zlib": 0.004085658514633804, "Min_5.0% Prob": 7.579449070824517, "Min_10.0% Prob": 5.571603099505107, "Min_20.0% Prob": 3.4917042834891214, "Min_30.0% Prob": 2.489626481577202, "Min_40.0% Prob": 1.9039805377316144, "Min_50.0% Prob": 1.527338171388126, "Min_60.0% Prob": 1.2733857171055947}}
{"hexsha": "6bef08836876832f7516142a645d88720de907e9", "ext": "py", "lang": "Python", "content": "def update_image_metadata_from_image_path(image_path: str, metadata: Dict):\n    \"\"\" \"\"\"\n    pickled = codecs.encode(pickle.dumps(metadata), 'base64').decode()\n    db = get_db()\n    cur = db.cursor()\n    cur.execute(f'UPDATE images SET metadata = \"{pickled}\" WHERE path = \"{image_path}\" AND metadata IS NULL')\n    db.commit()", "fn_id": 0, "class_fn": false, "repo": "frederikgram/describe", "file": "dev/frontend/models/database_updaters.py", "last_update_at": "2021-03-10T01:32:19+00:00", "pred": {"ppl": 3.265331268310547, "ppl_lower": 3.2683677673339844, "ppl/lowercase_ppl": -1.000785464777936, "ppl/zlib": 0.005635053419112635, "Min_5.0% Prob": 8.700158405303956, "Min_10.0% Prob": 6.964136171340942, "Min_20.0% Prob": 4.69194685845148, "Min_30.0% Prob": 3.5990655114573817, "Min_40.0% Prob": 2.822065231345949, "Min_50.0% Prob": 2.341503487756619, "Min_60.0% Prob": 1.9592313487378379}}
{"hexsha": "6c468eb327991e8438e939f0e8280fc938e87e2b", "ext": "py", "lang": "Python", "content": "def float_sanitiser():\n\n    def sanitise(n, debug_name):\n        if not isinstance(n, float):\n            raise CefTypeError('{}: Expected float, got {}'.format(debug_name, type(n)))\n        else:\n            return str(n)\n    return sanitise", "fn_id": 3, "class_fn": false, "repo": "slallum/format_cef", "file": "src/format_cef/_cef/base.py", "last_update_at": "2021-04-28T08:58:00+00:00", "pred": {"ppl": 4.5027546882629395, "ppl_lower": 4.6844377517700195, "ppl/lowercase_ppl": -1.0262888385783597, "ppl/zlib": 0.009834570996303318, "Min_5.0% Prob": 8.858254114786783, "Min_10.0% Prob": 8.098369598388672, "Min_20.0% Prob": 5.828321075439453, "Min_30.0% Prob": 4.6690693280913615, "Min_40.0% Prob": 3.6622176925341288, "Min_50.0% Prob": 2.9649977448739504, "Min_60.0% Prob": 2.5285114927424326}}
{"hexsha": "22b492bfb5e030f558182e6d784c2ccfc5064429", "ext": "py", "lang": "Python", "content": "def hive_copy_to_table(source_dataset, source_table_name, destination_dataset, destination_table_name, s3_step_path, local_step_path, action_id, set_hive_vars, step_num, steps_total):\n    hive_source_path = os.path.join(local_step_path, 'hive', 'copy_to_table.hql')\n    hive_target_path = os.path.join(local_step_path, 'hive', 'copy_to_table_%s.hql' % destination_table_name)\n    with open(hive_source_path, 'r') as s, open(hive_target_path, 'w') as t:\n        contents = s.read().format(source_table_name=source_table_name, destination_table_name=destination_table_name, partitions=get_partitions(source_dataset), columns=get_columns(source_dataset, destination_dataset), compression=get_emr_compression(destination_dataset), set_hive_vars=set_hive_vars if set_hive_vars else '')\n        t.write(contents)\n    return StepWrapper(JarStep(name='dart: (%s) copy_to_table_%s.hql (from %s)' % (_title_data(action_id, step_num, steps_total), destination_table_name, source_table_name), jar=_command_runner_jar, action_on_failure='CONTINUE', step_args=_hive_args + [s3_step_path + '/hive/copy_to_table_%s.hql' % destination_table_name]), step_num, steps_total)", "fn_id": 4, "class_fn": false, "repo": "RetailMeNotSandbox/dart", "file": "src/python/dart/engine/emr/steps.py", "last_update_at": "2021-07-14T22:37:35+00:00", "pred": {"ppl": 2.7744386196136475, "ppl_lower": 2.915862798690796, "ppl/lowercase_ppl": -1.0487210651725651, "ppl/zlib": 0.0023676297621689595, "Min_5.0% Prob": 8.45303280353546, "Min_10.0% Prob": 6.602352392382738, "Min_20.0% Prob": 4.4360308777995225, "Min_30.0% Prob": 3.2474962196699004, "Min_40.0% Prob": 2.5201437035348357, "Min_50.0% Prob": 2.035849796926103, "Min_60.0% Prob": 1.7028734162601271}}
{"hexsha": "1a8166a42e84641b39cb8babc256e3c8ddcff393", "ext": "py", "lang": "Python", "content": "def check_post_status(func):\n    \"\"\"\n     call the func only if the smc.setting is not already posted via API\n    Args:\n        func:write_file\n\n    Returns:\n        wrapper: confirmation if the smc.settings file has been posted already\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        if os.environ.get('stealth_watch_post', '0') == '0':\n            func(*args, **kwargs)\n        else:\n            print(f'{Style.RED}smc.setting file data is already posted to smc server from this machine, so skipping the operation for function {func.__qualname__}{Style.RESET}')\n            print(f'{Style.GREEN}Thank you!{Style.RESET}')\n    return wrapper", "fn_id": 2, "class_fn": false, "repo": "CiscoDevNet/sna-initial-config-setup-script", "file": "utils/misc.py", "last_update_at": "2021-12-23T20:16:15+00:00", "pred": {"ppl": 5.737617015838623, "ppl_lower": 6.417115688323975, "ppl/lowercase_ppl": -1.0640652318076829, "ppl/zlib": 0.005108315702035372, "Min_5.0% Prob": 10.678664843241373, "Min_10.0% Prob": 8.60997846391466, "Min_20.0% Prob": 6.2129616995115535, "Min_30.0% Prob": 4.923270319189344, "Min_40.0% Prob": 4.067204949061076, "Min_50.0% Prob": 3.4103268277137837, "Min_60.0% Prob": 2.896698963061898}}
{"hexsha": "1380364880e72805de31c21c228ab7d9dbd45947", "ext": "py", "lang": "Python", "content": "def update_activity_notice_seed_date_of_notice_earlier_than_update_window(activity_notice_seed):\n    status = ''\n    success = True\n    activity_notice_seed_changed = False\n    from activity.models import get_lifespan_of_seed\n    lifespan_of_seed_in_seconds = get_lifespan_of_seed(activity_notice_seed.kind_of_seed)\n    earliest_date_of_notice = now() - timedelta(seconds=lifespan_of_seed_in_seconds)\n    if activity_notice_seed.date_of_notice < earliest_date_of_notice:\n        try:\n            activity_notice_seed.date_of_notice_earlier_than_update_window = True\n            activity_notice_seed.save()\n            activity_notice_seed_changed = True\n            status += 'DATE_OF_NOTICE_EARLIER_THAN_UPDATE_WINDOW_SET_TRUE '\n        except Exception as e:\n            status += 'COULD_NOT_UPDATE-date_of_notice_earlier_than_update_window: ' + str(e) + ' '\n            success = False\n    results = {'success': success, 'status': status, 'activity_notice_seed': activity_notice_seed, 'activity_notice_seed_changed': activity_notice_seed_changed, 'date_of_notice_earlier_than_update_window': activity_notice_seed.date_of_notice_earlier_than_update_window}\n    return results", "fn_id": 24, "class_fn": false, "repo": "aucoeur/WeVoteServer", "file": "activity/controllers.py", "last_update_at": "2021-03-17T02:08:26+00:00", "pred": {"ppl": 1.9352118968963623, "ppl_lower": 2.062164783477783, "ppl/lowercase_ppl": -1.096240304973531, "ppl/zlib": 0.0016972154959543023, "Min_5.0% Prob": 6.8901497941268115, "Min_10.0% Prob": 5.05700512115772, "Min_20.0% Prob": 3.102381561046992, "Min_30.0% Prob": 2.1706844416693745, "Min_40.0% Prob": 1.6430783659029917, "Min_50.0% Prob": 1.322117815611466, "Min_60.0% Prob": 1.1036899991709976}}
{"hexsha": "6f641f627b8305f23c544478d79bdef1903c7e0c", "ext": "py", "lang": "Python", "content": "def sample_mask(idx, l):\n    \"\"\"Create mask.\"\"\"\n    mask = np.zeros(l)\n    mask[idx] = 1\n    return np.array(mask, dtype=np.bool)", "fn_id": 1, "class_fn": false, "repo": "psychologyphd/HWGCN", "file": "utils.py", "last_update_at": "2021-08-04T09:31:04+00:00", "pred": {"ppl": 1.792746663093567, "ppl_lower": 2.2172582149505615, "ppl/lowercase_ppl": -1.3640649337257533, "ppl/zlib": 0.005405082337452483, "Min_5.0% Prob": 8.678958415985107, "Min_10.0% Prob": 5.490529131889343, "Min_20.0% Prob": 2.924928306043148, "Min_30.0% Prob": 1.9776129448165496, "Min_40.0% Prob": 1.4865302616730331, "Min_50.0% Prob": 1.1903365518152713, "Min_60.0% Prob": 0.9922497785494974}}
{"hexsha": "6f3e2a72a770d5215943ec27b58899302ae9bfa0", "ext": "py", "lang": "Python", "content": "def table_args(model: Base) -> None:\n\n    def create_new_column(column: sa.Column) -> sa.Column:\n        attributes: List[str] = ['name', 'type', 'key', 'primary_key', 'nullable', 'default', 'server_default', 'server_onupdate', 'index', 'unique', 'system', 'doc', 'onupdate', 'autoincrement', 'comment']\n        kwargs: Dict[str, Any] = {a: getattr(column, a, None) for a in attributes}\n        kwargs['type_']: 'TypeEngine' = kwargs.get('type', None)\n        del kwargs['type']\n        return sa.Column(**kwargs)\n    columns: List[sa.Column] = list(map(create_new_column, model.__table__.columns.values()))\n    return (model.__tablename__, *columns)", "fn_id": 0, "class_fn": false, "repo": "h4wldev/seed", "file": "migrations/utils.py", "last_update_at": "2021-06-01T06:23:41+00:00", "pred": {"ppl": 2.7527878284454346, "ppl_lower": 3.186380386352539, "ppl/lowercase_ppl": -1.1444493372856568, "ppl/zlib": 0.0030137326011113867, "Min_5.0% Prob": 6.964359140396118, "Min_10.0% Prob": 5.3889664354778475, "Min_20.0% Prob": 4.079115248861767, "Min_30.0% Prob": 3.1059668792618647, "Min_40.0% Prob": 2.451947796202841, "Min_50.0% Prob": 2.003327290642829, "Min_60.0% Prob": 1.6865581512332908}}
{"hexsha": "fe84bfb3726301394e904f8a5ed253c3c9774c54", "ext": "py", "lang": "Python", "content": "def enlarge_bbox(bbox, im_size, ratio=0.15):\n    width, height = (bbox[2] - bbox[0], bbox[3] - bbox[1])\n    half_width_inc, half_height_inc = ((width * ratio).astype(np.int32), (height * ratio).astype(np.int32))\n    bbox[0], bbox[1], bbox[2], bbox[3] = (bbox[0] - half_width_inc, bbox[1] - half_height_inc, bbox[2] + half_width_inc, bbox[3] + half_height_inc)\n    bbox[0], bbox[1] = (max(bbox[0], 0), max(bbox[1], 0))\n    bbox[3], bbox[2] = (min(bbox[3], im_size[0]), min(bbox[2], im_size[1]))\n    return bbox", "fn_id": 0, "class_fn": false, "repo": "ErestorX/Buddha_alignment", "file": "generate_dataset.py", "last_update_at": "2021-05-10T08:27:46+00:00", "pred": {"ppl": 1.7129346132278442, "ppl_lower": 1.7129346132278442, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002480221417979325, "Min_5.0% Prob": 6.551977694034576, "Min_10.0% Prob": 4.397597139080365, "Min_20.0% Prob": 2.590627705057462, "Min_30.0% Prob": 1.7935723278464542, "Min_40.0% Prob": 1.3429613849244166, "Min_50.0% Prob": 1.0792462830470244, "Min_60.0% Prob": 0.9015217274170497}}
{"hexsha": "13d942d0b49cb364c495b965f3f53cdb29e47d14", "ext": "py", "lang": "Python", "content": "def line_counts_as_uncovered(line: str, is_from_cover_annotation_file: bool) -> bool:\n    \"\"\"\n    Args:\n        line: The line of code (including coverage annotation).\n        is_from_cover_annotation_file: Whether this line has been annotated.\n    Returns:\n        Does the line count as uncovered?\n    \"\"\"\n    if is_from_cover_annotation_file:\n        if not line.startswith('! '):\n            return False\n        content = line[2:]\n    else:\n        content = line\n    content = content.strip()\n    if '#' in content:\n        content = content[:content.index('#')].strip()\n    if any((re.search(pat, content) for pat in IGNORED_LINE_PATTERNS)):\n        return False\n    return is_from_cover_annotation_file or line_content_counts_as_uncovered_manual(content)", "fn_id": 6, "class_fn": false, "repo": "Uzayyy/Cirq", "file": "dev_tools/incremental_coverage.py", "last_update_at": "2021-03-07T19:34:28+00:00", "pred": {"ppl": 3.1397581100463867, "ppl_lower": 3.47375750541687, "ppl/lowercase_ppl": -1.0883550891058338, "ppl/zlib": 0.0033357019298418033, "Min_5.0% Prob": 7.726639140735973, "Min_10.0% Prob": 6.431631781838157, "Min_20.0% Prob": 4.730333460701837, "Min_30.0% Prob": 3.5533267303424725, "Min_40.0% Prob": 2.7893111463431475, "Min_50.0% Prob": 2.2685388486767026, "Min_60.0% Prob": 1.9122525311403853}}
{"hexsha": "3013d6318ebcca79568b59c329de03eb84f3b683", "ext": "py", "lang": "Python", "content": "def save_builtin(img, path):\n    path.parent.mkdir(parents=True, exist_ok=True)\n    img.filepath = str(path).replace('.png', '-builtinsave.png')\n    img.file_format = 'PNG'\n    img.save()\n    log.info(f'wrote {path}')", "fn_id": 0, "class_fn": false, "repo": "drewp/megasecond", "file": "world_export/image.py", "last_update_at": "2021-04-06T07:51:27+00:00", "pred": {"ppl": 3.6206672191619873, "ppl_lower": 4.180239677429199, "ppl/lowercase_ppl": -1.1116926365159319, "ppl/zlib": 0.008143407111009157, "Min_5.0% Prob": 8.651386737823486, "Min_10.0% Prob": 7.2702096700668335, "Min_20.0% Prob": 5.5909204334020615, "Min_30.0% Prob": 3.9908076167106628, "Min_40.0% Prob": 3.165090224056533, "Min_50.0% Prob": 2.545050914088885, "Min_60.0% Prob": 2.1513570534437894}}
{"hexsha": "0322be0d34cfd540d38d08178833c28642a03567", "ext": "py", "lang": "Python", "content": "def MinSpanning(n, m):\n    dt = defaultdict(list)\n    for i in range(m):\n        x, y, w = map(int, input().slpit())\n        dt[x].append([y, w])\n        dt[y].append([x, w])\n    parent = [-1] * n\n    key = [float('inf')] * n\n    mstSet = [False] * n\n    prq = [(0, 0)]\n    key[0] = 0\n    for i in range(n - 1):\n        u = heappop(prq)[1]\n        mstSet[u] = True\n        for x, w in dt[u]:\n            if not mstSet[x] and w < key[x]:\n                parent[x] = u\n                key[x] = w\n                heappush(prq, (key[x], x))", "fn_id": 0, "class_fn": false, "repo": "Saicharan67/Interview-Coding-Questions", "file": "Graphs/MinSpanningTreeByPrims.py", "last_update_at": "2021-11-04T03:30:00+00:00", "pred": {"ppl": 2.0424203872680664, "ppl_lower": 2.0493485927581787, "ppl/lowercase_ppl": -1.0047419765387284, "ppl/zlib": 0.0026646849586217376, "Min_5.0% Prob": 8.46704454421997, "Min_10.0% Prob": 5.717890387489682, "Min_20.0% Prob": 3.351037231988685, "Min_30.0% Prob": 2.3491997784003615, "Min_40.0% Prob": 1.7711751102794742, "Min_50.0% Prob": 1.4294393692931562, "Min_60.0% Prob": 1.1879102193151219}}
{"hexsha": "715d0f56efd10b24b6c396c628f36713f9d9d35a", "ext": "py", "lang": "Python", "content": "def is_frozen():\n    \"\"\"Return a bool indicating if application is compressed\"\"\"\n    import imp\n    return hasattr(sys, 'frozen') or imp.is_frozen('__main__')", "fn_id": 4, "class_fn": false, "repo": "zywek123/accessible_output2", "file": "build/lib/accessible_output2/platform_utils/paths.py", "last_update_at": "2021-11-29T05:20:10+00:00", "pred": {"ppl": 4.0948944091796875, "ppl_lower": 4.248795509338379, "ppl/lowercase_ppl": -1.0261711926663417, "ppl/zlib": 0.011277927453347842, "Min_5.0% Prob": 10.119789123535156, "Min_10.0% Prob": 7.930731201171875, "Min_20.0% Prob": 5.693615198135376, "Min_30.0% Prob": 4.258584650357564, "Min_40.0% Prob": 3.432734650373459, "Min_50.0% Prob": 2.8457621610164643, "Min_60.0% Prob": 2.389186539500952}}
{"hexsha": "9c4f0f1dce62fe32e46d081a9b30a7b8429010c4", "ext": "py", "lang": "Python", "content": "def test_offline_chunked():\n    r = http('--offline', '--chunked', '--form', 'https://this-should.never-resolve/foo', 'hello=world')\n    assert 'POST /foo' in r\n    assert 'Transfer-Encoding: chunked' in r, r\n    assert 'hello=world' in r", "fn_id": 5, "class_fn": false, "repo": "Wallyhs04/httpie", "file": "tests/test_offline.py", "last_update_at": "2021-05-29T14:40:37+00:00", "pred": {"ppl": 4.606982707977295, "ppl_lower": 5.29105281829834, "ppl/lowercase_ppl": -1.090630105406981, "ppl/zlib": 0.009919306055344784, "Min_5.0% Prob": 9.423280954360962, "Min_10.0% Prob": 7.6601444482803345, "Min_20.0% Prob": 5.781329438090324, "Min_30.0% Prob": 4.637317354480426, "Min_40.0% Prob": 3.659303553176649, "Min_50.0% Prob": 3.0098150467000355, "Min_60.0% Prob": 2.5559390053457145}}
{"hexsha": "9c3d586ec62841559008de5a1baefd1f7c1ea4ef", "ext": "py", "lang": "Python", "content": "def parse_logging_lvl(lvl_name: str) -> int:\n    if lvl_name:\n        lvl_name = lvl_name.strip().upper()\n        return logging._nameToLevel.get(lvl_name, logging.INFO)\n    else:\n        return logging.INFO", "fn_id": 0, "class_fn": false, "repo": "ove/ove-asset-manager", "file": "common/util.py", "last_update_at": "2021-06-06T23:01:57+00:00", "pred": {"ppl": 2.507220983505249, "ppl_lower": 3.690364122390747, "ppl/lowercase_ppl": -1.4205403600895499, "ppl/zlib": 0.0071810543897118505, "Min_5.0% Prob": 8.813979943593344, "Min_10.0% Prob": 6.266111442020962, "Min_20.0% Prob": 4.016727490084512, "Min_30.0% Prob": 2.9643735786279044, "Min_40.0% Prob": 2.306034422346524, "Min_50.0% Prob": 1.8245602844076023, "Min_60.0% Prob": 1.535615109860204}}
{"hexsha": "977d85f77545dff9112557fdde20247c847ed065", "ext": "py", "lang": "Python", "content": "@login_required\ndef edit_folder(request, set_id):\n    folder = get_object_or_404(CardFolder, id=set_id)\n    if folder.user != request.user:\n        return redirect('/no_access/')\n    if folder.being_edited:\n        return render(request, 'Cards/folder_being_updated.html', {'folder': folder})\n    if request.method == 'POST':\n        form = FolderForm(request.POST or None, instance=folder)\n        if form.is_valid():\n            folder = form.save(commit=False)\n            folder.being_edited = True\n            folder.save()\n            t = Thread(target=edit_folder_translate, args=[folder])\n            t.setDaemon(False)\n            t.start()\n            enough = len(folder.multicard_set.all()) > 2\n            return render(request, 'Cards/view_set.html', {'folder': folder, 'enough': enough})\n    else:\n        form = FolderForm(instance=folder)\n    return render(request, 'Cards/edit_set.html', {'form': form, 'folder': folder})", "fn_id": 3, "class_fn": false, "repo": "Solurix/Flashcards-Django", "file": "FCards/Cards/views.py", "last_update_at": "2021-05-16T03:20:23+00:00", "pred": {"ppl": 2.1437900066375732, "ppl_lower": 2.6130778789520264, "ppl/lowercase_ppl": -1.2595855102995315, "ppl/zlib": 0.0019403951494818131, "Min_5.0% Prob": 8.70469846044268, "Min_10.0% Prob": 5.911896671567645, "Min_20.0% Prob": 3.476530134677887, "Min_30.0% Prob": 2.4747126265483743, "Min_40.0% Prob": 1.8877989149799472, "Min_50.0% Prob": 1.5178000596905505, "Min_60.0% Prob": 1.2728550719881528}}
{"hexsha": "1767ab96cf054ceb50f317b23720f5c55d829e30", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef fixture_property_typed_multiple_choice_filter():\n    TypedMultipleChoiceFilterModel.objects.create(id=-1, text='1')\n    TypedMultipleChoiceFilterModel.objects.create(id=0, text='One')\n    TypedMultipleChoiceFilterModel.objects.create(id=1, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=2, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=3, text='Not a Number')\n    TypedMultipleChoiceFilterModel.objects.create(id=4, text='3')\n    TypedMultipleChoiceFilterModel.objects.create(id=5, text='3.3')\n    TypedMultipleChoiceFilterModel.objects.create(id=6)\n    global LOOKUP_CHOICES\n    LOOKUP_CHOICES = [(c.text, c.text) for c in TypedMultipleChoiceFilterModel.objects.order_by('id')]\n    LOOKUP_CHOICES.append(('666', '666'))", "fn_id": 0, "class_fn": false, "repo": "ericziethen/django-filter-property", "file": "tests/django_property_filter/filters/test_property_typed_multiple_choice_filter.py", "last_update_at": "2021-11-28T12:02:59+00:00", "pred": {"ppl": 2.1136274337768555, "ppl_lower": 2.3806610107421875, "ppl/lowercase_ppl": -1.1589680046777908, "ppl/zlib": 0.0030547168748828683, "Min_5.0% Prob": 7.936298370361328, "Min_10.0% Prob": 5.894755654864841, "Min_20.0% Prob": 3.5925347010294595, "Min_30.0% Prob": 2.48474053459035, "Min_40.0% Prob": 1.879486178289409, "Min_50.0% Prob": 1.495919802058351, "Min_60.0% Prob": 1.2487179361865142}}
{"hexsha": "ea4d849d98e292e6186433a00e5238e2edf41505", "ext": "py", "lang": "Python", "content": "def test_render(using_temp_config, disabling_caching):\n    scene = SquareToCircle()\n    renderer = scene.renderer\n    renderer.update_frame = Mock(wraps=renderer.update_frame)\n    renderer.add_frame = Mock(wraps=renderer.add_frame)\n    scene.render()\n    assert renderer.add_frame.call_count == config['frame_rate']\n    assert renderer.update_frame.call_count == config['frame_rate']\n    assert_file_exists(config['output_file'])", "fn_id": 0, "class_fn": false, "repo": "fargetan/manim", "file": "tests/test_scene_rendering/test_cairo_renderer.py", "last_update_at": "2021-07-17T04:09:59+00:00", "pred": {"ppl": 3.06441068649292, "ppl_lower": 3.6940715312957764, "ppl/lowercase_ppl": -1.1668733186573006, "ppl/zlib": 0.005742847584399859, "Min_5.0% Prob": 8.971320867538452, "Min_10.0% Prob": 6.931163237645076, "Min_20.0% Prob": 4.793626454141405, "Min_30.0% Prob": 3.5110209017265133, "Min_40.0% Prob": 2.7402869538827375, "Min_50.0% Prob": 2.2325335021900092, "Min_60.0% Prob": 1.8709987263722592}}
{"hexsha": "5479d7749b7f0f4c38907d23268688673d78cc7e", "ext": "py", "lang": "Python", "content": "def save():\n    website = website_e.get()\n    email = email_e.get()\n    password = password_e.get()\n    new_data = {website.upper(): {'email': email, 'password': password}}\n    if len(website) == 0 or len(password) == 0:\n        messagebox.showinfo(title='Oops!', message=\"Please don't leave any fields empty!!\")\n    else:\n        out = messagebox.askokcancel(title=website, message=f'These are the details entered: \\nEmail: {email}\\nPassword: {password} \\nDo you wish to proceed with these details?\\n\\n Note: If you want to update a new password for an existing website,also click OK\\n Else cancel the operation and search for the existing password!')\n        if out:\n            try:\n                with open('data.json', 'r') as data_file:\n                    data = json.load(data_file)\n            except FileNotFoundError:\n                with open('data.json', 'w') as data_file:\n                    json.dump(new_data, data_file, indent=4)\n            else:\n                data.update(new_data)\n                with open('data.json', 'w') as data_file:\n                    json.dump(data, data_file, indent=4)\n            finally:\n                messagebox.showinfo(title=website, message='Password saved successfully!')\n                website_e.delete(0, END)\n                password_e.delete(0, END)", "fn_id": 2, "class_fn": false, "repo": "SrihariMurali01/Password-manager", "file": "main.py", "last_update_at": "2021-12-21T18:17:28+00:00", "pred": {"ppl": 2.3541927337646484, "ppl_lower": 2.4693827629089355, "ppl/lowercase_ppl": -1.0557935804885765, "ppl/zlib": 0.001612425386991963, "Min_5.0% Prob": 7.146611187193129, "Min_10.0% Prob": 5.439068423377143, "Min_20.0% Prob": 3.696190708304105, "Min_30.0% Prob": 2.7390533975504954, "Min_40.0% Prob": 2.116574964600883, "Min_50.0% Prob": 1.7052269770758726, "Min_60.0% Prob": 1.428710878482216}}
{"hexsha": "293907725bd25c3293fb9246b3cf2af13bae51d7", "ext": "py", "lang": "Python", "content": "@app.route('/getNotifications', methods=['GET'])\ndef getNotifications():\n    page = request.args.get('page', default=1, type=int)\n    limit = request.args.get('limit', default=25, type=int)\n    data = rdb.getNotifications(page, limit)\n    return jsonify(data)", "fn_id": 10, "class_fn": false, "repo": "naztronaut/easyUptime", "file": "upService.py", "last_update_at": "2021-05-05T06:29:10+00:00", "pred": {"ppl": 2.275012254714966, "ppl_lower": 2.512051582336426, "ppl/lowercase_ppl": -1.1205791963903853, "ppl/zlib": 0.0051054996215919414, "Min_5.0% Prob": 7.296114444732666, "Min_10.0% Prob": 5.840158671140671, "Min_20.0% Prob": 3.7468500919640064, "Min_30.0% Prob": 2.5829901909828186, "Min_40.0% Prob": 2.024575866081498, "Min_50.0% Prob": 1.6198161560155095, "Min_60.0% Prob": 1.373433076441288}}
{"hexsha": "6d928cb5cd52bb854817785ae392fcb7dd1a50d7", "ext": "py", "lang": "Python", "content": "def test_eds_plugins_built_property():\n    e = Event(False, True, 'url', 'project_name', 'project_version')\n    assert e.eds_plugins_built\n    e = Event(True, False, 'url', 'project_name', 'project_version')\n    assert not e.eds_plugins_built", "fn_id": 1, "class_fn": false, "repo": "jleopold28/eds", "file": "tests/test_event.py", "last_update_at": "2021-12-06T13:21:15+00:00", "pred": {"ppl": 4.6215901374816895, "ppl_lower": 5.1690263748168945, "ppl/lowercase_ppl": -1.073131689691495, "ppl/zlib": 0.012245910651819744, "Min_5.0% Prob": 10.321493148803711, "Min_10.0% Prob": 8.530641896384102, "Min_20.0% Prob": 6.139979076385498, "Min_30.0% Prob": 4.6182622028433755, "Min_40.0% Prob": 3.6713226610614407, "Min_50.0% Prob": 3.020108157243484, "Min_60.0% Prob": 2.591161731792533}}
{"hexsha": "2aa04fe50cb3ff88be7ef0d11bebb4e8eabb4c12", "ext": "py", "lang": "Python", "content": "def _h(y):\n\n    def foo(x):\n        \"\"\"funcdoc\"\"\"\n        return [x + z for z in y]\n    return foo", "fn_id": 3, "class_fn": false, "repo": "QZLin/nogil", "file": "Lib/test/test_dis.py", "last_update_at": "2021-11-19T02:20:24+00:00", "pred": {"ppl": 8.273679733276367, "ppl_lower": 8.273679733276367, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.027803675785329968, "Min_5.0% Prob": 9.446577072143555, "Min_10.0% Prob": 7.969772974650065, "Min_20.0% Prob": 6.529355730329241, "Min_30.0% Prob": 5.687801512804898, "Min_40.0% Prob": 5.112774729728699, "Min_50.0% Prob": 4.159070726897982, "Min_60.0% Prob": 3.4898955916816536}}
{"hexsha": "be2ff543f0b705a68df4d91c081b06d11c31d754", "ext": "py", "lang": "Python", "content": "def LogSquad_Damage(data_str, server_id):\n    matchObj = re.search('[([0-9.:-]+]\\\\[([ 0-9]*)]LogSquad: Player:(.*) ActualDamage=(\\\\d+(\\\\.\\\\d+)?) from (.*) caused by (.*).*', data_str, re.M | re.I)\n    date_time = datetime.datetime.strptime(matchObj.group(0).split('[')[1].split(']')[0], '%Y.%m.%d-%H.%M.%S:%f')\n    date_time_n = (date_time + datetime.timedelta(hours=8)).strftime('%Y.%m.%d-%H.%M.%S:%f')\n    date = date_time_n.split('-')[0]\n    time = date_time_n.split('-')[1]\n    Player_take_damage = matchObj.group(2)\n    Damage = matchObj.group(3)\n    Player_make_damage = matchObj.group(5)\n    Weapon = matchObj.group(6).split('_C_')[0]\n    return (date, time, str(Player_take_damage), str(Damage), str(Player_make_damage), str(Weapon), server_id)\n    pass", "fn_id": 0, "class_fn": false, "repo": "ChenjianS47/SquadPy", "file": "Core/Log_Plugins/LogSquad_Damage.py", "last_update_at": "2021-09-27T07:32:32+00:00", "pred": {"ppl": 2.7401809692382812, "ppl_lower": 3.1582889556884766, "ppl/lowercase_ppl": -1.1408760612072268, "ppl/zlib": 0.002792310153424423, "Min_5.0% Prob": 7.668218016624451, "Min_10.0% Prob": 6.227363933216441, "Min_20.0% Prob": 4.3473438981807595, "Min_30.0% Prob": 3.198987622453709, "Min_40.0% Prob": 2.4723898361724124, "Min_50.0% Prob": 2.0074234842715493, "Min_60.0% Prob": 1.683656411516906}}
{"hexsha": "fea44362f63483b4569ec189eda480b3e3b01e26", "ext": "py", "lang": "Python", "content": "def QA_save_tdx_to_mongo(file_dir, client=DATABASE):\n    reader = TdxMinBarReader()\n    __coll = client.stock_min_five\n    for a, v, files in os.walk(file_dir):\n        for file in files:\n            if str(file)[0:2] == 'sh' and int(str(file)[2]) == 6 or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 0) or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 3):\n                QA_util_log_info('Now_saving ' + str(file)[2:8] + \"'s 5 min tick\")\n                fname = file_dir + os.sep + file\n                df = reader.get_df(fname)\n                df['code'] = str(file)[2:8]\n                df['market'] = str(file)[0:2]\n                df['datetime'] = [str(x) for x in list(df.index)]\n                df['date'] = [str(x)[0:10] for x in list(df.index)]\n                df['time_stamp'] = df['datetime'].apply(lambda x: QA_util_time_stamp(x))\n                df['date_stamp'] = df['date'].apply(lambda x: QA_util_date_stamp(x))\n                data_json = json.loads(df.to_json(orient='records'))\n                __coll.insert_many(data_json)", "fn_id": 0, "class_fn": false, "repo": "liujiannong/QUANTAXIS", "file": "QUANTAXIS/QASU/save_tdx_file.py", "last_update_at": "2021-04-01T08:59:46+00:00", "pred": {"ppl": 2.561739683151245, "ppl_lower": 2.714043140411377, "ppl/lowercase_ppl": -1.0613943750217374, "ppl/zlib": 0.0022081844869097414, "Min_5.0% Prob": 7.42281070508455, "Min_10.0% Prob": 5.7510225396407275, "Min_20.0% Prob": 4.03297307616786, "Min_30.0% Prob": 2.988254977422848, "Min_40.0% Prob": 2.313371918852033, "Min_50.0% Prob": 1.8739193302447572, "Min_60.0% Prob": 1.5690263292007962}}
{"hexsha": "9d3c3cf62b10c24e35584ee9f62074dd84ba8c6b", "ext": "py", "lang": "Python", "content": "def preprocess_prices(df_prices: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Preprocessing of price dataframe. Get latest available price.\n    :param df_prices: Needed columns: ISIN, Price, Datum, Currency\n    :return: dataframe containing prices of stocks defined by ISIN on latest available date\n    \"\"\"\n    dfp = df_prices.copy()\n    assert dfp['Currency'].drop_duplicates().count() == 1, 'Multiple currencies used for price data!'\n    assert dfp['Currency'].iloc[0] == 'EUR', 'Currency is not Euro!'\n    dfp['Date'] = pd.to_datetime(dfp['Date'], format='%d.%m.%Y')\n    latest_date = dfp['Date'].max()\n    df_current_prices = dfp[dfp['Date'] == latest_date].reset_index(drop=True)\n    return df_current_prices", "fn_id": 5, "class_fn": false, "repo": "christophpernul/personal-finance-dashboard", "file": "lib_data_operations.py", "last_update_at": "2021-02-19T15:27:06+00:00", "pred": {"ppl": 2.8733034133911133, "ppl_lower": 3.3288917541503906, "ppl/lowercase_ppl": -1.1394432065334048, "ppl/zlib": 0.002852601035082017, "Min_5.0% Prob": 7.968587268482555, "Min_10.0% Prob": 5.853545147439708, "Min_20.0% Prob": 4.173190666281658, "Min_30.0% Prob": 3.2114777115808018, "Min_40.0% Prob": 2.5655706456821896, "Min_50.0% Prob": 2.0820160458057093, "Min_60.0% Prob": 1.7528914806546925}}
{"hexsha": "178e3d96179baff608652d760ff54f1c5c188588", "ext": "py", "lang": "Python", "content": "def get_phonopy_options(postprocess_parameters):\n    \"\"\"Return phonopy command option strings.\"\"\"\n    mesh_opts = []\n    if 'mesh' in postprocess_parameters:\n        mesh = postprocess_parameters['mesh']\n        try:\n            length = float(mesh)\n            mesh_opts.append('--mesh=%f' % length)\n        except TypeError:\n            mesh_opts.append('--mesh=\"%d %d %d\"' % tuple(mesh))\n        mesh_opts.append('--nowritemesh')\n    fc_opts = []\n    if 'fc_calculator' in postprocess_parameters:\n        if postprocess_parameters['fc_calculator'].lower().strip() == 'alm':\n            fc_opts.append('--alm')\n    return (mesh_opts, fc_opts)", "fn_id": 4, "class_fn": false, "repo": "atztogo/aiida-phonopy", "file": "aiida_phonopy/common/file_generators.py", "last_update_at": "2021-12-18T03:05:40+00:00", "pred": {"ppl": 2.524864673614502, "ppl_lower": 2.7471859455108643, "ppl/lowercase_ppl": -1.0911150620888723, "ppl/zlib": 0.00341766592871942, "Min_5.0% Prob": 8.128739166259766, "Min_10.0% Prob": 6.261521220207214, "Min_20.0% Prob": 4.122575399279595, "Min_30.0% Prob": 3.004514306783676, "Min_40.0% Prob": 2.307137400470674, "Min_50.0% Prob": 1.8414256983980684, "Min_60.0% Prob": 1.5428129474917227}}
{"hexsha": "b087ca6dbcea8e5a3be1946bdd709bb2ed25f366", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('factory', [lambda x: list(x), lambda x: MultiDict(x), lambda x: MultiDictProxy(MultiDict(x))])\ndef test_multi_dict_multidict_less_keys_substitution(factory: Callable):\n    with given:\n        sch = schema_multi_dict([('id', schema.int), ('name', schema.str)])\n    with when:\n        res = substitute(sch, factory([('id', 1)]))\n    with then:\n        assert res == schema_multi_dict([('id', schema.int(1)), ('name', schema.str)])\n        assert res != sch", "fn_id": 5, "class_fn": false, "repo": "nikitanovosibirsk/district42-exp-types", "file": "tests/multi_dict/substitutor/test_multi_dict_multidict_substitutor.py", "last_update_at": "2021-08-01T10:06:28+00:00", "pred": {"ppl": 3.2685115337371826, "ppl_lower": 3.4954326152801514, "ppl/lowercase_ppl": -1.0566752429094723, "ppl/zlib": 0.005126990012207227, "Min_5.0% Prob": 8.808229446411133, "Min_10.0% Prob": 6.8410588582356775, "Min_20.0% Prob": 4.830062258628107, "Min_30.0% Prob": 3.6126094650714955, "Min_40.0% Prob": 2.889929081163099, "Min_50.0% Prob": 2.346058675302909, "Min_60.0% Prob": 1.9670540355145931}}
{"hexsha": "f04872eed07d871c244788341ce7469a3e8c2ec3", "ext": "py", "lang": "Python", "content": "def get_random_vals(mean_vel):\n    init_v = 20 + np.random.choice(range(-5, 5))\n    action_magnitute = np.random.uniform(-3, 3)\n    action_freq = np.random.uniform(0.02, 0.06)\n    return (init_v, action_magnitute, action_freq)", "fn_id": 3, "class_fn": false, "repo": "saArbabi/sim", "file": "src/exploratory_experiments/_data_generator.py", "last_update_at": "2021-03-26T15:28:31+00:00", "pred": {"ppl": 4.08821964263916, "ppl_lower": 4.08821964263916, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009986592766581587, "Min_5.0% Prob": 8.36042869091034, "Min_10.0% Prob": 7.152610566880968, "Min_20.0% Prob": 5.198092084181936, "Min_30.0% Prob": 4.11456769088219, "Min_40.0% Prob": 3.3777755985134528, "Min_50.0% Prob": 2.7681173278639712, "Min_60.0% Prob": 2.325341178425427}}
{"hexsha": "539c6e5edfed9d87bb33e2513733ff5fcbd5e916", "ext": "py", "lang": "Python", "content": "def _make_dagster_event(event_type: DagsterEventType, pipeline_name: str, step_key: str):\n    event_specific_data = None\n    if event_type == DagsterEventType.STEP_SUCCESS:\n        event_specific_data = StepSuccessData(duration_ms=1.0)\n    elif event_type == DagsterEventType.STEP_FAILURE:\n        event_specific_data = StepFailureData(error=None, user_failure_data=None)\n    return DagsterEvent(event_type.value, pipeline_name, step_key=step_key, event_specific_data=event_specific_data)", "fn_id": 1, "class_fn": false, "repo": "denimalpaca/OpenLineage", "file": "integration/dagster/tests/conftest.py", "last_update_at": "2021-12-03T17:00:00+00:00", "pred": {"ppl": 1.7489361763000488, "ppl_lower": 2.4617016315460205, "ppl/lowercase_ppl": -1.61152131675546, "ppl/zlib": 0.0025067610037338064, "Min_5.0% Prob": 6.14123210310936, "Min_10.0% Prob": 4.484071597456932, "Min_20.0% Prob": 2.714393594302237, "Min_30.0% Prob": 1.866273012322684, "Min_40.0% Prob": 1.4119014883763157, "Min_50.0% Prob": 1.117509091005626, "Min_60.0% Prob": 0.9335185141427461}}
{"hexsha": "8e050af63a97f4a7f86ee722501d806903d052be", "ext": "py", "lang": "Python", "content": "def test_clip_lines(two_line_gdf, single_rectangle_gdf):\n    \"\"\"Test what happens when you give the clip_extent a line GDF.\"\"\"\n    clip_line = cl.clip_shp(two_line_gdf, single_rectangle_gdf)\n    assert len(clip_line.geometry) == 2", "fn_id": 19, "class_fn": false, "repo": "jlpalomino/earthpy", "file": "earthpy/tests/test_clip.py", "last_update_at": "2021-01-02T02:32:41+00:00", "pred": {"ppl": 5.046841621398926, "ppl_lower": 5.282499313354492, "ppl/lowercase_ppl": -1.0281923449813526, "ppl/zlib": 0.010937585311651976, "Min_5.0% Prob": 9.416547536849976, "Min_10.0% Prob": 8.50722074508667, "Min_20.0% Prob": 6.330556362867355, "Min_30.0% Prob": 4.787305254936218, "Min_40.0% Prob": 3.888023585984201, "Min_50.0% Prob": 3.1680348245870498, "Min_60.0% Prob": 2.696177494227886}}
{"hexsha": "cab40a1d1240c5bed8edb2cf223d0f234868dfd0", "ext": "py", "lang": "Python", "content": "def daily_mean(data):\n    \"\"\"Calculate the daily mean of a 2D inflammation data array.\n\n    :param data: A 2D data array with inflammation data (each row contains measurements for a single patient across all days).\n    :returns: An array of mean values of measurements for each day.\n    \"\"\"\n    return np.mean(data, axis=0)", "fn_id": 1, "class_fn": false, "repo": "raphaelshirley/python-intermediate-inflammation-1", "file": "inflammation/models.py", "last_update_at": "2021-12-10T12:28:49+00:00", "pred": {"ppl": 4.415196418762207, "ppl_lower": 4.796065330505371, "ppl/lowercase_ppl": -1.055717590344476, "ppl/zlib": 0.007500264252662531, "Min_5.0% Prob": 9.622601866722107, "Min_10.0% Prob": 7.370968163013458, "Min_20.0% Prob": 5.305796104318955, "Min_30.0% Prob": 4.155885682656215, "Min_40.0% Prob": 3.3791086997304642, "Min_50.0% Prob": 2.8452185920693656, "Min_60.0% Prob": 2.4352534806953288}}
{"hexsha": "bc9cb89c9de7c8845a3f7858c2bf081cca88afc4", "ext": "py", "lang": "Python", "content": "def main():\n    parser = argparse.ArgumentParser()\n    default_url = 'https://search.api.hubmapconsortium.org/portal/search'\n    parser.add_argument('--url', default=default_url, help=f'ES endpoint. Default: {default_url}')\n    default_size = 20\n    parser.add_argument('--size', type=int, default=default_size, help=f'Number of records to pull. Default: {default_size}')\n    default_type = 'Dataset'\n    parser.add_argument('--type', default=default_type, help=f'Entity type to query. Default: {default_type}')\n    args = parser.parse_args()\n    query = {'post_filter': {'term': {'entity_type.keyword': args.type}}, 'size': args.size, '_source': ['metadata.metadata' if args.type == 'Dataset' else 'metadata']}\n    response = requests.post(args.url, json=query)\n    hits = response.json()['hits']['hits']\n    writer = DictWriter(sys.stdout, fieldnames=['uuid', 'assay_type', 'field', 'value'], extrasaction='ignore')\n    writer.writeheader()\n    for hit in hits:\n        uuid = hit['_id']\n        if 'metadata' not in hit['_source']:\n            continue\n        meta = hit['_source']['metadata']\n        if 'metadata' in meta:\n            meta = meta['metadata']\n        for field, value in meta.items():\n            if not re.search('[A-Za-z]', value):\n                continue\n            writer.writerow({'uuid': uuid, 'assay_type': meta['assay_type'] if 'assay_type' in meta else 'Sample', 'field': field, 'value': value})\n    assert len(hits) < args.size, f'Result truncated at {args.size}'\n    return 0", "fn_id": 0, "class_fn": false, "repo": "lukasz-migas/ingest-validation-tools", "file": "src/generate_field_values_csv.py", "last_update_at": "2021-03-17T20:48:41+00:00", "pred": {"ppl": 1.9728353023529053, "ppl_lower": 2.123417615890503, "ppl/lowercase_ppl": -1.1082533984190073, "ppl/zlib": 0.0010534445702481618, "Min_5.0% Prob": 6.31530065121858, "Min_10.0% Prob": 4.685019848194528, "Min_20.0% Prob": 3.0607879206221154, "Min_30.0% Prob": 2.2060067467655697, "Min_40.0% Prob": 1.6883536302583648, "Min_50.0% Prob": 1.3536987328523045, "Min_60.0% Prob": 1.1316881837527344}}
