{"hexsha": "07bea0dee804f4a3dd1cb8de837a2c6f9ce9c771", "ext": "py", "lang": "Python", "content": "def pretty_print_post(url: str):\n    try:\n        text = parse_post(url)\n    except api2ch.Api2chError as e:\n        print('Request Error', e.code, e.reason)\n    else:\n        print(text)", "fn_id": 1, "class_fn": false, "repo": "uburuntu/api2ch", "file": "examples/complex.py", "last_update_at": "2021-07-26T09:40:57+00:00", "pred": {"ppl": 7.008509159088135, "ppl_lower": 8.373486518859863, "ppl/lowercase_ppl": -1.0913887612687314, "ppl/zlib": 0.014977884653649147, "Min_5.0% Prob": 11.730396747589111, "Min_10.0% Prob": 9.766225910186767, "Min_20.0% Prob": 7.438400441950018, "Min_30.0% Prob": 5.757796091191909, "Min_40.0% Prob": 4.803014869039709, "Min_50.0% Prob": 3.9160282579915866, "Min_60.0% Prob": 3.250813742332599}}
{"hexsha": "6c31f616e579c190b006f0e8ba4f595d892ad988", "ext": "py", "lang": "Python", "content": "@card('Braids, Cabal Minion')\ndef braids_cabal_minion(card, abilities):\n\n    def braids_cabal_minion():\n        return AbilityNotImplemented\n    return (braids_cabal_minion,)", "fn_id": 28, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/odyssey.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 4.539929389953613, "ppl_lower": 12.442599296569824, "ppl/lowercase_ppl": -1.6664068455949037, "ppl/zlib": 0.013388596982819963, "Min_5.0% Prob": 14.95272445678711, "Min_10.0% Prob": 10.917271614074707, "Min_20.0% Prob": 7.248152190988714, "Min_30.0% Prob": 5.185141419991851, "Min_40.0% Prob": 3.7804838931611315, "Min_50.0% Prob": 3.0815947012441165, "Min_60.0% Prob": 2.5215033151705}}
{"hexsha": "fc7e94a2224575fc9faaa120b95dfa7c40d2f253", "ext": "py", "lang": "Python", "content": "def test_extended_projection(ra_module):\n    initial_set = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'y'), [(7, 8), (9, 2)])\n    expected_sum = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(15,), (11,)])\n    expected_lambda = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(14,), (10,)])\n    expected_lambda2 = ra_module.NamedRelationalAlgebraFrozenSet(('z', 'x'), [(14, 8), (10, 10)])\n    expected_new_colum_str = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'z'), [(7, 'a'), (9, 'a')])\n    expected_new_colum_int = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(1,), (1,)])\n    new_set = initial_set.extended_projection({'z': sum})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': ra_module.RelationalAlgebraStringExpression('x+y')})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1})\n    assert expected_lambda == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1, 'x': ra_module.RelationalAlgebraStringExpression('x+1')})\n    assert expected_lambda2 == new_set\n    new_set = initial_set.extended_projection({'z': 'a', 'x': ra_module.RelationalAlgebraStringExpression('x')})\n    assert expected_new_colum_str == new_set\n    new_set = initial_set.extended_projection({'z': 1})\n    assert expected_new_colum_int == new_set\n    new_set = initial_set.extended_projection({'x': ra_module.RelationalAlgebraColumnStr('x')})\n    assert initial_set.projection('x') == new_set\n    base_set = ra_module.NamedRelationalAlgebraFrozenSet((1, 2), [(7, 8), (9, 2)])\n    new_set = base_set.extended_projection({'x': ra_module.RelationalAlgebraColumnInt(1), 'y': ra_module.RelationalAlgebraColumnInt(2)})\n    assert initial_set == new_set", "fn_id": 31, "class_fn": false, "repo": "demianw/NeuroLang", "file": "neurolang/utils/tests/test_relational_algebra_set.py", "last_update_at": "2021-07-02T09:06:30+00:00", "pred": {"ppl": 2.086622714996338, "ppl_lower": 2.2518222332000732, "ppl/lowercase_ppl": -1.1035867919069045, "ppl/zlib": 0.001935649560845449, "Min_5.0% Prob": 7.7633035447862415, "Min_10.0% Prob": 5.797606689279729, "Min_20.0% Prob": 3.560394191527152, "Min_30.0% Prob": 2.436766564712196, "Min_40.0% Prob": 1.8373256707689287, "Min_50.0% Prob": 1.4705787319823511, "Min_60.0% Prob": 1.2287602896373762}}
{"hexsha": "b41186cab3d777d1b3f6deea4852d5203576ebc3", "ext": "py", "lang": "Python", "content": "def say(text):\n    hash = hashlib.md5(text.encode()).hexdigest()\n    file = 'speech-cache/{}.wav'.format(hash)\n    cmd = 'play {}'.format(file)\n    if not os.path.isfile(file):\n        cmd = 'pico2wave -w {} \"{}\" && {}'.format(file, text, cmd)\n    os.system(cmd)", "fn_id": 3, "class_fn": false, "repo": "yousefamar/sanctum", "file": "sanctum.py", "last_update_at": "2021-01-17T00:14:06+00:00", "pred": {"ppl": 3.134260654449463, "ppl_lower": 3.134260654449463, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006603429539710619, "Min_5.0% Prob": 9.348240494728088, "Min_10.0% Prob": 7.146944522857666, "Min_20.0% Prob": 5.003673897070043, "Min_30.0% Prob": 3.788274703025818, "Min_40.0% Prob": 2.8462148374494385, "Min_50.0% Prob": 2.310305362456434, "Min_60.0% Prob": 1.9037652321287668}}
{"hexsha": "efba18d12458eb11af1a1ce332ee1fe30fca6aa2", "ext": "py", "lang": "Python", "content": "def stft(sig, frameSize=FRAMESIZE, overlapFac=OVERLAP, window=np.hanning):\n    hop = int(frameSize - np.floor(overlapFac * frameSize))\n    w = np.sqrt(window(frameSize))\n    out = np.array([np.fft.rfft(w * sig[i:i + frameSize]) for i in range(0, len(sig) - frameSize, hop)])\n    out = np.abs(out)\n    out -= np.mean(out)\n    return out", "fn_id": 0, "class_fn": false, "repo": "glkuzi/CountMTS", "file": "DataGenerator.py", "last_update_at": "2021-07-22T03:45:54+00:00", "pred": {"ppl": 2.2822632789611816, "ppl_lower": 2.398552894592285, "ppl/lowercase_ppl": -1.0602277368754878, "ppl/zlib": 0.003948170415359336, "Min_5.0% Prob": 8.534172821044923, "Min_10.0% Prob": 5.969525597312233, "Min_20.0% Prob": 3.850752195586329, "Min_30.0% Prob": 2.698701348900795, "Min_40.0% Prob": 2.0541099619041097, "Min_50.0% Prob": 1.647131113430201, "Min_60.0% Prob": 1.390252667612263}}
{"hexsha": "3daf2b90efe24d08876eb33fa7e809886b79aacb", "ext": "py", "lang": "Python", "content": "def write_float_list():\n    global result\n    with open('result_shared_memory.txt', 'w') as f:\n        f.write(str(result))\n        f.close()", "fn_id": 7, "class_fn": false, "repo": "alansouls/interop-pysharp", "file": "proof_of_concept/python/text_transfer/connector_file.py", "last_update_at": "2021-05-22T22:37:44+00:00", "pred": {"ppl": 6.697742462158203, "ppl_lower": 6.697742462158203, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.017288822942466756, "Min_5.0% Prob": 10.820318222045898, "Min_10.0% Prob": 9.300847291946411, "Min_20.0% Prob": 7.558004647493362, "Min_30.0% Prob": 5.883989195028941, "Min_40.0% Prob": 4.648069866001606, "Min_50.0% Prob": 3.831001016497612, "Min_60.0% Prob": 3.229995301614205}}
{"hexsha": "e13fa130c6f556d3b69fbf1da32dc9e4fc944723", "ext": "py", "lang": "Python", "content": "def report():\n    value = grp.value\n    try:\n        say(labels[value], 'selected')\n    except (TypeError, IndexError):\n        say('Value =', value)", "fn_id": 0, "class_fn": false, "repo": "gcewing/PyGUI", "file": "Tests/07-radiogroup.py", "last_update_at": "2021-11-24T19:50:02+00:00", "pred": {"ppl": 25.753725051879883, "ppl_lower": 33.8194694519043, "ppl/lowercase_ppl": -1.0838697023212212, "ppl/zlib": 0.028748489193416854, "Min_5.0% Prob": 14.662408828735352, "Min_10.0% Prob": 12.880542437235514, "Min_20.0% Prob": 10.59789752960205, "Min_30.0% Prob": 9.216845035552979, "Min_40.0% Prob": 7.673385398728507, "Min_50.0% Prob": 6.313416421413422, "Min_60.0% Prob": 5.5016474695432755}}
{"hexsha": "d5c45875560e75035fb70d3ac4fa58d21599d27d", "ext": "py", "lang": "Python", "content": "def test_vsi_path_zip_plus_https():\n    \"\"\"A zip+https:// URLs vsi path is correct (see #1151)\"\"\"\n    url = 'zip+https://example.com/foo.zip!bar.tif'\n    assert vsi_path(parse_path(url)) == '/vsizip/vsicurl/https://example.com/foo.zip/bar.tif'", "fn_id": 16, "class_fn": false, "repo": "CloudNiner/rasterio", "file": "tests/test_path.py", "last_update_at": "2021-09-16T00:44:50+00:00", "pred": {"ppl": 5.540754795074463, "ppl_lower": 5.563215255737305, "ppl/lowercase_ppl": -1.0023628385174117, "ppl/zlib": 0.010503869546484777, "Min_5.0% Prob": 9.826686143875122, "Min_10.0% Prob": 8.178893036312527, "Min_20.0% Prob": 6.535345872243245, "Min_30.0% Prob": 5.208447712439078, "Min_40.0% Prob": 4.253721056712998, "Min_50.0% Prob": 3.412578651762527, "Min_60.0% Prob": 2.8618083177303726}}
{"hexsha": "995e126c50514275c11a5e83f7c9eaa1aa63e240", "ext": "py", "lang": "Python", "content": "def timestamp_unpack(seconds, timedelta=datetime.timedelta, relative_to=pg_epoch_datetime.__add__):\n    \"\"\"\n\tCreate a `datetime.datetime` instance from a (seconds, microseconds) pair.\n\t\"\"\"\n    return relative_to(timedelta(0, *seconds))", "fn_id": 1, "class_fn": false, "repo": "autolog/TRV_Controller", "file": "TRV.indigoPlugin/Contents/Server Plugin/postgresql/types/io/stdlib_datetime.py", "last_update_at": "2021-02-03T16:31:26+00:00", "pred": {"ppl": 12.886674880981445, "ppl_lower": 14.552340507507324, "ppl/lowercase_ppl": -1.047554303860817, "ppl/zlib": 0.01692843591085629, "Min_5.0% Prob": 14.546614646911621, "Min_10.0% Prob": 11.550944487253824, "Min_20.0% Prob": 9.045188705126444, "Min_30.0% Prob": 7.442901425891453, "Min_40.0% Prob": 5.988323616981506, "Min_50.0% Prob": 5.06768262194049, "Min_60.0% Prob": 4.325098575772466}}
{"hexsha": "6f8e9b82a7e7f7ef2e5696e6e11a9da88873c108", "ext": "py", "lang": "Python", "content": "@app.route('/ext/<api_key>/new_session/<session_name>', methods=['POST'])\ndef ext_create_new_session_name(api_key, session_name):\n    logging.debug('EXTERNAL: Create new Session with name')\n    db = Database()\n    user = db.get_user_by_api_key(api_key)\n    if user is None:\n        return (\"Provided API key ('{}') is not associated with any registered user\".format(api_key), HTTPStatus.UNAUTHORIZED.value)\n    if db.does_session_name_exist(session_name):\n        return (\"Provided session name ('{}') already exists\".format(session_name), HTTPStatus.UNAUTHORIZED.value)\n    logging.debug('Creating new session: %s (userid: %s)', session_name, user['user_id'])\n    session_id = db.create_session(session_name, user['user_id'])\n    logging.debug('New session id: %s', session_id)\n    set_current_session(session_id, session_name)\n    return \"New Session ID: '{}'\".format(session_id)", "fn_id": 2, "class_fn": false, "repo": "Samiasa/UsabilityConsole", "file": "console/routes/external.py", "last_update_at": "2021-06-07T17:15:42+00:00", "pred": {"ppl": 2.9081945419311523, "ppl_lower": 3.2604644298553467, "ppl/lowercase_ppl": -1.107104183476749, "ppl/zlib": 0.0026037376983159876, "Min_5.0% Prob": 8.270743449529013, "Min_10.0% Prob": 6.710216751098633, "Min_20.0% Prob": 4.742449357509613, "Min_30.0% Prob": 3.440236307680607, "Min_40.0% Prob": 2.6593649785707494, "Min_50.0% Prob": 2.1307813242723155, "Min_60.0% Prob": 1.7834283321526048}}
{"hexsha": "3b40f31f9e2306102a844f470092207c102189e3", "ext": "py", "lang": "Python", "content": "@pb.route('/detail/<id>', methods=['GET', 'POST'])\ndef single_product(id):\n    product = Product.query.filter_by(id=id).first()\n    if product.out_of_stock == True:\n        status = 'Sold Out'\n    else:\n        status = 'In stock'\n    data = {'id': product.id, 'name': product.name, 'img_url': product.img_url, 'description': product.description, 'seller': User.query.filter_by(id=product.seller_id).first().name, 'seller_id': product.seller_id, 'created': product.created, 'price': product.price, 'status': status, 'seller_img': User.query.filter_by(id=product.seller_id).first().avatar_url}\n    return jsonify(data)", "fn_id": 3, "class_fn": false, "repo": "sori9088/mealplan-server", "file": "app/components/product/__init__.py", "last_update_at": "2021-06-02T00:44:12+00:00", "pred": {"ppl": 2.2508950233459473, "ppl_lower": 2.552272081375122, "ppl/lowercase_ppl": -1.1548770177518417, "ppl/zlib": 0.0027785202920320227, "Min_5.0% Prob": 8.061424414316813, "Min_10.0% Prob": 6.317217613521375, "Min_20.0% Prob": 3.9297232125934802, "Min_30.0% Prob": 2.6975004870379182, "Min_40.0% Prob": 2.0339601858715084, "Min_50.0% Prob": 1.6301157735092076, "Min_60.0% Prob": 1.3591073845153707}}
{"hexsha": "fe240d6eafcfe9043656fc61dbcdc36afa2f5d4c", "ext": "py", "lang": "Python", "content": "def get_feature(internel_layer, layers, filters, batch_norm=False):\n    \"\"\"Get VGG feature body as stacks of convoltions.\"\"\"\n    for i, num in enumerate(layers):\n        for j in range(num):\n            internel_layer = sym.conv2d(data=internel_layer, kernel_size=(3, 3), padding=(1, 1), channels=filters[i], name='conv%s_%s' % (i + 1, j + 1))\n            if batch_norm:\n                internel_layer = sym.batch_norm(data=internel_layer, name='bn%s_%s' % (i + 1, j + 1))\n            internel_layer = sym.relu(data=internel_layer, name='relu%s_%s' % (i + 1, j + 1))\n        internel_layer = sym.max_pool2d(data=internel_layer, pool_size=(2, 2), strides=(2, 2), name='pool%s' % (i + 1))\n    return internel_layer", "fn_id": 0, "class_fn": false, "repo": "CynthiaProtector/helo", "file": "nnvm/python/nnvm/testing/vgg.py", "last_update_at": "2021-12-25T06:09:46+00:00", "pred": {"ppl": 2.159543752670288, "ppl_lower": 2.2595746517181396, "ppl/lowercase_ppl": -1.058812563421003, "ppl/zlib": 0.002583546891842933, "Min_5.0% Prob": 9.144709785779318, "Min_10.0% Prob": 6.364078350067139, "Min_20.0% Prob": 3.762262885570526, "Min_30.0% Prob": 2.5597410229345163, "Min_40.0% Prob": 1.9238283800892533, "Min_50.0% Prob": 1.5397013673326, "Min_60.0% Prob": 1.2831456959596834}}
{"hexsha": "d1b6df0cf562b4a74a407607abec54818df78080", "ext": "py", "lang": "Python", "content": "def mech():\n    item = {0: 'mail', 1: 'password'}\n    try:\n        choice = int(input(bcolors.OKBLUE + 'Enter the option no. of data: \\n [0] Mail \\n [1] Password\\n [2] Exit\\nOption:' + bcolors.ENDC))\n        try:\n            pass_data = input(bcolors.OKBLUE + 'Enter the ' + str(item[choice]) + ' to check: ' + bcolors.ENDC)\n        except:\n            exit(0)\n        data = main(str(choice), pass_data)\n        print(bcolors.OKGREEN + data + bcolors.ENDC)\n        print(bcolors.OKBLUE + ' [0] Dump data in a file \\n [1] Go back \\n [2] Exit' + bcolors.ENDC)\n        choice_ = input(bcolors.OKBLUE + 'Option: ' + bcolors.ENDC)\n        if choice_ == '0':\n            raw_filename = input(bcolors.OKBLUE + 'File name to save: ' + bcolors.ENDC)\n            filename = raw_filename + '_' + str(item[choice]) + '.txt'\n            file = open(filename, 'w')\n            file.write(data)\n            file.close()\n            print(bcolors.OKGREEN + 'File is saved in same directory with name {}.'.format(raw_filename) + bcolors.ENDC)\n            print()\n        elif choice_ == '1':\n            print()\n            print()\n            mech()\n        else:\n            exit(0)\n    except Exception as e:\n        print(bcolors.FAIL + e + bcolors.ENDC)\n        exit(0)", "fn_id": 1, "class_fn": false, "repo": "StrinTH/checkleaks", "file": "leakcheck.py", "last_update_at": "2021-01-06T14:45:08+00:00", "pred": {"ppl": 3.2109978199005127, "ppl_lower": 3.411853313446045, "ppl/lowercase_ppl": -1.0520099872086146, "ppl/zlib": 0.0025866557342792405, "Min_5.0% Prob": 9.767752011617025, "Min_10.0% Prob": 7.639897926433666, "Min_20.0% Prob": 5.265054418245952, "Min_30.0% Prob": 3.798523226406722, "Min_40.0% Prob": 2.9199416952828567, "Min_50.0% Prob": 2.3375097137647978, "Min_60.0% Prob": 1.9456641201745817}}
{"hexsha": "a113b237351d78e1a5fa0fd0d24d0327976b7f7a", "ext": "py", "lang": "Python", "content": "def process_data(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"delete column that have most na, and fill na with mean\"\"\"\n    na_count = dataframe.isnull().sum(axis=0).tolist()\n    most_na_col = na_count.index(max(na_count))\n    result = dataframe.drop(dataframe.columns[most_na_col], axis=1)\n    return result.fillna(result.mean())", "fn_id": 1, "class_fn": false, "repo": "coookie89/Intern-Training", "file": "txya900619/Week1/ch2/2.2/exercise1.py", "last_update_at": "2021-08-24T12:14:46+00:00", "pred": {"ppl": 3.2274832725524902, "ppl_lower": 3.55354642868042, "ppl/lowercase_ppl": -1.082139813359235, "ppl/zlib": 0.005771934290332342, "Min_5.0% Prob": 9.318628549575806, "Min_10.0% Prob": 7.21679343117608, "Min_20.0% Prob": 5.1168132455725415, "Min_30.0% Prob": 3.8347649471513154, "Min_40.0% Prob": 2.977292467692965, "Min_50.0% Prob": 2.3654734543524683, "Min_60.0% Prob": 1.9592549586387609}}
{"hexsha": "be83fdd493ff018b94ad39f9ed435403d860ea8e", "ext": "py", "lang": "Python", "content": "def generate_bio(spans, length):\n    tags = ['O'] * length\n    for span in spans:\n        tags[span.tokens[0]] = f'B-{span.type}'\n        for i in span.tokens[1:]:\n            tags[i] = f'I-{span.type}'\n    return tags", "fn_id": 4, "class_fn": false, "repo": "blester125/iobes", "file": "tests/utils.py", "last_update_at": "2021-12-06T23:15:18+00:00", "pred": {"ppl": 3.34563946723938, "ppl_lower": 4.166615009307861, "ppl/lowercase_ppl": -1.1817121563629587, "ppl/zlib": 0.008945613676906586, "Min_5.0% Prob": 12.39964739481608, "Min_10.0% Prob": 9.841176827748617, "Min_20.0% Prob": 5.979790054834806, "Min_30.0% Prob": 4.059417128562927, "Min_40.0% Prob": 3.034534320925121, "Min_50.0% Prob": 2.414741644101656, "Min_60.0% Prob": 2.052931595843984}}
{"hexsha": "1a9febc6fc48fe142ca3755fceef4aa604dfb595", "ext": "py", "lang": "Python", "content": "def assemble(mappings, sequence_file, out_file, min_overlap, max_overhang, min_length):\n    graph, assembled = OverlapGraph.parse_paf(mappings, min_overlap, max_overhang)\n    paths = graph.max_paths()\n    sequences = parse_fasta(sequence_file)\n    with open(out_file, 'w') as f:\n        for path in paths:\n            seq, contained_reads, name = construct_merged_sequence(path, graph, sequences)\n            assembled += contained_reads\n            if len(seq) > min_length:\n                f.write('>%s\\n%s\\n' % (name, seq))\n        for n, s in sequences.items():\n            if n in assembled:\n                continue\n            if len(s) < min_length:\n                continue\n            f.write('>%s\\n%s\\n' % (n, s))", "fn_id": 2, "class_fn": false, "repo": "rikuu/hgga", "file": "asm_node.py", "last_update_at": "2021-04-09T21:56:00+00:00", "pred": {"ppl": 3.1899564266204834, "ppl_lower": 3.2811830043792725, "ppl/lowercase_ppl": -1.0243074100797092, "ppl/zlib": 0.003841083633565707, "Min_5.0% Prob": 9.146100950241088, "Min_10.0% Prob": 7.47007646560669, "Min_20.0% Prob": 5.267495036125183, "Min_30.0% Prob": 3.8470025554299356, "Min_40.0% Prob": 2.920629766676575, "Min_50.0% Prob": 2.3188795780136, "Min_60.0% Prob": 1.9364031816597966}}
{"hexsha": "a2c6556c09f53bd180fe20a7e14114c3b4f5b12b", "ext": "py", "lang": "Python", "content": "def get_mycroft_version():\n    try:\n        from mycroft.version import CORE_VERSION_STR\n        return CORE_VERSION_STR\n    except:\n        pass\n    root = search_mycroft_core_location()\n    if root:\n        version_file = join(root, 'version', '__init__.py')\n        if not isfile(version_file):\n            version_file = join(root, 'mycroft', 'version', '__init__.py')\n        if isfile(version_file):\n            version = []\n            with open(version_file) as f:\n                text = f.read()\n                version.append(text.split('CORE_VERSION_MAJOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_MINOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_BUILD =')[-1].split('\\n')[0].strip())\n                version = '.'.join(version)\n                if \"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \" in text:\n                    version += text.split(\"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \")[-1].split('\\n')[0][1:-1]\n                return version\n        return None", "fn_id": 3, "class_fn": false, "repo": "NeonJarbas/ovos_utils", "file": "ovos_utils/fingerprinting.py", "last_update_at": "2021-11-08T07:19:25+00:00", "pred": {"ppl": 2.036738634109497, "ppl_lower": 2.197070598602295, "ppl/lowercase_ppl": -1.1065229864176298, "ppl/zlib": 0.0020094627677619764, "Min_5.0% Prob": 7.787324905395508, "Min_10.0% Prob": 5.708337251345316, "Min_20.0% Prob": 3.455566636721293, "Min_30.0% Prob": 2.3614617983227246, "Min_40.0% Prob": 1.785115184970508, "Min_50.0% Prob": 1.4225102792207556, "Min_60.0% Prob": 1.1881679822624422}}
{"hexsha": "d9fc432fc00d588e5c0efee2aee23a3f4e8a0c91", "ext": "py", "lang": "Python", "content": "def main(_):\n    tf.logging.set_verbosity(tf.logging.INFO)\n    usr_dir.import_usr_dir(FLAGS.t2t_usr_dir)\n    trainer_utils.log_registry()\n    trainer_utils.validate_flags()\n    output_dir = os.path.expanduser(FLAGS.output_dir)\n    tmp_dir = os.path.expanduser(FLAGS.tmp_dir)\n    if not FLAGS.data_dir:\n        raise ValueError('You must specify a --data_dir')\n    data_dir = os.path.expanduser(FLAGS.data_dir)\n    tf.gfile.MakeDirs(output_dir)\n    if FLAGS.generate_data:\n        tf.gfile.MakeDirs(data_dir)\n        tf.gfile.MakeDirs(tmp_dir)\n        for problem_name in FLAGS.problems.split('-'):\n            tf.logging.info('Generating data for %s' % problem_name)\n            problem = registry.problem(problem_name)\n            problem.generate_data(data_dir, tmp_dir)\n    trainer_utils.run(data_dir=data_dir, model=FLAGS.model, output_dir=output_dir, train_steps=FLAGS.train_steps, eval_steps=FLAGS.eval_steps, schedule=FLAGS.schedule)", "fn_id": 0, "class_fn": false, "repo": "ctuning/ck-ml", "file": "program/tensor2tensor-attention-tf/source/tensor2tensor/tensor2tensor/bin/t2t-trainer.py", "last_update_at": "2021-09-14T14:14:10+00:00", "pred": {"ppl": 1.9006232023239136, "ppl_lower": 2.360464572906494, "ppl/lowercase_ppl": -1.3374069580206867, "ppl/zlib": 0.0017034000891641002, "Min_5.0% Prob": 6.6182195118495395, "Min_10.0% Prob": 4.889243643859337, "Min_20.0% Prob": 3.0728103518486023, "Min_30.0% Prob": 2.1450383111663247, "Min_40.0% Prob": 1.6156017336199573, "Min_50.0% Prob": 1.2842491509214247, "Min_60.0% Prob": 1.0715055582161794}}
{"hexsha": "01b86d405494b9108be791ee779c96fe8f5fc81b", "ext": "py", "lang": "Python", "content": "def test_code_point_of_name():\n    assert demojiprocess.code_point_of_name('yellow_heart') == '1f49b'\n    assert demojiprocess.code_point_of_name(':yellow_heart:') == '1f49b'\n    assert demojiprocess.code_point_of_name('woman_health_worker_tone2') == '1f469-1f3fc-200d-2695-fe0f'\n    assert demojiprocess.code_point_of_name('adult:skin-tone-4') == '1f9d1-1f3fe'", "fn_id": 4, "class_fn": false, "repo": "PommeBleue/discord-emoji", "file": "src/tests/tests.py", "last_update_at": "2021-06-18T09:37:53+00:00", "pred": {"ppl": 2.8086459636688232, "ppl_lower": 2.8086459636688232, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006494984300308774, "Min_5.0% Prob": 10.522752353123256, "Min_10.0% Prob": 8.187494039535522, "Min_20.0% Prob": 5.0883419678129, "Min_30.0% Prob": 3.470042221925475, "Min_40.0% Prob": 2.606054526801079, "Min_50.0% Prob": 2.0790690316699094, "Min_60.0% Prob": 1.7288629684268282}}
{"hexsha": "b9a0444e34d229fe92febc414b59c043e61e95ce", "ext": "py", "lang": "Python", "content": "def get_blue_marble_image(month):\n    filename = 'world.2004%02i.3x21600x10800.jpg' % month\n    fullpath = os.path.join(os.path.expanduser('~'), '.cache/burned_area/' + filename)\n    if os.path.exists(fullpath):\n        with open(fullpath, 'rb') as f:\n            imgdata = f.read()\n    else:\n        code = _nasa_blue_marble_ng_monthly_image_url_codes[month - 1]\n        url = ('https://eoimages.gsfc.nasa.gov/images/imagerecords/' + '%s/' + filename) % code\n        print('Downloading', url)\n        req = requests.get(url)\n        req.raise_for_status()\n        imgdata = req.content\n        os.makedirs(os.path.dirname(fullpath), exist_ok=True)\n        with open(fullpath, 'wb') as f:\n            f.write(imgdata)\n    img = Image.open(io.BytesIO(imgdata))\n    return img", "fn_id": 4, "class_fn": false, "repo": "benbarsdell/burned-area-viz", "file": "burned_area_viz.py", "last_update_at": "2021-04-16T18:20:36+00:00", "pred": {"ppl": 2.3801803588867188, "ppl_lower": 2.6999247074127197, "ppl/lowercase_ppl": -1.1453540941834581, "ppl/zlib": 0.0021099179217931503, "Min_5.0% Prob": 8.830334067344666, "Min_10.0% Prob": 6.459613533020019, "Min_20.0% Prob": 4.153683495287802, "Min_30.0% Prob": 2.8750911654977056, "Min_40.0% Prob": 2.168734322491925, "Min_50.0% Prob": 1.7339580491936022, "Min_60.0% Prob": 1.4527192748342217}}
{"hexsha": "965d7f77982b9eaf53ae37fba39562b4f8c0b34f", "ext": "py", "lang": "Python", "content": "def _split_points_into_batches(points: NumericArray, number_of_points_per_batch: int) -> tp.List[tp.List[NumericArray]]:\n    number_of_points = points.shape[1]\n    n_begin = 0\n    args_list = []\n    while n_begin < number_of_points:\n        n_end = min(n_begin + number_of_points_per_batch, number_of_points)\n        args_list.append([points[:, n_begin:n_end]])\n        n_begin = n_end\n    return args_list", "fn_id": 0, "class_fn": false, "repo": "michaelnowotny/cocos", "file": "cocos/scientific/kde.py", "last_update_at": "2021-11-27T09:09:40+00:00", "pred": {"ppl": 2.5763843059539795, "ppl_lower": 2.977287530899048, "ppl/lowercase_ppl": -1.152818751404382, "ppl/zlib": 0.004755713488486209, "Min_5.0% Prob": 10.77691880861918, "Min_10.0% Prob": 7.915555293743427, "Min_20.0% Prob": 4.732672470120283, "Min_30.0% Prob": 3.2111994421634917, "Min_40.0% Prob": 2.372478742099736, "Min_50.0% Prob": 1.906666004067202, "Min_60.0% Prob": 1.5932079095421419}}
{"hexsha": "01eaa1599fa6952fceac0db02f61801ac8392d27", "ext": "py", "lang": "Python", "content": "def plot_correlation(py, correlated, minimum_arg, minimums):\n    plt.figure()\n    plt.plot(py, correlated[:, 0, 0])\n    plt.plot(py, correlated[:, -1, -1])\n    plt.legend(['pixel 0,0', 'pixel n,n', 'minimum 0 0', 'minimum n n'])\n    plt.title('cross correlation between calibration curve and pixel values')\n    plt.xlabel('Physical distance (im)')\n    plt.ylabel('Focus unit')", "fn_id": 17, "class_fn": false, "repo": "idiap/deepfocus2019", "file": "detection/calibration_fit.py", "last_update_at": "2021-11-26T09:33:14+00:00", "pred": {"ppl": 8.545528411865234, "ppl_lower": 8.396231651306152, "ppl/lowercase_ppl": -0.9917847048844376, "ppl/zlib": 0.010568513070817494, "Min_5.0% Prob": 12.559856605529784, "Min_10.0% Prob": 11.12983850999312, "Min_20.0% Prob": 8.484472036361694, "Min_30.0% Prob": 6.529680041705861, "Min_40.0% Prob": 5.223669666714138, "Min_50.0% Prob": 4.237078440293931, "Min_60.0% Prob": 3.5804207342512466}}
{"hexsha": "d4fedd0a36cd395e4706b0c47428c1465d2a2a9d", "ext": "py", "lang": "Python", "content": "def wl_predict(datasets, test_datasets):\n    \"\"\"\n\n    \"\"\"\n    log_dir = tfu.get_logdir()\n    datasets, test_datasets = get_wl_datasets()\n    x, y = tfu.get_example(datasets)\n    loss_fxn = tf.losses.BinaryCrossentropy()\n    optim = tf.keras.optimizers.Adam()\n    model = lstm.make_mlp_functional(x.shape[-2:], tf.size(y[0]), classify=True)\n    train_summary_writer, test_summary_writer = tfu.init_summary_writers(log_dir)\n    train_loss, train_accuracy, test_loss, test_accuracy = tfu.get_classification_metrics()\n    tr_step = 0\n    te_step = 0\n    for epoch, dataset in enumerate(datasets):\n        if not dataset:\n            continue\n        for xtr, ytr in dataset:\n            ytr = tf.reshape(ytr, (1, -1))\n            tl, ta, preds = fwd.train_step_classify(model, optim, loss_fxn, xtr, ytr, train_loss, train_accuracy)\n            tr_step += 1\n            with train_summary_writer.as_default():\n                tf.summary.scalar('loss', tl.numpy(), step=tr_step)\n                tf.summary.scalar('accuracy', ta.numpy(), step=tr_step)\n            maxed_pred = tf.argmax(preds, 1).numpy()[0]\n            maxed_true = tf.argmax(ytr).numpy()\n            correct = tf.equal(maxed_pred, maxed_true).numpy()\n        test_dataset = random.choice(test_datasets)\n        if not test_dataset:\n            continue\n        for xte, yte in test_dataset:\n            yte = tf.reshape(yte, (1, -1))\n            tel, tea = fwd.test_step(model, loss_fxn, xte, yte, test_loss, test_accuracy)\n            te_step += 1\n            with test_summary_writer.as_default():\n                tf.summary.scalar('loss', tel.numpy(), step=te_step)\n                tf.summary.scalar('accuracy', tea.numpy(), step=te_step)\n        template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}, Preds: {}, Acts: {}'\n        print(template.format(epoch + 1, train_loss.result(), train_accuracy.result() * 100, test_loss.result(), test_accuracy.result() * 100, preds, ytr))\n        train_loss.reset_states()\n        test_loss.reset_states()\n        train_accuracy.reset_states()\n        test_accuracy.reset_states()\n    tf.saved_model.save(model, tfm.WRITE_TO + 'win_loss/')\n    return datasets", "fn_id": 1, "class_fn": false, "repo": "AnandIJain/sip", "file": "sips/ml/tf_models/win_loss.py", "last_update_at": "2021-06-13T13:53:59+00:00", "pred": {"ppl": 2.7060954570770264, "ppl_lower": 2.993752956390381, "ppl/lowercase_ppl": -1.1014769200580097, "ppl/zlib": 0.0013525907679457745, "Min_5.0% Prob": 9.463596925139427, "Min_10.0% Prob": 7.227480268478393, "Min_20.0% Prob": 4.679512841884907, "Min_30.0% Prob": 3.297557853964659, "Min_40.0% Prob": 2.485993524777821, "Min_50.0% Prob": 1.9935624900765352, "Min_60.0% Prob": 1.6625053274882613}}
{"hexsha": "982db6db807b1cdc32803139fd8028059a1a1f18", "ext": "py", "lang": "Python", "content": "def plotvfonsph(theta_rad, phi_rad, F_th, F_ph, freq=0.0, vcoordlist=['sph'], projection='orthographic', cmplx_rep='AbsAng', vfname='Unknown'):\n    \"\"\"Plot transverse vector field on sphere. Different projections are\n    supported as are different bases and complex value representations.\"\"\"\n    x, y, xyNames, nom_xticks, F_th, F_ph = projectdomain(theta_rad, phi_rad, F_th, F_ph, projection)\n    F0_c, F1_c, compNames = vcoordconvert(F_th, F_ph, phi_rad, vcoordlist=vcoordlist)\n    F0_2r, cmplxop0 = cmplx2realrep(F0_c, cmplx_rep)\n    F1_2r, cmplxop1 = cmplx2realrep(F1_c, cmplx_rep)\n    if projection == 'orthographic':\n        xyNames = [xyNames[0] + ' []', xyNames[1] + ' []']\n    if projection == 'azimuthal-equidistant':\n        x = numpy.rad2deg(x)\n        y = numpy.rad2deg(y)\n        xyNames = [xyNames[0] + ' [deg.]', xyNames[1] + ' [deg.]']\n    fig = plt.figure()\n    fig.suptitle(vfname + ' @ ' + str(freq / 1000000.0) + ' MHz' + ', ' + 'projection: ' + projection)\n\n    def plotcomp(vcmpi, cpi, zcomp, cmplxop, xyNames, nom_xticks):\n        if cmplxop[cpi] == 'Ang':\n            cmap = plt.get_cmap('hsv')\n        else:\n            cmap = plt.get_cmap('viridis')\n        plt.pcolormesh(x, y, zcomp[cpi], cmap=cmap)\n        if nom_xticks is not None:\n            plt.xticks(nom_xticks)\n        ax.set_title(cmplxop[cpi] + '(' + compNames[vcmpi] + ')')\n        plt.xlabel(xyNames[0])\n        plt.ylabel(xyNames[1])\n        plt.grid()\n        plt.colorbar()\n        if projection == 'equirectangular':\n            ax.invert_yaxis()\n    ax = plt.subplot(221, polar=False)\n    plotcomp(0, 0, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(222, polar=False)\n    plotcomp(0, 1, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(223, polar=False)\n    plotcomp(1, 0, F1_2r, cmplxop1, xyNames, nom_xticks)\n    ax = plt.subplot(224, polar=False)\n    plotcomp(1, 1, F1_2r, cmplxop1, xyNames, nom_xticks)\n    plt.show()", "fn_id": 12, "class_fn": false, "repo": "David-McKenna/AntPat", "file": "antpat/reps/sphgridfun/tvecfun.py", "last_update_at": "2021-04-06T06:23:25+00:00", "pred": {"ppl": 3.2356178760528564, "ppl_lower": 3.367548942565918, "ppl/lowercase_ppl": -1.0340355803960553, "ppl/zlib": 0.0016445656960076779, "Min_5.0% Prob": 10.176121643611364, "Min_10.0% Prob": 7.8216502901533955, "Min_20.0% Prob": 5.2610769901477115, "Min_30.0% Prob": 3.8281631955238575, "Min_40.0% Prob": 2.9250387581406345, "Min_50.0% Prob": 2.347238321374105, "Min_60.0% Prob": 1.9569088293626433}}
{"hexsha": "acf70d67c75b3c219a4cc6fc3e0736e214b7ac7f", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef color_image(image):\n    image.ndim = 3\n    return image", "fn_id": 2, "class_fn": false, "repo": "dxxxm/opencv_wrapper", "file": "tests/conftest.py", "last_update_at": "2021-11-24T09:24:10+00:00", "pred": {"ppl": 6.949145317077637, "ppl_lower": 6.949145317077637, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.029373010243249776, "Min_5.0% Prob": 8.384358406066895, "Min_10.0% Prob": 8.259479999542236, "Min_20.0% Prob": 6.734395265579224, "Min_30.0% Prob": 5.244447628657023, "Min_40.0% Prob": 4.399743020534515, "Min_50.0% Prob": 3.785537230968475, "Min_60.0% Prob": 3.3202854891618094}}
{"hexsha": "53f7bb295a7670c88ce420c9fc2d3c662110f9c1", "ext": "py", "lang": "Python", "content": "def AvgPooling(pytorch_layer):\n    layer = pb2.LayerParameter()\n    layer.type = 'Pooling'\n    layer.pooling_param.pool = pb2.PoolingParameter.AVE\n    CopyPoolingParameter(pytorch_layer, layer)\n    return layer", "fn_id": 14, "class_fn": false, "repo": "UltronAI/pytorch-caffe", "file": "pytorch2caffe/ConvertLayer_caffe.py", "last_update_at": "2021-11-12T07:39:36+00:00", "pred": {"ppl": 4.249994277954102, "ppl_lower": 8.199661254882812, "ppl/lowercase_ppl": -1.454189782372268, "ppl/zlib": 0.01195799699646015, "Min_5.0% Prob": 11.813253402709961, "Min_10.0% Prob": 10.29450340270996, "Min_20.0% Prob": 6.698390180414373, "Min_30.0% Prob": 4.837716892361641, "Min_40.0% Prob": 3.624481126666069, "Min_50.0% Prob": 2.88277261278459, "Min_60.0% Prob": 2.4526687750423495}}
{"hexsha": "ed1e84994c73c427aad1a29aacc2fb28de4545f1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('transaction_args,method_args,method_kwargs,expected,skip_testrpc', (({}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gas': 800000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gasPrice': 21000000000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 21000000000, 'chainId': None}, False), ({'nonce': 7}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'nonce': 7, 'chainId': None}, True), ({'value': 20000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 20000, 'gasPrice': 1, 'chainId': None}, False)), ids=['Standard', 'Explicit Gas', 'Explicit Gas Price', 'Explicit Nonce', 'With Value'])\ndef test_build_transaction_with_contract_with_arguments(web3, skip_if_testrpc, math_contract, transaction_args, method_args, method_kwargs, expected, skip_testrpc, buildTransaction):\n    if skip_testrpc:\n        skip_if_testrpc(web3)\n    txn = buildTransaction(contract=math_contract, contract_function='increment', func_args=method_args, func_kwargs=method_kwargs, tx_params=transaction_args)\n    expected['to'] = math_contract.address\n    assert txn is not None\n    if 'gas' in transaction_args:\n        assert txn['gas'] == transaction_args['gas']\n    else:\n        assert 'gas' in txn\n    assert dissoc(txn, 'gas') == expected", "fn_id": 4, "class_fn": false, "repo": "onlinedeal4unow/web3.py", "file": "tests/core/contracts/test_contract_buildTransaction.py", "last_update_at": "2021-11-12T00:38:42+00:00", "pred": {"ppl": 1.6643208265304565, "ppl_lower": 1.7555639743804932, "ppl/lowercase_ppl": -1.1047727432819872, "ppl/zlib": 0.0010612856837915806, "Min_5.0% Prob": 6.861254710417527, "Min_10.0% Prob": 4.515323619299297, "Min_20.0% Prob": 2.5243648419027807, "Min_30.0% Prob": 1.6985568339122015, "Min_40.0% Prob": 1.2741514674426555, "Min_50.0% Prob": 1.0188030335349894, "Min_60.0% Prob": 0.8504442844857283}}
{"hexsha": "6f98bbabb72a1fe6a11d10ff1c78a84452e1e916", "ext": "py", "lang": "Python", "content": "def add_preproc_params(parser):\n    parser.add_argument('--effdir_out_preproc', required=False, help='Output directory for preproc')\n    parser.add_argument('--preproc_mask', required=False, help='Preproc processing mask file')\n    parser.add_argument('--preproc_mask_adc', required=False, help='Preproc ADC NL processing mask file')\n    parser.add_argument('--preproc_dark', dest='preproc_dark', default=False, action='store_true', help='Preprocess dark data')\n    parser.add_argument('--preproc_common', dest='preproc_common', default=False, action='store_true', help='Preprocess common data')\n    parser.add_argument('--nbin', required=False, default=10000, type=np.int, help='Number of phase bins')\n    parser.add_argument('--jump_filter_len', required=False, default=40000, type=np.int, help='Jump filter length')\n    parser.add_argument('--jump_threshold', required=False, default=5.0, type=np.float, help='Jump detection threshold')\n    parser.add_argument('--preproc_timeout', required=False, default=120, type=np.int, help='Maximum time allowed for preprocessing a ring')\n    parser.add_argument('--preproc_timeout_intermediate', required=False, default=60, type=np.int, help='Maximum time allowed for preprocessing a ring before last iteration')\n    parser.add_argument('--adc_correction', required=False, help='Full (new) NL correction file.')\n    parser.add_argument('--measure_ADC', dest='measure_ADC', default=False, action='store_true', help='Measure ADC NL')\n    parser.add_argument('--niter_ADC', default=1, type=np.int, help='Number of ADC NL iterations')\n    parser.add_argument('--delta_ADC', default=1.0, type=np.float, help='Width of ADC bin in ADU')\n    parser.add_argument('--nphase4k', required=False, default=2, type=np.int, help='Number of 4K cooler phases to measure ADC NL for.')\n    parser.add_argument('--skip_preproc', dest='skip_preproc', default=False, action='store_true', help='Do not pre-process the TOD')\n    parser.add_argument('--flag_planets', dest='flag_planets', default=False, action='store_true', help='Derive planet flags')\n    parser.add_argument('--planet_flag_radius', required=False, default=2.0, type=np.float, help='New planet flag radius (in FWHM) when --flag_planets')\n    parser.add_argument('--detmask', required=False, type=np.int, help='Detector flag mask')\n    parser.add_argument('--intense_threshold', required=False, default=10000000000.0, type=np.float, help='Intense signal threshold [K_CMB]')\n    parser.add_argument('--preproc_async_time', required=False, default=1000, type=np.int, help='Initial asynchronous processing time before load balancing')\n    parser.add_argument('--preproc_async_time_intermediate', required=False, default=800, type=np.int, help='Initial asynchronous processing time before load balancing before last iteration')\n    return", "fn_id": 5, "class_fn": false, "repo": "planck-npipe/toast-npipe", "file": "pipelines/toast_planck_reduce.py", "last_update_at": "2021-04-20T08:09:35+00:00", "pred": {"ppl": 2.4292309284210205, "ppl_lower": 2.568535804748535, "ppl/lowercase_ppl": -1.0628243378436846, "ppl/zlib": 0.0012807715972541023, "Min_5.0% Prob": 8.098234286675087, "Min_10.0% Prob": 6.09084452858454, "Min_20.0% Prob": 4.02444648217855, "Min_30.0% Prob": 2.8962165511302866, "Min_40.0% Prob": 2.2092918759462976, "Min_50.0% Prob": 1.7735038838118202, "Min_60.0% Prob": 1.4813938996438951}}
{"hexsha": "c0b95f623054d53abb9621aff1a8155369c99b80", "ext": "py", "lang": "Python", "content": "def seed_everything(seed):\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    random.seed(seed)", "fn_id": 0, "class_fn": false, "repo": "boostcampaitech2/model-optimization-level3-cv-17", "file": "train.py", "last_update_at": "2021-12-22T04:52:08+00:00", "pred": {"ppl": 1.5366867780685425, "ppl_lower": 1.9161324501037598, "ppl/lowercase_ppl": -1.5136532366324704, "ppl/zlib": 0.0036103248397897814, "Min_5.0% Prob": 6.725614309310913, "Min_10.0% Prob": 3.9569372653961183, "Min_20.0% Prob": 2.132115877487443, "Min_30.0% Prob": 1.4991989410482347, "Min_40.0% Prob": 1.0931999011769553, "Min_50.0% Prob": 0.8592037556060989, "Min_60.0% Prob": 0.7290605183747672}}
{"hexsha": "5ecff52b202fb2311f75b717f10ecda7192b0a5e", "ext": "py", "lang": "Python", "content": "def extract_cands_in_generate(type, constraints=set()):\n    cands = []\n    for t in CONCEPTS[type]:\n        if all([is_consistent(t, c) for c in constraints]) or not constraints:\n            cands.append(t)\n    return cands", "fn_id": 5, "class_fn": false, "repo": "simon555/baby-ai-game", "file": "levels/instr_gen.py", "last_update_at": "2021-11-03T15:36:56+00:00", "pred": {"ppl": 7.432415008544922, "ppl_lower": 7.458086013793945, "ppl/lowercase_ppl": -1.0017189583575072, "ppl/zlib": 0.013462086179293517, "Min_5.0% Prob": 10.656434694925943, "Min_10.0% Prob": 9.540300846099854, "Min_20.0% Prob": 7.7807990709940595, "Min_30.0% Prob": 6.270178463723925, "Min_40.0% Prob": 4.867701268196106, "Min_50.0% Prob": 4.017964290995752, "Min_60.0% Prob": 3.4069979978171556}}
{"hexsha": "57728a0d7226be69507552ec44dac52e55264baf", "ext": "py", "lang": "Python", "content": "def make_test_data():\n    \"\"\" \"\"\"\n    tgrid = np.array([0.0, 86400.0])\n    xgrid = np.linspace(-8, 8, 120)\n    ygrid = np.linspace(-7, 7, 110)\n    zgrid = np.linspace(-6, 6, 100)\n    bdip = np.array([[[ptm_dipole.dipole_field([x, y, z]) for z in zgrid] for y in ygrid] for x in xgrid])\n    ex = np.zeros([xgrid.size, ygrid.size, zgrid.size])\n    ey = np.zeros_like(ex)\n    ez = np.zeros_like(ex)\n    pf = ptm_preprocessing.PTMfields()\n    pf.set_grid(xgrid, ygrid, zgrid)\n    pf.set_magnetic(bdip[:, :, :, 0], bdip[:, :, :, 1], bdip[:, :, :, 2])\n    pf.set_electric(ex, ey, ez)\n    pf.write_file('ptm_data/ptm_fields_0001.dat')\n    pf.write_file('ptm_data/ptm_fields_0002.dat')\n    np.savetxt('ptm_data/tgrid.dat', tgrid)", "fn_id": 1, "class_fn": false, "repo": "Pheosics/SHIELDS-PTM", "file": "ptm_python/ptm_test_data.py", "last_update_at": "2021-09-20T19:58:27+00:00", "pred": {"ppl": 2.527146339416504, "ppl_lower": 2.5728492736816406, "ppl/lowercase_ppl": -1.0193327511658632, "ppl/zlib": 0.0028008783597108827, "Min_5.0% Prob": 8.819703833262126, "Min_10.0% Prob": 6.437492762842486, "Min_20.0% Prob": 4.198550159969027, "Min_30.0% Prob": 3.030231829019303, "Min_40.0% Prob": 2.300472829609163, "Min_50.0% Prob": 1.8565239310145947, "Min_60.0% Prob": 1.544484033286276}}
{"hexsha": "bb68959040f9d60e5d44b71c03cdbfca7f860c20", "ext": "py", "lang": "Python", "content": "def _read(fname):\n    try:\n        return open(path.join(path.dirname(__file__), fname)).read()\n    except IOError:\n        return ''", "fn_id": 0, "class_fn": false, "repo": "inveniosoftware/flask-collect", "file": "setup.py", "last_update_at": "2021-11-15T12:08:13+00:00", "pred": {"ppl": 3.3529515266418457, "ppl_lower": 5.318222999572754, "ppl/lowercase_ppl": -1.3812882934079824, "ppl/zlib": 0.01197862386798764, "Min_5.0% Prob": 7.8041839599609375, "Min_10.0% Prob": 6.482814470926921, "Min_20.0% Prob": 5.557015895843506, "Min_30.0% Prob": 4.329708857668771, "Min_40.0% Prob": 3.0474257411865087, "Min_50.0% Prob": 2.4847835258115083, "Min_60.0% Prob": 2.097307091284739}}
{"hexsha": "9f339190f0ef239c8b99606a869e09ec3bd344b0", "ext": "py", "lang": "Python", "content": "def top(stack):\n    if len(stack):\n        return stack[-1]\n    return None", "fn_id": 2, "class_fn": false, "repo": "suvambasak/cp", "file": "others/stack.py", "last_update_at": "2021-02-28T20:17:32+00:00", "pred": {"ppl": 3.1141390800476074, "ppl_lower": 5.977616786956787, "ppl/lowercase_ppl": -1.5740284806274425, "ppl/zlib": 0.020284870272193615, "Min_5.0% Prob": NaN, "Min_10.0% Prob": 9.058648109436035, "Min_20.0% Prob": 5.4908740520477295, "Min_30.0% Prob": 3.946253514289856, "Min_40.0% Prob": 3.0530856336866106, "Min_50.0% Prob": 2.3875329887701406, "Min_60.0% Prob": 1.960075819356875}}
{"hexsha": "a7cb7c0cbe1316b9f471be562240d8e6e68b5ee9", "ext": "py", "lang": "Python", "content": "def get_items(list_, doc_type):\n    data_table_names = {'PO': 'fss.dbo.bsPRItem', 'SO': 'fss.dbo.bsSaleOrderItem'}\n    result_dict = {}\n    item_list = []\n    try:\n        table_name = data_table_names[doc_type]\n    except KeyError as e:\n        print(f'ERROR: DocType {e} not found')\n        sys.exit()\n        return ({}, [])\n    for p in list_:\n        doc_no = p[1]\n        statement_items = f\"SELECT * FROM {table_name}                            WHERE DocNo = '{doc_no}'\"\n        cursor.execute(statement_items)\n        package = []\n        for r in cursor:\n            item_list.append(r)\n            package.append(r)\n        result_dict[r[1]] = package\n    return (result_dict, item_list)", "fn_id": 1, "class_fn": false, "repo": "adadesions/tenzing-project", "file": "tenzing-mini/tenzing_mini.py", "last_update_at": "2021-01-25T04:45:56+00:00", "pred": {"ppl": 5.380837440490723, "ppl_lower": 6.098273754119873, "ppl/lowercase_ppl": -1.0743751163860762, "ppl/zlib": 0.0048919884306511865, "Min_5.0% Prob": 11.830239391326904, "Min_10.0% Prob": 9.470700931549072, "Min_20.0% Prob": 7.069441950321197, "Min_30.0% Prob": 5.433489904801051, "Min_40.0% Prob": 4.160180743829704, "Min_50.0% Prob": 3.369209320164553, "Min_60.0% Prob": 2.8207608484624584}}
{"hexsha": "e376bb9a7337aed835807b7a81d670cdfa095d2c", "ext": "py", "lang": "Python", "content": "def plot_values(registration_method):\n    global metric_values, multires_iterations\n    metric_values.append(registration_method.GetMetricValue())\n    clear_output(wait=True)\n    plt.plot(metric_values, 'r')\n    plt.plot(multires_iterations, [metric_values[index] for index in multires_iterations], 'b*')\n    plt.xlabel('Iteration Number', fontsize=12)\n    plt.ylabel('Metric Value', fontsize=12)\n    plt.show()", "fn_id": 10, "class_fn": false, "repo": "neurodata/ndreg", "file": "ndreg/plotter.py", "last_update_at": "2021-09-27T01:06:33+00:00", "pred": {"ppl": 2.5543086528778076, "ppl_lower": 3.585334539413452, "ppl/lowercase_ppl": -1.3615662587715383, "ppl/zlib": 0.004444462564373825, "Min_5.0% Prob": 10.01290159225464, "Min_10.0% Prob": 7.193102923306552, "Min_20.0% Prob": 4.582181345332753, "Min_30.0% Prob": 3.1185491659185467, "Min_40.0% Prob": 2.3694860041969354, "Min_50.0% Prob": 1.8744268007576466, "Min_60.0% Prob": 1.5720011251430739}}
{"hexsha": "56d66414c84d9d6eef940c2d2989f3d4532fde9e", "ext": "py", "lang": "Python", "content": "def pose_to_transformation(pose):\n    \"\"\"\n    Convert poses to transformation matrix\n    \"\"\"\n    temp_0 = pose[0]\n    temp_1 = pose[1]\n    temp_2 = pose[2]\n    temp_x = pose[3]\n    temp_y = pose[4]\n    temp_z = pose[5]\n    temp_w = pose[6]\n    pose[4:6] *= -1\n    pose[0] *= -1\n    rot_mat = quat2mat(pose[3:])\n    translation_vector = np.array([[pose[0]], [pose[1]], [pose[2]]]) / 1000\n    print(translation_vector)\n    rot_mat_2 = np.array([[0, 1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n    flip_x = np.eye(4)\n    flip_x[0, 0] *= -1\n    trans = flip_x @ rot_mat_2\n    translation_offset = np.ones((3, 1)) * 1\n    transformation_mat = np.vstack((np.hstack((rot_mat, translation_vector + 0.5)), np.array([0, 0, 0, 1])))\n    print(transformation_mat.shape)\n    return transformation_mat @ trans", "fn_id": 8, "class_fn": false, "repo": "RahulSajnani/DRACO-Weakly-Supervised-Dense-Reconstruction-And-Canonicalization-of-Objects", "file": "DRACO/visualization-scripts/gen_point_cloud.py", "last_update_at": "2021-12-17T16:55:00+00:00", "pred": {"ppl": 2.502584218978882, "ppl_lower": 2.518580675125122, "ppl/lowercase_ppl": -1.0069458925227233, "ppl/zlib": 0.0028138769496275236, "Min_5.0% Prob": 7.68903186917305, "Min_10.0% Prob": 5.975170038640499, "Min_20.0% Prob": 4.025850234553218, "Min_30.0% Prob": 2.9719868106767535, "Min_40.0% Prob": 2.2811365883098915, "Min_50.0% Prob": 1.8329510973300784, "Min_60.0% Prob": 1.5286489800576721}}
{"hexsha": "d7f4490b643639fa5528139f79a00b5f88a06a1f", "ext": "py", "lang": "Python", "content": "def v_bool(Inout=InOut_t.Internal_t, Default=0, varSigConst=None):\n    value = Default\n    if type(Default).__name__ == 'int':\n        Default = \"'\" + str(Default) + \"'\"\n    return v_symbol(v_type='boolean', DefaultValue=Default, Inout=Inout, includes=slv_includes, value=value, varSigConst=varSigConst, Bitwidth=1, primitive_type='boolean')", "fn_id": 0, "class_fn": false, "repo": "HardwareDesignWithPython/HDPython", "file": "HDPython/v_symbol.py", "last_update_at": "2021-10-20T20:08:16+00:00", "pred": {"ppl": 15.442375183105469, "ppl_lower": 14.319703102111816, "ppl/lowercase_ppl": -0.9724239107402548, "ppl/zlib": 0.012972110738711932, "Min_5.0% Prob": 14.939873123168946, "Min_10.0% Prob": 12.521787643432617, "Min_20.0% Prob": 9.793394851684571, "Min_30.0% Prob": 8.073164786061932, "Min_40.0% Prob": 6.702628266520616, "Min_50.0% Prob": 5.428797620706833, "Min_60.0% Prob": 4.576383917922935}}
{"hexsha": "db3168c7636e669ffaa426160820cfab9e45c298", "ext": "py", "lang": "Python", "content": "def event(self, event):\n    if event.type() == QEvent.KeyPress and event.key() == Qt.Key_Tab:\n        self.emit(SIGNAL('tabPressed'))\n        return True", "fn_id": 3, "class_fn": false, "repo": "anjanatiha/Generative-Open-Domain-Chatbot-Application-with-Deep-Learning", "file": "code/chat_gui.py", "last_update_at": "2021-11-19T07:31:14+00:00", "pred": {"ppl": 2.4756290912628174, "ppl_lower": 8.984956741333008, "ppl/lowercase_ppl": -2.4220241865007317, "ppl/zlib": 0.007882561234876804, "Min_5.0% Prob": 7.0257813930511475, "Min_10.0% Prob": 5.21030730009079, "Min_20.0% Prob": 3.7007377445697784, "Min_30.0% Prob": 2.838880623380343, "Min_40.0% Prob": 2.290139466524124, "Min_50.0% Prob": 1.796930227960859, "Min_60.0% Prob": 1.5182302825152874}}
{"hexsha": "58b7827b7aa5bd50934dcfc83e24f6888bb30df8", "ext": "py", "lang": "Python", "content": "@pytest.fixture()\ndef enrollment_data(user):\n    \"\"\"enrollment data for testing\"\"\"\n    bootcamps = BootcampFactory.create_batch(2)\n    enrollments = BootcampRunEnrollmentFactory.create_batch(3, user=user, active=factory.Iterator([False, True, True]), bootcamp_run__bootcamp=factory.Iterator([bootcamps[0], bootcamps[0], bootcamps[1]]))\n    unenrollable_run = BootcampRunFactory.create(end_date=now_in_utc() - timedelta(days=1))\n    order = OrderFactory.create(user=user)\n    return SimpleNamespace(bootcamps=bootcamps, enrollments=enrollments, unenrollable_run=unenrollable_run, order=order)", "fn_id": 3, "class_fn": false, "repo": "mitodl/bootcamp-ecommerce", "file": "klasses/api_test.py", "last_update_at": "2021-01-06T09:51:40+00:00", "pred": {"ppl": 2.9590063095092773, "ppl_lower": 4.187882423400879, "ppl/lowercase_ppl": -1.3201738395200247, "ppl/zlib": 0.0038199067103068546, "Min_5.0% Prob": 11.84915554523468, "Min_10.0% Prob": 8.435974625980153, "Min_20.0% Prob": 5.0692869629178725, "Min_30.0% Prob": 3.6036018227728515, "Min_40.0% Prob": 2.70678409183664, "Min_50.0% Prob": 2.1810801445945414, "Min_60.0% Prob": 1.807953608692402}}
{"hexsha": "d07c3f5d3f8bceba3730181638eb4ed2e60e2c51", "ext": "py", "lang": "Python", "content": "def get_toplevel_elements(str_, element, parsed=None):\n    if parsed is None:\n        parsed = bs4.BeautifulSoup(str_, 'html.parser')\n    skip, result = ([], [])\n    for l in parsed(element):\n        if str(l) not in skip:\n            result.append(l)\n        skip += [str(l_nested) for l_nested in l(element)]\n    return result", "fn_id": 0, "class_fn": false, "repo": "memri/pyintegrators", "file": "pyintegrators/indexers/notelist/util.py", "last_update_at": "2021-12-06T16:25:13+00:00", "pred": {"ppl": 4.50132942199707, "ppl_lower": 5.901188373565674, "ppl/lowercase_ppl": -1.179995924663706, "ppl/zlib": 0.007959644339982742, "Min_5.0% Prob": 10.445216655731201, "Min_10.0% Prob": 9.225815720028347, "Min_20.0% Prob": 6.899292614724901, "Min_30.0% Prob": 5.064899978814302, "Min_40.0% Prob": 3.829763143323362, "Min_50.0% Prob": 3.0062511826500944, "Min_60.0% Prob": 2.515925418407741}}
{"hexsha": "60908cb818b31508f23a6d5114dd56b36a1c0b97", "ext": "py", "lang": "Python", "content": "def factory_create_activity(name: str=None) -> Activity:\n    record = RecordFactory()\n    now = timezone.localtime()\n    start = now\n    end = now + datetime.timedelta(hours=1)\n    spent_time = (end - start).seconds\n    return Activity.objects.create(record_id=record.id, name=name, start=start, end=end, spent_time=spent_time)", "fn_id": 0, "class_fn": false, "repo": "siruku6/life_recorder", "file": "tests/test_models.py", "last_update_at": "2021-05-08T10:04:20+00:00", "pred": {"ppl": 3.2502706050872803, "ppl_lower": 4.431797027587891, "ppl/lowercase_ppl": -1.2630498279153917, "ppl/zlib": 0.005953223515046691, "Min_5.0% Prob": 10.822760105133057, "Min_10.0% Prob": 7.896684885025024, "Min_20.0% Prob": 5.27344544728597, "Min_30.0% Prob": 3.9285163106741727, "Min_40.0% Prob": 2.9400865085221626, "Min_50.0% Prob": 2.3781461101025343, "Min_60.0% Prob": 1.9921203875406222}}
{"hexsha": "109ffa951504bc25a96cc88a0b6aa9552c14314b", "ext": "py", "lang": "Python", "content": "def _create_nat_match_obj(**kwargs):\n    nat_match_obj = {'ethertype': 'IPv4'}\n    delta = set(kwargs.keys()) - set(MATCH_KEYS)\n    if delta:\n        raise Exception(_('Invalid keys for NAT match: %s'), delta)\n    nat_match_obj.update(kwargs)\n    return nat_match_obj", "fn_id": 51, "class_fn": false, "repo": "ericwanghp/quantum", "file": "quantum/plugins/nicira/nicira_nvp_plugin/nvplib.py", "last_update_at": "2021-04-18T15:23:19+00:00", "pred": {"ppl": 4.226552486419678, "ppl_lower": 4.738700866699219, "ppl/lowercase_ppl": -1.0793516257435172, "ppl/zlib": 0.007833623074576409, "Min_5.0% Prob": 12.9359769821167, "Min_10.0% Prob": 9.848753809928894, "Min_20.0% Prob": 6.617626875638962, "Min_30.0% Prob": 4.663493694116672, "Min_40.0% Prob": 3.56282302364707, "Min_50.0% Prob": 2.8720168709754943, "Min_60.0% Prob": 2.4001231867975243}}
{"hexsha": "3db72119b5d317902b6f4df26947aae91390d2a3", "ext": "py", "lang": "Python", "content": "def VAE(inputs, input_lengths, filters, kernel_size, strides, num_units, is_training, scope):\n    with tf.variable_scope(scope):\n        outputs = ReferenceEncoder(inputs=inputs, input_lengths=input_lengths, filters=filters, kernel_size=kernel_size, strides=strides, is_training=is_training)\n        mu = tf.layers.dense(outputs, num_units, name='mean', activation=tf.nn.relu)\n        log_var = tf.layers.dense(outputs, num_units, name='vari', activation=tf.nn.relu)\n        std = tf.exp(log_var * 0.5)\n        z = tf.random_normal(shape=[tf.shape(mu)[0], num_units], mean=0.0, stddev=1.0)\n        output = mu + z * std\n        style_embeddings = tf.layers.dense(output, hp.encoder_depth)\n        return (style_embeddings, mu, log_var)", "fn_id": 0, "class_fn": false, "repo": "GlitteringAu/vae_tacotron", "file": "models/modules.py", "last_update_at": "2021-09-02T06:04:46+00:00", "pred": {"ppl": 2.2925939559936523, "ppl_lower": 2.336723566055298, "ppl/lowercase_ppl": -1.0229796602904364, "ppl/zlib": 0.002529524110928069, "Min_5.0% Prob": 8.510114669799805, "Min_10.0% Prob": 6.310724800283259, "Min_20.0% Prob": 3.9703072680367364, "Min_30.0% Prob": 2.7276135168093094, "Min_40.0% Prob": 2.0854066572255556, "Min_50.0% Prob": 1.6661488767177592, "Min_60.0% Prob": 1.3847789339484091}}
{"hexsha": "8f760a85301ff2c85907784935bbde2796fc3fc2", "ext": "py", "lang": "Python", "content": "def get_current_commit_id() -> str:\n    \"\"\"Get current commit id\n\n    Returns:\n        str: Current commit id\n    \"\"\"\n    command = 'git rev-parse HEAD'\n    commit_id = subprocess.check_output(command.split()).strip().decode('utf-8')\n    return commit_id", "fn_id": 7, "class_fn": false, "repo": "shagunsodhani/torch-template", "file": "src/utils/utils.py", "last_update_at": "2021-01-12T10:02:16+00:00", "pred": {"ppl": 1.8718448877334595, "ppl_lower": 2.3516368865966797, "ppl/lowercase_ppl": -1.3639786162736147, "ppl/zlib": 0.0037316935446765017, "Min_5.0% Prob": 5.212783336639404, "Min_10.0% Prob": 4.1344746351242065, "Min_20.0% Prob": 2.8661028972038856, "Min_30.0% Prob": 2.0866771450168207, "Min_40.0% Prob": 1.5779167109957108, "Min_50.0% Prob": 1.250482770360329, "Min_60.0% Prob": 1.0599306237000303}}
{"hexsha": "a1f55cf8e4ae2523b3711b8a9b769203a9a8a01e", "ext": "py", "lang": "Python", "content": "def search(keywords, max_results=None):\n    url = 'https://html.duckduckgo.com/html/'\n    params = {'q': keywords}\n    headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0'}\n    yielded = 0\n    while True:\n        res = requests.post(url, data=params, headers=headers)\n        doc = html.fromstring(res.text)\n        results = [a.get('href') for a in doc.cssselect('#links .links_main a')]\n        for result in results:\n            yield result\n            time.sleep(0.1)\n            yielded += 1\n            if max_results and yielded >= max_results:\n                return\n        try:\n            form = doc.cssselect('.results_links_more form')[-1]\n        except IndexError:\n            return\n        params = dict(form.fields)", "fn_id": 0, "class_fn": false, "repo": "Jcorb08/programming-support-skill", "file": "duckduckgo.py", "last_update_at": "2021-05-26T11:08:27+00:00", "pred": {"ppl": 2.115753412246704, "ppl_lower": 2.5336270332336426, "ppl/lowercase_ppl": -1.2405101077716438, "ppl/zlib": 0.0017971486147488835, "Min_5.0% Prob": 8.450870123776523, "Min_10.0% Prob": 5.662738843397661, "Min_20.0% Prob": 3.548560298301957, "Min_30.0% Prob": 2.4632076053921854, "Min_40.0% Prob": 1.8800165578722954, "Min_50.0% Prob": 1.4982104418408457, "Min_60.0% Prob": 1.2526650142459783}}
{"hexsha": "b97e6f9295654f19c6ba8f5fa580dfd29d44c69e", "ext": "py", "lang": "Python", "content": "def edit_seller_selector(brief, sellers_to_invite):\n    if brief.lot.slug != 'atm' and sellers_to_invite:\n        seller_selector = brief.data.get('sellerSelector', '')\n        if len(sellers_to_invite.keys()) > 0 and seller_selector and (seller_selector == 'oneSeller'):\n            brief.data['sellerSelector'] = 'someSellers'", "fn_id": 5, "class_fn": false, "repo": "ArenaNetworks/dto-digitalmarketplace-api", "file": "app/api/business/brief/brief_edit_business.py", "last_update_at": "2021-08-23T06:05:06+00:00", "pred": {"ppl": 4.171548843383789, "ppl_lower": 4.860328197479248, "ppl/lowercase_ppl": -1.1069942748913972, "ppl/zlib": 0.008656287224977643, "Min_5.0% Prob": 10.781101942062378, "Min_10.0% Prob": 8.431304878658718, "Min_20.0% Prob": 5.712357157155087, "Min_30.0% Prob": 4.408757197005408, "Min_40.0% Prob": 3.492447482912164, "Min_50.0% Prob": 2.840647028448681, "Min_60.0% Prob": 2.403468201557795}}
{"hexsha": "299d845b4ecb3a12712dbe607958f777e7c89d76", "ext": "py", "lang": "Python", "content": "def dms2dec(dms_str):\n    \"\"\"Return decimal representation of DMS\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"N))\n    48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"E))\n    2.34330555556F\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"S))\n    -48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"W))\n    -2.34330555556F\n    \n    \"\"\"\n    dms_str = re.sub('\\\\s', '', dms_str)\n    sign = -1 if re.search('[swSW]', dms_str) else 1\n    numbers = list(filter(len, re.split('\\\\D+', dms_str, maxsplit=4)))\n    degree = numbers[0]\n    minute = numbers[1] if len(numbers) >= 2 else '0'\n    second = numbers[2] if len(numbers) >= 3 else '0'\n    frac_seconds = numbers[3] if len(numbers) >= 4 else '0'\n    second += '.' + frac_seconds\n    return sign * (int(degree) + float(minute) / 60 + float(second) / 3600)", "fn_id": 1, "class_fn": false, "repo": "Joel-hanson/Iceberg-locations", "file": "iceberg.py", "last_update_at": "2021-08-17T08:21:01+00:00", "pred": {"ppl": 2.1549315452575684, "ppl_lower": 2.381192207336426, "ppl/lowercase_ppl": -1.1300438519503928, "ppl/zlib": 0.00211503845043924, "Min_5.0% Prob": 8.076100686017204, "Min_10.0% Prob": 5.731951538254233, "Min_20.0% Prob": 3.6270453307939614, "Min_30.0% Prob": 2.553820307393676, "Min_40.0% Prob": 1.9213728354703905, "Min_50.0% Prob": 1.5350556922188254, "Min_60.0% Prob": 1.2832193367038673}}
{"hexsha": "40cc7483e6638afc906172fe0592b4a30fce27e5", "ext": "py", "lang": "Python", "content": "@dp.message_handler(commands=['creds'])\nasync def handler_creds(message: types.Message, state: FSMContext):\n    username = await db.get_username(message.from_user['id'])\n    if username is None:\n        await message.answer('You have to be registered to view creds! Use /reg')\n        return\n    username = username.decode()\n    password = (await db.get_secret(message.from_user['id'])).decode()\n    await message.answer(f'Username: {username}\\nPassword: {password}')", "fn_id": 5, "class_fn": false, "repo": "ne-bknn/CSSH", "file": "bot/bot.py", "last_update_at": "2021-05-12T19:38:55+00:00", "pred": {"ppl": 3.00154185295105, "ppl_lower": 4.3733601570129395, "ppl/lowercase_ppl": -1.3424589026292293, "ppl/zlib": 0.0043789884765905234, "Min_5.0% Prob": 8.303304036458334, "Min_10.0% Prob": 6.954678376515706, "Min_20.0% Prob": 4.896401604016622, "Min_30.0% Prob": 3.5312232739395566, "Min_40.0% Prob": 2.7409296799451113, "Min_50.0% Prob": 2.186196072912607, "Min_60.0% Prob": 1.8347005787471387}}
{"hexsha": "13e50b7266dceea05106c82bd6e330375bd50ee2", "ext": "py", "lang": "Python", "content": "def timeline(request):\n    ts = Timeline.objects.all()\n    contaxt = {'ts': ts}\n    return render(request, 'other/timeline.html', contaxt)", "fn_id": 1, "class_fn": false, "repo": "jackyfzh/j_django_blog", "file": "other/views.py", "last_update_at": "2021-05-22T10:57:45+00:00", "pred": {"ppl": 4.827060222625732, "ppl_lower": 5.688812732696533, "ppl/lowercase_ppl": -1.1043450693617929, "ppl/zlib": 0.01418232101623653, "Min_5.0% Prob": 10.78377914428711, "Min_10.0% Prob": 10.244603872299194, "Min_20.0% Prob": 7.311439424753189, "Min_30.0% Prob": 5.169401101768017, "Min_40.0% Prob": 3.9119070060551167, "Min_50.0% Prob": 3.1393663063645363, "Min_60.0% Prob": 2.621906452191373}}
{"hexsha": "b167197574c1ae8ea60f5374ce76c84554e825b9", "ext": "py", "lang": "Python", "content": "def upgrade_rdr():\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `ethnicity` smallint(6);')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `ethnicity` smallint(6);')", "fn_id": 0, "class_fn": false, "repo": "all-of-us/raw-data-repository", "file": "rdr_service/alembic/versions/01e685241414_change_degree_for_workbench_researcher__.py", "last_update_at": "2021-09-24T16:58:21+00:00", "pred": {"ppl": 2.3780839443206787, "ppl_lower": 2.5095465183258057, "ppl/lowercase_ppl": -1.0621115932903986, "ppl/zlib": 0.006143936865480221, "Min_5.0% Prob": 10.190346240997314, "Min_10.0% Prob": 7.2134773466322155, "Min_20.0% Prob": 4.276483347541408, "Min_30.0% Prob": 2.9279574438415725, "Min_40.0% Prob": 2.1941059067463264, "Min_50.0% Prob": 1.7492173559754631, "Min_60.0% Prob": 1.4534154909631332}}
{"hexsha": "c5d6e28510e9bfcfa523c2d73057ed4afa27c4d5", "ext": "py", "lang": "Python", "content": "def _test_overlap(hits):\n    tester = np.zeros(len(hits), dtype=strax.time_fields)\n    tester['time'] = hits['time'] - (hits['left_integration'] - hits['left']) * hits['dt']\n    tester['endtime'] = hits['time'] + (hits['right_integration'] - hits['left']) * hits['dt']\n    for ch in np.unique(hits['channel']):\n        mask = hits['channel'] == ch\n        test_ch = np.all(tester[mask]['endtime'][:-1] - tester[mask]['time'][1:] <= 0)\n        assert np.all(test_ch), 'Hits overlap!'", "fn_id": 1, "class_fn": false, "repo": "RiceAstroparticleLab/strax", "file": "tests/test_lone_hit_integration.py", "last_update_at": "2021-11-16T18:20:27+00:00", "pred": {"ppl": 3.7945432662963867, "ppl_lower": 3.878037691116333, "ppl/lowercase_ppl": -1.0163210936777043, "ppl/zlib": 0.005748120914516059, "Min_5.0% Prob": 10.045511177607946, "Min_10.0% Prob": 7.686298465728759, "Min_20.0% Prob": 5.573152542114258, "Min_30.0% Prob": 4.246430994404687, "Min_40.0% Prob": 3.31771341736118, "Min_50.0% Prob": 2.674243870973587, "Min_60.0% Prob": 2.2350373460807735}}
{"hexsha": "65850953a74773d8a1f36d8cdb7ca6cda7bf01af", "ext": "py", "lang": "Python", "content": "def message(flag=None):\n    exc_type, exc_obj, exc_tb = sys.exc_info()\n    if flag is None:\n        return exc_obj.message\n    return traceback.extract_tb(exc_tb)[0][3]", "fn_id": 10, "class_fn": false, "repo": "wroldwiedbwe/vfp2py", "file": "vfp2py/vfpfunc.py", "last_update_at": "2021-12-11T18:31:23+00:00", "pred": {"ppl": 3.4303441047668457, "ppl_lower": 4.099578857421875, "ppl/lowercase_ppl": -1.1445845479638916, "ppl/zlib": 0.009940811114801482, "Min_5.0% Prob": 9.802556037902832, "Min_10.0% Prob": 7.292912197113037, "Min_20.0% Prob": 5.163313603401184, "Min_30.0% Prob": 3.894437424838543, "Min_40.0% Prob": 3.1099767940385, "Min_50.0% Prob": 2.450722649141594, "Min_60.0% Prob": 2.0762713744770736}}
{"hexsha": "c1e6e718242cba1e86b4e900ac601b58a5f8729f", "ext": "py", "lang": "Python", "content": "def count_byte_values(bss: Iterable[ByteString]) -> list[Counter[int]]:\n    \"\"\"Returns a list of Counters, each of which records the values of the\n    bytes at the corresponding index in the given ByteStrings.\"\"\"\n    counts_for_idx: list[Counter[int]] = []\n    bs_len = None\n    for bs in bss:\n        if bs_len is None:\n            bs_len = len(bs)\n            counts_for_idx = [Counter() for _ in range(bs_len)]\n        assert len(bs) == bs_len\n        for i, b in enumerate(bs):\n            counts_for_idx[i][b] += 1\n    return counts_for_idx", "fn_id": 2, "class_fn": false, "repo": "misterfifths/nis_mods", "file": "utils/mining.py", "last_update_at": "2021-10-18T13:42:09+00:00", "pred": {"ppl": 2.9752869606018066, "ppl_lower": 3.985147476196289, "ppl/lowercase_ppl": -1.2680207053867885, "ppl/zlib": 0.003894073184610813, "Min_5.0% Prob": 9.644447462899345, "Min_10.0% Prob": 7.43447470664978, "Min_20.0% Prob": 5.066498776276906, "Min_30.0% Prob": 3.6354782157474093, "Min_40.0% Prob": 2.7279082882966175, "Min_50.0% Prob": 2.1942365209106356, "Min_60.0% Prob": 1.8331518672114995}}
{"hexsha": "f3e180cb426f2d4f4869990002b54890e11a8ca1", "ext": "py", "lang": "Python", "content": "def exponential(db, utility, eps=1e-05):\n    \"\"\"\n    Goal:\n        The Exponential mechanism is a DP method for answering categorical queries,\n        by sampling from an exponential distribution over possible choices.\n    Guaranties:\n        1. (eps,0) Differential Privacy\n        2. Accuracy:\n           Let utility: N ^ |Universe| x categories -> R\n           Denote c* = exponential(db, utility, eps)\n                  s = utility.sensitivity\n                  R = utility.categories\n                  Opt(u,x) = max_{c in R} u(x,r)\n           Then forall t > 0\n                  P[u(x,c*) <= Opt(u,x) - (2s / epsilon) (ln(|R|) + t)] <= e^-t\n    \"\"\"\n    assert isinstance(db, Database)\n    assert isinstance(utility, Utility)\n    assert db.rep == 'histogram'\n    assert eps > 0\n    evals = np.array([utility.value(db, cat) for cat in utility.categories])\n    consts = eps / (2 * utility.sensitivity)\n    weights = np.exp(consts * evals)\n    res = np.random.choice(utility.categories, p=normalize(weights, ord=1))\n    return res", "fn_id": 1, "class_fn": false, "repo": "chuxuantinh/differential-privacy-ct", "file": "mechanism/basic.py", "last_update_at": "2021-04-17T04:55:59+00:00", "pred": {"ppl": 10.37264347076416, "ppl_lower": 12.54905891418457, "ppl/lowercase_ppl": -1.0814278636274304, "ppl/zlib": 0.004669005798342494, "Min_5.0% Prob": 11.502634457179479, "Min_10.0% Prob": 9.843279753412519, "Min_20.0% Prob": 7.7762371727398465, "Min_30.0% Prob": 6.42945104553586, "Min_40.0% Prob": 5.381416754385011, "Min_50.0% Prob": 4.549494405164786, "Min_60.0% Prob": 3.8852597007737355}}
{"hexsha": "748d69ab544fa46cb8d58415b5d688a6b34e3694", "ext": "py", "lang": "Python", "content": "def map_dists(dists: Dict[str, AbstractMessage], values: Dict[str, np.ndarray], _call: str='logpdf') -> Iterator[Tuple[str, np.ndarray]]:\n    \"\"\"\n    Calls a method (default: logpdf) for each Message in dists\n    on the corresponding value in values\n    \"\"\"\n    for v in dists.keys() & values.keys():\n        dist = dists[v]\n        if isinstance(dist, AbstractMessage):\n            yield (v, getattr(dist, _call)(values[v]))", "fn_id": 0, "class_fn": false, "repo": "arfon/PyAutoFit", "file": "autofit/graphical/messages/__init__.py", "last_update_at": "2021-01-18T23:20:31+00:00", "pred": {"ppl": 5.1079487800598145, "ppl_lower": 6.210078239440918, "ppl/lowercase_ppl": -1.1198036757352485, "ppl/zlib": 0.006656318002954044, "Min_5.0% Prob": 9.621904373168945, "Min_10.0% Prob": 8.507029620083896, "Min_20.0% Prob": 6.269569749417513, "Min_30.0% Prob": 4.954632541712592, "Min_40.0% Prob": 3.9987463834493058, "Min_50.0% Prob": 3.2438972823578736, "Min_60.0% Prob": 2.739049105108648}}
{"hexsha": "85ecf5da466f0df65d97156a925dd2cbb9cc304a", "ext": "py", "lang": "Python", "content": "def predict_labels_datasets(weight0, weight1, weight23, data, transform_x, degree):\n    \"\"\" Generate the predictions given the weigth of the data set with num jet 0, 1  or {2,3} \"\"\"\n    ids = np.arange(data.shape[0])\n    tx_0, tx_1, tx_23 = transform_x(data, degree)\n    ids0 = ids[data[:, 22] == 0]\n    y_pred0 = np.dot(tx_0, weight0)\n    ids1 = ids[data[:, 22] == 1]\n    y_pred1 = np.dot(tx_1, weight1)\n    ids23 = ids[data[:, 22] > 1]\n    y_pred23 = np.dot(tx_23, weight23)\n    y_pred = np.concatenate((np.concatenate((y_pred0, y_pred1), axis=None), y_pred23), axis=None)\n    ids = np.concatenate((np.concatenate((ids0, ids1), axis=None), ids23), axis=None)\n    y = np.transpose(np.array([ids, y_pred]))\n    y = y[y[:, 0].argsort()][:, 1]\n    y[np.where(y <= 0)] = -1\n    y[np.where(y > 0)] = 1\n    return y", "fn_id": 2, "class_fn": false, "repo": "yannvon/higgs-boson", "file": "scripts/split.py", "last_update_at": "2021-11-01T12:55:40+00:00", "pred": {"ppl": 3.235306739807129, "ppl_lower": 3.3503293991088867, "ppl/lowercase_ppl": -1.0297540414738895, "ppl/zlib": 0.003234500668219215, "Min_5.0% Prob": 10.401232570409775, "Min_10.0% Prob": 8.34794494509697, "Min_20.0% Prob": 5.50733583523677, "Min_30.0% Prob": 3.8980379295103327, "Min_40.0% Prob": 2.9361686295614793, "Min_50.0% Prob": 2.3469228413973027, "Min_60.0% Prob": 1.9627535710708262}}
{"hexsha": "9681618928c5641d65d743ec3954a60d579c7fcb", "ext": "py", "lang": "Python", "content": "def bezierSliceFromTo(points, minParam, maxParam):\n    fromP = bezierPointAt(points, minParam)\n    fromT = bezierTangentAt(points, minParam)\n    toP = bezierPointAt(points, maxParam)\n    toT = bezierTangentAt(points, maxParam)\n    paramDiff = maxParam - minParam\n    return [fromP, fromP + fromT * paramDiff, toP - toT * paramDiff, toP]", "fn_id": 15, "class_fn": false, "repo": "calculusrobotics/RNNs-for-Bayesian-State-Estimation", "file": "Blender 2.91/2.91/scripts/addons/curve_tools/internal.py", "last_update_at": "2021-06-30T00:39:40+00:00", "pred": {"ppl": 2.7152278423309326, "ppl_lower": 3.293693780899048, "ppl/lowercase_ppl": -1.1933511469364102, "ppl/zlib": 0.006936637983972626, "Min_5.0% Prob": 10.42038803100586, "Min_10.0% Prob": 8.4363844871521, "Min_20.0% Prob": 4.92050575358527, "Min_30.0% Prob": 3.4101210983409995, "Min_40.0% Prob": 2.5203877941128754, "Min_50.0% Prob": 1.997671916206666, "Min_60.0% Prob": 1.6806391252075195}}
{"hexsha": "1bafe6e69cd8c367d829bb77f059218e660a5475", "ext": "py", "lang": "Python", "content": "def computeStarsItembased(corated, target_bid, model):\n    \"\"\"\n    corated - {bid: star, ...}\n    \"\"\"\n    if corated == None:\n        return None\n    corated.pop(target_bid, None)\n    bid_cor = list(corated.keys())\n    collect = []\n    for b in bid_cor:\n        pair = None\n        if b < target_bid:\n            pair = (b, target_bid)\n        else:\n            pair = (target_bid, b)\n        w = model.get(pair)\n        if w != None:\n            collect.append((pair, w, b))\n    collect.sort(key=lambda x: x[1], reverse=True)\n    neighbors = collect[:N_NEIGHBORS_ITEMBASED]\n    sum_w = 0\n    n = 0\n    for p, w, b in neighbors:\n        star = corated[b]\n        n += star * w\n        sum_w += w\n    if sum_w == 0:\n        return None\n    else:\n        return n / sum_w", "fn_id": 2, "class_fn": false, "repo": "maple1eaf/data_mining_inf553", "file": "assignment/assignment3/python/task3/task3predict_dev.py", "last_update_at": "2021-05-04T05:17:57+00:00", "pred": {"ppl": 3.433417558670044, "ppl_lower": 4.096863746643066, "ppl/lowercase_ppl": -1.1432165085988373, "ppl/zlib": 0.0034650453312304874, "Min_5.0% Prob": 10.388582533056086, "Min_10.0% Prob": 7.857521575430165, "Min_20.0% Prob": 5.512162589012308, "Min_30.0% Prob": 4.0560305190937855, "Min_40.0% Prob": 3.077323830745956, "Min_50.0% Prob": 2.4636945269559907, "Min_60.0% Prob": 2.063886937464039}}
{"hexsha": "e3a8b073f0f64789f2b3c0b201ed953476be70ca", "ext": "py", "lang": "Python", "content": "def get_quarter(month):\n    if month in ['January', 'April', 'July', 'October']:\n        return True\n    else:\n        return False", "fn_id": 2, "class_fn": false, "repo": "Mindhome/field_service", "file": "mindhome_alpha/erpnext/quality_management/doctype/quality_review/quality_review.py", "last_update_at": "2021-04-29T14:55:29+00:00", "pred": {"ppl": 5.442054748535156, "ppl_lower": 6.0983123779296875, "ppl/lowercase_ppl": -1.0672047472466517, "ppl/zlib": 0.01660937941843869, "Min_5.0% Prob": 13.824936866760254, "Min_10.0% Prob": 11.352123578389486, "Min_20.0% Prob": 8.058703064918518, "Min_30.0% Prob": 5.7638707756996155, "Min_40.0% Prob": 4.489552629490693, "Min_50.0% Prob": 3.385165912564844, "Min_60.0% Prob": 2.853076547016635}}
{"hexsha": "c5b9d51ce8759bd19c31258626e669df3a3907b6", "ext": "py", "lang": "Python", "content": "def bias_variable(shape, bias=0.01):\n    \"\"\"Function to initialize the bias. For ReLUs, it MUST be > 0.0\n\n    :param shape: the shape of the bias variable\n    :param val: the value of the bias variable\n    \"\"\"\n    initial = tf.constant(bias, shape=shape)\n    return tf.Variable(initial)", "fn_id": 1, "class_fn": false, "repo": "yxw027/mmWave-localization-learning", "file": "bff_positioning/models/layer_functions.py", "last_update_at": "2021-05-29T20:28:23+00:00", "pred": {"ppl": 4.272763252258301, "ppl_lower": 4.9386982917785645, "ppl/lowercase_ppl": -1.0997348742012694, "ppl/zlib": 0.00829863285495736, "Min_5.0% Prob": 12.584047317504883, "Min_10.0% Prob": 9.068605286734444, "Min_20.0% Prob": 6.069300635655721, "Min_30.0% Prob": 4.5998358726501465, "Min_40.0% Prob": 3.603834502158626, "Min_50.0% Prob": 2.9199847573271165, "Min_60.0% Prob": 2.4349637658513608}}
{"hexsha": "5f30e702c766d9408e95e8e3b793cedd534e612e", "ext": "py", "lang": "Python", "content": "def get_colorscale_values(cmap):\n    \"\"\"Get the colors composing a plotly colorscale.\n\n    Parameter\n    ---------\n    cmap : str\n        Name of the Plotly colorscale\n\n    Returns\n    -------\n    colorscale : array_like\n        Colors associated to the colormap\n    \"\"\"\n    import plotly\n    rev = '_r' if '_r' in cmap.lower() else ''\n    cmap = cmap.lower().replace('_r', '')\n    colorscales = plotly.colors.named_colorscales()\n    assert cmap in colorscales\n    ensembles = ['sequential', 'diverging', 'qualitative']\n    for e in ensembles:\n        cmaps = dir(eval(f'plotly.colors.{e}'))\n        cmaps_lower = [c.lower() for c in cmaps]\n        if cmap in cmaps_lower:\n            cmap_idx = cmaps_lower.index(cmap)\n            return eval(f'plotly.colors.{e}.{cmaps[cmap_idx]}{rev}')\n    assert ValueError(f'{cmap} is not a predefined colorscale {colorscales}')", "fn_id": 0, "class_fn": false, "repo": "brainets/netchos", "file": "netchos/utils/colors.py", "last_update_at": "2021-11-17T15:18:33+00:00", "pred": {"ppl": 3.7380740642547607, "ppl_lower": 4.085193634033203, "ppl/lowercase_ppl": -1.0673446009765264, "ppl/zlib": 0.0033046880268406183, "Min_5.0% Prob": 10.792095401070334, "Min_10.0% Prob": 8.44492532895959, "Min_20.0% Prob": 5.893838958537325, "Min_30.0% Prob": 4.310407147237233, "Min_40.0% Prob": 3.280947676047366, "Min_50.0% Prob": 2.645199397403715, "Min_60.0% Prob": 2.197104169812106}}
{"hexsha": "5ea5ff02510da4eb6075ea3e0e4184f4d733ca2e", "ext": "py", "lang": "Python", "content": "def detectFacesByRekognition(image_binary: bytes) -> List[List[float]]:\n    client = boto3.client('rekognition')\n    response = client.detect_faces(Image={'Bytes': image_binary}, Attributes=['ALL'])\n    faces = list()\n    for face_info in response['FaceDetails']:\n        faces.append(face_info['BoundingBox'])\n        print(face_info['BoundingBox'])\n    return faces", "fn_id": 1, "class_fn": false, "repo": "p1ass/emojic.ch", "file": "lambda/detect_face.py", "last_update_at": "2021-08-12T04:24:43+00:00", "pred": {"ppl": 2.8359997272491455, "ppl_lower": 5.089569091796875, "ppl/lowercase_ppl": -1.5610147114869226, "ppl/zlib": 0.0046744148542394, "Min_5.0% Prob": 10.078986644744873, "Min_10.0% Prob": 7.784538163079156, "Min_20.0% Prob": 4.9819416933589515, "Min_30.0% Prob": 3.500381879232548, "Min_40.0% Prob": 2.6021246493265435, "Min_50.0% Prob": 2.104126404687438, "Min_60.0% Prob": 1.7620264633304694}}
{"hexsha": "4a4bfa3d96580a5d40c5b2e5e994ece0ab585163", "ext": "py", "lang": "Python", "content": "def test_event_graph_accumulated_time_before_start(mocker: Any) -> None:\n    message = DeferredMessage(MyMessage, 'unittest_args', kwargs_field='unittest_kwargs')\n    topic = Topic(MyMessage)\n    start = Event(message, topic, 0.0, 1.0)\n    graph = EventGraph(start)\n    parent = Event(message, topic, 0.0, 1.0)\n    child = Event(message, topic, -3.0, 1.0)\n    graph.add_event_at_end(parent, start)\n    with pytest.raises(LabGraphError):\n        graph.add_event_at_end(child, parent)", "fn_id": 10, "class_fn": false, "repo": "mofe64/labgraph", "file": "labgraph/events/tests/test_event_generator.py", "last_update_at": "2021-08-01T06:31:08+00:00", "pred": {"ppl": 5.219986438751221, "ppl_lower": 7.094622611999512, "ppl/lowercase_ppl": -1.1856842840384088, "ppl/zlib": 0.006690262364173254, "Min_5.0% Prob": 11.189937455313546, "Min_10.0% Prob": 9.19219643274943, "Min_20.0% Prob": 6.811666465574695, "Min_30.0% Prob": 5.140110726052142, "Min_40.0% Prob": 4.020308183772223, "Min_50.0% Prob": 3.2646946341176575, "Min_60.0% Prob": 2.767229741320331}}
{"hexsha": "4ccaae78da187b459e1b8de6f377e49ceb0a7fea", "ext": "py", "lang": "Python", "content": "def _get_files_from_arcs(extension, arc_list=None, arc_path=None):\n    use_concurrency = False\n    if arc_path:\n        arc_list = find_files(arc_path, '.arc')\n    elif arc_list:\n        arc_list = arc_list\n    else:\n        arc_list = ARC_FILES\n    to_export = [arc_file for arc_file in arc_list if arc_file not in CACHE_ARC]\n    if to_export and use_concurrency:\n        concurrent_unpack(arc_list, CACHE_ARC, extension)\n    elif to_export and (not use_concurrency):\n        for arc_file in to_export:\n            _unpack_arc_in_temp(arc_file, CACHE_ARC)\n    files, ids = _get_files_and_ids(extension, arc_list)\n    return (files, ids)", "fn_id": 0, "class_fn": false, "repo": "BlenderCN-Org/albam", "file": "tests/mtframework/conftest.py", "last_update_at": "2021-01-05T22:58:18+00:00", "pred": {"ppl": 4.0475921630859375, "ppl_lower": 4.477086544036865, "ppl/lowercase_ppl": -1.072132704051373, "ppl/zlib": 0.005121326654519097, "Min_5.0% Prob": 9.994077258639866, "Min_10.0% Prob": 8.170627443413986, "Min_20.0% Prob": 5.809586139825674, "Min_30.0% Prob": 4.395798791071464, "Min_40.0% Prob": 3.4285463297214265, "Min_50.0% Prob": 2.794327276115565, "Min_60.0% Prob": 2.327158320727002}}
{"hexsha": "66c3929472e5beb4f365dc128305de4970e9e7a7", "ext": "py", "lang": "Python", "content": "def extract_sentences_and_labels_from_files(files):\n    sentences = []\n    labels = []\n    for infile in files:\n        with open(infile) as file:\n            for line in file:\n                sentence, label = parse_infile_line(line)\n                labels.append(label)\n                sentences.append(sentence)\n            file.close()\n    return (sentences, labels)", "fn_id": 1, "class_fn": false, "repo": "arielrodrigues/nlp-relations-extraction-ptbr", "file": "input-data-preparation/utils.py", "last_update_at": "2021-02-09T16:27:10+00:00", "pred": {"ppl": 2.9014220237731934, "ppl_lower": 2.9014220237731934, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006229245437625202, "Min_5.0% Prob": 9.506417036056519, "Min_10.0% Prob": 7.898790657520294, "Min_20.0% Prob": 5.162644267082214, "Min_30.0% Prob": 3.616736937314272, "Min_40.0% Prob": 2.7247909096768126, "Min_50.0% Prob": 2.129513273254128, "Min_60.0% Prob": 1.7823502963541873}}
{"hexsha": "0924022c1119a245a7cbca668d233e67f604810f", "ext": "py", "lang": "Python", "content": "def get_shifted_3D(tau, X, Y, Z, cam_left, cam_top, traj_left, traj_top, timespan):\n    corr_top, corr_left = shift_cam_coord(timespan, traj_top, traj_left, tau)\n    len_traj = len(corr_top)\n    x = np.zeros(np.shape(X)) * np.nan\n    y = np.zeros(np.shape(Y)) * np.nan\n    z = np.zeros(np.shape(Z)) * np.nan\n    for i in range(0, len_traj):\n        if not (np.isnan(X[i]) or np.isnan(Y[i]) or np.isnan(Z[i])):\n            A, B = make_system_mat(cam_top, cam_left, corr_left[i, :], corr_top[i, :])\n            x[i], y[i], z[i] = np.linalg.solve(np.matrix(A), np.matrix(B).T)\n    return (x, y, z, corr_top, corr_left)", "fn_id": 12, "class_fn": false, "repo": "simonBreumier/3Deye", "file": "data_treat/reconstruction_3d.py", "last_update_at": "2021-06-05T07:51:00+00:00", "pred": {"ppl": 3.2207133769989014, "ppl_lower": 3.3860409259796143, "ppl/lowercase_ppl": -1.0427995609593226, "ppl/zlib": 0.003991818705360191, "Min_5.0% Prob": 10.073240041732788, "Min_10.0% Prob": 8.014503231048584, "Min_20.0% Prob": 5.43481155872345, "Min_30.0% Prob": 3.8295449849806333, "Min_40.0% Prob": 2.9273912278142307, "Min_50.0% Prob": 2.337548410505291, "Min_60.0% Prob": 1.9542839091537691}}
{"hexsha": "f441d0b6f5533ef1211ad198d6e281b4230affcd", "ext": "py", "lang": "Python", "content": "def test_class4_ex4():\n    base_path = '../class4/exercises/exercise4'\n    cmd_list = ['ansible-playbook', 'exercise4.yml']\n    std_out, std_err, return_code = subprocess_runner(cmd_list, exercise_dir=base_path)\n    assert std_err == ''\n    assert return_code == 0", "fn_id": 4, "class_fn": false, "repo": "kinther/ansible_course", "file": "tests/test_class4.py", "last_update_at": "2021-05-24T01:58:08+00:00", "pred": {"ppl": 2.5562446117401123, "ppl_lower": 2.5562446117401123, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005553486585384761, "Min_5.0% Prob": 6.964185118675232, "Min_10.0% Prob": 5.69947275519371, "Min_20.0% Prob": 4.2872167229652405, "Min_30.0% Prob": 3.1069111054142318, "Min_40.0% Prob": 2.38649447937496, "Min_50.0% Prob": 1.8720962156246348, "Min_60.0% Prob": 1.569458807571506}}
{"hexsha": "f2310222e3119de7c2f2b3c8746814477e78d8d7", "ext": "py", "lang": "Python", "content": "def class_add_student(student_id, student_name):\n    \"\"\"\n    \u7528\u4e8e\u6dfb\u52a0\u5b66\u751f\n    \"\"\"\n    cur.execute(f\"insert into student_list values ({student_id},'{student_name}')\")\n    conn.commit()", "fn_id": 1, "class_fn": false, "repo": "XieJianCheng/ClassAdminSystem", "file": "module_new/class_admin_n.py", "last_update_at": "2021-11-11T12:41:09+00:00", "pred": {"ppl": 5.426816940307617, "ppl_lower": 5.426816940307617, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.011827641700879401, "Min_5.0% Prob": 7.367048740386963, "Min_10.0% Prob": 6.770975399017334, "Min_20.0% Prob": 5.5201669216156, "Min_30.0% Prob": 4.598615090052287, "Min_40.0% Prob": 3.906566822528839, "Min_50.0% Prob": 3.3013829313791714, "Min_60.0% Prob": 2.826596240843496}}
{"hexsha": "78f066607cb84040dfcf6fa504ecdea051a0dfbc", "ext": "py", "lang": "Python", "content": "def test_calculate_raises_with_no_active_phases_passed():\n    \"\"\"Passing inactive phases to calculate() raises a ConditionError.\"\"\"\n    with pytest.raises(ConditionError):\n        calculate(ALFE_DBF, ['AL', 'VA'], ['AL13FE4'], T=1200, P=101325)", "fn_id": 3, "class_fn": false, "repo": "dschwen/pycalphad", "file": "pycalphad/tests/test_calculate.py", "last_update_at": "2021-07-19T14:25:43+00:00", "pred": {"ppl": 11.022234916687012, "ppl_lower": 16.030038833618164, "ppl/lowercase_ppl": -1.1560679710337163, "ppl/zlib": 0.01363587834471307, "Min_5.0% Prob": 11.780001322428385, "Min_10.0% Prob": 9.906277179718018, "Min_20.0% Prob": 7.8697580655415855, "Min_30.0% Prob": 6.618904175965683, "Min_40.0% Prob": 5.450222307635892, "Min_50.0% Prob": 4.560885745745439, "Min_60.0% Prob": 3.9792070207388504}}
{"hexsha": "3546a7402fd9a0f1b6c55afe3610cdd62558560c", "ext": "py", "lang": "Python", "content": "def __get_stock_bar(code, start, end, freq):\n    df = None\n    _start = start.format()\n    _end = end.format()\n    if freq == util.FREQ_DAY or freq == util.FREQ_WEEK or freq == util.FREQ_MONTH:\n        covert = {util.FREQ_DAY: 'D', util.FREQ_WEEK: 'W', util.FREQ_MONTH: 'M'}\n        df = ts.get_stock_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    else:\n        covert = {util.FREQ_1M: '1MIN', util.FREQ_5M: '5MIN', util.FREQ_15M: '15MIN', util.FREQ_30M: '30MIN'}\n        df = ts.tushare_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError('df is unknown type %s' % type(df))\n    elif df.empty:\n        log.warn('%s from %s to %s bar[%s] is empty' % (code, start, end, freq))\n    return df", "fn_id": 3, "class_fn": false, "repo": "lijielife/carp", "file": "carp/request.py", "last_update_at": "2021-03-02T15:48:57+00:00", "pred": {"ppl": 2.557041883468628, "ppl_lower": 2.889086961746216, "ppl/lowercase_ppl": -1.130041333523693, "ppl/zlib": 0.0026079196558334936, "Min_5.0% Prob": 9.867539303643364, "Min_10.0% Prob": 7.2312705261366705, "Min_20.0% Prob": 4.503483586144029, "Min_30.0% Prob": 3.1203963270540847, "Min_40.0% Prob": 2.34759615873513, "Min_50.0% Prob": 1.8770772139962193, "Min_60.0% Prob": 1.5718883865216455}}
{"hexsha": "8644f9b2a8f01c213caf5bcbd4d123b465cabeeb", "ext": "py", "lang": "Python", "content": "@leet2git.command()\n@click.option('--source-repository', '-s', default='', help='the path to the folder where the code will be saved')\n@click.option('--language', '-l', default='python3', help='the default language')\n@click.option('--soft/--hard', default=True, help='A soft reset only erases the database. A hard reset also erase the files.')\n@click.pass_obj\ndef reset(cm: ConfigManager, source_repository: str, language: str, soft: bool):\n    \"\"\"Reset the configuration file\n    \\x0c\n    Args:\n        source_repository (str, optional): the path to the folder where the code will be saved.\n            Defaults to \"\".\n        language (str, optional): the default language. Defaults to \"python3\".\n        soft(bool, optional): the reset hardness. Defaults to soft.\n    \"\"\"\n    if not soft:\n        try:\n            click.confirm(f\"This will delete EVERY solution and test file inside                     the {cm.config['source_path']} folder.                      Still want to proceed?\", abort=True)\n        except Abort:\n            return\n        file_list = glob.glob(os.path.join(cm.config['source_path'], 'src', 'leetcode_*')) + glob.glob(os.path.join(cm.config['source_path'], 'tests', 'test_*'))\n        for file in file_list:\n            try:\n                os.remove(file)\n            except FileNotFoundError as e:\n                click.secho(e.args)\n    else:\n        try:\n            click.confirm('This will delete the question database. Still want to proceed?', abort=True)\n        except Abort:\n            return\n    reset_config(cm, source_repository, language)\n    cm.load_config()\n    qdb = QuestionDB(cm.config)\n    qdb.reset()\n    if not soft:\n        data = QuestionData(language=cm.config['language'])\n        file_handler = create_file_handler(data, cm.config)\n        file_handler.generate_repo(cm.config['source_path'])", "fn_id": 7, "class_fn": false, "repo": "sungho-joo/leetcode2github", "file": "src/leet2git/leet2git.py", "last_update_at": "2021-05-07T08:26:47+00:00", "pred": {"ppl": 3.7554380893707275, "ppl_lower": 4.397930145263672, "ppl/lowercase_ppl": -1.1193534398586877, "ppl/zlib": 0.0019066353698636582, "Min_5.0% Prob": 10.703183961951215, "Min_10.0% Prob": 8.476496831230495, "Min_20.0% Prob": 5.839666310859763, "Min_30.0% Prob": 4.276663457569868, "Min_40.0% Prob": 3.2842020586535736, "Min_50.0% Prob": 2.6472182606560586, "Min_60.0% Prob": 2.21084715081009}}
{"hexsha": "d1aed9946c2cb489d711ae8a1fe207359b86da6f", "ext": "py", "lang": "Python", "content": "def buildStartEndBreakProb(fit, nSegments, tag):\n\n    def sebBuilder(s):\n        return ee.String(s).cat('_' + tag)\n    segmentTag = buildSegmentTag(nSegments).map(sebBuilder)\n    zeros = ee.Array(0).repeat(0, nSegments)\n    magImg = fit.select(tag).arrayCat(zeros, 0).float().arraySlice(0, 0, nSegments)\n    return magImg.arrayFlatten([segmentTag])", "fn_id": 5, "class_fn": false, "repo": "rjsheperd/gee-gateway", "file": "gee/ccdc.py", "last_update_at": "2021-03-19T19:51:49+00:00", "pred": {"ppl": 10.220044136047363, "ppl_lower": 16.134307861328125, "ppl/lowercase_ppl": -1.1964406595560482, "ppl/zlib": 0.011015881058587041, "Min_5.0% Prob": 12.132325744628906, "Min_10.0% Prob": 10.839519500732422, "Min_20.0% Prob": 8.565516905351119, "Min_30.0% Prob": 6.875524268005833, "Min_40.0% Prob": 5.557113392786547, "Min_50.0% Prob": 4.547933552481911, "Min_60.0% Prob": 3.833162734454328}}
{"hexsha": "b735786ce4c39a03aae76e4daf78a4867d561247", "ext": "py", "lang": "Python", "content": "def test_subtraction_with_other_types():\n    price1 = Money(40, 'EUR')\n    price2 = Money(80, 'EUR')\n    price_range = MoneyRange(price1, price2)\n    with pytest.raises(TypeError):\n        price_range - 1", "fn_id": 6, "class_fn": false, "repo": "anton-shestakov/prices", "file": "tests/test_money_range.py", "last_update_at": "2021-11-17T14:38:52+00:00", "pred": {"ppl": 4.212429046630859, "ppl_lower": 6.531549453735352, "ppl/lowercase_ppl": -1.305001886332691, "ppl/zlib": 0.010812326706818497, "Min_5.0% Prob": 8.836224238077799, "Min_10.0% Prob": 7.340901772181193, "Min_20.0% Prob": 5.649044215679169, "Min_30.0% Prob": 4.440629243850708, "Min_40.0% Prob": 3.6020332741737366, "Min_50.0% Prob": 2.8577927800361067, "Min_60.0% Prob": 2.4176644859345338}}
{"hexsha": "1869c8f32f7f9bd4afb8cbf0bd42e3c02a87fce7", "ext": "py", "lang": "Python", "content": "def Vector4CrossProduct(vectorLeft, vectorRight):\n    assert isinstance(vectorRight, Vector4)\n    v = Vector4()\n    v.x = vectorLeft.y * vectorRight.z - vectorLeft.z * vectorRight.y\n    v.y = vectorLeft.z * vectorRight.x - vectorLeft.x * vectorRight.z\n    v.z = vectorLeft.x * vectorRight.y - vectorLeft.y * vectorRight.x\n    v.w = 0\n    return v", "fn_id": 11, "class_fn": false, "repo": "pome-ta/draftPythonistaScripts", "file": "simd/vector4.py", "last_update_at": "2021-08-05T04:31:02+00:00", "pred": {"ppl": 1.7807637453079224, "ppl_lower": 1.9427037239074707, "ppl/lowercase_ppl": -1.1508352608089825, "ppl/zlib": 0.0038469489511821484, "Min_5.0% Prob": 7.998305034637451, "Min_10.0% Prob": 5.8259928822517395, "Min_20.0% Prob": 2.9832596711459614, "Min_30.0% Prob": 1.9646234632236883, "Min_40.0% Prob": 1.4626618546615138, "Min_50.0% Prob": 1.1647612745528695, "Min_60.0% Prob": 0.9676536435591585}}
{"hexsha": "6780c64eb55bdd7710a2ca7590d41b28234c58e4", "ext": "py", "lang": "Python", "content": "def polyClipboard(*args, **kwargs):\n    \"\"\"\n    The command allows the user to copy and paste certain polygonal attributes to a clipboard. These attributes are:  1)\n    Shader (shading engine) assignment.  2) Texture coordinate (UV) assignment.  3) Color value assignment. Any combination\n    of attributes can be chosen for the copy or paste operation. If the attribute has not been copied to the clipboard, then\n    naturally it cannot be pasted from the clipboard. The copy option will copy the attribute assignments from a single\n    source polygonal dag object or polygon component. If the source does not have the either UV or color attributes, then\n    nothing will be copied to the clipboard. The paste option will paste the attribute assignments to one or more polygon\n    components or polygonal dag objects. If the destination does not have either UV or color attributes, then new values\n    will be assigned as needed. Additionally, there is the option to clear the clipboard contents\n    \n    Flags:\n      - clear : cl                     (bool)          [create]\n          When used, will mean to clear the specified attribute argument(s).\n    \n      - color : clr                    (bool)          [create]\n          When used, will be to copy or paste color attributes\n    \n      - copy : cp                      (bool)          [create]\n          When used, will mean to copy the specified attribute argument(s).\n    \n      - paste : ps                     (bool)          [create]\n          When used, will mean to paste the specified attribute argument(s).\n    \n      - shader : sh                    (bool)          [create]\n          When used, will be to copy or paste shader attributes\n    \n      - uvCoordinates : uv             (bool)          [create]\n          When used, will be to copy or paste texture coordinate attributes                                  Flag can have\n          multiple arguments, passed either as a tuple or a list.\n    \n    \n    Derived from mel command `maya.cmds.polyClipboard`\n    \"\"\"\n    pass", "fn_id": 220, "class_fn": false, "repo": "FXTD-ODYSSEY/vscode-mayapy", "file": "mayaSDK/pymel/core/modeling.py", "last_update_at": "2021-12-26T06:56:16+00:00", "pred": {"ppl": 5.3552703857421875, "ppl_lower": 6.821021556854248, "ppl/lowercase_ppl": -1.1441694567294598, "ppl/zlib": 0.002558050601870599, "Min_5.0% Prob": 11.9194926738739, "Min_10.0% Prob": 9.187661659717559, "Min_20.0% Prob": 6.6593342334032055, "Min_30.0% Prob": 5.158545248707136, "Min_40.0% Prob": 4.116329707577824, "Min_50.0% Prob": 3.3387325087293465, "Min_60.0% Prob": 2.7964540600111993}}
{"hexsha": "ce10512207649c9489cbc69c74570eefc9c463ff", "ext": "py", "lang": "Python", "content": "def get_data_int():\n    X = np.array([[2, 20, 3], [4, 50, 6], [7, 80, 9], [10, 110, 12]])\n    y_int = np.array([1, 2, 3, 4])\n    return (X, y_int)", "fn_id": 0, "class_fn": false, "repo": "gradientzero/dq0-sdk", "file": "tests/test_pipeline/test_pipeline.py", "last_update_at": "2021-03-18T21:26:29+00:00", "pred": {"ppl": 2.5014097690582275, "ppl_lower": 2.473107099533081, "ppl/lowercase_ppl": -0.9875888860594515, "ppl/zlib": 0.00804258316281833, "Min_5.0% Prob": 8.084135293960571, "Min_10.0% Prob": 5.868269681930542, "Min_20.0% Prob": 4.110665522515774, "Min_30.0% Prob": 2.9168604135513307, "Min_40.0% Prob": 2.2913400395350023, "Min_50.0% Prob": 1.825800903496288, "Min_60.0% Prob": 1.5392064789868891}}
{"hexsha": "a0e82345e90e71c8a988186287df593c48a61aad", "ext": "py", "lang": "Python", "content": "async def selectDB(userid):\n    conn = sqlite3.connect('ID_DATA.db')\n    c = conn.cursor()\n    cursor = c.execute('SELECT *  FROM UIDDATA WHERE USERID = ?', (userid,))\n    for row in cursor:\n        if row[0]:\n            if row[2]:\n                return [row[2], 3]\n            elif row[1]:\n                return [row[1], 2]\n            else:\n                return None\n        else:\n            return None", "fn_id": 1, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/GenshinUID/getDB.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 3.629340887069702, "ppl_lower": 3.9728941917419434, "ppl/lowercase_ppl": -1.07016307547192, "ppl/zlib": 0.006197360855674231, "Min_5.0% Prob": 10.191371154785156, "Min_10.0% Prob": 8.105481386184692, "Min_20.0% Prob": 5.483631179446266, "Min_30.0% Prob": 4.1371550310042595, "Min_40.0% Prob": 3.168815086994852, "Min_50.0% Prob": 2.5889703495284686, "Min_60.0% Prob": 2.1466992016999966}}
{"hexsha": "de5093d7a37e19119c9ed380921063f98f98a572", "ext": "py", "lang": "Python", "content": "def solve_all(l, r):\n    res.clear()\n    nl = l.copy()\n    for i in range(len(nl)):\n        nl[i] = (frac(nl[i]), str(nl[i]))\n    solve_all_rec(nl, frac(r))\n    return res", "fn_id": 1, "class_fn": false, "repo": "mateo-cv/KryptoCards", "file": "solver_all.py", "last_update_at": "2021-11-06T02:19:58+00:00", "pred": {"ppl": 5.879297733306885, "ppl_lower": 5.879297733306885, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01476197768055633, "Min_5.0% Prob": 11.8713591893514, "Min_10.0% Prob": 9.710511048634848, "Min_20.0% Prob": 6.819159489411574, "Min_30.0% Prob": 5.341528315293162, "Min_40.0% Prob": 4.2729431963883915, "Min_50.0% Prob": 3.5671318462118506, "Min_60.0% Prob": 2.945163714006925}}
{"hexsha": "6a6c2ee6803eaaa2206bcf41874368968655c509", "ext": "py", "lang": "Python", "content": "def tsne_plot(model):\n    labels = []\n    tokens = []\n    print('Displaying t-SNE...')\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n    plt.figure(figsize=(16, 16))\n    for i in range(len(x)):\n        plt.scatter(x[i], y[i])\n        plt.annotate(labels[i], xy=(x[i], y[i]), xytext=(5, 2), textcoords='offset points', ha='right', va='bottom')\n    plt.title('t-SNE')\n    plt.show()", "fn_id": 3, "class_fn": false, "repo": "cjbayron/artist2lyrics", "file": "common/utils.py", "last_update_at": "2021-11-08T12:49:36+00:00", "pred": {"ppl": 1.3838530778884888, "ppl_lower": 1.5852328538894653, "ppl/lowercase_ppl": -1.4181946782944765, "ppl/zlib": 0.0008828035162101602, "Min_5.0% Prob": 5.654038515957919, "Min_10.0% Prob": 3.2275406472060992, "Min_20.0% Prob": 1.6238597225239302, "Min_30.0% Prob": 1.0941012401998575, "Min_40.0% Prob": 0.8154145408585232, "Min_50.0% Prob": 0.6497090960758091, "Min_60.0% Prob": 0.5437506730422619}}
{"hexsha": "71850fd6a06c73964f1a9b9a4f6b911414e14aff", "ext": "py", "lang": "Python", "content": "@pytest.mark.usefixtures('aftersocialregister_app')\ndef test_aftersocialregister(aftersocialregister_config, db_session):\n    \"\"\"Register fresh user and logs him in and check response if redirect from AfterSocialRegister.\"\"\"\n    profile = {'accounts': [{'domain': 'facebook.com', 'userid': '2343'}], 'displayName': 'teddy', 'verifiedEmail': 'we@po.pl', 'preferredUsername': 'teddy', 'emails': [{'value': 'aasd@bwwqwe.pl'}], 'name': 'ted'}\n    credentials = {'oauthAccessToken': '7897048593434'}\n    provider_name = 'facebook'\n    provider_type = 'facebook'\n    request = testing.DummyRequest()\n    request.user = None\n    request.registry = aftersocialregister_config.registry\n    request.remote_addr = '127.0.0.123'\n    request.context = AuthenticationComplete(profile, credentials, provider_name, provider_type)\n    request.login_perform = MagicMock(name='login_perform')\n    request.login_perform.return_value = {'status': True}\n    view = SocialLoginViews(request)\n    out = view()\n    assert out.location == EVENT_PATH.format(AfterSocialRegister)\n    transaction.commit()\n    user = db_session.query(User).one()\n    assert user.is_active\n    assert user.provider_id('facebook') == profile['accounts'][0]['userid']", "fn_id": 24, "class_fn": false, "repo": "fizyk/pyramid_fullauth", "file": "tests/views/test_events.py", "last_update_at": "2021-11-14T15:36:07+00:00", "pred": {"ppl": 5.338261604309082, "ppl_lower": 7.6992998123168945, "ppl/lowercase_ppl": -1.218657424881442, "ppl/zlib": 0.002791500096179168, "Min_5.0% Prob": 11.196126103401184, "Min_10.0% Prob": 8.966994256684274, "Min_20.0% Prob": 6.532127524867202, "Min_30.0% Prob": 5.064664478302002, "Min_40.0% Prob": 4.0729688997555495, "Min_50.0% Prob": 3.3174918206509, "Min_60.0% Prob": 2.789429999794811}}
{"hexsha": "9109af01b75d406c726ca60fbd26a94a9e80f374", "ext": "py", "lang": "Python", "content": "def MultiscaleEntropy_mse(x, scale_factor=[i for i in range(1, 21)], m=[2], r=[0.15], return_type='dict', safe_mode=False):\n    \"\"\"[Multiscale Entropy]\n\n    Arguments:\n        x {[input signal]} -- [an iterator of numbers]\n\n    Keyword Arguments:\n        scale_factor {list} -- [scale factors of coarse graining] (default: {[i for i in range(1,21)]})\n        m {list} -- [m in sample entropy] (default: {[2]})\n        r {list} -- [r in sample entropy] (default: {[0.15]})\n        return_type {str} -- [can be dict or list] (default: {'dict'})\n        safe_mode {bool} -- [if set True, type checking will be skipped] (default: {False})\n\n    Raises:\n        ValueError -- [some values too big]\n\n    Returns:\n        [dict or list as return_type indicates] -- [if dict, nest as [scale_factor][m][r] for each value of scale_factor, m, r; if list nest as [i][j][k] for lengths of scale_factor, m, r]\n    \"\"\"\n    if not safe_mode:\n        m = MultiscaleEntropy_check_type(m, int, 'm')\n        r = MultiscaleEntropy_check_type(r, float, 'r')\n        scale_factor = MultiscaleEntropy_check_type(scale_factor, int, 'scale_factor')\n    try:\n        x = np.array(x)\n    except:\n        print('x should be a sequence of numbers')\n    if max(scale_factor) > len(x):\n        raise ValueError(\"the max scale_factor is bigger than x's length\")\n    sd = np.sqrt(np.var(x))\n    ms_en = MultiscaleEntropy_init_return_type(return_type)\n    for s_f in scale_factor:\n        y = MultiscaleEntropy_coarse_grain(x, s_f)\n        if return_type == 'dict':\n            ms_en[s_f] = MultiscaleEntropy_sample_entropy(y, m, r, sd, 'dict', True)\n        else:\n            ms_en.append(MultiscaleEntropy_sample_entropy(y, m, r, sd, 'list', True))\n    if return_type == 'list':\n        ms_en = [i[0] for i in ms_en]\n        ms_en = [i[0] for i in ms_en]\n    return ms_en", "fn_id": 18, "class_fn": false, "repo": "LRydin/NeuroKit", "file": "tests/tests_complexity.py", "last_update_at": "2021-06-10T03:27:15+00:00", "pred": {"ppl": 3.0679681301116943, "ppl_lower": 3.410574436187744, "ppl/lowercase_ppl": -1.0944369085619186, "ppl/zlib": 0.0015968881703883548, "Min_5.0% Prob": 10.254199208884403, "Min_10.0% Prob": 7.747573429140552, "Min_20.0% Prob": 5.109985860257313, "Min_30.0% Prob": 3.671823246896952, "Min_40.0% Prob": 2.801417433881554, "Min_50.0% Prob": 2.2405539202628675, "Min_60.0% Prob": 1.8692339510279294}}
{"hexsha": "d2664e1063dfac0585b27173768ffad2c031b7e9", "ext": "py", "lang": "Python", "content": "def _InceptionV3_blockH(x):\n    block1 = conv2d_bn(x, 320, (1, 1))\n    block2 = conv2d_bn(x, 384, (1, 1))\n    block2_1 = conv2d_bn(block2, 384, (1, 3))\n    block2_2 = conv2d_bn(block2, 384, (3, 1))\n    block2 = Concatenate()([block2_1, block2_2])\n    block3 = conv2d_bn(x, 448, (1, 1))\n    block3_1 = conv2d_bn(block3, 384, (3, 3))\n    block3_2 = conv2d_bn(block3, 384, (1, 3))\n    block3_3 = conv2d_bn(block3, 384, (3, 1))\n    block3 = Concatenate()([block3_1, block3_2, block3_3])\n    block4 = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    block4 = conv2d_bn(block4, 192, (1, 1))\n    x = Concatenate()([block1, block2, block3, block4])\n    return x", "fn_id": 8, "class_fn": false, "repo": "Hiroaki-Ozaki/modelib-classification", "file": "keras/models/InceptionV3.py", "last_update_at": "2021-04-14T08:56:01+00:00", "pred": {"ppl": 1.2738417387008667, "ppl_lower": 1.3769670724868774, "ppl/lowercase_ppl": -1.3216280022407276, "ppl/zlib": 0.0010299460659313783, "Min_5.0% Prob": 4.067416772246361, "Min_10.0% Prob": 2.328551256097853, "Min_20.0% Prob": 1.2182921439525671, "Min_30.0% Prob": 0.8078408642364762, "Min_40.0% Prob": 0.6077834951620036, "Min_50.0% Prob": 0.4840443188582014, "Min_60.0% Prob": 0.40421934330832715}}
{"hexsha": "be392b1159ec0d0cbf136ec1807d49c872f36a16", "ext": "py", "lang": "Python", "content": "def plot_oi(ticker: str, expiry: str, min_sp: float, max_sp: float, calls_only: bool, puts_only: bool, export: str):\n    \"\"\"Plot open interest\n\n    Parameters\n    ----------\n    ticker: str\n        Ticker\n    expiry: str\n        Expiry date for options\n    min_sp: float\n        Min strike to consider\n    max_sp: float\n        Max strike to consider\n    calls_only: bool\n        Show calls only\n    puts_only: bool\n        Show puts only\n    export: str\n        Format to export file\n    \"\"\"\n    options = tradier_model.get_option_chains(ticker, expiry)\n    export_data(export, os.path.dirname(os.path.abspath(__file__)), 'oi_tr', options)\n    current_price = tradier_model.last_price(ticker)\n    if min_sp == -1:\n        min_strike = 0.75 * current_price\n    else:\n        min_strike = min_sp\n    if max_sp == -1:\n        max_strike = 1.25 * current_price\n    else:\n        max_strike = max_sp\n    if calls_only and puts_only:\n        print('Both flags selected, please select one', '\\n')\n        return\n    calls = options[options.option_type == 'call'][['strike', 'open_interest']]\n    puts = options[options.option_type == 'put'][['strike', 'open_interest']]\n    call_oi = calls.set_index('strike')['open_interest'] / 1000\n    put_oi = puts.set_index('strike')['open_interest'] / 1000\n    df_opt = pd.merge(call_oi, put_oi, left_index=True, right_index=True)\n    df_opt = df_opt.rename(columns={'open_interest_x': 'OI_call', 'open_interest_y': 'OI_put'})\n    max_pain = op_helpers.calculate_max_pain(df_opt)\n    plt.style.use('classic')\n    fig, ax = plt.subplots(figsize=plot_autoscale(), dpi=cfp.PLOT_DPI)\n    if not calls_only:\n        put_oi.plot(x='strike', y='open_interest', label='Puts', ax=ax, marker='o', ls='-', c='r')\n    if not puts_only:\n        call_oi.plot(x='strike', y='open_interest', label='Calls', ax=ax, marker='o', ls='-', c='g')\n        ax.axvline(current_price, lw=2, c='k', ls='--', label='Current Price', alpha=0.7)\n        ax.axvline(max_pain, lw=3, c='k', label=f'Max Pain: {max_pain}', alpha=0.7)\n        ax.grid('on')\n        ax.set_xlabel('Strike Price')\n        ax.set_ylabel('Open Interest (1k) ')\n        ax.set_xlim(min_strike, max_strike)\n        if gtff.USE_ION:\n            plt.ion()\n        ax.set_title(f'Open Interest for {ticker.upper()} expiring {expiry}')\n        plt.legend(loc=0)\n        fig.tight_layout(pad=1)\n    plt.show()\n    plt.style.use('default')\n    print('')", "fn_id": 4, "class_fn": false, "repo": "Aerex/GamestonkTerminal", "file": "gamestonk_terminal/stocks/options/tradier_view.py", "last_update_at": "2021-03-11T17:42:35+00:00", "pred": {"ppl": 1.9478002786636353, "ppl_lower": 2.109821081161499, "ppl/lowercase_ppl": -1.119847598459787, "ppl/zlib": 0.0007161124313757116, "Min_5.0% Prob": 7.426607546053435, "Min_10.0% Prob": 5.3996570769109224, "Min_20.0% Prob": 3.2208403892376842, "Min_30.0% Prob": 2.212315025450621, "Min_40.0% Prob": 1.6647897069798965, "Min_50.0% Prob": 1.3349163273400602, "Min_60.0% Prob": 1.1111303473132144}}
{"hexsha": "467014e3a54821c2e5ac7b33d2f939b0052d1b15", "ext": "py", "lang": "Python", "content": "def run_task(hosts, command, timeout=None):\n    \"\"\"Create a task to run a command on each host in parallel.\n\n    Args:\n        hosts (list): list of hosts\n        command (str): the command to run in parallel\n        timeout (int, optional): command timeout in seconds. Defaults to None.\n\n    Returns:\n        Task: a ClusterShell.Task.Task object for the executed command\n\n    \"\"\"\n    task = task_self()\n    task.set_info('ssh_options', '-oForwardAgent=yes')\n    kwargs = {'command': command, 'nodes': NodeSet.fromlist(hosts)}\n    if timeout is not None:\n        kwargs['timeout'] = timeout\n    task.run(**kwargs)\n    return task", "fn_id": 3, "class_fn": false, "repo": "kmajzero/daos", "file": "src/tests/ftest/util/general_utils.py", "last_update_at": "2021-04-13T16:04:21+00:00", "pred": {"ppl": 3.55916690826416, "ppl_lower": 4.945154666900635, "ppl/lowercase_ppl": -1.259058584683803, "ppl/zlib": 0.0037449159378929986, "Min_5.0% Prob": 9.251021385192871, "Min_10.0% Prob": 7.5568463961283365, "Min_20.0% Prob": 5.4281929651896155, "Min_30.0% Prob": 4.0711887372864615, "Min_40.0% Prob": 3.1189912274235585, "Min_50.0% Prob": 2.54033532326943, "Min_60.0% Prob": 2.1312354462077985}}
{"hexsha": "dac2bf672e1bd9ca92568b7538b014b4a37dd949", "ext": "py", "lang": "Python", "content": "def find_euler_random(n):\n    while True:\n        el = np.array([random.randint(0, 4) * 2 for x in range(n + 1)])\n        try:\n            g = Graph.from_sequence(el)\n            choose_biggest_comp(g)\n            if g.adjacency.shape[0] != n:\n                continue\n            print(g.adjacency)\n            for i in range(el.shape[0] * 3):\n                g.randomize_edges()\n            print(g.adjacency)\n            graph = nx.from_numpy_matrix(g.adjacency)\n            euler_list = []\n            euler(g.adjacency.tolist(), 0, euler_list)\n            print(euler_list)\n            plt.subplot(111)\n            nx.draw(graph, with_labels=True, font_weight='bold')\n            plt.show()\n            break\n        except NotGraphicSequenceException:\n            continue", "fn_id": 3, "class_fn": false, "repo": "timcki/graficiarze", "file": "02_project/main.py", "last_update_at": "2021-05-14T11:35:04+00:00", "pred": {"ppl": 4.488327980041504, "ppl_lower": 5.382704257965088, "ppl/lowercase_ppl": -1.1210210083043366, "ppl/zlib": 0.004302235658688014, "Min_5.0% Prob": 10.37739953994751, "Min_10.0% Prob": 8.525987647828602, "Min_20.0% Prob": 6.302217120216007, "Min_30.0% Prob": 4.705255756154656, "Min_40.0% Prob": 3.6774912497576544, "Min_50.0% Prob": 2.974638658845536, "Min_60.0% Prob": 2.5054836446943227}}
{"hexsha": "b27331e2a40b51e2950c979f9bac602c12eef9c1", "ext": "py", "lang": "Python", "content": "@app.route('/')\n@app.route('/index')\ndef index():\n    app.logger.debug('Entering index')\n    flask.session['user_id'] = 'creator'\n    flask.session['finished'] = check_completed()\n    flask.session['to_finish'] = PEOPLE_TO_INVITE\n    events = []\n    for record in collection.find({'user_id': 'creator'}):\n        events.append(record)\n    if len(events) > 0:\n        return render_template('waiting.html')\n    if 'begin_date' not in flask.session:\n        init_session_values()\n    return render_template('index.html')", "fn_id": 0, "class_fn": false, "repo": "Dream7hief/MeetMe", "file": "flask_main.py", "last_update_at": "2021-02-08T20:18:11+00:00", "pred": {"ppl": 4.839593887329102, "ppl_lower": 5.147011756896973, "ppl/lowercase_ppl": -1.0390565017398175, "ppl/zlib": 0.005591598615714435, "Min_5.0% Prob": 12.067880085536412, "Min_10.0% Prob": 10.1797194480896, "Min_20.0% Prob": 6.923829761044733, "Min_30.0% Prob": 5.024465235796842, "Min_40.0% Prob": 3.93810875354142, "Min_50.0% Prob": 3.1612219443059946, "Min_60.0% Prob": 2.6295272869862276}}
{"hexsha": "11ad143814ad6766582b44de612f20dfd8d0423f", "ext": "py", "lang": "Python", "content": "def test_x86_direct():\n    insn = ms.ISA_X86.parse_instruction('mov eax, dword ptr [0x8000]')\n    assert insn.num_operands == 2\n    op = insn.operands[1]\n    assert op.is_direct\n    assert op.offset == 32768\n    assert op.base_reg is None\n    assert op.index_reg is None\n    assert op.scale == 1\n    assert str(op) == '0x8000'\n    assert repr(op) == '<MemoryOperand(offset=0x8000)>'", "fn_id": 11, "class_fn": false, "repo": "giltom/megastone", "file": "tests/test_disasm.py", "last_update_at": "2021-04-12T15:12:10+00:00", "pred": {"ppl": 3.2226555347442627, "ppl_lower": 3.9491052627563477, "ppl/lowercase_ppl": -1.1737158810019312, "ppl/zlib": 0.005319116908677596, "Min_5.0% Prob": 8.781913042068481, "Min_10.0% Prob": 7.049112429985633, "Min_20.0% Prob": 4.979413209138094, "Min_30.0% Prob": 3.7612002402544022, "Min_40.0% Prob": 2.907389097191669, "Min_50.0% Prob": 2.3307579507613005, "Min_60.0% Prob": 1.9623150976811663}}
{"hexsha": "12b9c9e1e1cd70be553e0f6bc5aeab33f9e284de", "ext": "py", "lang": "Python", "content": "def build_data_str(records):\n    records_data_str = []\n    for record in records:\n        records_data_str.append(tup_to_str(record))\n    return records_data_str", "fn_id": 0, "class_fn": false, "repo": "pangeon/Taskello", "file": "utils/str_utils.py", "last_update_at": "2021-06-22T21:18:37+00:00", "pred": {"ppl": 3.572751522064209, "ppl_lower": 3.572751522064209, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.014148178148889193, "Min_5.0% Prob": 10.674309730529785, "Min_10.0% Prob": 8.9626305103302, "Min_20.0% Prob": 5.9654308160146075, "Min_30.0% Prob": 4.3656950776393595, "Min_40.0% Prob": 3.2162684525052705, "Min_50.0% Prob": 2.5398842674558577, "Min_60.0% Prob": 2.1680746106085955}}
{"hexsha": "e7dae2609f1a6ef8908cb001bd4912ee60a48a48", "ext": "py", "lang": "Python", "content": "def construct_tabs(selected_pipeline, window, prefs, include_eeg):\n    \"\"\"Constructs as set of tabs based on specifications and the\n    selected pipeline.\n\n    Parameters\n    ----------\n    selected_pipeline : str\n        ID of the selected pipeline\n    window : instance of main window\n        The main window.\n    prefs : Instance of PreferencesHandler\n        Stores e.g. active plugins.\n    include_eeg : bool\n        Whether to add EEG-related actions\n\n    Returns\n    -------\n    list of QDialog\n        Contains the constructed tabs relevant to the pipeline\n    \"\"\"\n    active_plugins = prefs.active_plugins\n    action_specs = find_all_action_specs()\n    datatype_specs = find_all_datatype_specs()\n    package_specs = find_all_package_specs()\n    tabs = []\n    pipelines = []\n    for source, package_spec in package_specs.items():\n        if source not in active_plugins and source != 'meggie':\n            continue\n        if 'tabs' in package_spec:\n            tabs.extend(package_spec['tabs'])\n        if 'pipelines' in package_spec:\n            pipelines.extend(package_spec['pipelines'])\n    for tab in tabs:\n        if 'id' not in tab:\n            raise Exception('Every tab specification must have id.')\n        if 'name' not in tab:\n            tab['name'] = tab['id']\n        if 'inputs' not in tab:\n            tab['inputs'] = []\n        if 'outputs' not in tab:\n            tab['outputs'] = []\n        if 'input_actions' not in tab:\n            tab['input_actions'] = []\n        if 'output_actions' not in tab:\n            tab['output_actions'] = []\n        if 'info' not in tab:\n            tab['info'] = []\n    for pipeline in pipelines:\n        if 'id' not in pipeline:\n            raise Exception('Every pipeline must have id.')\n        if 'name' not in pipeline:\n            pipeline['name'] = pipeline['id']\n    found = False\n    pipeline_spec = None\n    for pipeline in pipelines:\n        if pipeline['id'] == selected_pipeline:\n            found = True\n            pipeline_spec = pipeline\n            break\n    if not found:\n        pipeline_spec = {'id': 'classic', 'name': 'Include everything'}\n    combined_tabs = []\n    for tab_spec in tabs:\n        if pipeline_spec.get('include_tabs'):\n            if tab_spec['id'] not in pipeline_spec['include_tabs']:\n                continue\n        if tab_spec['id'] not in [tab['id'] for tab in combined_tabs]:\n            new_tab = {}\n            new_tab['id'] = tab_spec['id']\n            new_tab['name'] = tab_spec['name']\n            new_tab['inputs'] = []\n            new_tab['outputs'] = []\n            new_tab['input_actions'] = []\n            new_tab['output_actions'] = []\n            new_tab['info'] = []\n            idx = len(combined_tabs)\n            combined_tabs.append(new_tab)\n        else:\n            idx = [tab['id'] for tab in combined_tabs].index(tab_spec['id'])\n        for input_spec in tab_spec['inputs']:\n            if input_spec not in combined_tabs[idx]['inputs']:\n                combined_tabs[idx]['inputs'].append(input_spec)\n        for output_spec in tab_spec['outputs']:\n            if output_spec not in combined_tabs[idx]['outputs']:\n                combined_tabs[idx]['outputs'].append(output_spec)\n        for input_spec in tab_spec['input_actions']:\n            action_spec = action_specs.get(input_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + input_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if input_spec not in combined_tabs[idx]['input_actions']:\n                combined_tabs[idx]['input_actions'].append(input_spec)\n        for output_spec in tab_spec['output_actions']:\n            action_spec = action_specs.get(output_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + output_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if output_spec not in combined_tabs[idx]['output_actions']:\n                combined_tabs[idx]['output_actions'].append(output_spec)\n        for info_spec in tab_spec['info']:\n            action_spec = action_specs.get(info_spec)\n            if not action_spec:\n                raise Exception('Cannot read info item ' + info_spec + '.')\n            if info_spec not in combined_tabs[idx]['info']:\n                combined_tabs[idx]['info'].append(info_spec)\n    tabs = []\n    for tab_spec in combined_tabs:\n        tabs.append(construct_tab(tab_spec, action_specs, datatype_specs, window))\n    return tabs", "fn_id": 6, "class_fn": false, "repo": "Teekuningas/meggie", "file": "meggie/mainwindow/dynamic.py", "last_update_at": "2021-01-15T21:21:51+00:00", "pred": {"ppl": 1.991474986076355, "ppl_lower": 2.140227794647217, "ppl/lowercase_ppl": -1.104571435095999, "ppl/zlib": 0.0006354940620086703, "Min_5.0% Prob": 8.359575570798388, "Min_10.0% Prob": 5.80678889798183, "Min_20.0% Prob": 3.379707907344781, "Min_30.0% Prob": 2.2972590347958937, "Min_40.0% Prob": 1.7223950188463522, "Min_50.0% Prob": 1.378996951776646, "Min_60.0% Prob": 1.1496102178404872}}
{"hexsha": "8ce8096f58ca81419a2edfa556d2c57b16fdd66c", "ext": "py", "lang": "Python", "content": "def deepcopy_and_sign(rlp_signable, privatekey):\n    msg = deepcopy(rlp_signable)\n    msg.sign(privatekey)\n    return msg", "fn_id": 0, "class_fn": false, "repo": "luehrsFred/raidex", "file": "raidex/tests/unit/commitment_service/old_test_swap_commitment.py", "last_update_at": "2021-06-22T05:01:56+00:00", "pred": {"ppl": 6.15884256362915, "ppl_lower": 6.15884256362915, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.02190227547441092, "Min_5.0% Prob": 10.800603866577148, "Min_10.0% Prob": 9.893880844116211, "Min_20.0% Prob": 8.13293879372733, "Min_30.0% Prob": 5.859969789331609, "Min_40.0% Prob": 4.740910232067108, "Min_50.0% Prob": 3.730626625733243, "Min_60.0% Prob": 3.056567188225348}}
{"hexsha": "338af77e36625c6e736374eb318b1d3d29015cd3", "ext": "py", "lang": "Python", "content": "def find_replacement_chord(chord):\n    t = chord.transpose(-chord.bass)\n    if t.pitches == (0, 4, 6, 10):\n        return Chord(bass=0, root=0, pitches=(0, 4, 10)).transpose(chord.bass)\n    if t.pitches == (0, 3, 8, 10):\n        return Chord(bass=0, root=8, pitches=(0, 3, 8)).transpose(chord.bass)\n    if t.pitches == (0, 4, 6, 11):\n        return Chord(bass=0, root=0, pitches=(0, 4, 6, 7, 11)).transpose(chord.bass)\n    if t.pitches == (0, 2, 4, 6, 10):\n        return Chord(bass=0, root=10, pitches=(0, 2, 6, 10)).transpose(chord.bass)\n    raise ValueError('no such chord: ' + str(chord))", "fn_id": 7, "class_fn": false, "repo": "andreasjansson/music-inpainting-bert", "file": "data.py", "last_update_at": "2021-11-25T22:59:11+00:00", "pred": {"ppl": 1.8875728845596313, "ppl_lower": 2.0546016693115234, "ppl/lowercase_ppl": -1.1334665053814101, "ppl/zlib": 0.0032085445238977627, "Min_5.0% Prob": 6.322735859797551, "Min_10.0% Prob": 4.732434153556824, "Min_20.0% Prob": 2.9762946277294517, "Min_30.0% Prob": 2.0988251538947225, "Min_40.0% Prob": 1.5874970840620939, "Min_50.0% Prob": 1.2700187150847668, "Min_60.0% Prob": 1.0639964795853303}}
{"hexsha": "969279abcd7947481d7b6dda02b897ac7a615367", "ext": "py", "lang": "Python", "content": "def main() -> typing.NoReturn:\n    h, w, d = map(int, input().split())\n    I = np.array(sys.stdin.read().split(), dtype=np.int64)\n    a = I[:h * w].reshape(h, w) - 1\n    lr = I[h * w + 1:].reshape(-1, 2) - 1\n    solve(a, d, lr)", "fn_id": 1, "class_fn": false, "repo": "kagemeka/competitive-programming", "file": "src/atcoder/abc089/d/sol_0.py", "last_update_at": "2021-07-11T03:20:10+00:00", "pred": {"ppl": 2.576399803161621, "ppl_lower": 3.0791923999786377, "ppl/lowercase_ppl": -1.1883724368708932, "ppl/zlib": 0.005806092020184325, "Min_5.0% Prob": 9.028239846229553, "Min_10.0% Prob": 7.310310098859999, "Min_20.0% Prob": 4.456148398549933, "Min_30.0% Prob": 3.1747005400913104, "Min_40.0% Prob": 2.375231186810293, "Min_50.0% Prob": 1.889007612480782, "Min_60.0% Prob": 1.5929178737365364}}
{"hexsha": "f25d845a5d072ddbe9a4ba42086800a674959571", "ext": "py", "lang": "Python", "content": "def func_18fc8c7e787b450bb9ba27326af7b455(x):\n    x = sorted(x, reverse=True)\n    rmax = 0.0\n    y = [x[i] for i in xrange(len(x))]\n    return y", "fn_id": 134, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y13R5P1/gepa/generated_py_84001afe6c4e45fca49f21e859b1c46f.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 9.962873458862305, "ppl_lower": 11.278661727905273, "ppl/lowercase_ppl": -1.0539601235488287, "ppl/zlib": 0.018101303384836148, "Min_5.0% Prob": 8.819828669230143, "Min_10.0% Prob": 7.691355500902448, "Min_20.0% Prob": 6.166519216128758, "Min_30.0% Prob": 5.121822061992827, "Min_40.0% Prob": 4.52975858109338, "Min_50.0% Prob": 4.086196131176418, "Min_60.0% Prob": 3.7303717205690785}}
{"hexsha": "35f904677ad8fd1f812f7b5f6172973cf62eaed0", "ext": "py", "lang": "Python", "content": "def mixture_fit(x, K=3, x_w=None, n_itr=100, verbose=False, random_state=0, f_write=None, output_folder=None, suffix=None, fold_number=0):\n    \"\"\"Fit a slope+bump mixture using EM algorithm.\n\n    Args:\n        x ((n,d) ndarray): The covaraites.\n        K (int): The number of bump components.\n        x_w ((n,) ndarray): The weights for each sample.\n        n_itr (int): The maximum number of iterations for the EM algorithm\n        verbose (bool): Indicate if output the computation details.\n        random_state (int): The random seed.\n        f_write (file handler (write mode)): The output file.\n        output_folder (string): The output directory.\n        suffix (string): The suffix of the output file.\n        fold_number (int(0,1)): The fold number.\n\n    Returns:\n        a ((d,) ndarray): slope parameter.\n        mu,sigma ((k,d) ndarray): bump parameter.\n        w ((n,) ndarray): proportion of each component. \n    \"\"\"\n    np.random.seed(random_state)\n    if len(x.shape) == 1:\n        x = x.reshape([-1, 1])\n    n_samp, d = x.shape\n    if x_w is None:\n        x_w = np.ones([n_samp], dtype=float)\n    GMM = GaussianMixture(n_components=K, covariance_type='diag').fit(x)\n    w_old = np.zeros([K + 1])\n    w = 0.5 * np.ones([K + 1]) / K\n    w[0] = 0.5\n    a = ML_slope(x, x_w)\n    mu, sigma = (GMM.means_, GMM.covariances_ ** 0.5)\n    w_samp = np.zeros([K + 1, n_samp], dtype=float)\n    i = 0\n    if verbose:\n        if f_write is not None:\n            f_write.write('## mixture_fit: initialization parameters\\n')\n            f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n            for k in range(K):\n                f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n                f_write.write('         mu=%s\\n' % mu[k])\n                f_write.write('      sigma=%s\\n' % sigma[k])\n            f_write.write('\\n')\n    while np.linalg.norm(w - w_old, 1) > 0.005 and i < n_itr:\n        w_old = w\n        w_samp[0, :] = w[0] * f_slope(x, a)\n        for k in range(K):\n            w_samp[k + 1, :] = w[k + 1] * f_bump(x, mu[k], sigma[k])\n        w_samp = w_samp / np.sum(w_samp, axis=0) * x_w\n        w = np.mean(w_samp, axis=1)\n        a = ML_slope(x, w_samp[0, :])\n        for k in range(K):\n            if w[k + 1] > 0.0001:\n                mu[k], sigma[k] = ML_bump(x, w_samp[k + 1, :])\n        sigma = sigma.clip(min=0.0001)\n        w[w < 0.001] = 0\n        w /= w.sum()\n        i += 1\n    if i >= n_itr and verbose:\n        print('Warning: the model does not converge, w_dif=%0.4f' % np.linalg.norm(w - w_old, 1))\n        if f_write is not None:\n            f_write.write('Warning: the model does not converge, w_dif=%0.4f\\n' % np.linalg.norm(w - w_old, 1))\n    if verbose and f_write is not None:\n        f_write.write('## mixture_fit: learned parameters\\n')\n        f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n        for k in range(K):\n            f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n            f_write.write('         mu=%s\\n' % mu[k])\n            f_write.write('      sigma=%s\\n' % sigma[k])\n        f_write.write('\\n')\n    if output_folder is not None:\n        bins_ = np.linspace(0, 1, 101)\n        x_grid = bins_.reshape([-1, 1])\n        if d == 1:\n            plt.figure(figsize=[8, 5])\n            plt.hist(x, bins=bins_, weights=x_w / np.sum(x_w) * 100)\n            temp_p = f_all(x_grid, a, mu, sigma, w)\n            plt.plot(bins_, temp_p)\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        else:\n            plt.figure(figsize=[8, 12])\n            n_figure = min(d, 5)\n            for i_dim in range(n_figure):\n                plt.subplot(str(n_figure) + '1' + str(i_dim + 1))\n                plt.hist(x[:, i_dim], bins=bins_, weights=x_w / np.sum(x_w) * 100)\n                temp_p = f_all(x_grid, a[[i_dim]], mu[:, [i_dim]], sigma[:, [i_dim]], w)\n                plt.plot(bins_, temp_p)\n                plt.title('Dimension %d' % (i_dim + 1))\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        plt.close('all')\n    return (a, mu, sigma, w)", "fn_id": 14, "class_fn": false, "repo": "martinjzhang/adafdr", "file": "adafdr/method.py", "last_update_at": "2021-05-21T09:23:58+00:00", "pred": {"ppl": 2.4627668857574463, "ppl_lower": 2.536726713180542, "ppl/lowercase_ppl": -1.0328298715553574, "ppl/zlib": 0.0006691057670337361, "Min_5.0% Prob": 8.617726372737511, "Min_10.0% Prob": 6.515161315600078, "Min_20.0% Prob": 4.141982937852542, "Min_30.0% Prob": 2.940519744859022, "Min_40.0% Prob": 2.241074962509582, "Min_50.0% Prob": 1.8018436412492844, "Min_60.0% Prob": 1.503657304808698}}
{"hexsha": "184edbc2fe82843b354712c8ba7f81417e3fb3d2", "ext": "py", "lang": "Python", "content": "def main(arguments):\n    cap = cv2.VideoCapture(arguments.video)\n    model: tf.keras.Model = tf.keras.models.load_model(arguments.weights_path)\n    model.compile(optimizer='adam', loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n    classes = get_classes(os.path.join(arguments.data_path, 'training_set'))\n    success, img = cap.read()\n    while success:\n        img_pp = preprocess_image(img, INPUT_SHAPE)\n        x = model.predict(np.expand_dims(img_pp, 0), batch_size=1)\n        img_out = write_class_on_img(img_pp, classes[int(np.argmax(np.array(x)))])\n        cv2.imshow('EfficientNet Prediction', img_out)\n        cv2.waitKey(10)\n        success, img = cap.read()", "fn_id": 0, "class_fn": false, "repo": "vincenzosantopietro/Action-Recognition-EfficientNet-TensorFlow", "file": "demo.py", "last_update_at": "2021-08-24T06:48:24+00:00", "pred": {"ppl": 3.0311381816864014, "ppl_lower": 3.9379806518554688, "ppl/lowercase_ppl": -1.236018457738529, "ppl/zlib": 0.0027448965012560195, "Min_5.0% Prob": 8.867791318893433, "Min_10.0% Prob": 7.099691731589181, "Min_20.0% Prob": 4.884407046229341, "Min_30.0% Prob": 3.557100922327775, "Min_40.0% Prob": 2.7609253624497456, "Min_50.0% Prob": 2.2204416358015604, "Min_60.0% Prob": 1.8500143442876065}}
{"hexsha": "3836b014a35e2f166dd6e956235064be019753de", "ext": "py", "lang": "Python", "content": "def createSampleFile(sampleFilePath):\n    if not os.path.exists(sampleFilePath):\n        _dir = os.path.dirname(sampleFilePath)\n        if not os.path.exists(_dir):\n            os.makedirs(_dir, mode=493)\n        import uuid\n        with open(sampleFilePath, 'w') as f:\n            f.write(str(uuid.uuid1()) + '\\n')\n            f.write(str(uuid.uuid4()) + '\\n')\n    return sampleFilePath", "fn_id": 0, "class_fn": false, "repo": "Fanduzi/huaweicloud-sdk-python-obs", "file": "examples/download_sample.py", "last_update_at": "2021-12-13T07:21:48+00:00", "pred": {"ppl": 2.162682294845581, "ppl_lower": 2.294875144958496, "ppl/lowercase_ppl": -1.0769161105108402, "ppl/zlib": 0.00435790539246041, "Min_5.0% Prob": 8.020753288269043, "Min_10.0% Prob": 6.101075530052185, "Min_20.0% Prob": 3.8017661472161612, "Min_30.0% Prob": 2.569593011867255, "Min_40.0% Prob": 1.9337740112962418, "Min_50.0% Prob": 1.5422222958532747, "Min_60.0% Prob": 1.3015388092480862}}
{"hexsha": "8ee4e5b90ef2f57ff31c13abfc6ea37b6aa9f151", "ext": "py", "lang": "Python", "content": "def cosine_similarity(A, B):\n    t1 = vector_multiply(A, B)\n    t2 = sqrt(vector_multiply(A, A))\n    t3 = sqrt(vector_multiply(B, B))\n    if t2 > 0 and t3 > 0:\n        return t1 / (t2 * t3)\n    else:\n        return 0", "fn_id": 0, "class_fn": false, "repo": "Pengeace/LncRNA-Disease-link", "file": "sample/parallel_prediction_CV.py", "last_update_at": "2021-12-12T13:15:20+00:00", "pred": {"ppl": 2.2664482593536377, "ppl_lower": 2.165924072265625, "ppl/lowercase_ppl": -0.9445537827963103, "ppl/zlib": 0.006442629627589644, "Min_5.0% Prob": 8.867104768753052, "Min_10.0% Prob": 7.259999096393585, "Min_20.0% Prob": 4.140257377177477, "Min_30.0% Prob": 2.787716656612853, "Min_40.0% Prob": 2.0950021757307695, "Min_50.0% Prob": 1.6360971055720457, "Min_60.0% Prob": 1.3691852183344926}}
{"hexsha": "0a460dfb309ddfb8343e04a6b02b1cc8858e4c42", "ext": "py", "lang": "Python", "content": "def import_no_virt_driver_import_deps(physical_line, filename):\n    \"\"\"Check virt drivers' modules aren't imported by other drivers\n\n    Modules under each virt driver's directory are\n    considered private to that virt driver. Other drivers\n    in Nova must not access those drivers. Any code that\n    is to be shared should be refactored into a common\n    module\n\n    N311\n    \"\"\"\n    thisdriver = _get_virt_name(virt_file_re, filename)\n    thatdriver = _get_virt_name(virt_import_re, physical_line)\n    if thatdriver is not None and thisdriver is not None and (thisdriver != thatdriver):\n        return (0, 'N311: importing code from other virt drivers forbidden')", "fn_id": 4, "class_fn": false, "repo": "KevinWang2015/nova", "file": "nova/hacking/checks.py", "last_update_at": "2021-05-12T07:52:44+00:00", "pred": {"ppl": 9.422701835632324, "ppl_lower": 12.290478706359863, "ppl/lowercase_ppl": -1.1184523280408813, "ppl/zlib": 0.006838786178453643, "Min_5.0% Prob": 10.733996510505676, "Min_10.0% Prob": 9.272319078445435, "Min_20.0% Prob": 7.5472561866045, "Min_30.0% Prob": 6.286409402380184, "Min_40.0% Prob": 5.260043753110446, "Min_50.0% Prob": 4.3793075891529645, "Min_60.0% Prob": 3.7331173310474473}}
{"hexsha": "8a91b3f07767ea74f9a6d8cb283d9cb8dd32dbfa", "ext": "py", "lang": "Python", "content": "def task_factory(name, func=None, vars=None, color='GREEN', ext_in=[], ext_out=[], before=[], after=[], shell=False, scan=None):\n    params = {'vars': vars or [], 'color': color, 'name': name, 'ext_in': Utils.to_list(ext_in), 'ext_out': Utils.to_list(ext_out), 'before': Utils.to_list(before), 'after': Utils.to_list(after), 'shell': shell, 'scan': scan}\n    if isinstance(func, str):\n        params['run_str'] = func\n    else:\n        params['run'] = func\n    cls = type(Task)(name, (Task,), params)\n    global classes\n    classes[name] = cls\n    return cls", "fn_id": 8, "class_fn": false, "repo": "He-Ze/Distributed-System-SYSU", "file": "\u4f5c\u4e1a/\u4f5c\u4e1a5/nack-oriented-reliable-multicast-master/norm-1.5r6/.waf3-1.8.11-930623f783bdf2f01355c2002e2b4462/waflib/Task.py", "last_update_at": "2021-09-17T07:35:05+00:00", "pred": {"ppl": 3.283151149749756, "ppl_lower": 3.764822006225586, "ppl/lowercase_ppl": -1.1151551843432501, "ppl/zlib": 0.004215615877980655, "Min_5.0% Prob": 10.481319904327393, "Min_10.0% Prob": 8.472882803748636, "Min_20.0% Prob": 5.559674624134512, "Min_30.0% Prob": 3.9649999854611417, "Min_40.0% Prob": 2.968561972828879, "Min_50.0% Prob": 2.3882953677283125, "Min_60.0% Prob": 1.9960797623984372}}
{"hexsha": "1407f6d79ec90ec0ceecb5413d805601158c4cae", "ext": "py", "lang": "Python", "content": "def get_bot() -> Bot:\n    for bot in DRIVER.bots.values():\n        return bot\n    return None", "fn_id": 0, "class_fn": false, "repo": "7sDream/nonebot_plugin_bam", "file": "nonebot_plugin_bam/common.py", "last_update_at": "2021-12-28T07:13:51+00:00", "pred": {"ppl": 7.48213529586792, "ppl_lower": 18.059450149536133, "ppl/lowercase_ppl": -1.4378349845505114, "ppl/zlib": 0.025474914159624714, "Min_5.0% Prob": 8.110990524291992, "Min_10.0% Prob": 7.959204435348511, "Min_20.0% Prob": 7.27565860748291, "Min_30.0% Prob": 5.764964308057513, "Min_40.0% Prob": 4.899070686764187, "Min_50.0% Prob": 3.931074410676956, "Min_60.0% Prob": 3.423686236143112}}
{"hexsha": "8b6e4daf34e200f38605973d93690899eefdcfed", "ext": "py", "lang": "Python", "content": "def check_build_is_legit(build):\n    build_string = build.lower()\n    build_number = build_string.replace('build', '')\n    if build_number in BUILD_MAP.keys():\n        return True\n    return False", "fn_id": 1, "class_fn": false, "repo": "EBISPOT/gwas-sumstats-validator", "file": "validate/validator.py", "last_update_at": "2021-04-14T17:38:42+00:00", "pred": {"ppl": 5.270065784454346, "ppl_lower": 6.309013366699219, "ppl/lowercase_ppl": -1.108262226376113, "ppl/zlib": 0.012311428483659426, "Min_5.0% Prob": 8.156264305114746, "Min_10.0% Prob": 7.357569408416748, "Min_20.0% Prob": 6.115635991096497, "Min_30.0% Prob": 5.028209177652995, "Min_40.0% Prob": 4.084200927615166, "Min_50.0% Prob": 3.24885400556601, "Min_60.0% Prob": 2.759788668924762}}
{"hexsha": "eb4e6315d4870bd2d06b1d9423ac6fcf2195cdeb", "ext": "py", "lang": "Python", "content": "def SOIC(A, B, L, T, W, num_pins, pitch=1.27, profile=ipc.LandPatternSize.Nominal):\n    f = fp.Footprint(name='{0}-SOIC'.format(num_pins), description='{0}-pin SOIC'.format(num_pins))\n    f.from_ipc(lib.SOIC(profile, A, B, L, T, W, num_pins, pitch))\n    return f", "fn_id": 2, "class_fn": false, "repo": "TheWylieStCoyote/kidraw", "file": "kidraw/footprint/library.py", "last_update_at": "2021-01-11T20:14:23+00:00", "pred": {"ppl": 8.986533164978027, "ppl_lower": 11.368660926818848, "ppl/lowercase_ppl": -1.1070867969582574, "ppl/zlib": 0.012405238088906785, "Min_5.0% Prob": 11.084007263183594, "Min_10.0% Prob": 9.983174705505371, "Min_20.0% Prob": 8.013782334327697, "Min_30.0% Prob": 6.517020511627197, "Min_40.0% Prob": 5.213543223171699, "Min_50.0% Prob": 4.34315414872824, "Min_60.0% Prob": 3.6831109001011146}}
{"hexsha": "4f4f6f8ac9dec0a03002fe61bd6214effc3be501", "ext": "py", "lang": "Python", "content": "def change_request_wrapper(func):\n\n    @functools.wraps(func)\n    def _inner(prep_req, *args, **kwargs):\n        prep_req.url = prep_req.url + '?some=stuff'\n        return func(prep_req, *args, **kwargs)\n    return _inner", "fn_id": 0, "class_fn": false, "repo": "HappyEinara/pytest-vts", "file": "tests/test_request_wrapper.py", "last_update_at": "2021-12-13T23:15:20+00:00", "pred": {"ppl": 3.9694573879241943, "ppl_lower": 3.9694573879241943, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010365634641000442, "Min_5.0% Prob": 9.985316276550293, "Min_10.0% Prob": 8.336949689047676, "Min_20.0% Prob": 5.996645246233259, "Min_30.0% Prob": 4.44173508598691, "Min_40.0% Prob": 3.4354902311627353, "Min_50.0% Prob": 2.7562665694526265, "Min_60.0% Prob": 2.297657782203584}}
{"hexsha": "5ad02454c22c71588ac4c352b70a914a8fe47bc8", "ext": "py", "lang": "Python", "content": "def test_set_args_settings(mocker):\n    mocker.patch('json.load', new=lambda x: x())\n    args = Namespace()\n    set_args(args)\n    assert args.settings == {}\n    args = Namespace(settings=None)\n    set_args(args)\n    assert args.settings == {}\n    s = list(range(3))\n    mock = MagicMock(return_value=s)\n    args = Namespace(settings=mock)\n    set_args(args)\n    assert args.settings == s\n    mock.close.assert_called_with()", "fn_id": 10, "class_fn": false, "repo": "akx/markovchain", "file": "tests/cli/test_util.py", "last_update_at": "2021-06-05T15:38:34+00:00", "pred": {"ppl": 3.4610989093780518, "ppl_lower": 4.070959568023682, "ppl/lowercase_ppl": -1.130713922858672, "ppl/zlib": 0.006466594492243179, "Min_5.0% Prob": 10.175624052683512, "Min_10.0% Prob": 8.048038085301718, "Min_20.0% Prob": 5.446202312906583, "Min_30.0% Prob": 3.961473013903644, "Min_40.0% Prob": 3.103147639303791, "Min_50.0% Prob": 2.475506500431126, "Min_60.0% Prob": 2.0791082920984842}}
{"hexsha": "714d3dfaa367d1733c257ba0266824ee7c931162", "ext": "py", "lang": "Python", "content": "def getAllClass(p, period):\n    data = {}\n    data['{}'.format(period)] = getRawAssignments(p, period)\n    data['assignments'] = data.pop('{}'.format(period))\n    data['info'] = getRawClass(p)['{}'.format(period)]\n    return data", "fn_id": 5, "class_fn": false, "repo": "Grant2464/powerschool_api", "file": "powerschool.py", "last_update_at": "2021-11-02T17:43:43+00:00", "pred": {"ppl": 7.074534893035889, "ppl_lower": 6.84002161026001, "ppl/lowercase_ppl": -0.9827698535545647, "ppl/zlib": 0.01540552521156014, "Min_5.0% Prob": 10.625990867614746, "Min_10.0% Prob": 9.42801022529602, "Min_20.0% Prob": 7.452215592066447, "Min_30.0% Prob": 6.07534036371443, "Min_40.0% Prob": 4.805018861293792, "Min_50.0% Prob": 3.9423855759443773, "Min_60.0% Prob": 3.3212276288383715}}
{"hexsha": "4bf042cd1a9ebeebeb1cce1bd259939ff32e8532", "ext": "py", "lang": "Python", "content": "def ret_a_dict(existing):\n    \"\"\"\n    Append a key-value to 'existing' (if it exists)\n    \"\"\"\n    existing = existing or {}\n    ret = {'secret': 42}\n    ret.update(existing)\n    return ret", "fn_id": 1, "class_fn": false, "repo": "siriobalmelli/replacement", "file": "tests/demo.py", "last_update_at": "2021-02-07T16:24:31+00:00", "pred": {"ppl": 11.32260513305664, "ppl_lower": 12.15510082244873, "ppl/lowercase_ppl": -1.0292350775462715, "ppl/zlib": 0.019108670722259632, "Min_5.0% Prob": 9.69516658782959, "Min_10.0% Prob": 9.226178741455078, "Min_20.0% Prob": 7.800606775283813, "Min_30.0% Prob": 6.796338272094727, "Min_40.0% Prob": 5.708538327898298, "Min_50.0% Prob": 4.804806695534633, "Min_60.0% Prob": 4.116239584261371}}
{"hexsha": "0e12d22364ddbf0f90693961db9219ea9d1c3443", "ext": "py", "lang": "Python", "content": "def get_uwsgi_emperor_opts(settings, port):\n    if settings['DATABASES']['default'].get('PASSWORD'):\n        os.environ['DB_PASSWORD'] = settings['DATABASES']['default']['PASSWORD']\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} password=$(DB_PASSWORD) dbname={NAME};{query}'\n    else:\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} dbname={NAME};{query}'\n    return get_uwsgi_regular_opts(settings, port) + ['http = 0.0.0.0:{}'.format(port or settings.get('PORT')), 'http-to = /tmp/fastrouter.sock', 'fastrouter = /tmp/fastrouter.sock', 'fastrouter-use-code-string = 0:{}:get'.format(os.path.join(HERE, 'fastrouter_lookup.py')), 'emperor = {}'.format(pg_str.format(query=VASSALS_SQL_QUERY, **settings['DATABASES']['default']))]", "fn_id": 3, "class_fn": false, "repo": "yakky/django-multisite-plus", "file": "django_multisite_plus/cli.py", "last_update_at": "2021-08-17T20:18:51+00:00", "pred": {"ppl": 4.373447418212891, "ppl_lower": 4.566519737243652, "ppl/lowercase_ppl": -1.0292770438455316, "ppl/zlib": 0.0039987847723284365, "Min_5.0% Prob": 10.613570173581442, "Min_10.0% Prob": 8.851998825867971, "Min_20.0% Prob": 6.4155175884564715, "Min_30.0% Prob": 4.765858454008897, "Min_40.0% Prob": 3.662195999290525, "Min_50.0% Prob": 2.9573767693821065, "Min_60.0% Prob": 2.4718866009843246}}
{"hexsha": "d83d43b9c49703cda927b344f9e7b3b7da45f5b3", "ext": "py", "lang": "Python", "content": "def read_kitti_annotations(label_paths, calib_paths):\n    all_labels = []\n    all_calib = []\n    for label_file, calib_file in zip(label_paths, calib_paths):\n        calib = o3d.ml.datasets.KITTI.read_calib(calib_file)\n        labels = o3d.ml.datasets.KITTI.read_label(label_file, calib)\n        all_labels.append(labels)\n        all_calib.append(calib)\n    return (all_labels, all_calib)", "fn_id": 1, "class_fn": false, "repo": "supervisely-ecosystem/Open3D-ML", "file": "supervisely/src_backup/convert_kitty3d_to_sly.py", "last_update_at": "2021-08-31T09:06:08+00:00", "pred": {"ppl": 2.128814697265625, "ppl_lower": 2.219634771347046, "ppl/lowercase_ppl": -1.055292795734059, "ppl/zlib": 0.004392821771347685, "Min_5.0% Prob": 8.848735332489014, "Min_10.0% Prob": 6.594548185666402, "Min_20.0% Prob": 3.7674550771713258, "Min_30.0% Prob": 2.5170616389889466, "Min_40.0% Prob": 1.9173212398961186, "Min_50.0% Prob": 1.522804737390418, "Min_60.0% Prob": 1.2625185935344474}}
{"hexsha": "07fe364d937fe8b983df03d9c0471b986fbd990b", "ext": "py", "lang": "Python", "content": "def _add_workload_inner():\n    OpArgMngr.add_workload('inner', np.zeros(shape=(1, 80), dtype=np.float64), np.zeros(shape=(1, 80), dtype=np.float64))\n    for dt in [np.float32, np.float64]:\n        A = np.array([[1, 2], [3, 4]], dtype=dt)\n        B = np.array([[1, 3], [2, 4]], dtype=dt)\n        C = np.array([1, 1], dtype=dt)\n        OpArgMngr.add_workload('inner', A.T, C)\n        OpArgMngr.add_workload('inner', C, A.T)\n        OpArgMngr.add_workload('inner', B, C)\n        OpArgMngr.add_workload('inner', C, B)\n        OpArgMngr.add_workload('inner', A, B)\n        OpArgMngr.add_workload('inner', A, A)\n        OpArgMngr.add_workload('inner', A, A.copy())\n        a = np.arange(5).astype(dt)\n        b = a[::-1]\n        OpArgMngr.add_workload('inner', b, a)\n        a = np.arange(24).reshape(2, 3, 4).astype(dt)\n        b = np.arange(24, 48).reshape(2, 3, 4).astype(dt)\n        OpArgMngr.add_workload('inner', a, b)\n        OpArgMngr.add_workload('inner', b, a)", "fn_id": 74, "class_fn": false, "repo": "sxjscience/mxnet", "file": "tests/python/unittest/test_numpy_interoperability.py", "last_update_at": "2021-03-23T03:07:38+00:00", "pred": {"ppl": 1.89469575881958, "ppl_lower": 2.051668167114258, "ppl/lowercase_ppl": -1.1245503407950026, "ppl/zlib": 0.0024115406649410248, "Min_5.0% Prob": 6.513953513569302, "Min_10.0% Prob": 4.868903404957539, "Min_20.0% Prob": 3.0431644439697267, "Min_30.0% Prob": 2.1132603575741604, "Min_40.0% Prob": 1.593881553647419, "Min_50.0% Prob": 1.2809227738444777, "Min_60.0% Prob": 1.06504408951202}}
{"hexsha": "0460f6e42c23c688c2c6afb0f673aa2cf4d651bf", "ext": "py", "lang": "Python", "content": "def load_state(network, state_dict):\n    net_state_keys = list(network.state_dict().keys())\n    net_state_keys_copy = net_state_keys.copy()\n    sup_string = ''\n    for key in state_dict.keys():\n        if 'backbone' in key:\n            sup_string = 'backbone.'\n        elif 'module' in key:\n            sup_string = 'module.'\n    for i, _ in enumerate(net_state_keys_copy):\n        name = net_state_keys_copy[i]\n        if name.startswith('classifier') or name.startswith('fc'):\n            continue\n        if not sup_string:\n            name_pretrained = name\n        else:\n            name_pretrained = sup_string + name\n        if name_pretrained in state_dict.keys():\n            dst_param_shape = network.state_dict()[name].shape\n            if state_dict[name_pretrained].shape == dst_param_shape:\n                network.state_dict()[name].copy_(state_dict[name_pretrained].view(dst_param_shape))\n                net_state_keys.remove(name)\n    if net_state_keys:\n        num_batches_list = []\n        for i in range(len(net_state_keys)):\n            if 'num_batches_tracked' in net_state_keys[i]:\n                num_batches_list.append(net_state_keys[i])\n        pruned_additional_states = [x for x in net_state_keys if x not in num_batches_list]\n        if pruned_additional_states:\n            logging.info('There are layers in current network not initialized by pretrained')\n            logging.warning('>> Failed to load: {}'.format(pruned_additional_states))\n        return False\n    return True", "fn_id": 0, "class_fn": false, "repo": "xuyu0010/PATAN", "file": "network/util.py", "last_update_at": "2021-12-27T19:45:45+00:00", "pred": {"ppl": 2.141172170639038, "ppl_lower": 2.253448486328125, "ppl/lowercase_ppl": -1.067128195149894, "ppl/zlib": 0.0014669622781626798, "Min_5.0% Prob": 8.259203910827637, "Min_10.0% Prob": 5.881488451590905, "Min_20.0% Prob": 3.631668041913937, "Min_30.0% Prob": 2.529150748354757, "Min_40.0% Prob": 1.9093616578178718, "Min_50.0% Prob": 1.5221426565442424, "Min_60.0% Prob": 1.2699554914992521}}
{"hexsha": "f6b4cf055a04d3fdf48e80ef79e23515af8b5c83", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='function')\ndef boto_status():\n    status_mock = Mock()\n    status_mock.get_status.side_effect = ['PENDING', 'INSYNC']\n\n    def update():\n        status_mock.status = status_mock.get_status()\n    status_mock.update.side_effect = update\n    status_mock.status = 'PENDING'\n    return status_mock", "fn_id": 0, "class_fn": false, "repo": "dron22/r53dyndns", "file": "r53dyndns/tests/test_r53updater.py", "last_update_at": "2021-05-13T21:14:44+00:00", "pred": {"ppl": 3.248539447784424, "ppl_lower": 4.025061130523682, "ppl/lowercase_ppl": -1.1819161468751946, "ppl/zlib": 0.007097623461742048, "Min_5.0% Prob": 8.61080777645111, "Min_10.0% Prob": 6.4520657658576965, "Min_20.0% Prob": 4.724009317510268, "Min_30.0% Prob": 3.645833437259381, "Min_40.0% Prob": 2.9430095430682686, "Min_50.0% Prob": 2.3749820659326955, "Min_60.0% Prob": 1.970387696198976}}
{"hexsha": "cc8172756946d110aef633b85d99fdb465e813dc", "ext": "py", "lang": "Python", "content": "def used_tracks_set(image, all=False):\n    \"\"\"Determine the set of tracks used by directory and files on the disk\"\"\"\n    bam = Disk.from_image(image).bam()\n    used_tracks = set()\n    for head in range(2):\n        for cyl in range(80):\n            track = head << 7 | cyl\n            offset = (80 * head + cyl - 4) * image.spt\n            if all or track <= 4 or bam[offset:offset + image.spt].any():\n                used_tracks.add(track)\n    return used_tracks", "fn_id": 1, "class_fn": false, "repo": "simonowen/writeusb", "file": "mgtwriteusb/writeusb.py", "last_update_at": "2021-08-03T21:10:03+00:00", "pred": {"ppl": 7.340683460235596, "ppl_lower": 8.243734359741211, "ppl/lowercase_ppl": -1.058201880094008, "ppl/zlib": 0.008005750814317491, "Min_5.0% Prob": 10.254664421081543, "Min_10.0% Prob": 8.920755386352539, "Min_20.0% Prob": 7.036054240332709, "Min_30.0% Prob": 5.7629241108894345, "Min_40.0% Prob": 4.696051058945833, "Min_50.0% Prob": 3.9305093906708617, "Min_60.0% Prob": 3.3055296656158237}}
{"hexsha": "0261d48fadbcba94432255ef1726dce932739202", "ext": "py", "lang": "Python", "content": "@deprecated(version='0.2.0', reason='Use AnyLE instead')\ndef any_le(bound: Any) -> Any:\n    \"\"\"\n    Returns a matcher that matches any value less than or equal to ``bound``\n    \"\"\"\n    return AnyLE(bound)", "fn_id": 13, "class_fn": false, "repo": "jwodder/anys", "file": "src/anys/__init__.py", "last_update_at": "2021-12-14T23:07:16+00:00", "pred": {"ppl": 5.238436222076416, "ppl_lower": 9.601151466369629, "ppl/lowercase_ppl": -1.3658524093127042, "ppl/zlib": 0.010684019502529939, "Min_5.0% Prob": 12.37862253189087, "Min_10.0% Prob": 9.451662349700928, "Min_20.0% Prob": 5.959008346904408, "Min_30.0% Prob": 4.515919517068302, "Min_40.0% Prob": 3.801418889652599, "Min_50.0% Prob": 3.1923565545252393, "Min_60.0% Prob": 2.7214965487227722}}
{"hexsha": "8521926dba5b85612435ecc4000212db9efd4499", "ext": "py", "lang": "Python", "content": "def test_previous_benefit_put_unauthenticated(anonymous_client, previous_benefit):\n    data = PreviousBenefitSerializer(previous_benefit).data\n    data['monthly_amount'] = '1234.56'\n    response = anonymous_client.put(get_previous_benefits_detail_url(previous_benefit), data)\n    assert response.status_code == 403", "fn_id": 7, "class_fn": false, "repo": "City-of-Helsinki/kesaseteli", "file": "backend/benefit/calculator/tests/test_previous_benefits_api.py", "last_update_at": "2021-05-17T12:15:34+00:00", "pred": {"ppl": 3.8743133544921875, "ppl_lower": 4.964740753173828, "ppl/lowercase_ppl": -1.183105737083295, "ppl/zlib": 0.007441584880566016, "Min_5.0% Prob": 10.675722360610962, "Min_10.0% Prob": 8.844636976718903, "Min_20.0% Prob": 6.1607230551102585, "Min_30.0% Prob": 4.508078353404999, "Min_40.0% Prob": 3.3955805503270207, "Min_50.0% Prob": 2.704104578425718, "Min_60.0% Prob": 2.2831888362838355}}
{"hexsha": "9c1f3df34d1f27d3dbdd982cd272b1268f3600c6", "ext": "py", "lang": "Python", "content": "def inference(net, data_label, use_aux):\n    if use_aux:\n        img, cls_label, seg_label = data_label\n        img, cls_label, seg_label = (img.cuda(), cls_label.long().cuda(), seg_label.long().cuda())\n        cls_out, seg_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label, 'seg_out': seg_out, 'seg_label': seg_label}\n    else:\n        img, cls_label = data_label\n        img, cls_label = (img.cuda(), cls_label.long().cuda())\n        cls_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label}", "fn_id": 0, "class_fn": false, "repo": "kjannakh/Ultra-Fast-Lane-Detection", "file": "train.py", "last_update_at": "2021-09-12T20:02:53+00:00", "pred": {"ppl": 1.798810601234436, "ppl_lower": 1.798810601234436, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0033937899965360567, "Min_5.0% Prob": 7.243467569351196, "Min_10.0% Prob": 5.2384054099812225, "Min_20.0% Prob": 2.9387595423630306, "Min_30.0% Prob": 1.9582226573718045, "Min_40.0% Prob": 1.484205730269397, "Min_50.0% Prob": 1.1808341546771275, "Min_60.0% Prob": 0.9803680059397626}}
{"hexsha": "9cf488ea53f16e45eefa82773cf77f48e6b49c9a", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef mock_trained_emulator(mock_emulator):\n    filename = os.path.join(test_base, 'data', 'emu.hdf5')\n    if os.path.exists(filename):\n        yield Emulator.load(filename)\n    else:\n        mock_emulator.train()\n        mock_emulator.save(filename)\n        yield mock_emulator", "fn_id": 6, "class_fn": false, "repo": "spencerhurt/Starfish", "file": "tests/conftest.py", "last_update_at": "2021-05-13T16:23:26+00:00", "pred": {"ppl": 3.3441271781921387, "ppl_lower": 3.5770225524902344, "ppl/lowercase_ppl": -1.0557693170262188, "ppl/zlib": 0.007592488844372885, "Min_5.0% Prob": 10.316045761108398, "Min_10.0% Prob": 8.065671443939209, "Min_20.0% Prob": 5.506866544485092, "Min_30.0% Prob": 3.927545391023159, "Min_40.0% Prob": 2.999060002155602, "Min_50.0% Prob": 2.4112328507937493, "Min_60.0% Prob": 2.011172490310855}}
{"hexsha": "511d2698d35dc4f9fe7517171c56725c07784116", "ext": "py", "lang": "Python", "content": "def make_char_dict():\n    chars = string.ascii_lowercase\n    char_dict = {'<blank>': 0}\n    for idx, c in enumerate(chars):\n        char_dict[c] = idx + 1\n    current_len = len(list(char_dict.keys()))\n    char_dict['<eos>'] = current_len\n    print(char_dict)\n    return char_dict", "fn_id": 0, "class_fn": false, "repo": "duguqiankun/lips_reading", "file": "cnn2d/cnn2d_image_generator.py", "last_update_at": "2021-11-14T13:10:30+00:00", "pred": {"ppl": 2.705281972885132, "ppl_lower": 2.705281972885132, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0057526366949597245, "Min_5.0% Prob": 10.121649980545044, "Min_10.0% Prob": 7.665044069290161, "Min_20.0% Prob": 4.780234785640941, "Min_30.0% Prob": 3.3814535616682124, "Min_40.0% Prob": 2.52737021616527, "Min_50.0% Prob": 2.0124120737891644, "Min_60.0% Prob": 1.6711257261856687}}
{"hexsha": "67a636a6cf8ea63426b938047e0e18deaa078baf", "ext": "py", "lang": "Python", "content": "def test_project_creation_without_pylint(cookies):\n    with generate_temporary_project(cookies, extra_context=NO_PLINT) as result:\n        assert_successful_creation(result)\n        assert_expected_files_exist(result, files=EXPECTED_PROJECT_FILES_NO_PYLINT)\n        assert_expected_files_do_not_exist(result, files=('pylintrc',))", "fn_id": 4, "class_fn": false, "repo": "mendix/python-project-template", "file": "tests/test_project_creation.py", "last_update_at": "2021-07-31T12:31:00+00:00", "pred": {"ppl": 4.937243461608887, "ppl_lower": 5.06355619430542, "ppl/lowercase_ppl": -1.015820238259444, "ppl/zlib": 0.007904985998687709, "Min_5.0% Prob": 10.296830177307129, "Min_10.0% Prob": 7.979146162668864, "Min_20.0% Prob": 6.0901749928792315, "Min_30.0% Prob": 4.842942648463779, "Min_40.0% Prob": 3.917692412932714, "Min_50.0% Prob": 3.210356272591485, "Min_60.0% Prob": 2.6888157998522124}}
{"hexsha": "4ab2bfd86a6ca0acdb74024739a1d2b31d9cbebd", "ext": "py", "lang": "Python", "content": "def zero_shot_transform(image, caption, p=0.5, transform_to_apply='solarized'):\n    \"\"\"\n    Output PIL.Image of a two-panel style transfer image with an english word describing the transform included in the caption.\n    See OpenAI DALL-E blog post for more details:\n    The top half of the image is the original image, and the bottom half is a stylized image.\n    \"\"\"\n    if p >= 0.5:\n        friendly_transform = transform_to_apply.replace('_', ' ')\n        style_caption = 'Two panel image of the exact same picture.' + f'On the top {caption} and on the bottom the same image but with {friendly_transform} applied.' + f'The original image is on the top and the {friendly_transform} image on the bottom. The caption is {caption}.'\n        style_image_transform = transform_lookup[transform_to_apply]\n        return (two_panel_style_transfer(image, img_transform=style_image_transform, resize_ratio=1.0), style_caption)\n    return (image, style_caption)", "fn_id": 3, "class_fn": false, "repo": "afiaka87/ZeroShotTransform", "file": "transforms.py", "last_update_at": "2021-07-20T00:07:04+00:00", "pred": {"ppl": 9.96699047088623, "ppl_lower": 11.485396385192871, "ppl/lowercase_ppl": -1.0616705013448111, "ppl/zlib": 0.005098178891171765, "Min_5.0% Prob": 11.835904439290365, "Min_10.0% Prob": 10.202497005462646, "Min_20.0% Prob": 7.941399622936638, "Min_30.0% Prob": 6.506639457728765, "Min_40.0% Prob": 5.408872773452681, "Min_50.0% Prob": 4.514136515012601, "Min_60.0% Prob": 3.831784662543511}}
{"hexsha": "b605c74be7fc59d0693eaf81e6720e58b5e14ac4", "ext": "py", "lang": "Python", "content": "def func_645e7dad5f4c4c1db11925e9517ff3b9(infile):\n    n, p, q, r, s = [int(x) for x in infile.readline().split()]\n    dev = [(i * p + q) % r + s for i in range(n)]\n    tot = sum(dev)\n    i = 0\n    return q", "fn_id": 88, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y14R5P1/Smithers/generated_py_263a1af396df4e8fa1f96950f5309feb.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 5.349730014801025, "ppl_lower": 5.349730014801025, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010416435373362518, "Min_5.0% Prob": 9.269707441329956, "Min_10.0% Prob": 7.877098772260878, "Min_20.0% Prob": 5.871009455786811, "Min_30.0% Prob": 4.7766572918210715, "Min_40.0% Prob": 4.1327213467778385, "Min_50.0% Prob": 3.344247167414807, "Min_60.0% Prob": 2.8135534641332924}}
{"hexsha": "fa024eaa7abd499c2cfb6beea3f81e7389c03dac", "ext": "py", "lang": "Python", "content": "def get_pblog(*args, **kwargs):\n    global pblog\n    if pblog is None:\n        pblog = ProgressBarLog(*args, **kwargs)\n    return pblog", "fn_id": 0, "class_fn": false, "repo": "youngyzzZ/Sonographic_Gallbladder_Diagnose", "file": "src/logger.py", "last_update_at": "2021-07-16T10:20:23+00:00", "pred": {"ppl": 4.158990383148193, "ppl_lower": 8.963519096374512, "ppl/lowercase_ppl": -1.5387675966219774, "ppl/zlib": 0.015162471792117417, "Min_5.0% Prob": 10.861724853515625, "Min_10.0% Prob": 9.776653925577799, "Min_20.0% Prob": 7.111964447157724, "Min_30.0% Prob": 4.797883727333763, "Min_40.0% Prob": 3.588070652882258, "Min_50.0% Prob": 2.8456935497294915, "Min_60.0% Prob": 2.4605244613167914}}
{"hexsha": "1183023f80519f66fa1c64d6437b4cc896c39a21", "ext": "py", "lang": "Python", "content": "def main():\n    args = arguments().parse_args()\n    sys.path.insert(0, os.getcwd())\n    conn = get_connection(args)\n    headers = None\n    editfile = tempfile.NamedTemporaryFile()\n    with open(editfile.name, 'w', newline='') as cfile:\n        headers = write_csv(cfile, conn, args.table)\n    reffile = tempfile.NamedTemporaryFile()\n    shutil.copy(editfile.name, reffile.name)\n    call_vim(editfile.name)\n    while True:\n        try:\n            process_changes(reffile, editfile, conn, args.table, headers)\n            break\n        except Exception as err:\n            print('Failed to save changes: ', err)\n            q = '(C)ancel, (r)etry save, (e)dit the file again?'\n            cmd = query_options(q, ('c', 'r', 'e'))\n            if cmd == 'c':\n                print('Changes cancelled')\n                break\n            elif cmd == 'r':\n                continue\n            elif cmd == 'e':\n                call_vim(editfile.name)\n            else:\n                raise ValueError('Not a command')", "fn_id": 14, "class_fn": false, "repo": "BnMcGn/vibase", "file": "src/vibase.py", "last_update_at": "2021-10-17T07:52:04+00:00", "pred": {"ppl": 3.656590700149536, "ppl_lower": 4.696258068084717, "ppl/lowercase_ppl": -1.19300331780591, "ppl/zlib": 0.0029873991027733874, "Min_5.0% Prob": 9.353346864382425, "Min_10.0% Prob": 7.770784740447998, "Min_20.0% Prob": 5.582430633844114, "Min_30.0% Prob": 4.168531218641682, "Min_40.0% Prob": 3.2169041857123375, "Min_50.0% Prob": 2.5853951991302893, "Min_60.0% Prob": 2.1682653994378605}}
{"hexsha": "93702be6e0d4de5b5113d03f1b9b9f088babbad8", "ext": "py", "lang": "Python", "content": "def macro_do_exist_op(macro: str, specs: typ.Dict[str, str]) -> str:\n    macro_no_encloser = macro[1:-1]\n    l, r = macro_no_encloser.split(MACRO_OP_EXIST)\n    if l in specs:\n        return specs[with_encloser(l)]\n    else:\n        return specs[with_encloser(r)]", "fn_id": 2, "class_fn": false, "repo": "Tootooroo/VerManager", "file": "manager/basic/macros.py", "last_update_at": "2021-03-18T12:03:54+00:00", "pred": {"ppl": 6.263359546661377, "ppl_lower": 7.287510395050049, "ppl/lowercase_ppl": -1.082544224578907, "ppl/zlib": 0.011255930735905265, "Min_5.0% Prob": 14.241621971130371, "Min_10.0% Prob": 10.877478864457872, "Min_20.0% Prob": 7.851055251227485, "Min_30.0% Prob": 5.772720009088516, "Min_40.0% Prob": 4.565442731251588, "Min_50.0% Prob": 3.6459531945751067, "Min_60.0% Prob": 3.072547319145607}}
{"hexsha": "0778557121cb9d3021b5bcd3f81aaa9f8612eb04", "ext": "py", "lang": "Python", "content": "def write_glottal_tier(utterance, tao):\n    return_str = ''\n    glottal_dur = utterance.duration\n    for ii in range(len(utterance.duration)):\n        return_str += f'    <gesture value=\"{utterance.glottal[ii]}\" slope=\"0.000000\" duration_s=\"{utterance.duration[ii]:.6f}\" time_constant_s=\"{tao:.6f}\" neutral=\"0\" />\\n'\n    return return_str", "fn_id": 4, "class_fn": false, "repo": "quantling/create_vtl_corpus", "file": "generate_gestural_score.py", "last_update_at": "2021-11-01T02:35:12+00:00", "pred": {"ppl": 6.457759857177734, "ppl_lower": 6.457759857177734, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00981727624379322, "Min_5.0% Prob": 12.147671318054199, "Min_10.0% Prob": 10.127368493513627, "Min_20.0% Prob": 7.46160245978314, "Min_30.0% Prob": 5.65087049147662, "Min_40.0% Prob": 4.467734434034513, "Min_50.0% Prob": 3.704030708262795, "Min_60.0% Prob": 3.094289173250613}}
{"hexsha": "9ec5c4528bc5fd84b15a1a39d42df73c0372c253", "ext": "py", "lang": "Python", "content": "def make_parser():\n    parser = argparse.ArgumentParser('Extract frames from a video. If `-r` and `-n N` parameters are specified, then dump `N` randomly selected frames. If `-s START -i STRIDE` are specified then dump every `STRIDE`-th frame starting from `START` frame.')\n    parser.add_argument('-f', dest='fname', type=str, help='input filename')\n    parser.add_argument('-s', dest='start', default=0, type=int, help='starting frame')\n    parser.add_argument('-i', dest='stride', default=1, type=int, help='stride, interval between successive frames to save.')\n    parser.add_argument('-c', dest='cmap', default='', type=str, help='colormap to conevrt to, default same as original')\n    parser.add_argument('-x', dest='scale', default=1, type=float, help='factor by which to scale the images')\n    parser.add_argument('-r', dest='random', action='store_true', help='extract random frames')\n    parser.add_argument('-n', dest='num', default=-1, type=int, help='number of frames to extract.')\n    parser.add_argument('-o', dest='outdir', default='.', type=str, help='output directory')\n    return parser", "fn_id": 0, "class_fn": false, "repo": "subhacom/argos", "file": "argos/extract_frames.py", "last_update_at": "2021-05-18T01:07:16+00:00", "pred": {"ppl": 3.3811452388763428, "ppl_lower": 3.6480443477630615, "ppl/lowercase_ppl": -1.0623673006127405, "ppl/zlib": 0.0027437263067017653, "Min_5.0% Prob": 10.819175618035453, "Min_10.0% Prob": 8.101763856822046, "Min_20.0% Prob": 5.616803987272855, "Min_30.0% Prob": 4.0346229107215485, "Min_40.0% Prob": 3.0437728779820294, "Min_50.0% Prob": 2.4438626993868553, "Min_60.0% Prob": 2.0394833478278347}}
{"hexsha": "328dbe2b5b1e986ae40f5e053574fec17b83fbb1", "ext": "py", "lang": "Python", "content": "def trio_perf_counter():\n    \"\"\"Trio task-local equivalent of time.perf_counter().\n\n    For the current Trio task, return the value (in fractional seconds) of a\n    performance counter, i.e. a clock with the highest available resolution to\n    measure a short duration.  It includes time elapsed during time.sleep,\n    but not trio.sleep.  The reference point of the returned value is\n    undefined, so that only the difference between the results of consecutive\n    calls is valid.\n\n    Performance note: calling this function installs instrumentation on the\n    Trio scheduler which may affect application performance.  The\n    instrumentation is automatically removed when the corresponding tasks\n    have exited.\n    \"\"\"\n    trio_lowlevel.add_instrument(_instrument)\n    task = trio_lowlevel.current_task()\n    return perf_counter() - _instrument.get_elapsed_descheduled_time(task)", "fn_id": 0, "class_fn": false, "repo": "belm0/perf-timer", "file": "src/perf_timer/_trio.py", "last_update_at": "2021-05-29T02:50:31+00:00", "pred": {"ppl": 6.57926607131958, "ppl_lower": 7.391542434692383, "ppl/lowercase_ppl": -1.0617929820938927, "ppl/zlib": 0.004113369431884542, "Min_5.0% Prob": 12.798377990722656, "Min_10.0% Prob": 10.498581836098118, "Min_20.0% Prob": 7.568579404782026, "Min_30.0% Prob": 5.8401352631843695, "Min_40.0% Prob": 4.671573398969112, "Min_50.0% Prob": 3.771382645076635, "Min_60.0% Prob": 3.1414409666558947}}
{"hexsha": "1c1c76f7c4bea462b7291fe3d05a036ce7b22f07", "ext": "py", "lang": "Python", "content": "def main():\n    if not os.path.exists('benchmark.py'):\n        logging.warning('Please change current path to %s', PYARMOR_PATH)\n        return\n    output = '.benchtest'\n    name = 'bfoo'\n    filename = os.path.join(output, name + '.py')\n    obname = 'obfoo'\n    obfilename = os.path.join(output, obname + '.py')\n    if len(sys.argv) > 1 and 'bootstrap'.startswith(sys.argv[1]):\n        if len(sys.argv) < 5:\n            sys.argv.extend(['1', '1', '1'])\n        obf_mod, obf_code, wrap_mode = sys.argv[2:5]\n        if not os.path.exists(output):\n            logging.info('Create output path: %s', output)\n            os.makedirs(output)\n        else:\n            logging.info('Output path: %s', output)\n        logging.info('Generate test script %s ...', filename)\n        make_test_script(filename)\n        logging.info('Obffuscate test script ...')\n        shutil.copy(filename, obfilename)\n        obffuscate_scripts(output, os.path.basename(obfilename), obf_mod, obf_code, wrap_mode)\n        if not os.path.exists(obfilename):\n            logging.info('Something is wrong to obsfucate the script')\n            return\n        logging.info('Generate obffuscated script %s', obfilename)\n        logging.info('Copy benchmark.py to %s', output)\n        shutil.copy('benchmark.py', output)\n        logging.info('')\n        logging.info('Now change to \"%s\"', output)\n        logging.info('Run \"%s benchmark.py\".', sys.executable)\n        return\n    filename = os.path.basename(filename)\n    if os.path.exists(filename):\n        logging.info('Test script: %s', filename)\n    else:\n        logging.warning('Test script: %s not found', filename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    obfilename = os.path.basename(obfilename)\n    if os.path.exists(obfilename):\n        logging.info('Obfuscated script: %s', obfilename)\n    else:\n        logging.warning('Obfuscated script: %s not found', obfilename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    logging.info('--------------------------------------')\n    logging.info('')\n    total_extra_init_time()\n    logging.info('')\n    foo = import_no_obfuscated_module(name)\n    obfoo = import_obfuscated_module(obname)\n    logging.info('')\n    foo = re_import_no_obfuscated_module(name)\n    obfoo = re_import_obfuscated_module(obname)\n    logging.info('')\n    run_empty_no_obfuscated_code_object(foo)\n    run_empty_obfuscated_code_object(obfoo)\n    logging.info('')\n    run_one_thousand_no_obfuscated_bytecode(foo)\n    run_one_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    run_ten_thousand_no_obfuscated_bytecode(foo)\n    run_ten_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    logging.info('--------------------------------------')", "fn_id": 6, "class_fn": false, "repo": "HildeTeamTNT/pyarmor", "file": "src/benchmark.py", "last_update_at": "2021-04-23T16:33:54+00:00", "pred": {"ppl": 2.639554500579834, "ppl_lower": 2.5445828437805176, "ppl/lowercase_ppl": -0.962247016969035, "ppl/zlib": 0.0013277840672202637, "Min_5.0% Prob": 9.268061474749917, "Min_10.0% Prob": 7.097132308142526, "Min_20.0% Prob": 4.541029683236153, "Min_30.0% Prob": 3.1945959143500473, "Min_40.0% Prob": 2.4212084151804447, "Min_50.0% Prob": 1.9402706276812138, "Min_60.0% Prob": 1.6203208965558635}}
{"hexsha": "07d1a12410a8c57d20254595d70eb26c45d6f0ba", "ext": "py", "lang": "Python", "content": "@app.route('/robots.txt')\n@app.route('/AI_list.xml')\ndef static_from_root():\n    return send_from_directory(app.static_folder, request.path[1:])", "fn_id": 0, "class_fn": false, "repo": "mattarderne/CommitLearn", "file": "src/app.py", "last_update_at": "2021-12-13T20:29:20+00:00", "pred": {"ppl": 2.5933005809783936, "ppl_lower": 2.4335286617279053, "ppl/lowercase_ppl": -0.9332700229444719, "ppl/zlib": 0.007875466280988922, "Min_5.0% Prob": 11.73963189125061, "Min_10.0% Prob": 9.367942929267883, "Min_20.0% Prob": 4.947388344340855, "Min_30.0% Prob": 3.2422924850668227, "Min_40.0% Prob": 2.403295721074468, "Min_50.0% Prob": 1.9050481273443438, "Min_60.0% Prob": 1.6332557372432868}}
{"hexsha": "241dc5d98f8878f2c0b9e622971ebdf6ac69b24e", "ext": "py", "lang": "Python", "content": "def dye(image, lw=5, rw=5, sh=3, value=255):\n    h, w = image.shape\n    mask = np.ones([h, w], np.uint8)\n    mask *= value\n    mask[2 * int(h / sh):h, int(w / lw):int(w - w / rw)] = 0\n    dst = cv.add(mask, image)\n    return dst", "fn_id": 5, "class_fn": false, "repo": "shinki-alice/-", "file": "V3.py", "last_update_at": "2021-12-08T10:42:49+00:00", "pred": {"ppl": 4.378718376159668, "ppl_lower": 4.378718376159668, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009287774046462286, "Min_5.0% Prob": 10.446733713150024, "Min_10.0% Prob": 8.52698696984185, "Min_20.0% Prob": 5.66971156471654, "Min_30.0% Prob": 4.429884608302798, "Min_40.0% Prob": 3.5190198217567645, "Min_50.0% Prob": 2.9522248791887407, "Min_60.0% Prob": 2.4542578162723467}}
{"hexsha": "585c8c30c7d2aa1d2bbdf2724d7af40b9b92f226", "ext": "py", "lang": "Python", "content": "def get_straightline_path_to(target, robot_pos):\n    pts = []\n    cur_pos = robot_pos\n    while np.linalg.norm(target[:2] - cur_pos[:2]) > 0.5:\n        t = get_step_target_for_move(cur_pos, [target[0], CAMERA_HEIGHT, target[1]], step_size=0.5)\n        pts.append(t)\n        cur_pos = t\n    return np.asarray(pts)", "fn_id": 7, "class_fn": false, "repo": "Jigyasu/droidlet", "file": "droidlet/lowlevel/robot_mover_utils.py", "last_update_at": "2021-09-13T13:25:16+00:00", "pred": {"ppl": 4.458785057067871, "ppl_lower": 4.368770122528076, "ppl/lowercase_ppl": -0.9863568731988597, "ppl/zlib": 0.007327825098984306, "Min_5.0% Prob": 12.49525032043457, "Min_10.0% Prob": 9.19691749052568, "Min_20.0% Prob": 6.5944072008132935, "Min_30.0% Prob": 4.900730456366683, "Min_40.0% Prob": 3.6982769694593216, "Min_50.0% Prob": 3.00482406307544, "Min_60.0% Prob": 2.5187363332943686}}
{"hexsha": "60f2593114913a3c96f097967b6e4f643d2df767", "ext": "py", "lang": "Python", "content": "def root_sum_squares(arr1, arr2):\n    \"\"\"\n    Function to calculate magnitude of two arrays of vectors.\n    \"\"\"\n    rss_arr = np.sqrt(arr1 ** 2 + arr2 ** 2)\n    v_line = np.median(rss_arr)\n    return (rss_arr, v_line)", "fn_id": 5, "class_fn": false, "repo": "geohackweek/ghw2019_planetpieces", "file": "contributors/matt/data_tools.py", "last_update_at": "2021-08-15T12:01:11+00:00", "pred": {"ppl": 7.053226470947266, "ppl_lower": 7.469795227050781, "ppl/lowercase_ppl": -1.0293743814516934, "ppl/zlib": 0.01302323445056916, "Min_5.0% Prob": 14.012072245279947, "Min_10.0% Prob": 10.777694157191686, "Min_20.0% Prob": 7.941150665283203, "Min_30.0% Prob": 6.191232306616647, "Min_40.0% Prob": 4.800010138544543, "Min_50.0% Prob": 3.933105003916555, "Min_60.0% Prob": 3.3132345948454947}}
{"hexsha": "70e4742585e29853d1350672ced44f958ac66764", "ext": "py", "lang": "Python", "content": "def _extract_metrics(out_lines) -> Tuple[pd.DataFrame, Dict[str, Optional[Union[str, int, float]]]]:\n    loss_table = {'i': [], 'loss': [], 'since_last': []}\n    metrics = {}\n    try:\n        record = False\n        for line in out_lines:\n            line = line.strip()\n            if record:\n                if line == '':\n                    record = False\n                else:\n                    counter_line = line.split()\n                    try:\n                        count, average_loss, since_last = (counter_line[2], counter_line[0], counter_line[1])\n                        average_loss_f = float(average_loss)\n                        since_last_f = float(since_last)\n                        loss_table['i'].append(count)\n                        loss_table['loss'].append(average_loss_f)\n                        loss_table['since_last'].append(since_last_f)\n                    except (ValueError, TypeError):\n                        ...\n            elif line.startswith('loss'):\n                fields = line.split()\n                if fields[0] == 'loss' and fields[1] == 'last' and (fields[2] == 'counter'):\n                    record = True\n            elif '=' in line:\n                key_value = [p.strip() for p in line.split('=')]\n                if key_value[0] == 'average loss':\n                    metrics[key_value[0]] = _parse_loss(key_value[1])\n                else:\n                    metrics[key_value[0]] = _to(key_value[1], [int, float])\n    finally:\n        return (pd.DataFrame(loss_table).set_index('i'), metrics)", "fn_id": 3, "class_fn": false, "repo": "ataymano/data-science", "file": "from_mwt_ds/DataScience/vw_executor/artifacts.py", "last_update_at": "2021-12-15T21:45:13+00:00", "pred": {"ppl": 3.0157530307769775, "ppl_lower": 3.504096746444702, "ppl/lowercase_ppl": -1.1359634753792336, "ppl/zlib": 0.002185840713753829, "Min_5.0% Prob": 8.669823355144924, "Min_10.0% Prob": 7.2449350754419966, "Min_20.0% Prob": 5.11691210694509, "Min_30.0% Prob": 3.6244940841739828, "Min_40.0% Prob": 2.757166766998719, "Min_50.0% Prob": 2.2116489069759036, "Min_60.0% Prob": 1.8428418408464051}}
{"hexsha": "ee05a0d4fc4e0216722d78972336a384e87d7578", "ext": "py", "lang": "Python", "content": "def show_video():\n    mp4list = glob.glob('video/*.mp4')\n    if len(mp4list) > 0:\n        mp4 = mp4list[0]\n        video = io.open(mp4, 'r+b').read()\n        encoded = base64.b64encode(video)\n        ipythondisplay.display(HTML(data='<video alt=\"test\" autoplay\\n                 controls style=\"height: 400px;\">\\n                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\\n             </video>'.format(encoded.decode('ascii'))))\n    else:\n        print('Could not find video')", "fn_id": 6, "class_fn": false, "repo": "perceptualrobots/pct", "file": "pct/putils.py", "last_update_at": "2021-11-17T14:33:13+00:00", "pred": {"ppl": 1.736088514328003, "ppl_lower": 1.9387272596359253, "ppl/lowercase_ppl": -1.2001272275150867, "ppl/zlib": 0.0019021882843257584, "Min_5.0% Prob": 7.984116077423096, "Min_10.0% Prob": 4.981339788436889, "Min_20.0% Prob": 2.708954920211146, "Min_30.0% Prob": 1.8495070370643034, "Min_40.0% Prob": 1.377147022199126, "Min_50.0% Prob": 1.1101145381954582, "Min_60.0% Prob": 0.9193670938169504}}
{"hexsha": "e2638a4bcd52d33f3d9e3b6ccc08e027bf129a22", "ext": "py", "lang": "Python", "content": "def build_random_ts(num_samples, length_of_ts):\n    data = {}\n    labels = []\n    for s in range(0, num_samples):\n        labels.append(np.random.choice([1, 2]))\n    data['y'] = labels\n    for col in range(0, length_of_ts):\n        key = 'feature_' + str(col + 1)\n        values = []\n        for s in range(0, num_samples):\n            values.append(np.random.normal())\n        data[key] = values\n    df = pd.DataFrame.from_dict(data)\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, :1]\n    return (X, y)", "fn_id": 19, "class_fn": false, "repo": "AkashPushkar/dsitributed-time-series", "file": "src/full.py", "last_update_at": "2021-06-18T20:51:28+00:00", "pred": {"ppl": 2.856276750564575, "ppl_lower": 3.257747173309326, "ppl/lowercase_ppl": -1.1253116632313818, "ppl/zlib": 0.0041647577033368235, "Min_5.0% Prob": 7.845092594623566, "Min_10.0% Prob": 6.68601867556572, "Min_20.0% Prob": 4.768480256199837, "Min_30.0% Prob": 3.465571957329909, "Min_40.0% Prob": 2.6342347099562176, "Min_50.0% Prob": 2.111182320129592, "Min_60.0% Prob": 1.759974015426754}}
{"hexsha": "a2ffeaa240b71382db18bba9227270f5573e50fb", "ext": "py", "lang": "Python", "content": "@Transform_Wrapper()\ndef Annotate_Script_Names(empty_diffs=0):\n    \"\"\"\n    For every ai script, annotate the pilot entity with the name\n    of the script running.\n    \"\"\"\n    aiscript_files = Load_Files('aiscripts/*.xml')\n    for game_file in aiscript_files:\n        xml_root = game_file.Get_Root()\n        changed = False\n        for tag in ['dock_masstraffic_drone', 'execute_custom_trade', 'execute_trade', 'move_approach_path', 'move_docking', 'move_undocking', 'move_gate', 'move_navmesh', 'move_strafe', 'move_target_points', 'move_waypoints', 'move_to', 'detach_from_masstraffic', 'wait_for_prev_script', 'wait']:\n            nodes = xml_root.xpath('.//{}'.format(tag))\n            if not nodes:\n                continue\n            changed = True\n            if empty_diffs:\n                continue\n            for node in nodes:\n                script_name = etree.Element('set_value', name='this.$script_name', exact=\"'{}'\".format(game_file.name.replace('.xml', '')))\n                node.addprevious(script_name)\n                element_name = etree.Element('set_value', name='this.$element_name', exact=\"'{}'\".format(tag))\n                node.addprevious(element_name)\n                if node.sourceline:\n                    name_line = \"'${} {}'\".format(game_file.name.replace('.xml', ''), node.sourceline)\n                    script_line_node = etree.Element('set_value', name='this.$script_line_name', exact=name_line)\n                    node.addprevious(script_line_node)\n                    record_group = [etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts?\">\\n                              <set_value name=\"this.$script_line_counts\" exact=\"table[]\"/>\\n                            </do_if>'), etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts.{FIELD}?\">\\n                              <set_value name=\"this.$script_line_counts.{FIELD}\" exact=\"0.0\"/>\\n                            </do_if>'.replace('FIELD', name_line)), etree.fromstring('\\n                            <set_value name=\"this.$script_line_counts.{FIELD}\" operation=\"add\"/>'.replace('FIELD', name_line))]\n                    for record_node in record_group:\n                        node.addprevious(record_node)\n        if changed:\n            game_file.Update_Root(xml_root)\n    return", "fn_id": 1, "class_fn": false, "repo": "abouquet/x4-projects", "file": "extensions/sn_measure_perf/Customizer_Script.py", "last_update_at": "2021-03-17T13:54:15+00:00", "pred": {"ppl": 3.8512325286865234, "ppl_lower": 4.0983476638793945, "ppl/lowercase_ppl": -1.0461220419211512, "ppl/zlib": 0.001814795739418371, "Min_5.0% Prob": 11.026633580525717, "Min_10.0% Prob": 8.864350318908691, "Min_20.0% Prob": 6.019810259342194, "Min_30.0% Prob": 4.378125237962587, "Min_40.0% Prob": 3.3491018630686353, "Min_50.0% Prob": 2.6932708193349546, "Min_60.0% Prob": 2.246753759706352}}
{"hexsha": "b2384578a7677f29cd7e0fe11a8a0c2097dd4658", "ext": "py", "lang": "Python", "content": "def export_result(request, uid):\n    if request.method == 'GET':\n        data = request.GET.get('data')\n        img = request.GET.get('image')\n        gif = request.GET.get('gif')\n        if data == '1':\n            data = True\n        else:\n            data = False\n        if img == '1':\n            img = True\n        else:\n            img = False\n        if gif == '1':\n            gif = True\n        else:\n            gif = False\n        work = Work(uid)\n        zip_path, file_name = work.export(data, img, gif)\n        response = StreamingHttpResponse(Tools.file_iterator(zip_path))\n        response['Content-Type'] = 'application/octet-stream'\n        response['Content-Disposition'] = 'attachment; filename={0}'.format(file_name)\n        response['Access-Control-Expose-Headers'] = 'Content-Disposition'\n        return response", "fn_id": 3, "class_fn": false, "repo": "Mr-Gump/Bamboo-Web", "file": "src/BambooReConstruct/BackEnd/views.py", "last_update_at": "2021-07-03T09:36:27+00:00", "pred": {"ppl": 2.1795597076416016, "ppl_lower": 3.1248130798339844, "ppl/lowercase_ppl": -1.4623809482782217, "ppl/zlib": 0.0022915379042081642, "Min_5.0% Prob": 8.269310855865479, "Min_10.0% Prob": 5.872036695480347, "Min_20.0% Prob": 3.658844356238842, "Min_30.0% Prob": 2.5884944019218286, "Min_40.0% Prob": 1.9613311766646802, "Min_50.0% Prob": 1.557239714820897, "Min_60.0% Prob": 1.300519860353444}}
{"hexsha": "521ca7e8f2b91498b1cecc645438b8f39926f276", "ext": "py", "lang": "Python", "content": "def test_haversine():\n    \"\"\"\n    TODO...\n    \"\"\"\n    pass", "fn_id": 1, "class_fn": false, "repo": "peterprescott/optimize-nn", "file": "tests/test_given.py", "last_update_at": "2021-10-12T04:46:20+00:00", "pred": {"ppl": 17.32878303527832, "ppl_lower": 20.549036026000977, "ppl/lowercase_ppl": -1.0597556487791084, "ppl/zlib": 0.05704737756508331, "Min_5.0% Prob": NaN, "Min_10.0% Prob": 10.114578247070312, "Min_20.0% Prob": 9.356552124023438, "Min_30.0% Prob": 8.468472361564636, "Min_40.0% Prob": 6.602536638577779, "Min_50.0% Prob": 5.772331067493984, "Min_60.0% Prob": 4.631852699650659}}
{"hexsha": "aa06ab4636c128273f66fb5d6c82aabd460f2220", "ext": "py", "lang": "Python", "content": "@mock.patch('six.moves.builtins.super')\ndef test_algosec_servers_http_adapter(mock_super, mocker):\n    adapter = AlgoSecServersHTTPAdapter()\n    adapter.send()\n    assert super.return_value.send.call_args == mocker.call(timeout=(AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_CONNECT_TIMEOUT, AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_READ_TIMEOUT))\n    assert mock_super(AlgoSecServersHTTPAdapter, adapter).calls[0]", "fn_id": 0, "class_fn": false, "repo": "chanilurya/algosec-python", "file": "tests/test_helpers.py", "last_update_at": "2021-09-25T13:15:19+00:00", "pred": {"ppl": 5.283278942108154, "ppl_lower": 6.993896961212158, "ppl/lowercase_ppl": -1.1685089116595442, "ppl/zlib": 0.007268763828528683, "Min_5.0% Prob": 11.676063537597656, "Min_10.0% Prob": 9.508682164278897, "Min_20.0% Prob": 7.088556870170262, "Min_30.0% Prob": 5.352344635554722, "Min_40.0% Prob": 4.193845388681992, "Min_50.0% Prob": 3.35419951989476, "Min_60.0% Prob": 2.7814999420395385}}
{"hexsha": "1ac41f241705a181f54bcd99f611ca86824ed455", "ext": "py", "lang": "Python", "content": "def Hosts_Ping(context, nameSpace, className, methodName, instanceName, parameters):\n    be = BookEnd('Hosts_Ping')\n    outParams = context.NewParameters('Hosts', 'Ping')\n    outParams.SetValue('MIReturn', MI_Uint64(123))\n    context.PostInstance(outParams)\n    context.PostResult(MI_RESULT_OK)", "fn_id": 5, "class_fn": false, "repo": "Bhaskers-Blu-Org2/omi-script-provider", "file": "samples/hosts/_mi_main.py", "last_update_at": "2021-04-20T16:09:19+00:00", "pred": {"ppl": 10.713619232177734, "ppl_lower": 21.1424560546875, "ppl/lowercase_ppl": -1.2866383638519199, "ppl/zlib": 0.012416312866751003, "Min_5.0% Prob": 12.702693700790405, "Min_10.0% Prob": 11.456333756446838, "Min_20.0% Prob": 8.735688716173172, "Min_30.0% Prob": 7.095077613989512, "Min_40.0% Prob": 5.673867240096584, "Min_50.0% Prob": 4.713561193245213, "Min_60.0% Prob": 3.9978221545414048}}
{"hexsha": "73401fdbf7f3329cc097f204980f1eaf451bd20d", "ext": "py", "lang": "Python", "content": "def updateStateByKey(ssc):\n\n    def processStateUpdateByKey(input_stream, state):\n        print('i', input_stream)\n        print('s', state)\n        return state if not input_stream else input_stream[-1]\n    ssc.checkpoint('checkpoints/')\n    ssc.queueStream([[('a', 1), ('b', 3)], [('a', 2), ('a', 5), ('c', 4)]]).updateStateByKey(processStateUpdateByKey).pprint()", "fn_id": 0, "class_fn": false, "repo": "svaningelgem/pyspark_fast_tester", "file": "src/main/scripts/pyspark_streaming.py", "last_update_at": "2021-08-02T13:59:46+00:00", "pred": {"ppl": 6.811482906341553, "ppl_lower": 8.648299217224121, "ppl/lowercase_ppl": -1.124440531016359, "ppl/zlib": 0.009992759639018673, "Min_5.0% Prob": 10.489594650268554, "Min_10.0% Prob": 8.931596539237283, "Min_20.0% Prob": 6.971078395843506, "Min_30.0% Prob": 5.726002902695627, "Min_40.0% Prob": 4.666123619133776, "Min_50.0% Prob": 3.8011526481671765, "Min_60.0% Prob": 3.1902382254148973}}
{"hexsha": "00cef5ab0b6c71719e9da7da7a1b9a6407ebc5d7", "ext": "py", "lang": "Python", "content": "def main():\n    N = 7\n    M = 10\n    key = gfdb.Management.retrieval.Retrieve.create_key(N, M)\n    print('key: ' + key)\n    r_configuration = 'rectangle'\n    r = gfdb.Management.retrieval.Retrieve(r_configuration)\n    library_boundaries = r.query_database()\n    r_data = r.retrieve(N, M)\n    print(r_data)\n    r_level = r.levels[r_configuration]\n    L_configuration = 'L'\n    L = gfdb.Management.retrieval.Retrieve(L_configuration)\n    library_boundaries = L.query_database()\n    L_data = L.retrieve(N, M)\n    print(L_data)\n    LopU_configuration = 'LopU'\n    LopU = gfdb.Management.retrieval.Retrieve(LopU_configuration)\n    LopU_data = LopU.retrieve(N, M)\n    print(LopU_data)\n    U_configuration = 'U'\n    U = gfdb.Management.retrieval.Retrieve(U_configuration)\n    U_data = U.retrieve(N, M)\n    print(U_data)\n    c_configuration = 'C'\n    c = gfdb.Management.retrieval.Retrieve(c_configuration)\n    library_boundaries = c.query_database()\n    c_data = c.retrieve(N, M)\n    print(c_data)\n    Open_configuration = 'Open'\n    Open = gfdb.Management.retrieval.Retrieve(Open_configuration)\n    Open_data = Open.retrieve(N, M)\n    print(Open_data)\n    zoned_configuration = 'zoned'\n    zoned = gfdb.Management.retrieval.Retrieve(zoned_configuration)\n    zoned_data = zoned.retrieve(N, M)\n    print(zoned_data)", "fn_id": 0, "class_fn": false, "repo": "j-c-cook/gFunctionDatabase", "file": "gFunctionDatabase/Management/examples/retreive.py", "last_update_at": "2021-03-13T11:23:49+00:00", "pred": {"ppl": 2.265913248062134, "ppl_lower": 2.369924306869507, "ppl/lowercase_ppl": -1.0548671793354198, "ppl/zlib": 0.0024938349929851866, "Min_5.0% Prob": 9.793644269307455, "Min_10.0% Prob": 6.917937710171654, "Min_20.0% Prob": 4.034792860465891, "Min_30.0% Prob": 2.7285707788250875, "Min_40.0% Prob": 2.046592796575387, "Min_50.0% Prob": 1.6358017272905612, "Min_60.0% Prob": 1.3675185497023676}}
{"hexsha": "e357f5174eb4389ae8c75eadb4fb65ed5718efd2", "ext": "py", "lang": "Python", "content": "def initialize_routes(api, limiter):\n    RegisterApi.decorators = [limiter.limit('10/hour', methods=['POST'])]\n    LoginApi.decorators = [limiter.limit('30/minute', methods=['POST'])]\n    PasswordChangeApi.decorators = [limiter.limit('5/day', methods=['POST'])]\n    CaffSearchApi.decorators = [limiter.limit('1/second', methods=['GET'])]\n    CaffDownloadApi.decorators = [limiter.limit('10/minute', methods=['GET'])]\n    CaffUploadApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    CommentApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    UserDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    CaffDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    api.add_resource(RegisterApi, '/user/register')\n    api.add_resource(LoginApi, '/user/login')\n    api.add_resource(LogoutApi, '/user/logout')\n    api.add_resource(PasswordChangeApi, '/user/password')\n    api.add_resource(UsersListApi, '/user/')\n    api.add_resource(UserDataApi, '/user/<username>')\n    api.add_resource(CaffDataApi, '/caff/<caff_id>')\n    api.add_resource(CaffSearchApi, '/caff/search')\n    api.add_resource(CaffUploadApi, '/caff/upload')\n    api.add_resource(CaffDownloadApi, '/caff/download/<caff_id>')\n    api.add_resource(CommentApi, '/comment')", "fn_id": 0, "class_fn": false, "repo": "nemkrisz11/Computer-Security-Homework-2021-SHAjt", "file": "Backend/flaskapp/resources/routes.py", "last_update_at": "2021-12-03T09:58:04+00:00", "pred": {"ppl": 1.8026095628738403, "ppl_lower": 1.9445141553878784, "ppl/lowercase_ppl": -1.1286018893312657, "ppl/zlib": 0.0016932050924452504, "Min_5.0% Prob": 7.301618174502724, "Min_10.0% Prob": 5.024105570255181, "Min_20.0% Prob": 2.8878516400162177, "Min_30.0% Prob": 1.9667794870496806, "Min_40.0% Prob": 1.4724420624861754, "Min_50.0% Prob": 1.1813634885995068, "Min_60.0% Prob": 0.9820409842744349}}
{"hexsha": "fe661c2264845a793c67f4141a080dbf2325c8ac", "ext": "py", "lang": "Python", "content": "def get_significance_matrix(df):\n    \"\"\"\n    returns matrix in which item[y,x] is test of whether y-x is center around zero\n    \"\"\"\n    return df.apply(lambda x: df.apply(lambda y: wilcox_test(x, y)))", "fn_id": 4, "class_fn": false, "repo": "nweir127/COD3S", "file": "src/utils/metrics.py", "last_update_at": "2021-12-10T16:33:52+00:00", "pred": {"ppl": 12.10526180267334, "ppl_lower": 12.10526180267334, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01743804348114459, "Min_5.0% Prob": 11.73403549194336, "Min_10.0% Prob": 9.99910306930542, "Min_20.0% Prob": 8.566837708155314, "Min_30.0% Prob": 7.12344851758745, "Min_40.0% Prob": 5.783607420921325, "Min_50.0% Prob": 4.865077901271082, "Min_60.0% Prob": 4.18029185243555}}
{"hexsha": "4aa6ab3efd6286da2d8af7db8b33a3b6c6534a0f", "ext": "py", "lang": "Python", "content": "def test_object_beside_object():\n    ball = situation_object(BALL)\n    table = situation_object(TABLE)\n    situation = HighLevelSemanticsSituation(ontology=GAILA_PHASE_1_ONTOLOGY, salient_objects=[ball, table], always_relations=[Relation(IN_REGION, ball, Region(table, distance=PROXIMAL, direction=Direction(positive=True, relative_to_axis=HorizontalAxisOfObject(table, index=0))))])\n    assert generated_tokens(situation) == ('a', 'ball', 'beside', 'a', 'table')", "fn_id": 37, "class_fn": false, "repo": "Tubbz-alt/adam", "file": "tests/language_specific/english/test_english_language_generator.py", "last_update_at": "2021-04-26T23:59:57+00:00", "pred": {"ppl": 3.8426499366760254, "ppl_lower": 9.697264671325684, "ppl/lowercase_ppl": -1.6876449402822562, "ppl/zlib": 0.004563261750083632, "Min_5.0% Prob": 11.534979979197184, "Min_10.0% Prob": 8.72813162436852, "Min_20.0% Prob": 6.041680468453301, "Min_30.0% Prob": 4.4305456832051275, "Min_40.0% Prob": 3.347339599634762, "Min_50.0% Prob": 2.7076791339734596, "Min_60.0% Prob": 2.2427533231905583}}
{"hexsha": "4fc83d3fdc1d39e0640dd521e048db83a30a09cb", "ext": "py", "lang": "Python", "content": "@task\ndef prepare_python_packages():\n    local('mkdir -p {local_python_packages_dir}'.format(**env))\n    local('cp {local_project_root}/requirements.txt {local_python_packages_dir}/'.format(**env))\n    existing_files = set((filenameToRequirement(filename) for filename in os.listdir(env.local_python_packages_dir)))\n    missing_requirements = tempfile.NamedTemporaryFile()\n    for raw_line in open(os.path.join(env.local_project_root, 'requirements.txt')):\n        line = raw_line.strip()\n        if not line or line.startswith('#') or line not in existing_files:\n            missing_requirements.write(raw_line)\n    missing_requirements.flush()\n    local('pip install --no-use-wheel -d {env.local_python_packages_dir} --exists-action=i -r {missing_requirements_file}'.format(env=env, missing_requirements_file=missing_requirements.name))\n    missing_requirements.close()", "fn_id": 8, "class_fn": false, "repo": "jsavikko/futurice-ldap-user-manager", "file": "fabfile.py", "last_update_at": "2021-05-06T07:57:56+00:00", "pred": {"ppl": 2.838672637939453, "ppl_lower": 3.148139476776123, "ppl/lowercase_ppl": -1.0991770804501277, "ppl/zlib": 0.00286630923601465, "Min_5.0% Prob": 10.971063353798606, "Min_10.0% Prob": 7.6512470452681836, "Min_20.0% Prob": 4.895413569782091, "Min_30.0% Prob": 3.464879293804583, "Min_40.0% Prob": 2.606213791396028, "Min_50.0% Prob": 2.0947603868031552, "Min_60.0% Prob": 1.7487875542330402}}
{"hexsha": "073a2f50e72052b77841f9cbe00704769b1c08c3", "ext": "py", "lang": "Python", "content": "def predict(pdb_file: Path) -> float:\n    \"\"\"\n    The function that puts it all together: parsing the PDB file, generating\n    features from it and performing inference with the ML model.\n    \"\"\"\n    parser = PDBParser()\n    structure = parser.get_structure(pdb_file.stem, pdb_file)\n    features = featurize(structure)\n    predicted_solubility = ml_inference(features)\n    return predicted_solubility", "fn_id": 0, "class_fn": false, "repo": "krmstrong322/cbh21-protein-solubility-challenge", "file": "predict.py", "last_update_at": "2021-05-03T20:23:32+00:00", "pred": {"ppl": 3.506481170654297, "ppl_lower": 5.350462436676025, "ppl/lowercase_ppl": -1.3368129999831522, "ppl/zlib": 0.0054312251910818765, "Min_5.0% Prob": 9.304395079612732, "Min_10.0% Prob": 7.054600609673394, "Min_20.0% Prob": 4.969794047506232, "Min_30.0% Prob": 3.8977560627049415, "Min_40.0% Prob": 3.0882059664298325, "Min_50.0% Prob": 2.497577823242363, "Min_60.0% Prob": 2.1174310730320625}}
{"hexsha": "6a51a788efc3cd04bcda0ebddae5641c0b5fd64a", "ext": "py", "lang": "Python", "content": "def AdvSrch_Type_f(AdvSrch_Type):\n    if AdvSrch_Type == 'Computer':\n        return ('advancedcomputersearches', 'advanced_computer_search', 'computers')\n    if AdvSrch_Type == 'Mobile':\n        return ('advancedmobiledevicesearches', 'advanced_mobile_device_search', 'mobile_devices')\n    else:\n        print('Failed to set AdvSrch_Type properly.\\rPlease uncomment AdvSrch_Type = \"Computer\" or AdvSrch_Type = \"Mobile\"')", "fn_id": 0, "class_fn": false, "repo": "distorted-fields/jamf-to-google-reporting", "file": "jamf-to-google.py", "last_update_at": "2021-11-29T16:15:17+00:00", "pred": {"ppl": 5.76003885269165, "ppl_lower": 5.2949748039245605, "ppl/lowercase_ppl": -0.9519196566008953, "ppl/zlib": 0.00926425513197893, "Min_5.0% Prob": 10.815265941619874, "Min_10.0% Prob": 8.91914718801325, "Min_20.0% Prob": 7.010214142177416, "Min_30.0% Prob": 5.6099052633558, "Min_40.0% Prob": 4.355024363132233, "Min_50.0% Prob": 3.4952923658666974, "Min_60.0% Prob": 2.9504925269101347}}
{"hexsha": "35daad5aecd0ac3a78c0c2339cbf51e0014f3f74", "ext": "py", "lang": "Python", "content": "def Predict(Phi, b, mu, s, t, r, outd):\n    print(t, '--t')\n    dt = t[1] - t[0]\n    tmin = min(t)\n    tmax = max(t)\n    t2 = np.linspace(tmin, tmax, num_pred)\n    Psi = np.zeros([r, len(t2)], dtype='complex')\n    for i, _x in enumerate(t2):\n        print(_x, '_x')\n        print(b, 'b')\n        print(i)\n        print(shape(Psi))\n        Psi[:, i] = multiply(power(mu, _x / dt), b)\n    D2 = dot(Phi, Psi)\n    sigmaps = []\n    tps = []\n    for i in range(len(D2[0, :])):\n        print(str(i) + '--predicted...' + str(t2[i]))\n        F = D2[:, i]\n        if i == 0:\n            F0 = average(F)\n        eps = t2[i]\n        sigma = MakeImagePred(F - F0, i, s, eps, outd)\n        tps.append(t2[i])\n        sigmaps.append(sigma + eps)\n    return (tps, sigmaps)", "fn_id": 10, "class_fn": false, "repo": "PapStatMechMat/SeaPy", "file": "RunSEAmodes.py", "last_update_at": "2021-05-26T05:16:05+00:00", "pred": {"ppl": 5.492147445678711, "ppl_lower": 5.55511999130249, "ppl/lowercase_ppl": -1.006693218539794, "ppl/zlib": 0.004424206064678598, "Min_5.0% Prob": 10.529189246041435, "Min_10.0% Prob": 8.987867321286883, "Min_20.0% Prob": 6.793213933706284, "Min_30.0% Prob": 5.246634073818432, "Min_40.0% Prob": 4.190694203155231, "Min_50.0% Prob": 3.380164110009939, "Min_60.0% Prob": 2.839113305815879}}
{"hexsha": "70f2b74641e7867f742d38f95ce15e96044fc424", "ext": "py", "lang": "Python", "content": "def _predict(X_, theta_, model_):\n    n = X_.shape[0]\n    t_init = time()\n    Z_hat_ = _predict_proba(X_, model_)\n    W_hat_ = _classify(Z_hat_, prob=theta_[0], invert_label=model_[-1])\n    tm = time() - t_init\n    return (W_hat_, tm)", "fn_id": 2, "class_fn": false, "repo": "gterren/cloud_segmentation", "file": "GDA_segm.py", "last_update_at": "2021-11-18T07:50:33+00:00", "pred": {"ppl": 6.369720935821533, "ppl_lower": 6.249387741088867, "ppl/lowercase_ppl": -0.9896993850174225, "ppl/zlib": 0.011945520383814365, "Min_5.0% Prob": 9.259487986564636, "Min_10.0% Prob": 7.815942764282227, "Min_20.0% Prob": 6.352478363934686, "Min_30.0% Prob": 5.117492574911851, "Min_40.0% Prob": 4.34275209903717, "Min_50.0% Prob": 3.6612152484960334, "Min_60.0% Prob": 3.0878878942189307}}
{"hexsha": "0e47d06b09a13065c0203d222fb5c4959d610194", "ext": "py", "lang": "Python", "content": "def checkIfRange(request, response):\n    \"\"\"Checks for the If-Range header, and if it exists, checks if the\n    test passes. Returns true if the server should return partial data.\"\"\"\n    ifrange = request.headers.getHeader('if-range')\n    if ifrange is None:\n        return True\n    if isinstance(ifrange, http_headers.ETag):\n        return ifrange.match(response.headers.getHeader('etag'), strongCompare=True)\n    else:\n        return ifrange == response.headers.getHeader('last-modified')", "fn_id": 4, "class_fn": false, "repo": "twonds/twisted", "file": "twisted/web2/http.py", "last_update_at": "2021-01-27T19:11:21+00:00", "pred": {"ppl": 4.4803314208984375, "ppl_lower": 5.615601539611816, "ppl/lowercase_ppl": -1.1505982131486565, "ppl/zlib": 0.0057680654675760805, "Min_5.0% Prob": 10.721530342102051, "Min_10.0% Prob": 8.802950902418656, "Min_20.0% Prob": 5.967001873513927, "Min_30.0% Prob": 4.590867375626283, "Min_40.0% Prob": 3.6514372877452685, "Min_50.0% Prob": 2.956126129318928, "Min_60.0% Prob": 2.509331778663656}}
{"hexsha": "68c4a5c1dfedd1f00d406e741e54edfced34cff1", "ext": "py", "lang": "Python", "content": "def user_info_strlist(user: telegram.User) -> list[str]:\n    keys = ['User ID', 'First Name', 'Last Name', 'User Name', 'Language Code']\n    values = [user.id, user.first_name, user.last_name, user.username, user.language_code]\n    return combine_no_none(keys, values)", "fn_id": 5, "class_fn": false, "repo": "punch-dango/telegram-bot", "file": "dango_bot.py", "last_update_at": "2021-06-15T11:47:09+00:00", "pred": {"ppl": 2.9724409580230713, "ppl_lower": 3.442152738571167, "ppl/lowercase_ppl": -1.1346757931427072, "ppl/zlib": 0.006297014373708063, "Min_5.0% Prob": 10.744990825653076, "Min_10.0% Prob": 8.403031647205353, "Min_20.0% Prob": 5.360096491873264, "Min_30.0% Prob": 3.6048669028282165, "Min_40.0% Prob": 2.7632059694239586, "Min_50.0% Prob": 2.1773838101487075, "Min_60.0% Prob": 1.8298372730333359}}
{"hexsha": "039644328490858f1aa80d268898976f6bf2523f", "ext": "py", "lang": "Python", "content": "def deploy():\n    execute(checkout)\n    execute(dependencies)\n    execute(make_current)\n    execute(restart)\n    execute(cleanup)", "fn_id": 1, "class_fn": false, "repo": "anupam123148/shaaaaaaaaaaaaa", "file": "fabfile.py", "last_update_at": "2021-04-24T16:37:31+00:00", "pred": {"ppl": 7.390594005584717, "ppl_lower": 7.390594005584717, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.024392781846048105, "Min_5.0% Prob": 9.628491401672363, "Min_10.0% Prob": 8.777854442596436, "Min_20.0% Prob": 7.483965969085693, "Min_30.0% Prob": 6.172011911869049, "Min_40.0% Prob": 5.073044408451427, "Min_50.0% Prob": 4.113377791430269, "Min_60.0% Prob": 3.4063665796728695}}
{"hexsha": "d7d328944b6c85472fc3b3a7461b51d1e20de3b9", "ext": "py", "lang": "Python", "content": "def punctuation_count(documents: list) -> int:\n    \"\"\"Count number of punctuation characters in a list of textual documents\n\n    Keyword arguments:\n    documents -- the list of textual documents.\n    \"\"\"\n    __check_documents_param(documents)\n    char_cnt = char_count(documents, ignore_spaces=True)\n    char_wo_punctuation = letter_count(documents, ignore_spaces=True, ignore_digits=False)\n    return char_cnt - char_wo_punctuation", "fn_id": 4, "class_fn": false, "repo": "Perevalov/language_features", "file": "linguaf/descriptive_statistics.py", "last_update_at": "2021-09-21T00:47:55+00:00", "pred": {"ppl": 7.516696929931641, "ppl_lower": 9.08786678314209, "ppl/lowercase_ppl": -1.094100876343653, "ppl/zlib": 0.009697725016478163, "Min_5.0% Prob": 12.649013328552247, "Min_10.0% Prob": 11.519536113739013, "Min_20.0% Prob": 8.74101886295137, "Min_30.0% Prob": 6.657549877320567, "Min_40.0% Prob": 5.059029081392856, "Min_50.0% Prob": 4.028283468043467, "Min_60.0% Prob": 3.3925628067984706}}
{"hexsha": "8e9b1c035fd0fe23e9e05c70dd0f5fd3d8067103", "ext": "py", "lang": "Python", "content": "def _read_version_file():\n    \"\"\"\n    Attempt to read the `version.py` file from the top level package.\n    \"\"\"\n    version_file = configuration.version_path()\n    logging.info(\"Attempting to open '%s' and read the current version.\", version_file)\n    loader = importlib.machinery.SourceFileLoader('version_module', version_file)\n    spec = importlib.util.spec_from_loader('version_module', loader)\n    version_module = importlib.util.module_from_spec(spec)\n    try:\n        loader.exec_module(version_module)\n        logging.info(\"Version file found. Using version '%s' found within.\", version_module.__version__)\n        return version_module.__version__\n    except FileNotFoundError:\n        logging.warning(\"Version file was not found at '%s'. Attempting to determine version another way.\", version_file)\n    except AttributeError as err:\n        logging.error(err)\n        logging.warning(\"Version file was found at '%s', however it did not contain the variable __version__. Attempting to determine version another way.\", version_file)\n    return None", "fn_id": 3, "class_fn": false, "repo": "timepieces141/dynamic-versioning", "file": "src/dynamic_versioning/utils.py", "last_update_at": "2021-10-20T21:33:32+00:00", "pred": {"ppl": 3.2876057624816895, "ppl_lower": 4.256958961486816, "ppl/lowercase_ppl": -1.2171099450886584, "ppl/zlib": 0.002860960500200712, "Min_5.0% Prob": 8.964262088139852, "Min_10.0% Prob": 7.130348443984985, "Min_20.0% Prob": 5.153298899531364, "Min_30.0% Prob": 3.8469228173295655, "Min_40.0% Prob": 2.9635285635277167, "Min_50.0% Prob": 2.3883972267412448, "Min_60.0% Prob": 1.9943984470506808}}
{"hexsha": "ac9620fc76910d66d5eadf9c78f39e41ea6edc77", "ext": "py", "lang": "Python", "content": "def plot_14(id, query):\n    if 'category__in' in query:\n        del query['category__in']\n    query['category'] = 'B'\n    data = data_plot_groupby_category(query, values=['category', 'cloud'], sum_param='jobdefcount', label_cols=['cloud'], label_translation=False)\n    colors = prepare_colors_for_piechart(data)\n    title = PLOT_TITLES['title' + id]\n    unit = PLOT_UNITS[id]\n    return (data, colors, title, unit)", "fn_id": 16, "class_fn": false, "repo": "PanDAWMS/panda-bigmon-core-new", "file": "core/pbm/utils.py", "last_update_at": "2021-11-18T04:57:18+00:00", "pred": {"ppl": 11.497801780700684, "ppl_lower": 13.472326278686523, "ppl/lowercase_ppl": -1.0648942234768102, "ppl/zlib": 0.009768623470374084, "Min_5.0% Prob": 11.05082368850708, "Min_10.0% Prob": 9.860144853591919, "Min_20.0% Prob": 8.06587911605835, "Min_30.0% Prob": 6.891840277491389, "Min_40.0% Prob": 5.670843188762665, "Min_50.0% Prob": 4.787858402536761, "Min_60.0% Prob": 4.046977047721545}}
{"hexsha": "8502057a4b3bf916aba610da48747e7b8d5604e4", "ext": "py", "lang": "Python", "content": "def load_data():\n    moon_data = np.load('moon_data.npz')\n    x_s = moon_data['x_s']\n    y_s = moon_data['y_s']\n    x_t = moon_data['x_t']\n    return (torch.from_numpy(x_s).float(), torch.from_numpy(y_s).float(), torch.from_numpy(x_t).float())", "fn_id": 2, "class_fn": false, "repo": "krumo/swd_pytorch", "file": "swd_pytorch.py", "last_update_at": "2021-11-09T07:08:23+00:00", "pred": {"ppl": 1.9771332740783691, "ppl_lower": 1.9771332740783691, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005453183633574268, "Min_5.0% Prob": 10.15613579750061, "Min_10.0% Prob": 6.1718578868442115, "Min_20.0% Prob": 3.343952775001526, "Min_30.0% Prob": 2.2642113119363785, "Min_40.0% Prob": 1.737506555932525, "Min_50.0% Prob": 1.3772681253418948, "Min_60.0% Prob": 1.1399776043715597}}
{"hexsha": "85d7907789cbbb8ce6e2019eb09711694ee29577", "ext": "py", "lang": "Python", "content": "def test_main():\n\n    def cmd(*args, **kwargs):\n        try:\n            main.callback(*args, **kwargs)\n            return 0\n        except SystemExit as e:\n            return e.code\n    inpath = 'examples/test.py'\n    outpath = 'examples/test.xml'\n    assert cmd(inpath, outpath, verbose=True, string=True) == 0\n    assert cmd(inpath, outpath, help=True) == 0\n    assert cmd(inpath, outpath, reload=True) == 0\n    assert cmd(inpath, outpath, version=True) == 0\n    assert cmd(inpath, outpath, list_peripherals=True) == 0", "fn_id": 0, "class_fn": false, "repo": "loggerhead/Easy-Karabiner", "file": "tests/test_main.py", "last_update_at": "2021-05-26T00:28:59+00:00", "pred": {"ppl": 3.179889440536499, "ppl_lower": 3.765152931213379, "ppl/lowercase_ppl": -1.1460367135190532, "ppl/zlib": 0.005431203892304262, "Min_5.0% Prob": 10.063640594482422, "Min_10.0% Prob": 7.5214470227559405, "Min_20.0% Prob": 5.30399239447809, "Min_30.0% Prob": 3.7668552652318428, "Min_40.0% Prob": 2.9021559156958134, "Min_50.0% Prob": 2.32109451174545, "Min_60.0% Prob": 1.9301703303774937}}
{"hexsha": "dbdac17e96cf66994ed82d897eac1d43424c6c6f", "ext": "py", "lang": "Python", "content": "def collect_bstock(pop, sp_idcs, farm_idx):\n    \"\"\"Migrate marked broodstock from source subpopulation\n    to farm subpopulation.\"\"\"\n    for sp_idx in sp_idcs:\n        for ind in pop.individuals([sp_idx]):\n            if ind.broodstock == 1:\n                ind.migrate_to = farm_idx\n            else:\n                ind.migrate_to = sp_idx\n    sim.migrate(pop, mode=sim.BY_IND_INFO)", "fn_id": 12, "class_fn": false, "repo": "nwfsc-cb/shellfish-genetic-risks", "file": "inst/GRs.py", "last_update_at": "2021-09-14T05:30:49+00:00", "pred": {"ppl": 10.716588020324707, "ppl_lower": 12.807351112365723, "ppl/lowercase_ppl": -1.0751442059711884, "ppl/zlib": 0.011683708489133802, "Min_5.0% Prob": 12.993544769287109, "Min_10.0% Prob": 11.498550128936767, "Min_20.0% Prob": 9.00987484341576, "Min_30.0% Prob": 6.945513688027859, "Min_40.0% Prob": 5.5875379401584, "Min_50.0% Prob": 4.653531025957178, "Min_60.0% Prob": 3.985569129465148}}
{"hexsha": "b85923ab8b9e16da8df9357a1215d9b3530c1988", "ext": "py", "lang": "Python", "content": "def detect(image):\n    detector = dlib.get_frontal_face_detector()\n    img_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    rects = detector(img_gray, 0)\n    return rects", "fn_id": 1, "class_fn": false, "repo": "ForrestPi/FaceProjects", "file": "facialLandmarker/pfld/algin_dlib.py", "last_update_at": "2021-06-22T06:21:29+00:00", "pred": {"ppl": 1.8679920434951782, "ppl_lower": 3.29632830619812, "ppl/lowercase_ppl": -1.9089098764250303, "ppl/zlib": 0.004881750628333517, "Min_5.0% Prob": 7.437961578369141, "Min_10.0% Prob": 5.038608074188232, "Min_20.0% Prob": 3.0996733145280317, "Min_30.0% Prob": 2.122324635877329, "Min_40.0% Prob": 1.5747570906887236, "Min_50.0% Prob": 1.2496177243562576, "Min_60.0% Prob": 1.0659140511869576}}
{"hexsha": "b36f29adbca75035b8a5747f2e0405b7dd6b8caf", "ext": "py", "lang": "Python", "content": "def roll20(querry=None):\n    \"\"\"\n    Searches roll20.net for a querry and opens the search in a webbrowser.\n    :param querry: String to search for.  If none is provided, asks the user.\n    :return: None\n    \"\"\"\n    if querry is None:\n        querry = simpledialog.askstring('Search Roll20', 'Search Roll20.net for:')\n    if querry is not None:\n        url = 'https://roll20.net/compendium/dnd5e/searchbook/?terms=' + querry\n        webbrowser.open(url)", "fn_id": 1, "class_fn": false, "repo": "spudhunter/DnD-Combat-Manager", "file": "CombatManager.py", "last_update_at": "2021-01-20T05:11:23+00:00", "pred": {"ppl": 3.5526702404022217, "ppl_lower": 4.485533237457275, "ppl/lowercase_ppl": -1.1839220419527894, "ppl/zlib": 0.00501066996496608, "Min_5.0% Prob": 11.91822616259257, "Min_10.0% Prob": 8.122366153276884, "Min_20.0% Prob": 5.415773784672773, "Min_30.0% Prob": 3.9826058425554414, "Min_40.0% Prob": 3.1068478893149982, "Min_50.0% Prob": 2.5196532892144243, "Min_60.0% Prob": 2.1308695017019423}}
{"hexsha": "31a0f40f5b3b73886fe6be3847e4043e0c0b0471", "ext": "py", "lang": "Python", "content": "def checkEntries(DataSetFile, preprocess=lambda x: x, dataType='jpg'):\n    dataset = wds.WebDataset(DataSetFile)\n    itemsTouched = 0\n    for element in dataset:\n        print(element['__key__'])\n        preprocess(element[dataType])\n        tmp = element[0]\n        if not tmp == None:\n            itemsTouched += 1\n    return itemsTouched", "fn_id": 8, "class_fn": false, "repo": "AaltoRSE/ImageNetTools", "file": "ImageNetTools/IOTesters.py", "last_update_at": "2021-11-15T11:21:55+00:00", "pred": {"ppl": 9.435851097106934, "ppl_lower": 10.54079818725586, "ppl/lowercase_ppl": -1.049336636344291, "ppl/zlib": 0.011629618555040402, "Min_5.0% Prob": 14.562016487121582, "Min_10.0% Prob": 12.735923290252686, "Min_20.0% Prob": 9.571346461772919, "Min_30.0% Prob": 7.055487108230591, "Min_40.0% Prob": 5.579636586434914, "Min_50.0% Prob": 4.456686155072281, "Min_60.0% Prob": 3.760634170770645}}
{"hexsha": "db491fb88dce762693e7f13205150b53101924e2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize(['augmentation_cls', 'params'], get_dual_transforms(custom_arguments={A.Crop: {'y_min': 0, 'y_max': 10, 'x_min': 0, 'x_max': 10}, A.CenterCrop: {'height': 10, 'width': 10}, A.CropNonEmptyMaskIfExists: {'height': 10, 'width': 10}, A.RandomCrop: {'height': 10, 'width': 10}, A.RandomResizedCrop: {'height': 10, 'width': 10}, A.RandomSizedCrop: {'min_max_height': (4, 8), 'height': 10, 'width': 10}, A.CropAndPad: {'px': 10}, A.Resize: {'height': 10, 'width': 10}}, except_augmentations={A.RandomCropNearBBox, A.RandomSizedBBoxSafeCrop}))\ndef test_dual_augmentations(augmentation_cls, params, image, mask):\n    aug = augmentation_cls(p=1, **params)\n    data = aug(image=image, mask=mask)\n    assert data['image'].dtype == np.uint8\n    assert data['mask'].dtype == np.uint8", "fn_id": 2, "class_fn": false, "repo": "rayxke/albumentations", "file": "tests/test_augmentations.py", "last_update_at": "2021-08-25T08:41:00+00:00", "pred": {"ppl": 1.8406792879104614, "ppl_lower": 2.6619927883148193, "ppl/lowercase_ppl": -1.6046867031269387, "ppl/zlib": 0.0017685063237785298, "Min_5.0% Prob": 6.766316382090251, "Min_10.0% Prob": 4.898411671320598, "Min_20.0% Prob": 2.9211786821484567, "Min_30.0% Prob": 2.0254793335994083, "Min_40.0% Prob": 1.5279125219599032, "Min_50.0% Prob": 1.2238268081781765, "Min_60.0% Prob": 1.0201906090068709}}
{"hexsha": "1b67a7d9d4167a9df6ed58c7d637b09510718d46", "ext": "py", "lang": "Python", "content": "def spider(headers, conferences_url):\n    for conference_url in conferences_url:\n        html_level1 = requests.get(conference_url, headers=headers).content\n        tree_level1 = etree.HTML(html_level1)\n        conferences = tree_level1.xpath(\"//a[contains(@href, 'dblp.uni-trier.de/db/conf/') and contains(@href, 'html')]/@href\")\n        conferences = list(set(conferences))\n        fp_dir = os.path.split(os.path.realpath(sys.argv[0]))[0] + os.sep + 'source' + os.sep + 'conf' + os.sep + conference_url.split('/')[-2]\n        if not os.path.exists(fp_dir):\n            os.makedirs(fp_dir)\n        for conference in conferences:\n            fp_name = fp_dir + os.sep + conference.split('/')[-1].split('.')[0] + '.csv'\n            if os.path.exists(fp_name):\n                print('History: ', fp_name.encode('utf-8'))\n                continue\n            html_level2 = requests.get(conference, headers=headers).content\n            tree_level2 = etree.HTML(html_level2)\n            if tree_level2.xpath(\"//li[@class='entry inproceedings']\"):\n                extractor(tree_level2, fp_name)\n            else:\n                volumes = tree_level2.xpath(\"//*[@id='main']/ul/li/a/@href\")\n                for volume in volumes:\n                    fp_name = fp_dir + os.sep + volume.split('/')[-1].split('.')[0] + '.csv'\n                    if os.path.exists(fp_name):\n                        print('History: ', fp_name.encode('utf-8'))\n                        continue\n                    html_level3 = requests.get(volume, headers=headers).content\n                    tree_level3 = etree.HTML(html_level3)\n                    extractor(tree_level3, fp_name)", "fn_id": 1, "class_fn": false, "repo": "Aticode/spider_dblp", "file": "conferences.py", "last_update_at": "2021-01-18T09:00:14+00:00", "pred": {"ppl": 2.0164618492126465, "ppl_lower": 2.057692289352417, "ppl/lowercase_ppl": -1.0288598449883837, "ppl/zlib": 0.001338443541684998, "Min_5.0% Prob": 8.09670531231424, "Min_10.0% Prob": 5.631635054298069, "Min_20.0% Prob": 3.3775322084193644, "Min_30.0% Prob": 2.3231215798228546, "Min_40.0% Prob": 1.751239423589457, "Min_50.0% Prob": 1.4023219133069253, "Min_60.0% Prob": 1.168852071155055}}
{"hexsha": "86b7411d0f37a9a1b85f3b8b0f899c31c9cc6336", "ext": "py", "lang": "Python", "content": "@pytest.mark.filterwarnings('ignore:This function is not safe at the moment')\n@pytest.mark.parametrize('input_type', [tuple, list])\n@requires_tables\ndef test_complete_irradiance_arrays(sapm_dc_snl_ac_system_same_arrays, location, input_type):\n    \"\"\"ModelChain.complete_irradiance can accept a tuple of weather\n    DataFrames.\"\"\"\n    times = pd.date_range(start='2020-01-01 0700-0700', periods=2, freq='H')\n    weather = pd.DataFrame({'dni': [2, 3], 'dhi': [4, 6], 'ghi': [9, 5]}, index=times)\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    with pytest.raises(ValueError, match='Input DataFrames must have same index\\\\.'):\n        mc.complete_irradiance(input_type((weather, weather[1:])))\n    mc.complete_irradiance(input_type((weather, weather)))\n    for mc_weather in mc.results.weather:\n        assert_series_equal(mc_weather['dni'], pd.Series([2, 3], index=times, name='dni'))\n        assert_series_equal(mc_weather['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n        assert_series_equal(mc_weather['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    mc.complete_irradiance(input_type((weather[['ghi', 'dhi']], weather[['dhi', 'dni']])))\n    assert 'dni' in mc.results.weather[0].columns\n    assert 'ghi' in mc.results.weather[1].columns\n    mc.complete_irradiance(input_type((weather, weather[['ghi', 'dni']])))\n    assert_series_equal(mc.results.weather[0]['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n    assert_series_equal(mc.results.weather[0]['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    assert_series_equal(mc.results.weather[0]['dni'], pd.Series([2, 3], index=times, name='dni'))\n    assert 'dhi' in mc.results.weather[1].columns", "fn_id": 104, "class_fn": false, "repo": "Kaustubh1598/pvlib-python", "file": "pvlib/tests/test_modelchain.py", "last_update_at": "2021-08-16T06:47:01+00:00", "pred": {"ppl": 2.145630359649658, "ppl_lower": 2.361938714981079, "ppl/lowercase_ppl": -1.1258124024255853, "ppl/zlib": 0.0013323444732461255, "Min_5.0% Prob": 8.014266540264261, "Min_10.0% Prob": 5.782260462389154, "Min_20.0% Prob": 3.620016648102615, "Min_30.0% Prob": 2.5187802337488887, "Min_40.0% Prob": 1.9077429413100926, "Min_50.0% Prob": 1.5289213168734717, "Min_60.0% Prob": 1.2745033621018171}}
{"hexsha": "3ad888b6411bf731d2ffa031e8ac7e352cb37d45", "ext": "py", "lang": "Python", "content": "@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        name = request.form['name']\n        description = request.form['description']\n        error = None\n        if not name:\n            error = 'Name is required.'\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute('INSERT INTO dens (name, description, author_id) VALUES (?, ?, ?)', (name, description, g.user['id']))\n            db.commit()\n            return redirect(url_for('dens.index'))\n    return render_template('dens/create.html')", "fn_id": 1, "class_fn": false, "repo": "tsainez/bobchat", "file": "bobchat/dens.py", "last_update_at": "2021-12-14T19:16:11+00:00", "pred": {"ppl": 1.5334783792495728, "ppl_lower": 2.115119218826294, "ppl/lowercase_ppl": -1.7521486235029549, "ppl/zlib": 0.0013572654143360768, "Min_5.0% Prob": 5.7130647386823386, "Min_10.0% Prob": 3.6744423707326255, "Min_20.0% Prob": 2.117908628284931, "Min_30.0% Prob": 1.4382238140536678, "Min_40.0% Prob": 1.081512632034719, "Min_50.0% Prob": 0.854634568383182, "Min_60.0% Prob": 0.7140117768610182}}
{"hexsha": "1e6e4ef45a8b40afebac91fb3f7bf135a4a6341f", "ext": "py", "lang": "Python", "content": "def get_tags(pipeline):\n    nodes = pipeline.nodes\n    tags = {node.name: node.tags for node in nodes}\n    return tags", "fn_id": 3, "class_fn": false, "repo": "gcalmettes/kedro-argo", "file": "src/kedro_argo/cli.py", "last_update_at": "2021-01-20T04:23:56+00:00", "pred": {"ppl": 3.7103803157806396, "ppl_lower": 3.7103803157806396, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.015070510142040658, "Min_5.0% Prob": 10.20991325378418, "Min_10.0% Prob": 8.202456633249918, "Min_20.0% Prob": 5.815715909004211, "Min_30.0% Prob": 4.153167095449236, "Min_40.0% Prob": 3.224343217909336, "Min_50.0% Prob": 2.6434039096037547, "Min_60.0% Prob": 2.2382548732890024}}
{"hexsha": "c0e6fb6fdeb419f4456ff38cda990830605dba2c", "ext": "py", "lang": "Python", "content": "def calculate_bead_lims(bead_size, region_revs, region_fors):\n    \"\"\"\n    Divides a region on a chromosome (or rather, the part of it covered by complete\n    restriction fragments) into segments of equal, given length and one last\n    segment which is smaller than the others such that the segments completely\n    cover the region. These segments will be represented by spherical beads later.\n    Returns the limits of the segments\n    \"\"\"\n    region_length = np.max((region_fors[-1, 1], region_revs[1, -1])) - np.min((region_fors[0, 0], region_revs[0, 0]))\n    n_beads = int(round(region_length / bead_size)) + 1\n    bead_lims = [np.min((region_fors[0, 0], region_revs[0, 0])) + i * bead_size for i in range(n_beads)]\n    bead_lims[-1] = np.max((region_fors[-1, 1], region_revs[1, -1]))\n    return np.array(bead_lims)", "fn_id": 2, "class_fn": false, "repo": "simeoncarstens/ensemble_hic", "file": "data/nora2012/make_processed_files.py", "last_update_at": "2021-03-16T04:38:07+00:00", "pred": {"ppl": 4.226991653442383, "ppl_lower": 4.212137222290039, "ppl/lowercase_ppl": -0.9975578234794363, "ppl/zlib": 0.0037834397559076663, "Min_5.0% Prob": 10.087311231173002, "Min_10.0% Prob": 8.292513095415556, "Min_20.0% Prob": 6.024801182297041, "Min_30.0% Prob": 4.60620306134224, "Min_40.0% Prob": 3.571048400390928, "Min_50.0% Prob": 2.876956341593568, "Min_60.0% Prob": 2.413479834393365}}
{"hexsha": "8086f65407ad32c804e1c9c38b95a0d946baf627", "ext": "py", "lang": "Python", "content": "def _spec_from_colon_separated_text_list(spec_name: str):\n    \"\"\"\n    Get a specification value from a list of colon separated values in\n\n    `_general_specs(...)` returns a list of strings of with the format\n    `Spec Name: Spec Value`.\n    TODO: Implement and use this. Refactor `ttaf(...)`\n    \"\"\"", "fn_id": 14, "class_fn": false, "repo": "jwalleser/plane-finder-app", "file": "planefinder/trade_a_plane.py", "last_update_at": "2021-12-31T02:54:08+00:00", "pred": {"ppl": 34.776153564453125, "ppl_lower": 35.96134948730469, "ppl/lowercase_ppl": -1.009443074061662, "ppl/zlib": 0.017656377659173002, "Min_5.0% Prob": 12.47654914855957, "Min_10.0% Prob": 11.624303545270648, "Min_20.0% Prob": 9.891284497578939, "Min_30.0% Prob": 8.702167641032826, "Min_40.0% Prob": 7.526289248466492, "Min_50.0% Prob": 6.591532204602216, "Min_60.0% Prob": 5.706646582815382}}
{"hexsha": "623568b4c78cf9a439d74b2c528e6cff22e0cadb", "ext": "py", "lang": "Python", "content": "def detect_text(content):\n    \"\"\"Detects text in the file.\"\"\"\n    from google.cloud import vision\n    import io\n    client = vision.ImageAnnotatorClient()\n    content_base64 = base64.b64decode(content)\n    image = vision.Image(content=content_base64)\n    response = client.text_detection(image=image)\n    text = response.text_annotations[0].description\n    return text", "fn_id": 0, "class_fn": false, "repo": "OmkarMehta/anuvad", "file": "anuvad/callbacks.py", "last_update_at": "2021-08-18T00:50:53+00:00", "pred": {"ppl": 2.140470266342163, "ppl_lower": 3.8084170818328857, "ppl/lowercase_ppl": -1.7571205448037195, "ppl/zlib": 0.003658776709227436, "Min_5.0% Prob": 7.279064416885376, "Min_10.0% Prob": 5.736122793621487, "Min_20.0% Prob": 3.5728662986504403, "Min_30.0% Prob": 2.5707064691398824, "Min_40.0% Prob": 1.914124303644425, "Min_50.0% Prob": 1.5202872804948129, "Min_60.0% Prob": 1.2812871643742383}}
{"hexsha": "811ab0d25f1780d5e5c2deb38dcaf25cb83fa07a", "ext": "py", "lang": "Python", "content": "def deletecall(bam_url, api_call, call_parameters, delete_entity, header):\n    \"\"\"API request to delete and return values\"\"\"\n    call_url = 'http://' + bam_url + '/Services/REST/v1/' + api_call + '?'\n    print('You are requesting to delete:')\n    print(delete_entity)\n    answer = input('Do you want to proceed (y (yes) or n (no))? ')\n    try:\n        if answer.lower() == 'y':\n            response = requests.delete(call_url, params=call_parameters, headers=header)\n            return response.json()\n        elif answer.lower() == 'n':\n            return 'You aborted deletion'\n        else:\n            return 'You entered an invalid character'\n    except requests.exceptions.RequestException as e:\n        print(e)", "fn_id": 1, "class_fn": false, "repo": "bluecatlabs/making-apis-work-for-you", "file": "Episodes/Episode6/2-getServers-REST.py", "last_update_at": "2021-02-16T12:51:20+00:00", "pred": {"ppl": 4.435727119445801, "ppl_lower": 5.042933940887451, "ppl/lowercase_ppl": -1.0861228561194762, "ppl/zlib": 0.004208168227663261, "Min_5.0% Prob": 10.64156723022461, "Min_10.0% Prob": 8.842039585113525, "Min_20.0% Prob": 6.409107830789354, "Min_30.0% Prob": 4.819295836819543, "Min_40.0% Prob": 3.6763723215011703, "Min_50.0% Prob": 2.9827748275883903, "Min_60.0% Prob": 2.498010739479043}}
{"hexsha": "f6667e4bee5b954c1e12aaebccf65cda7aa78ce7", "ext": "py", "lang": "Python", "content": "def generate_sub_id():\n    timestamp = floor(time() * 1000)\n    random_id = randint(0, 999)\n    return f'sub-{timestamp}-{random_id:03}'", "fn_id": 0, "class_fn": false, "repo": "ChessTerm/jiuqi-runner", "file": "run.py", "last_update_at": "2021-06-13T03:48:20+00:00", "pred": {"ppl": 3.175292730331421, "ppl_lower": 3.175292730331421, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010409007447064984, "Min_5.0% Prob": 8.617685556411743, "Min_10.0% Prob": 6.990115642547607, "Min_20.0% Prob": 4.827563667297364, "Min_30.0% Prob": 3.591326363881429, "Min_40.0% Prob": 2.8486573830246926, "Min_50.0% Prob": 2.302192744910717, "Min_60.0% Prob": 1.9225312358389297}}
{"hexsha": "793c76b7aef3c3464b9f0b5785241de95f0cc1ed", "ext": "py", "lang": "Python", "content": "def draw_flow(img, flow, step=16):\n    h, w = img.shape[:2]\n    y, x = np.mgrid[step / 2:h:step, step / 2:w:step].reshape(2, -1).astype(int)\n    fx, fy = flow[y, x].T\n    lines = np.vstack([x, y, x + fx, y + fy]).T.reshape(-1, 2, 2)\n    lines = np.int32(lines + 0.5)\n    vis = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n    cv2.polylines(vis, lines, 0, (0, 255, 0))\n    for (x1, y1), (_x2, _y2) in lines:\n        cv2.circle(vis, (x1, y1), 1, (0, 255, 0), -1)\n    return vis", "fn_id": 4, "class_fn": false, "repo": "mcv-m6-video/mcv-m6-2021-team6", "file": "W4/display.py", "last_update_at": "2021-03-23T18:54:28+00:00", "pred": {"ppl": 1.1320900917053223, "ppl_lower": 1.630263090133667, "ppl/lowercase_ppl": -3.9393800766022014, "ppl/zlib": 0.0004337956745674504, "Min_5.0% Prob": 2.4056173237887295, "Min_10.0% Prob": 1.2437017402527006, "Min_20.0% Prob": 0.627479102907025, "Min_30.0% Prob": 0.41898253914074635, "Min_40.0% Prob": 0.3108249797424945, "Min_50.0% Prob": 0.24923919141882514, "Min_60.0% Prob": 0.20801724439054242}}
{"hexsha": "ff326af30a0e940467d42ebccf60e036d6b028f5", "ext": "py", "lang": "Python", "content": "@bot.command()\nasync def listening(ctx, *, message=None):\n    await ctx.message.delete()\n    if message is None:\n        commandprint(\"Command 'listening' has been used by \" + bot.user.name + ' with no message')\n        embed = discord.Embed(title=f'**Invalid syntax**', description='You have not specified a listening \\nExample: ' + prefix + 'listening flairings piss', color=errorcolor)\n        embed.set_footer(text=footer)\n        await ctx.send(embed=embed, delete_after=deletetimer)\n    else:\n        try:\n            commandprint(\"Command 'listening' has been used by \" + bot.user.name + \" with a message of '\" + message + \"'\")\n            await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=message))\n            em = discord.Embed(title=f'**STATUS CHANGED**', description=\"Your listening status has been set to **'\" + message + \"'**\", color=color)\n            em.set_footer(text=footer)\n            await ctx.send(embed=em, delete_after=deletetimer)\n        except Exception as error:\n            errorprint(\"Exception ' {0} ', expected error message sent to users chat\".format(error))\n            em = discord.Embed(title='Exception Error:', description='Expected Exception: You already have a custom status. \\n Console Exception {0}'.format(error), color=errorcolor)\n            await ctx.send(embed=em, delete_after=deletetimer)", "fn_id": 78, "class_fn": false, "repo": "Flairings/Project-Mars", "file": "Mars.py", "last_update_at": "2021-09-18T03:13:13+00:00", "pred": {"ppl": 4.5259480476379395, "ppl_lower": 4.998985767364502, "ppl/lowercase_ppl": -1.065840637585475, "ppl/zlib": 0.00276019573765484, "Min_5.0% Prob": 11.264493886162253, "Min_10.0% Prob": 9.170821939195905, "Min_20.0% Prob": 6.592141754286629, "Min_30.0% Prob": 4.89798049094542, "Min_40.0% Prob": 3.773214578839904, "Min_50.0% Prob": 3.016823641745384, "Min_60.0% Prob": 2.520719085376323}}
{"hexsha": "d7d3d58fe31aa429507c3843cdedb9be62480884", "ext": "py", "lang": "Python", "content": "def outgoing_message(message):\n    message_label = tk.Label(messages_frame, bg='gray20', fg='snow', text=message, font=('Helvetica', 15))\n    message_label.pack(side=tk.TOP, anchor=tk.E, padx=20, pady=10)\n    message_labels.append(message_label)", "fn_id": 3, "class_fn": false, "repo": "Jothin-kumar/chat-app", "file": "scripts/client/gui.py", "last_update_at": "2021-12-10T13:33:11+00:00", "pred": {"ppl": 2.8530123233795166, "ppl_lower": 3.8546509742736816, "ppl/lowercase_ppl": -1.2870203509061802, "ppl/zlib": 0.0063155144076389265, "Min_5.0% Prob": 7.6875938177108765, "Min_10.0% Prob": 5.7985661923885345, "Min_20.0% Prob": 4.161261469125748, "Min_30.0% Prob": 3.235397219657898, "Min_40.0% Prob": 2.5176335248080166, "Min_50.0% Prob": 2.0917449902470517, "Min_60.0% Prob": 1.7689794711768627}}
{"hexsha": "82966286972b9d3c71d206d1668d569e596aeedd", "ext": "py", "lang": "Python", "content": "@require_context\ndef quota_class_get_all_by_name(context, class_name):\n    authorize_quota_class_context(context, class_name)\n    rows = model_query(context, models.QuotaClass, read_deleted='no').filter_by(class_name=class_name).all()\n    result = {'class_name': class_name}\n    for row in rows:\n        result[row.resource] = row.hard_limit\n    return result", "fn_id": 105, "class_fn": false, "repo": "scottwedge/OpenStack-Stein", "file": "karbor-1.3.0/karbor/db/sqlalchemy/api.py", "last_update_at": "2021-12-13T20:01:25+00:00", "pred": {"ppl": 1.987663745880127, "ppl_lower": 2.2895169258117676, "ppl/lowercase_ppl": -1.2058066026324477, "ppl/zlib": 0.003400791841667679, "Min_5.0% Prob": 6.923072052001953, "Min_10.0% Prob": 5.045158958435058, "Min_20.0% Prob": 3.1656399936903092, "Min_30.0% Prob": 2.294038343333429, "Min_40.0% Prob": 1.7250786885796559, "Min_50.0% Prob": 1.372752938068138, "Min_60.0% Prob": 1.1555790654937959}}
{"hexsha": "8c0c41d89d485b342b3470a122b1a94215a4cc9f", "ext": "py", "lang": "Python", "content": "def main():\n    import glob\n    parent = sys.argv[1]\n    folders = glob.glob('{}/*_output'.format(parent))\n    submit_qsub(parent, folders)", "fn_id": 1, "class_fn": false, "repo": "ckrivacic/helix_matcher", "file": "helix/rifdock/submit_align.py", "last_update_at": "2021-06-07T10:56:37+00:00", "pred": {"ppl": 7.870514392852783, "ppl_lower": 7.870514392852783, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01809757387298148, "Min_5.0% Prob": 11.667515754699707, "Min_10.0% Prob": 9.75886344909668, "Min_20.0% Prob": 7.646468639373779, "Min_30.0% Prob": 6.375916827808727, "Min_40.0% Prob": 5.2607407967249555, "Min_50.0% Prob": 4.197364896535873, "Min_60.0% Prob": 3.4868242967387904}}
{"hexsha": "f32dd5e74bf9879ee46da2157293834813f6746b", "ext": "py", "lang": "Python", "content": "def _get_package_bin_dir_app_paths(venv: Venv, package_info: PackageInfo, local_bin_dir: Path) -> Set[Path]:\n    suffix = package_info.suffix\n    apps = []\n    if package_info.include_apps:\n        apps += package_info.apps\n    if package_info.include_dependencies:\n        apps += package_info.apps_of_dependencies\n    return get_exposed_app_paths_for_package(venv.bin_path, local_bin_dir, [add_suffix(app, suffix) for app in apps])", "fn_id": 1, "class_fn": false, "repo": "KenMacD/pipx", "file": "src/pipx/commands/uninstall.py", "last_update_at": "2021-05-27T02:34:20+00:00", "pred": {"ppl": 5.094597339630127, "ppl_lower": 6.615662574768066, "ppl/lowercase_ppl": -1.1604608952250026, "ppl/zlib": 0.007753241109795411, "Min_5.0% Prob": 10.012072245279947, "Min_10.0% Prob": 8.400501507979174, "Min_20.0% Prob": 6.506967507875883, "Min_30.0% Prob": 5.079725647583986, "Min_40.0% Prob": 4.014588174911646, "Min_50.0% Prob": 3.264401633693622, "Min_60.0% Prob": 2.731400697420423}}
{"hexsha": "c039023785903aca6301e71b8b73beaa059d6ec4", "ext": "py", "lang": "Python", "content": "def duplicateGroup(id):\n    group = CreatureGroup.objects.get(id=id)\n    newGroup = CreatureGroup(name='%s_duplicate' % group.name, Augmented=group.Augmented)\n    newGroup.Grouping = group.Grouping\n    newGroup.save()\n    for item in group.AllowedExtraType.all():\n        newGroup.AllowedExtraType.add(item)\n    for item in group.DefaultExtraType.all():\n        newGroup.DefaultExtraType.add(item)\n    for item in group.groupentry_set.all():\n        GroupEntry(Group=newGroup, creature=item.creature).save()", "fn_id": 1, "class_fn": false, "repo": "mkarasch/pfss", "file": "pfss/models.py", "last_update_at": "2021-09-14T09:55:03+00:00", "pred": {"ppl": 3.8259613513946533, "ppl_lower": 3.1655468940734863, "ppl/lowercase_ppl": -0.8587848004135599, "ppl/zlib": 0.006270139109333761, "Min_5.0% Prob": 13.650028501238141, "Min_10.0% Prob": 10.325718130384173, "Min_20.0% Prob": 6.500643687588828, "Min_30.0% Prob": 4.49678871674197, "Min_40.0% Prob": 3.3979010273968533, "Min_50.0% Prob": 2.6831605522106337, "Min_60.0% Prob": 2.2415089104838177}}
{"hexsha": "21093aba0c887e3f2abc8c2d98ef2ec29048b249", "ext": "py", "lang": "Python", "content": "def time_stamps(seconds, sample_rate, sample_length, sample_duration):\n    \"\"\"Process to calculate the intervals based on the window size or time intervals.\n    Parameters\n    ----------\n    seconds : int or list\n        Can be of two types. int; a single value that determines the window size (seconds). list; a set of intervals, where each value is in (seconds).\n    sample_rate : float\n        Sample frequency used in the EEG (Hz).\n    sample_length : float\n        Sample length in data points (seconds x sample frequency).\n    sample_duration : float\n        Duration of the EEG (seconds).\n    \n    Returns\n    -------\n    intervals : list\n        List with the intervals, pairs of (Start, End) values in data points (seconds x sample frequency).\n    \"\"\"\n    intervals, i, flag = ([], 0, 0)\n    if type(seconds) == list:\n        if len(seconds) == 1:\n            seconds = seconds[0]\n        else:\n            if seconds[-1] > sample_duration.round():\n                raise Exception('Error in Window size. Intervals exceeds sample length.')\n            if seconds[0] != 0:\n                raise Exception('Error in Window size. First interval must be 0.')\n            else:\n                diff = np.diff(seconds)\n                for j, value in enumerate(diff):\n                    samples_per_frame = value * sample_rate\n                    intervals.append((i, i + samples_per_frame))\n                    i += samples_per_frame\n    if type(seconds) == int or type(seconds) == float:\n        samples_per_frame = seconds * sample_rate\n        while i + samples_per_frame <= sample_length:\n            intervals.append((i, i + samples_per_frame))\n            i = i + samples_per_frame\n        if i + samples_per_frame > sample_length:\n            intervals.append((i, sample_length))\n    intervals_rounded = [(round(steps[0], 2), round(steps[1], 2)) for steps in intervals]\n    print('Intervals: ', intervals_rounded)\n    if len(intervals) == 1:\n        intervals.append((0, sample_rate))\n        flag = 1\n    return (intervals, flag)", "fn_id": 5, "class_fn": false, "repo": "danive97/EEGRAPH", "file": "eegraph/tools.py", "last_update_at": "2021-03-26T09:28:21+00:00", "pred": {"ppl": 3.9779834747314453, "ppl_lower": 4.1013593673706055, "ppl/lowercase_ppl": -1.0221205083644902, "ppl/zlib": 0.002021632542105572, "Min_5.0% Prob": 9.641074558099112, "Min_10.0% Prob": 7.602722416321437, "Min_20.0% Prob": 5.596292952696483, "Min_30.0% Prob": 4.336987746258576, "Min_40.0% Prob": 3.4189354184394083, "Min_50.0% Prob": 2.7535897853679923, "Min_60.0% Prob": 2.301468001095301}}
{"hexsha": "df37bb46962a858756a40ea08c445056a8eba2a4", "ext": "py", "lang": "Python", "content": "def config_to_functions(config):\n    \"\"\"\n    Takes in the data for a config and returns a list of functions to call the meet it's criteria.\n    list of str -> list of (none -> (str, any))\n    \"\"\"\n    functions = []\n    in_multiline_comment = False\n    for line in config:\n        line = remove_new_lines(line)\n        in_multiline_comment = in_multiline_comment or line_starts_multiline_comment_start(line)\n        multiline_comment_end = line_starts_multiline_comment_end(line)\n        if not in_multiline_comment and multiline_comment_end:\n            message = 'Multiline comment end: ' + constants.MULTILINE_COMMENT_END\n            message += ' must inclose a comment.'\n            raise Exception(message)\n        if multiline_comment_end:\n            in_multiline_comment = False\n        if is_line_commented(line) or is_empty_line(line) or in_multiline_comment or multiline_comment_end:\n            continue\n        check_config_line(line)\n        command_type = get_command_type(line)\n        if not is_type(command_type) and (not is_complex_type(command_type)):\n            on_not_valid_type(command_type)\n        definition = get_command_definition(line)\n        functions.append(build_input_func(any_type_to_input_functions(command_type, definition), command_type))\n    if in_multiline_comment:\n        message = 'Multiline comment start: ' + constants.MULTILINE_COMMENT_START\n        message += ' must be inclosed with: ' + constants.MULTILINE_COMMENT_END\n        raise Exception(message)\n    return functions", "fn_id": 1, "class_fn": false, "repo": "FroshTheFrog/life_logger", "file": "config_utils.py", "last_update_at": "2021-03-19T03:40:42+00:00", "pred": {"ppl": 4.736911296844482, "ppl_lower": 5.112915515899658, "ppl/lowercase_ppl": -1.049109692943031, "ppl/zlib": 0.0030378619104858492, "Min_5.0% Prob": 11.680749692414937, "Min_10.0% Prob": 9.48467402580457, "Min_20.0% Prob": 6.758281808633071, "Min_30.0% Prob": 5.016070499379411, "Min_40.0% Prob": 3.873865355856908, "Min_50.0% Prob": 3.1056163288957004, "Min_60.0% Prob": 2.593957014871325}}
{"hexsha": "4fbd04e883334dd6fb994cd9cbab874f5c4a5931", "ext": "py", "lang": "Python", "content": "def load_spectrum(filename, grid):\n    \"\"\"\n    Load a single spectrum\n    \"\"\"\n    file_in = pyfits.open(filename)\n    wl = np.array(file_in[0].data[2])\n    flux = np.array(file_in[0].data[0])\n    ivar = np.array(file_in[0].data[1])\n    redshift = file_in[0].header['Z']\n    wl_shifted = wl - redshift * wl\n    flux_rs = interpolate.interp1d(wl_shifted, flux)(grid)\n    ivar_rs = interpolate.interp1d(wl_shifted, ivar)(grid)\n    ivar_rs[ivar_rs < 0] = 0.0\n    return (flux_rs, ivar_rs)", "fn_id": 1, "class_fn": false, "repo": "HaifengWangNAOC/Cannon", "file": "TheCannon/lamost.py", "last_update_at": "2021-07-22T12:57:40+00:00", "pred": {"ppl": 2.4688222408294678, "ppl_lower": 2.524632215499878, "ppl/lowercase_ppl": -1.0247351600906585, "ppl/zlib": 0.004034558979229047, "Min_5.0% Prob": 7.799958169460297, "Min_10.0% Prob": 6.242753127041985, "Min_20.0% Prob": 4.224920279639107, "Min_30.0% Prob": 2.9869805591286354, "Min_40.0% Prob": 2.267294875333007, "Min_50.0% Prob": 1.8161389989715613, "Min_60.0% Prob": 1.51160025774832}}
{"hexsha": "60a398f13b9ba05c02fed5b550c7fed93451f969", "ext": "py", "lang": "Python", "content": "def serializedATN():\n    with StringIO() as buf:\n        buf.write('\\x03\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\\x03\\x1a')\n        buf.write('\\x82\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07')\n        buf.write('\\x04\\x08\\t\\x08\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0b\\t\\x0b\\x04\\x0c\\t\\x0c\\x04\\r\\t\\r\\x04\\x0e')\n        buf.write('\\t\\x0e\\x04\\x0f\\t\\x0f\\x03\\x02\\x05\\x02 \\n\\x02\\x03\\x02\\x03\\x02\\x05\\x02$\\n\\x02\\x03\\x02\\x03\\x02')\n        buf.write('\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x05\\x03,\\n\\x03\\x07\\x03.\\n\\x03\\x0c\\x03\\x0e\\x031\\x0b\\x03\\x03')\n        buf.write('\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x04;\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03')\n        buf.write('\\x06\\x03\\x06\\x05\\x06B\\n\\x06\\x03\\x06\\x06\\x06E\\n\\x06\\r\\x06\\x0e\\x06F\\x03\\x07\\x03\\x07\\x03\\x07\\x05\\x07')\n        buf.write('L\\n\\x07\\x03\\x07\\x05\\x07O\\n\\x07\\x06\\x07Q\\n\\x07\\r\\x07\\x0e\\x07R\\x03\\x08\\x03\\x08\\x05\\x08W\\n\\x08')\n        buf.write('\\x03\\x08\\x03\\x08\\x05\\x08[\\n\\x08\\x03\\t\\x03\\t\\x03\\t\\x05\\t`\\n\\t\\x06\\tb\\n\\t\\r\\t\\x0e')\n        buf.write('\\tc\\x03\\n\\x03\\n\\x03\\x0b\\x03\\x0b\\x05\\x0bj\\n\\x0b\\x03\\x0c\\x03\\x0c\\x05\\x0cn\\n\\x0c\\x03\\r')\n        buf.write('\\x03\\r\\x03\\r\\x03\\r\\x05\\rt\\n\\r\\x03\\x0e\\x03\\x0e\\x05\\x0ex\\n\\x0e\\x05\\x0ez\\n\\x0e')\n        buf.write('\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0f\\x03\\x0f\\x03\\x0f\\x02\\x02\\x10\\x02\\x04\\x06\\x08\\n\\x0c')\n        buf.write('\\x0e\\x10\\x12\\x14\\x16\\x18\\x1a\\x1c\\x02\\x06\\x03\\x02\\x0e\\x0f\\x04\\x02\\x0e\\x0e\\x10\\x11')\n        buf.write('\\x03\\x02\\n\\x0b\\x03\\x02\\x13\\x16\\x02\\x89\\x02\\x1f\\x03\\x02\\x02\\x02\\x04/\\x03\\x02\\x02\\x02\\x06')\n        buf.write(':\\x03\\x02\\x02\\x02\\x08<\\x03\\x02\\x02\\x02\\nD\\x03\\x02\\x02\\x02\\x0cP\\x03\\x02\\x02\\x02\\x0eV\\x03\\x02\\x02\\x02')\n        buf.write('\\x10a\\x03\\x02\\x02\\x02\\x12e\\x03\\x02\\x02\\x02\\x14g\\x03\\x02\\x02\\x02\\x16k\\x03\\x02\\x02\\x02\\x18o\\x03')\n        buf.write('\\x02\\x02\\x02\\x1ay\\x03\\x02\\x02\\x02\\x1c\\x7f\\x03\\x02\\x02\\x02\\x1e \\x07\\r\\x02\\x02\\x1f\\x1e\\x03')\n        buf.write('\\x02\\x02\\x02\\x1f \\x03\\x02\\x02\\x02 !\\x03\\x02\\x02\\x02!#\\t\\x02\\x02\\x02\"$\\x05\\x1c\\x0f\\x02#\"')\n        buf.write(\"\\x03\\x02\\x02\\x02#$\\x03\\x02\\x02\\x02$%\\x03\\x02\\x02\\x02%&\\x07\\x03\\x02\\x02&'\\x05\\x04\\x03\\x02'(\\x07\")\n        buf.write('\\x04\\x02\\x02(\\x03\\x03\\x02\\x02\\x02)+\\x05\\x06\\x04\\x02*,\\x07\\x05\\x02\\x02+*\\x03\\x02\\x02\\x02+,\\x03\\x02')\n        buf.write('\\x02\\x02,.\\x03\\x02\\x02\\x02-)\\x03\\x02\\x02\\x02.1\\x03\\x02\\x02\\x02/-\\x03\\x02\\x02\\x02/0\\x03\\x02')\n        buf.write('\\x02\\x020\\x05\\x03\\x02\\x02\\x021/\\x03\\x02\\x02\\x022;\\x05\\x14\\x0b\\x023;\\x05\\x0e\\x08')\n        buf.write('\\x024;\\x05\\x08\\x05\\x0256\\x05\\x1c\\x0f\\x0267\\x07\\x06\\x02\\x0278\\x05\\x1c')\n        buf.write('\\x0f\\x028;\\x03\\x02\\x02\\x029;\\x05\\x1a\\x0e\\x02:2\\x03\\x02\\x02\\x02:3\\x03\\x02\\x02\\x02:4')\n        buf.write('\\x03\\x02\\x02\\x02:5\\x03\\x02\\x02\\x02:9\\x03\\x02\\x02\\x02;\\x07\\x03\\x02\\x02\\x02<=\\t\\x03\\x02\\x02=>')\n        buf.write('\\x05\\n\\x06\\x02>\\t\\x03\\x02\\x02\\x02?A\\x07\\x07\\x02\\x02@B\\x05\\x0c\\x07\\x02A@\\x03\\x02\\x02\\x02AB\\x03')\n        buf.write('\\x02\\x02\\x02BC\\x03\\x02\\x02\\x02CE\\x07\\x08\\x02\\x02D?\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02FD\\x03\\x02\\x02')\n        buf.write('\\x02FG\\x03\\x02\\x02\\x02G\\x0b\\x03\\x02\\x02\\x02HK\\x05\\x1c\\x0f\\x02IJ\\x07\\x06\\x02\\x02JL\\x05\\x1c')\n        buf.write('\\x0f\\x02KI\\x03\\x02\\x02\\x02KL\\x03\\x02\\x02\\x02LN\\x03\\x02\\x02\\x02MO\\x07\\t\\x02\\x02NM\\x03\\x02\\x02')\n        buf.write('\\x02NO\\x03\\x02\\x02\\x02OQ\\x03\\x02\\x02\\x02PH\\x03\\x02\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02R')\n        buf.write('S\\x03\\x02\\x02\\x02S\\r\\x03\\x02\\x02\\x02TW\\x05\\x16\\x0c\\x02UW\\x05\\x1a\\x0e\\x02VT\\x03\\x02\\x02\\x02')\n        buf.write('VU\\x03\\x02\\x02\\x02WX\\x03\\x02\\x02\\x02XZ\\x05\\x10\\t\\x02Y[\\x05\\n\\x06\\x02ZY\\x03\\x02\\x02\\x02Z[')\n        buf.write('\\x03\\x02\\x02\\x02[\\x0f\\x03\\x02\\x02\\x02\\\\_\\x05\\x12\\n\\x02]`\\x05\\x16\\x0c\\x02^`\\x05\\x1a\\x0e')\n        buf.write('\\x02_]\\x03\\x02\\x02\\x02_^\\x03\\x02\\x02\\x02`b\\x03\\x02\\x02\\x02a\\\\\\x03\\x02\\x02\\x02bc\\x03\\x02\\x02\\x02')\n        buf.write('ca\\x03\\x02\\x02\\x02cd\\x03\\x02\\x02\\x02d\\x11\\x03\\x02\\x02\\x02ef\\t\\x04\\x02\\x02f\\x13\\x03\\x02\\x02\\x02')\n        buf.write('gi\\x05\\x16\\x0c\\x02hj\\x05\\n\\x06\\x02ih\\x03\\x02\\x02\\x02ij\\x03\\x02\\x02\\x02j\\x15\\x03\\x02\\x02\\x02')\n        buf.write('km\\x05\\x1c\\x0f\\x02ln\\x05\\x18\\r\\x02ml\\x03\\x02\\x02\\x02mn\\x03\\x02\\x02\\x02n\\x17\\x03\\x02\\x02')\n        buf.write('\\x02op\\x07\\x0c\\x02\\x02ps\\x05\\x1c\\x0f\\x02qr\\x07\\x0c\\x02\\x02rt\\x05\\x1c\\x0f\\x02sq\\x03\\x02\\x02')\n        buf.write('\\x02st\\x03\\x02\\x02\\x02t\\x19\\x03\\x02\\x02\\x02uw\\x07\\x12\\x02\\x02vx\\x05\\x1c\\x0f\\x02wv\\x03\\x02')\n        buf.write('\\x02\\x02wx\\x03\\x02\\x02\\x02xz\\x03\\x02\\x02\\x02yu\\x03\\x02\\x02\\x02yz\\x03\\x02\\x02\\x02z{\\x03\\x02\\x02\\x02')\n        buf.write('{|\\x07\\x03\\x02\\x02|}\\x05\\x04\\x03\\x02}~\\x07\\x04\\x02\\x02~\\x1b\\x03\\x02\\x02\\x02\\x7f\\x80\\t')\n        buf.write('\\x05\\x02\\x02\\x80\\x1d\\x03\\x02\\x02\\x02\\x15\\x1f#+/:AFKNRVZ_cimswy')\n        return buf.getvalue()", "fn_id": 0, "class_fn": false, "repo": "qwang70/GraphVizDotToDatabaseParsing", "file": "script/DOTParser.py", "last_update_at": "2021-08-13T04:55:13+00:00", "pred": {"ppl": 1.521202802658081, "ppl_lower": 1.588239312171936, "ppl/lowercase_ppl": -1.1027999396037964, "ppl/zlib": 0.0003546080637952199, "Min_5.0% Prob": 5.50256560830509, "Min_10.0% Prob": 3.7129850440165577, "Min_20.0% Prob": 2.0684095547333654, "Min_30.0% Prob": 1.3998479513859292, "Min_40.0% Prob": 1.0488997519808687, "Min_50.0% Prob": 0.839747139660062, "Min_60.0% Prob": 0.7000607721195669}}
{"hexsha": "79b07cf6f3f380f296c7ce80ec1c84c5aa0ae81e", "ext": "py", "lang": "Python", "content": "def deep_seq_design():\n    root_dir = f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep'\n    mut_matrix_anneal = np.zeros((20, 20))\n    native_aa_all = []\n    design_aa_all = []\n    seq_len = []\n    recovery = []\n    pdb_id_all = []\n    recovery_res = np.zeros(20)\n    count_res = np.zeros(20)\n    num = 100\n    for pdb_id in pdb_selected:\n        seq_best_all = []\n        for j in range(num):\n            data_anneal = h5py.File(f'{root_dir}/{pdb_id}_profile_{j}.h5', 'r')\n            designed_seq = data_anneal['profile'][()]\n            seq_best = designed_seq[1]\n            seq_best_all.append(seq_best)\n            seq_native = designed_seq[0]\n            recovery_fraction = np.sum(seq_best == seq_native) / float(len(seq_native))\n            recovery.append(recovery_fraction)\n            seq_len.append(len(seq_native))\n            pdb_id_all.append(pdb_id)\n            for i in range(seq_native.shape[0]):\n                mut_matrix_anneal[map_aa[seq_native[i]], map_aa[seq_best[i]]] += 1\n                native_aa_all.append(map_aa[seq_native[i]])\n                design_aa_all.append(map_aa[seq_best[i]])\n            for i in range(20):\n                idx = seq_native == i\n                recovery_res[i] += np.sum(seq_best[idx] == seq_native[idx])\n                count_res[i] += len(seq_native[idx])\n        with open(f'{root_dir}/{pdb_id}_seq_best.fasta', 'w') as mf:\n            s = ''.join([idx2aa[x] for x in seq_native])\n            mf.write(f'>0\\n{s}\\n')\n            for j in range(len(seq_best_all)):\n                s = ''.join([idx2aa[x] for x in seq_best_all[j]])\n                mf.write(f'>{j + 1}\\n')\n                mf.write(f'{s}\\n')\n    df = pd.DataFrame({'pdb': pdb_id_all, 'seq_len': seq_len, 'recovery': recovery})\n    df.to_csv(f'{root_dir}/recovery.csv', index=False)\n    np.save(f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep/mut_matrix_anneal.npy', mut_matrix_anneal)\n    df = pd.DataFrame({'native_aa': native_aa_all, 'design_aa': design_aa_all})\n    df.to_csv(f'{root_dir}/native_design_aa.csv', index=False)\n    fig = pl.figure()\n    pl.plot(df['seq_len'], df['recovery'], 'bo')\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_seqlen_recovery.pdf')\n    fig = pl.figure()\n    pl.hist(df['recovery'], bins=np.arange(10) * 0.05 + 0.05)\n    pl.xlabel('native sequence recovery fraction')\n    pl.ylabel('N')\n    pl.savefig(f'{root_dir}/full_seq_design_recovery_hist.pdf')\n    fig = pl.figure()\n    pl.plot(np.arange(20), recovery_res / count_res)\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue recovery fraction in full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_recovery.pdf')\n    fig = pl.figure()\n    mut_matrix_anneal_freq = mut_matrix_anneal / mut_matrix_anneal.sum(axis=1)[:, None]\n    pl.imshow(mut_matrix_anneal_freq, cmap='jet')\n    pl.xlabel('mutated residue')\n    pl.ylabel('native residue')\n    pl.xticks(np.arange(20), labels=ordered_aa)\n    pl.yticks(np.arange(20), labels=ordered_aa)\n    pl.colorbar()\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use.pdf')\n    fig = pl.figure()\n    res_all = np.concatenate(seq_best_all).flatten()\n    aa_bins = np.arange(21) - 0.5\n    pl.hist(res_all, bins=aa_bins, histtype='step')\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue use frequency')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use_frequency.pdf')", "fn_id": 2, "class_fn": false, "repo": "lahplover/nnef", "file": "nnef/scripts/designed_seq.py", "last_update_at": "2021-06-30T06:47:00+00:00", "pred": {"ppl": 2.354779005050659, "ppl_lower": 2.4660937786102295, "ppl/lowercase_ppl": -1.05393043197858, "ppl/zlib": 0.0008437900318445746, "Min_5.0% Prob": 8.778698444366455, "Min_10.0% Prob": 6.422347685870002, "Min_20.0% Prob": 4.03920006868886, "Min_30.0% Prob": 2.8294838067460684, "Min_40.0% Prob": 2.1374006561415775, "Min_50.0% Prob": 1.713854938925931, "Min_60.0% Prob": 1.4291672397132957}}
{"hexsha": "1d58be5f8c298cf630d37e7dc4f29b9760416dc5", "ext": "py", "lang": "Python", "content": "def parse_net_xml(doc):\n    total = len(list(doc.getiterator('wireless-network')))\n    tenth = total / 10\n    count = 0\n    clients = list()\n    parsed_list = []\n    for network in doc.getiterator('wireless-network'):\n        count += 1\n        try:\n            if count % tenth == 0:\n                continue\n        except ZeroDivisionError:\n            print('Division by zero error')\n        type = network.attrib['type']\n        channel = network.find('channel').text\n        bssid = network.find('BSSID').text\n        if type == 'probe' or channel == '0':\n            continue\n        encryption = network.getiterator('encryption')\n        privacy = ''\n        cipher = ''\n        auth = ''\n        if encryption is not None:\n            for item in encryption:\n                if item.text.startswith('WEP'):\n                    privacy = 'WEP'\n                    cipher = 'WEP'\n                    auth = ''\n                    break\n                elif item.text.startswith('WPA'):\n                    if item.text.endswith('PSK'):\n                        auth = 'PSK'\n                    elif item.text.endswith('AES-CCM'):\n                        cipher = 'CCMP ' + cipher\n                    elif item.text.endswith('TKIP'):\n                        cipher += 'TKIP '\n                elif item.text == 'None':\n                    privacy = 'OPN'\n        cipher = cipher.strip()\n        if cipher.find('CCMP') > -1:\n            privacy = 'WPA2'\n        if cipher.find('TKIP') > -1:\n            privacy += 'WPA'\n        power = network.find('snr-info')\n        dbm = ''\n        if power is not None:\n            dbm = power.find('max_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('last_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('min_signal_dbm').text\n        ssid = network.find('SSID')\n        essid_text = ''\n        if ssid is not None:\n            essid_text = network.find('SSID').find('essid').text\n        gps = network.find('gps-info')\n        lat, lon = ('', '')\n        if gps is not None:\n            lat = network.find('gps-info').find('min-lat').text\n            lon = network.find('gps-info').find('min-lon').text\n        data = dict(ESSID=essid_text, BSSID=bssid, Channel=channel, Privacy=privacy, Cipher=cipher, Authenticaiton=auth, DBM=dbm)\n        if lat and lon is not None:\n            google_map = 'https://maps.google.com/maps?q=' + lat + ',' + lon + '&ll=' + lat + ',' + lon + '&z=17'\n            google_map_link = '<a href=\"' + google_map + '\" target=\"_blank\"> Google map link</a>'\n            location = dict(Latitude=lat, Longitude=lon, Googlemap=google_map_link)\n        else:\n            not_found = 'Not coordinates available'\n            location = dict(Latitude=not_found, Longitude=not_found)\n        client_list = associatedClients(network, bssid, essid_text)\n        if client_list is not None:\n            data['client'] = client_list\n        else:\n            not_found = 'No clients found'\n            data['client'] = not_found\n        data['location'] = location\n        parsed_list.append(data)\n    return parsed_list", "fn_id": 1, "class_fn": false, "repo": "binkybear/kismet_web_viewer", "file": "app/netxml_to_csv.py", "last_update_at": "2021-05-22T03:59:05+00:00", "pred": {"ppl": 2.837848663330078, "ppl_lower": 3.0571091175079346, "ppl/lowercase_ppl": -1.071352046203046, "ppl/zlib": 0.0010676010769736833, "Min_5.0% Prob": 9.075567416655712, "Min_10.0% Prob": 7.04588993893394, "Min_20.0% Prob": 4.803686479352555, "Min_30.0% Prob": 3.426406539162668, "Min_40.0% Prob": 2.599818233424013, "Min_50.0% Prob": 2.0837866094258226, "Min_60.0% Prob": 1.7400096255633786}}
{"hexsha": "bc9332449ba47eee635aabdc3d23964f3b29f165", "ext": "py", "lang": "Python", "content": "def get_ratings(path, users_file_name, books_file_name):\n    df_users = pd.read_csv(path + users_file_name, encoding='UTF8')\n    df_books = pd.read_csv(path + books_file_name, encoding='UTF8')\n    df_users_books = pd.DataFrame(df_users, columns=['user_id', 'like'])\n    sr_users = []\n    sr_books = []\n    sr_ratings = []\n    str_like = list(np.array(df_users_books['like'].tolist()))\n    list_like = []\n    for i in str_like:\n        i = i.lstrip('[').rstrip(']')\n        i = i.split(', ')\n        list_like.append(i)\n    for user_idx in df_users_books['user_id']:\n        for book_idx in list_like[user_idx]:\n            if book_idx == '':\n                break\n            sr_users.append(user_idx)\n            sr_books.append(book_idx)\n            sr_ratings.append(1)\n    for book_idx in range(len(df_books)):\n        if sr_users[0]:\n            sr_users.append(sr_users[0])\n        if sr_books[0]:\n            sr_books.append(book_idx)\n        if sr_ratings[0]:\n            sr_ratings.append(0)\n    R = pd.DataFrame({'user_idx': sr_users, 'book_idx': sr_books, 'ratings': sr_ratings})\n    R = R.pivot_table('ratings', index='user_idx', columns='book_idx').fillna(0)\n    R.rename(columns=lambda x: int(x), inplace=True)\n    R = R.sort_index(axis=1)\n    return R", "fn_id": 0, "class_fn": false, "repo": "osamhack2021/AI_APP_handylib_devlib", "file": "AI/recommendation/ALS.py", "last_update_at": "2021-12-16T10:41:16+00:00", "pred": {"ppl": 2.3053536415100098, "ppl_lower": 2.3999364376068115, "ppl/lowercase_ppl": -1.0481399944105834, "ppl/zlib": 0.0018157262789760909, "Min_5.0% Prob": 7.8437646389007565, "Min_10.0% Prob": 5.870080411434174, "Min_20.0% Prob": 3.866276585025552, "Min_30.0% Prob": 2.7532376613745018, "Min_40.0% Prob": 2.0855285419542113, "Min_50.0% Prob": 1.669269879261408, "Min_60.0% Prob": 1.3953360783831128}}
{"hexsha": "876c7c08adc0ef2ebe9987da8f1125f3cf04b813", "ext": "py", "lang": "Python", "content": "def word_bag_list(org_text):\n    \"\"\"Take text and do sum, return sumed sentence list.\"\"\"\n    nlp = spacy.load('en_core_web_sm')\n    tr = pytextrank.TextRank(logger=None)\n    nlp.add_pipe(tr.PipelineComponent, name='textrank', last=True)\n    doc = nlp(org_text)\n    whole_sent = ''\n    for sent in doc._.textrank.summary(limit_phrases=15, limit_sentences=5):\n        whole_sent = whole_sent + repr(sent).rstrip() + ' '\n    return [whole_sent]", "fn_id": 0, "class_fn": false, "repo": "liux2/Allegheny-College-CMPSC-COMP-liux2", "file": "music_sug/music_main/text_proc.py", "last_update_at": "2021-05-21T01:37:44+00:00", "pred": {"ppl": 4.0891218185424805, "ppl_lower": 5.83486795425415, "ppl/lowercase_ppl": -1.2524417885594854, "ppl/zlib": 0.005177684679071708, "Min_5.0% Prob": 11.13431099482945, "Min_10.0% Prob": 9.395635945456368, "Min_20.0% Prob": 6.406629192418065, "Min_30.0% Prob": 4.595457173206589, "Min_40.0% Prob": 3.545455640246128, "Min_50.0% Prob": 2.831871775833711, "Min_60.0% Prob": 2.3521068764384836}}
{"hexsha": "6e58f05000ac2f4b1655ab9325ef2cbb23caea8b", "ext": "py", "lang": "Python", "content": "def remapchunk(seg, chunk, chunkindex, scratchpath, layer=1, bits_per_dim=10, maxmip=11, correctvers=True):\n    x, y, z = chunkindex\n    pcgchunkid = io.pcg.get_chunk_id(layer=layer, x=x, y=y, z=z, bits_per_dim=bits_per_dim)\n    data = seg[chunk.index()]\n    try:\n        if correctvers:\n            mappings = readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n        else:\n            mappings = _readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n    except subprocess.CalledProcessError as e:\n        if data.max() == 0:\n            return data\n        else:\n            raise e\n    for mapping in mappings:\n        data = fastremap.remap(data, mapping, in_place=False, preserve_missing_labels=True)\n    seg[chunk.index()] = data\n    return seg", "fn_id": 2, "class_fn": false, "repo": "ZettaAI/Synaptor", "file": "synaptor/proc/io/agglomeration.py", "last_update_at": "2021-09-13T07:02:16+00:00", "pred": {"ppl": 5.076251029968262, "ppl_lower": 5.773580074310303, "ppl/lowercase_ppl": -1.0792327266601593, "ppl/zlib": 0.004778155890934664, "Min_5.0% Prob": 11.657773798162287, "Min_10.0% Prob": 9.361361773117729, "Min_20.0% Prob": 6.611959934234619, "Min_30.0% Prob": 5.073868210764899, "Min_40.0% Prob": 3.9889982236969854, "Min_50.0% Prob": 3.2451156555707086, "Min_60.0% Prob": 2.719244057862021}}
{"hexsha": "639b37fb1f2788f702b824b85cd19c165e09f9f6", "ext": "py", "lang": "Python", "content": "def test_cached_property():\n    \"\"\"Test the cached_property decorator\"\"\"\n    new_value = '99999'\n\n    class DummyClass:\n\n        def __init__(self):\n            self.value = '11111'\n\n        def change_value_in_instance(self, value):\n            self.value = value\n\n        @cached_property\n        def test_property(self):\n            return self.value\n\n        @property\n        def test_uncached_property(self):\n            return self.value\n    testClass = DummyClass()\n    first_cached_test_property = testClass.test_property\n    first_uncached_test_property = testClass.test_uncached_property\n    testClass.change_value_in_instance(new_value)\n    second_cached_test_property = testClass.test_property\n    second_uncached_test_property = testClass.test_uncached_property\n    assert first_cached_test_property == second_cached_test_property\n    assert first_cached_test_property == '11111'\n    assert first_uncached_test_property != second_uncached_test_property\n    assert first_uncached_test_property == '11111'\n    assert second_uncached_test_property == '99999'", "fn_id": 0, "class_fn": false, "repo": "musa-atlihan/jina", "file": "tests/unit/test_helper.py", "last_update_at": "2021-04-22T17:14:32+00:00", "pred": {"ppl": 1.7694063186645508, "ppl_lower": 1.816732406616211, "ppl/lowercase_ppl": -1.0462555039116141, "ppl/zlib": 0.0020675510041242204, "Min_5.0% Prob": 7.37661988394601, "Min_10.0% Prob": 5.076236414057868, "Min_20.0% Prob": 2.8444581450077524, "Min_30.0% Prob": 1.908401156569896, "Min_40.0% Prob": 1.4288034737110138, "Min_50.0% Prob": 1.1412629674175858, "Min_60.0% Prob": 0.9554951297264292}}
{"hexsha": "b93ceb63b6b34d7c97ec44530d47645b54199e3e", "ext": "py", "lang": "Python", "content": "def ndcg_at_ks(r, k_list, method=1, include_dcg=False):\n    \"\"\"\n\n    :param r: \u5339\u914darray \u957f\u5ea6\u4e3a\u6bcf\u4e2a\u9884\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u7ed3\u679c\n    :param k_list:\n    :param method:\n    :param include_dcg:\n    :return:\n    \"\"\"\n    if r.shape[0] == 0:\n        ndcg_array = [0.0] * len(k_list)\n        dcg_array = [0.0] * len(k_list)\n    else:\n        dcg_array = dcg_at_ks(r, k_list, method)\n        ideal_r = np.array(sorted(r, reverse=True))\n        dcg_max_array = dcg_at_ks(ideal_r, k_list, method)\n        ndcg_array = dcg_array / dcg_max_array\n        ndcg_array = np.nan_to_num(ndcg_array)\n    if include_dcg:\n        return (ndcg_array, dcg_array)\n    else:\n        return ndcg_array", "fn_id": 18, "class_fn": false, "repo": "qtli/AOT", "file": "utils/common.py", "last_update_at": "2021-09-07T14:49:29+00:00", "pred": {"ppl": 2.313446283340454, "ppl_lower": 2.47837233543396, "ppl/lowercase_ppl": -1.0821039377754482, "ppl/zlib": 0.002740974870294651, "Min_5.0% Prob": 8.382976611455282, "Min_10.0% Prob": 6.258622417449951, "Min_20.0% Prob": 3.937979665457034, "Min_30.0% Prob": 2.785994994012933, "Min_40.0% Prob": 2.0929535153486274, "Min_50.0% Prob": 1.6836470209766092, "Min_60.0% Prob": 1.3978347631073953}}
{"hexsha": "7d0de049fa37b3a2b53aa13e4a8de6bd43d360ad", "ext": "py", "lang": "Python", "content": "def update_progress(value):\n    global PROGRESS\n    PROGRESS['value'] = value\n    return PROGRESS['value']", "fn_id": 0, "class_fn": false, "repo": "scyv/Smiley", "file": "smiley/utils.py", "last_update_at": "2021-12-10T23:49:05+00:00", "pred": {"ppl": 4.963619709014893, "ppl_lower": 5.413354396820068, "ppl/lowercase_ppl": -1.054136304800567, "ppl/zlib": 0.020540195572053714, "Min_5.0% Prob": 7.267303466796875, "Min_10.0% Prob": 6.694096326828003, "Min_20.0% Prob": 5.578514766693115, "Min_30.0% Prob": 4.938084602355957, "Min_40.0% Prob": 3.8577585756778716, "Min_50.0% Prob": 3.2685094699263573, "Min_60.0% Prob": 2.65818140655756}}
{"hexsha": "6494d7e235268c91bde539243623f44dd265dd50", "ext": "py", "lang": "Python", "content": "def create_fake_server(messages=[]):\n    all_messages = _standard_join_messages() + messages\n\n    async def _fake_server(websocket, _path):\n        _join_message = await websocket.recv()\n        for message in all_messages:\n            await websocket.send(json.dumps(message))\n    return _fake_server", "fn_id": 1, "class_fn": false, "repo": "UrbanOS-Examples/PredictiveParking", "file": "tests/fake_websocket_server.py", "last_update_at": "2021-07-01T16:51:18+00:00", "pred": {"ppl": 5.069360256195068, "ppl_lower": 5.069360256195068, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010082078431250939, "Min_5.0% Prob": 9.771035194396973, "Min_10.0% Prob": 8.367294243403844, "Min_20.0% Prob": 6.666744879313877, "Min_30.0% Prob": 5.260101034527733, "Min_40.0% Prob": 4.022873176582928, "Min_50.0% Prob": 3.2817615997046232, "Min_60.0% Prob": 2.753847047881505}}
{"hexsha": "be45de239f2a958420b5ae5de4b313cf3431599f", "ext": "py", "lang": "Python", "content": "def get_playlist_tracks(args):\n    playlists = []\n    current_user_id = args.get('current_user_id')\n    limit = args.get('limit')\n    offset = args.get('offset')\n    db = get_db_read_replica()\n    with db.scoped_session() as session:\n        try:\n            playlist_id = args.get('playlist_id')\n            playlist = session.query(Playlist).filter(Playlist.is_current == True, Playlist.playlist_id == playlist_id).first()\n            if playlist is None:\n                return None\n            playlist_track_ids = [track_id['track'] for track_id in playlist.playlist_contents['track_ids']]\n            if limit and offset:\n                playlist_track_ids = playlist_track_ids[offset:offset + limit]\n            playlist_tracks = session.query(Track).filter(Track.is_current == True, Track.track_id.in_(playlist_track_ids)).all()\n            tracks = helpers.query_result_to_list(playlist_tracks)\n            tracks = populate_track_metadata(session, playlist_track_ids, tracks, current_user_id)\n            if args.get('with_users', False):\n                add_users_to_tracks(session, tracks)\n            tracks_dict = {track['track_id']: track for track in tracks}\n            playlist_tracks = []\n            for track_id in playlist_track_ids:\n                playlist_tracks.append(tracks_dict[track_id])\n            return playlist_tracks\n        except sqlalchemy.orm.exc.NoResultFound:\n            pass\n    return playlists", "fn_id": 0, "class_fn": false, "repo": "raymondjacobson/audius-protocol", "file": "discovery-provider/src/queries/get_playlist_tracks.py", "last_update_at": "2021-05-29T04:25:03+00:00", "pred": {"ppl": 1.9940435886383057, "ppl_lower": 2.3702170848846436, "ppl/lowercase_ppl": -1.250399736494842, "ppl/zlib": 0.0014289120728769604, "Min_5.0% Prob": 7.061941932229435, "Min_10.0% Prob": 5.221976178033011, "Min_20.0% Prob": 3.250405067289379, "Min_30.0% Prob": 2.2669303325292107, "Min_40.0% Prob": 1.7208566775324043, "Min_50.0% Prob": 1.3794977231336205, "Min_60.0% Prob": 1.1544410162795744}}
{"hexsha": "e739faa956bee4ffde5b12e2607b0430bc975de6", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef archive_repositories(archive_repositories_raw: bytes) -> ArchiveRepositories:\n    \"\"\"Provides an ArchiveRepositories instance for the sample archive manifest.\"\"\"\n    return ArchiveRepositories(archive_repositories_raw)", "fn_id": 0, "class_fn": false, "repo": "crashvb/docker-sign-verify", "file": "tests/test_archiverepositories.py", "last_update_at": "2021-09-16T18:44:39+00:00", "pred": {"ppl": 7.759456634521484, "ppl_lower": 11.933669090270996, "ppl/lowercase_ppl": -1.2100877757389106, "ppl/zlib": 0.015177128225325695, "Min_5.0% Prob": 9.70492172241211, "Min_10.0% Prob": 9.186972618103027, "Min_20.0% Prob": 7.172088199191624, "Min_30.0% Prob": 6.090132034741915, "Min_40.0% Prob": 4.8156149586041765, "Min_50.0% Prob": 4.06294871731238, "Min_60.0% Prob": 3.3893250966513597}}
{"hexsha": "f2e5aa3454e20bde6dfc287c3f2e7fede42c0287", "ext": "py", "lang": "Python", "content": "@overload\ndef assert_equal(actual: scipy.special.orthogonal.orthopoly1d, desired: numpy.poly1d):\n    \"\"\"\n    usage.scipy: 2\n    \"\"\"\n    ...", "fn_id": 2892, "class_fn": false, "repo": "pydata-apis/python-api-record", "file": "data/typing/numpy.testing._private.utils.py", "last_update_at": "2021-11-08T20:16:06+00:00", "pred": {"ppl": 8.20944595336914, "ppl_lower": 8.20944595336914, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.018467416112481316, "Min_5.0% Prob": 12.812983989715576, "Min_10.0% Prob": 11.085983753204346, "Min_20.0% Prob": 8.012001752853394, "Min_30.0% Prob": 6.280323386192322, "Min_40.0% Prob": 5.036436747102177, "Min_50.0% Prob": 4.279706671124413, "Min_60.0% Prob": 3.6114806227385996}}
{"hexsha": "bcc284a877dbebcbe1f579fbdd8c29590594f15e", "ext": "py", "lang": "Python", "content": "@unittest.skipIf(sys.platform == 'win32', 'Fail to create temp dir.')\n@pytest.mark.parametrize('client_mode', [True, False])\ndef test_two_node(two_node_cluster, working_dir, client_mode):\n    cluster, _ = two_node_cluster\n    address, env, PKG_DIR = start_client_server(cluster, client_mode)\n    runtime_env = f'{{  \"working_dir\": \"{working_dir}\" }}'\n    execute_statement = 'print(sum(ray.get([run_test.remote()] * 1000)))'\n    script = driver_script.format(**locals())\n    out = run_string_as_driver(script, env)\n    assert out.strip().split()[-1] == '1000'\n    assert len(list(Path(PKG_DIR).iterdir())) == 1", "fn_id": 7, "class_fn": false, "repo": "jenhaoyang/ray", "file": "python/ray/tests/test_runtime_env.py", "last_update_at": "2021-04-30T05:22:12+00:00", "pred": {"ppl": 3.8004136085510254, "ppl_lower": 4.438456058502197, "ppl/lowercase_ppl": -1.1162426221494948, "ppl/zlib": 0.0035698125806544277, "Min_5.0% Prob": 10.285579299926757, "Min_10.0% Prob": 7.881715536117554, "Min_20.0% Prob": 5.566377246379853, "Min_30.0% Prob": 4.17864007751147, "Min_40.0% Prob": 3.2481714851326413, "Min_50.0% Prob": 2.6563224624289146, "Min_60.0% Prob": 2.234238330059308}}
{"hexsha": "a318f13cb13b18c46060393025e55c03c4986095", "ext": "py", "lang": "Python", "content": "@MSC.route('/candidates')\ndef candidates():\n    text = request.args.get('text', default='', type=str)\n    limit = request.args.get('limit', default=5, type=int)\n    htmlflag = request.args.get('html', default=0, type=int)\n    rval = {}\n    rval['input'] = text\n    runningOffset = 0\n    if text == '':\n        return 'No text received. Usage: url/candidates?html=0&limit=2&text=texttomedicalspellcheck'\n    respJSONstring = corrector.GetALLCandidatesScoredJSON(text)\n    print(respJSONstring)\n    rval = json.loads(respJSONstring)\n    for result in rval['results']:\n        result['candidates'] = result['candidates'][:limit]\n    if 'results' not in rval.keys() or len(rval['results']) == 0:\n        rval['results'] = 'CORRECT'\n    if bool(htmlflag):\n        return json2html.convert(json.dumps(rval)) + '<br><br><br>Try me out: <br><br>' + formcode\n    else:\n        return json.dumps(rval, indent=2)", "fn_id": 2, "class_fn": false, "repo": "jackneil/medSpellCheck", "file": "webserver.py", "last_update_at": "2021-07-07T02:07:24+00:00", "pred": {"ppl": 5.62083625793457, "ppl_lower": 5.447494983673096, "ppl/lowercase_ppl": -0.9818563910552213, "ppl/zlib": 0.003968920582023347, "Min_5.0% Prob": 12.024169995234562, "Min_10.0% Prob": 9.905398313815777, "Min_20.0% Prob": 7.303152745624758, "Min_30.0% Prob": 5.524672813053373, "Min_40.0% Prob": 4.2828884959783196, "Min_50.0% Prob": 3.4442459228903726, "Min_60.0% Prob": 2.8867456039308377}}
{"hexsha": "c908d4e2fcbe9433c55ec3ffa39b22b2f66872dd", "ext": "py", "lang": "Python", "content": "def calc_data_maxima(data, order):\n    \"\"\"Calculate the local maxima using an exclusion of order to avoid multiple close maxima.\n\n    :param data: 3D numpy array (axis 0: time)\n    :param order: number of points to consider for maxima\n    :return: 3D numpy bool array with same shape as data, True if maximum\n    \"\"\"\n    argrelmax = signal.argrelmax(data, order=order, mode='wrap')\n    dmean = data.mean(axis=0)\n    data_maxima = np.zeros(data.shape, dtype=bool)\n    for i, j, k in zip(*argrelmax):\n        if data[i, j, k] > dmean[j, k]:\n            data_maxima[i, j, k] = True\n    return data_maxima", "fn_id": 0, "class_fn": false, "repo": "markmuetz/cosmic", "file": "cosmic/WP2/multipeak.py", "last_update_at": "2021-01-26T02:25:48+00:00", "pred": {"ppl": 3.307908535003662, "ppl_lower": 3.7869293689727783, "ppl/lowercase_ppl": -1.1130465163981742, "ppl/zlib": 0.0037384878973220335, "Min_5.0% Prob": 9.552126354641384, "Min_10.0% Prob": 7.86679482460022, "Min_20.0% Prob": 5.283309060174066, "Min_30.0% Prob": 3.8680619023062968, "Min_40.0% Prob": 2.9538100037623094, "Min_50.0% Prob": 2.3962139206654998, "Min_60.0% Prob": 1.9923077634124606}}
{"hexsha": "6fb0abbb3b81f5bf6e666d791414fa75ce85b499", "ext": "py", "lang": "Python", "content": "def _read_checkpoint_file(checkpoint_file: Optional[str]) -> Tuple[Set[str], Set[str]]:\n    colls, users = (set(), set())\n    if checkpoint_file:\n        with open(checkpoint_file) as fd:\n            for line in fd.readlines():\n                if line.startswith('CHECKPOINT'):\n                    _, type_, oid = line.split()\n                    if type_ == 'collection':\n                        colls.add(oid)\n                    elif type_ == 'user':\n                        users.add(oid)\n    return (colls, users)", "fn_id": 6, "class_fn": false, "repo": "girder/dkc-next", "file": "dkc/core/management/commands/migrate_dkc_db.py", "last_update_at": "2021-02-17T20:34:11+00:00", "pred": {"ppl": 3.025731325149536, "ppl_lower": 3.2051849365234375, "ppl/lowercase_ppl": -1.0520406644768936, "ppl/zlib": 0.004613136761014522, "Min_5.0% Prob": 9.420941750208536, "Min_10.0% Prob": 7.6367465655008955, "Min_20.0% Prob": 5.236923719445865, "Min_30.0% Prob": 3.6610665230287447, "Min_40.0% Prob": 2.764326922944747, "Min_50.0% Prob": 2.2135667791590095, "Min_60.0% Prob": 1.8451594311174833}}
{"hexsha": "567e27ecd176008a4a9c4c66d72d8200e72ba772", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='session', autouse=True)\ndef cleanup(request):\n\n    def remove_test_dir():\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/consensus.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.info2'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.newick'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.png'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_map'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_tmp'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/test'))\n    request.addfinalizer(remove_test_dir)", "fn_id": 0, "class_fn": false, "repo": "faridrashidi/trisicell", "file": "tests/test_commands.py", "last_update_at": "2021-11-16T03:14:36+00:00", "pred": {"ppl": 1.7145494222640991, "ppl_lower": 1.770082712173462, "ppl/lowercase_ppl": -1.0591225784019067, "ppl/zlib": 0.00208166146160686, "Min_5.0% Prob": 7.712277003696987, "Min_10.0% Prob": 4.988119056350307, "Min_20.0% Prob": 2.6857116158986303, "Min_30.0% Prob": 1.798486140583865, "Min_40.0% Prob": 1.3499674696644783, "Min_50.0% Prob": 1.0801516266291544, "Min_60.0% Prob": 0.9001545588452942}}
{"hexsha": "454c918ee83d8f3c85828d2e941785840208d81e", "ext": "py", "lang": "Python", "content": "def text_error(code: int, error: Exception, url: str, usage: str='') -> Response:\n    \"\"\"Format error message as plain text\n\n    Returns\n    -------\n    error message formatted as plain text.\n    \"\"\"\n    return PlainTextResponse(content=f'Error {code}: {ERROR_CODE_MESSAGES[code]}\\n\\n{error}\\n\\nUsage details are available from {usage}\\n\\nRequest:\\n{url}\\n\\nRequest Submitted:\\n{UTCDateTime().isoformat()}Z\\n\\nService Version:\\n{VERSION}\\n', status_code=code)", "fn_id": 5, "class_fn": false, "repo": "alejandrodelcampillo/geomag-algorithms", "file": "geomagio/api/ws/app.py", "last_update_at": "2021-02-22T23:45:22+00:00", "pred": {"ppl": 8.67915153503418, "ppl_lower": 13.09350299835205, "ppl/lowercase_ppl": -1.190285461819387, "ppl/zlib": 0.007375166465783098, "Min_5.0% Prob": 10.828709443410238, "Min_10.0% Prob": 8.942130272205059, "Min_20.0% Prob": 7.076708756960356, "Min_30.0% Prob": 5.964358274753277, "Min_40.0% Prob": 5.04706658079074, "Min_50.0% Prob": 4.23228971683062, "Min_60.0% Prob": 3.58130996234906}}
{"hexsha": "8c985af6b5bde8b51d64a34a81f930b1cbbde109", "ext": "py", "lang": "Python", "content": "def decode_UHFRFModeTable(data):\n    logger.debug(func())\n    par = {}\n    if len(data) == 0:\n        return (None, data)\n    header = data[0:par_header_len]\n    msgtype, length = struct.unpack(par_header, header)\n    msgtype = msgtype & BITMASK(10)\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    if msgtype != Message_struct['UHFRFModeTable']['type']:\n        return (None, data)\n    body = data[par_header_len:length]\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    i = 0\n    ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n    while ret:\n        par['UHFC1G2RFModeTableEntry' + str(i)] = ret\n        ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n        i += 1\n    return (par, data[length:])", "fn_id": 18, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/llrp_proto.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 4.188728332519531, "ppl_lower": 4.534897327423096, "ppl/lowercase_ppl": -1.0554352219487113, "ppl/zlib": 0.004434666214478091, "Min_5.0% Prob": 10.593732357025146, "Min_10.0% Prob": 8.665765980879465, "Min_20.0% Prob": 6.161237046122551, "Min_30.0% Prob": 4.591516687638229, "Min_40.0% Prob": 3.5673073165429137, "Min_50.0% Prob": 2.8714185813441873, "Min_60.0% Prob": 2.3962375202358492}}
{"hexsha": "b0b49ffed87028f7676ecd3a3526e65ea082c9a2", "ext": "py", "lang": "Python", "content": "def obtain_pcaplot(model):\n    for idx, layer in enumerate(model.layers):\n        if layer.__class__.__name__ == 'Dense':\n            all_weights = layer.get_weights()\n            weights = all_weights[0]\n            pca = applyPCA(weights, np.array(weights).shape[1], drawPlot=True, isReshape=False)\n            break", "fn_id": 10, "class_fn": false, "repo": "kilinco/spec-img-finesse", "file": "CNN_version/final.py", "last_update_at": "2021-06-03T16:52:44+00:00", "pred": {"ppl": 6.581509590148926, "ppl_lower": 9.798062324523926, "ppl/lowercase_ppl": -1.2111808507463007, "ppl/zlib": 0.009813875729268392, "Min_5.0% Prob": 11.977216243743896, "Min_10.0% Prob": 10.594352722167969, "Min_20.0% Prob": 7.83316034078598, "Min_30.0% Prob": 6.02668330570062, "Min_40.0% Prob": 4.64440707546292, "Min_50.0% Prob": 3.7911874468370184, "Min_60.0% Prob": 3.1828419055257524}}
{"hexsha": "af3e93794d127b40b4269b409917fdaa6143f215", "ext": "py", "lang": "Python", "content": "def parse_function_args(query_param_definition, is_strict=False):\n\n    def inner_get_fu(fu):\n        return FuncArgParser(query_param_definition, is_strict=is_strict)(fu)\n    return inner_get_fu", "fn_id": 0, "class_fn": false, "repo": "sabariramc/funcargparser", "file": "testimplementation.py", "last_update_at": "2021-05-05T09:56:14+00:00", "pred": {"ppl": 11.059822082519531, "ppl_lower": 14.341525077819824, "ppl/lowercase_ppl": -1.1081172666765393, "ppl/zlib": 0.019862139747052292, "Min_5.0% Prob": 11.575668334960938, "Min_10.0% Prob": 9.546250343322754, "Min_20.0% Prob": 7.955862825567072, "Min_30.0% Prob": 6.829358717974494, "Min_40.0% Prob": 5.818258594382893, "Min_50.0% Prob": 4.827114971620696, "Min_60.0% Prob": 4.024579162325929}}
{"hexsha": "80c466f827f74902bd68bfb5f88abcaf94f6d86e", "ext": "py", "lang": "Python", "content": "def test_handle_xevent_atom_ok(monkeypatch):\n    \"\"\"Return false when event type is invalid\"\"\"\n    event = MagicMock(spec=Xlib.protocol.event.PropertyNotify)\n    event.type = xwindow.Xlib.X.PropertyNotify\n    event.atom = xwindow.NET_ACTIVE_WINDOW\n    monkeypatch.setattr(xwindow, 'ROOT', MagicMock())\n    monkeypatch.setattr(xwindow, 'DISP', MagicMock())\n    result = xwindow.handle_xevent(event, callback=lambda *args, **kwargs: 'callback')\n    assert result is True", "fn_id": 6, "class_fn": false, "repo": "eddie-dunn/swytcher", "file": "tests/test_xwindow.py", "last_update_at": "2021-07-07T08:52:49+00:00", "pred": {"ppl": 4.202965259552002, "ppl_lower": 8.254972457885742, "ppl/lowercase_ppl": -1.4701420918682875, "ppl/zlib": 0.005377491724185782, "Min_5.0% Prob": 8.338502724965414, "Min_10.0% Prob": 7.432521930107703, "Min_20.0% Prob": 5.818223806527945, "Min_30.0% Prob": 4.433056904719426, "Min_40.0% Prob": 3.510410053225664, "Min_50.0% Prob": 2.8469502561367475, "Min_60.0% Prob": 2.386652876217014}}
{"hexsha": "a6247751a993a8d45edcb88a38537df9fdda2f2e", "ext": "py", "lang": "Python", "content": "def decode_vector_type(contract_address, abi):\n    wasm_contract_obj = platon.wasmcontract(address=contract_address, abi=abi, vmtype=1)\n    tx_hash = wasm_contract_obj.functions.clearElement().transact({'from': from_address, 'gas': gas})\n    tx_receipt = platon.waitForTransactionReceipt(tx_hash)\n    topic_param = wasm_contract_obj.events.clear().processReceipt(tx_receipt)\n    print(topic_param)", "fn_id": 4, "class_fn": false, "repo": "AlayaNetwork/client-sdk-python", "file": "tests/wasm_unit_test.py", "last_update_at": "2021-05-06T07:41:02+00:00", "pred": {"ppl": 5.843469142913818, "ppl_lower": 6.827061653137207, "ppl/lowercase_ppl": -1.0881252732880222, "ppl/zlib": 0.008249180615860894, "Min_5.0% Prob": 10.580403709411621, "Min_10.0% Prob": 9.442120552062988, "Min_20.0% Prob": 7.155177734114907, "Min_30.0% Prob": 5.483400246676276, "Min_40.0% Prob": 4.380022592014736, "Min_50.0% Prob": 3.511757236823701, "Min_60.0% Prob": 2.955626941943432}}
{"hexsha": "3931e032c422dda461181a2d4fc71a72aab1d761", "ext": "py", "lang": "Python", "content": "def main():\n    \"\"\"Main function.\"\"\"\n    try:\n        tickers = os.listdir('data')\n        tickers = (os.path.basename(t) for t in tickers if t.endswith('.csv.gz'))\n        tickers = [t.split('.')[0] for t in tickers]\n        epilog = '\\nValid values for ticker are: %s' % tickers\n        epilog += '\\n\\nSample usage: ./predict.py IBM 2010-01-01 2011-01-01 21'\n    except OSError:\n        tickers = []\n        epilog = ''\n    parser = argparse.ArgumentParser(description='Predicts stock prices.', epilog=epilog, add_help=True)\n    parser.add_argument('ticker', metavar='TICKER', help='The stock item to predict')\n    parser.add_argument('start_date', metavar='START_DATE', help='The initial date to start looking into history.')\n    parser.add_argument('end_date', metavar='END_DATE', help='The final date to stop looking into history.')\n    parser.add_argument('shift', metavar='SHIFT', type=int, help='How many days in advance to predict.')\n    options = parser.parse_args()\n    if not tickers:\n        print('\"No tickers available. Unable to predict.')\n        raise SystemExit\n    ticker = options.ticker\n    if ticker not in tickers:\n        print('\"ticker\" must be one of %s' % tickers)\n        raise SystemExit\n    try:\n        start_date = pd.to_datetime(options.start_date)\n    except ValueError:\n        print('\"start_date\" must be a valid date. Not %s' % start_date)\n        raise SystemExit\n    try:\n        end_date = pd.to_datetime(options.end_date)\n    except ValueError:\n        print('\"end_date\" must be a valid date. Not %s' % end_date)\n        raise SystemExit\n    shift = options.shift\n    if shift <= 0:\n        print('\"shift\" must be a positive integer')\n        raise SystemExit\n    print('Loading data...')\n    X, y, tX, _, scaler = models.get_processed_dataset(ticker, 0.9999999999, shift, 0, False, start_date, end_date)\n    print('Training model...')\n    _, _, model = models.cross_validate_model('huber', X, y)\n    print('Predicting...')\n    yhat = model.predict(tX)\n    prediction = scaler.inverse_transform(np.array([[yhat[0]] + [0] * (X.shape[1] - 1)]))\n    print('Predicted value:', prediction[0, 0])", "fn_id": 0, "class_fn": false, "repo": "renatolfc/stock-prediction", "file": "predict.py", "last_update_at": "2021-07-01T12:17:06+00:00", "pred": {"ppl": 2.7485475540161133, "ppl_lower": 2.9962158203125, "ppl/lowercase_ppl": -1.085332634259754, "ppl/zlib": 0.0011951212883874094, "Min_5.0% Prob": 8.109958902994792, "Min_10.0% Prob": 6.543647148570076, "Min_20.0% Prob": 4.495013915426362, "Min_30.0% Prob": 3.2889759010559803, "Min_40.0% Prob": 2.5244834130493605, "Min_50.0% Prob": 2.024169105053698, "Min_60.0% Prob": 1.685856916033663}}
{"hexsha": "73ef8d1f69375bfcaedacdc382f9d2e3fbedc2b8", "ext": "py", "lang": "Python", "content": "def sig_gen_multi(public_as, private_as, public_ams, private_ams, body, amsh, arsh, fold=False, verbose=False, as_tmp=None, ams_tmp=None):\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h.update(body)\n    bh = base64.b64encode(h.digest())\n    print('ams bh= ')\n    print(bh)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in amsh(bh)]))\n    if verbose:\n        print('\\nsign ams hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_ams)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    msb = base64.b64encode(bytes(sig2))\n    if fold:\n        msb = msb[:70] + b' ' + msb[70:142] + b' ' + msb[142:214]\n    print('ams b= ')\n    print(msb)\n    pk_ams = parse_public_key(base64.b64decode(public_ams))\n    signature = base64.b64decode(msb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_ams)\n    print('ams sig valid: %r' % ams_valid)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in arsh(msb, bh)]))\n    if verbose:\n        print('\\nsign ars hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_as)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    sb = base64.b64encode(bytes(sig2))\n    print('arsh b=')\n    print(sb)\n    pk_as = parse_public_key(base64.b64decode(public_as))\n    signature = base64.b64decode(sb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_as)\n    print('arsh sig valid: %r' % ams_valid)\n    spc = fold and b'' or b'  '\n    accum = ''\n    if as_tmp:\n        sb = sb[:70] + b'\\n    ' + spc + sb[70:142] + b'\\n    ' + spc + sb[142:214]\n        res = as_tmp.replace(b'%b', sb)\n        accum = res\n        print(res.decode('utf-8'))\n    if ams_tmp:\n        msb = msb.replace(b' ', b'')\n        msb = msb[:70] + b'\\n    ' + spc + msb[70:142] + b'\\n    ' + spc + msb[142:214]\n        res = ams_tmp.replace(b'%bh', bh)\n        res = res.replace(b'%b', msb)\n        accum += b'\\n' + res\n        print(res.decode('utf-8'))\n    os.system(b'echo \"' + accum + b'\" | pbcopy')", "fn_id": 1, "class_fn": false, "repo": "ValiMail/arc_test_suite", "file": "sig_gen/sig_gen.py", "last_update_at": "2021-02-25T00:59:54+00:00", "pred": {"ppl": 2.5819132328033447, "ppl_lower": 2.682330369949341, "ppl/lowercase_ppl": -1.0402256574485764, "ppl/zlib": 0.0014328258115008118, "Min_5.0% Prob": 8.993232250213623, "Min_10.0% Prob": 7.067821993384251, "Min_20.0% Prob": 4.504663724086188, "Min_30.0% Prob": 3.13686086248893, "Min_40.0% Prob": 2.3734253353541557, "Min_50.0% Prob": 1.8986407843532416, "Min_60.0% Prob": 1.5813912547390478}}
{"hexsha": "8e27225db54d8f1ce0cedbcc4f4b9dfe2b6fdaf9", "ext": "py", "lang": "Python", "content": "def draw_iterations(g, eval_map_function, x0, n):\n\n    def draw_mid_point_arrows(x, x_next, both=True):\n        if x_next > x:\n            arrow_direction_angles = (0.5 * math.pi, 0)\n        else:\n            arrow_direction_angles = (-0.5 * math.pi, math.pi)\n        g.draw_arrow_tip((x, mid_value), arrow_direction_angles[0])\n        if both:\n            g.draw_arrow_tip((mid_value, x_next), arrow_direction_angles[1])\n    xs = [x0]\n    for i in range(n):\n        xs.append(eval_map_function(xs[-1]))\n    g.set_dash_dash_structure(12, 4, units='svg')\n    g.set_dash_mode('dash')\n    g.set_svg_options(stroke_width=iterations_stroke_w, units='svg')\n    g.set_arrow_options(width=iteration_arrow_rel_size * arrow_size, curvature=0, units='svg')\n    g.set_point_size(0.01)\n    g.draw_line_segment((x0, 0), (x0, x0))\n    for i, x in enumerate(xs[:-2]):\n        x_next = xs[i + 1]\n        g.draw_polyline([(x, x), (x, x_next), (x_next, x_next)])\n        mid_value = 0.5 * (x + x_next)\n        draw_mid_point_arrows(x, x_next)\n    g.draw_polyline([(xs[-2], xs[-2]), (xs[-2], xs[-1])])\n    g.draw_point((xs[-2], xs[-1]))\n    draw_mid_point_arrows(xs[-2], xs[-1], both=False)\n    g.reset_dash_and_dot_structures()", "fn_id": 2, "class_fn": false, "repo": "alexn11/mathsvg", "file": "more-examples/iteration-graph.py", "last_update_at": "2021-11-27T08:46:20+00:00", "pred": {"ppl": 3.301130533218384, "ppl_lower": 3.371814489364624, "ppl/lowercase_ppl": -1.0177398048676947, "ppl/zlib": 0.0025142420960569747, "Min_5.0% Prob": 10.102824904701926, "Min_10.0% Prob": 7.741436015235053, "Min_20.0% Prob": 5.215168921152751, "Min_30.0% Prob": 3.849007008693836, "Min_40.0% Prob": 2.97279855567548, "Min_50.0% Prob": 2.3831587632112536, "Min_60.0% Prob": 1.9911838920780103}}
{"hexsha": "47fe8ba25f624d3f52e3accc1fc3872135959f05", "ext": "py", "lang": "Python", "content": "def main(args):\n    \"\"\"\n    The starting point of the program.\n    \"\"\"\n    while True:\n        num_items = 1\n        read_data = ReadData() if len(args) == 1 else ReadData(args)\n        data_log_df = get_file_df(read_data.get_data_log())\n        exe_table_df = get_file_df(read_data.get_exe_table())\n        doses_delta_df = get_file_df(read_data.get_doses_delta())\n        summary = get_summary(read_data.get_summary())\n        dfs = [('data_log', data_log_df[-num_items:]), ('exe_table', exe_table_df[-num_items:]), ('doses_delta', doses_delta_df[-num_items:])]\n        data_json = get_json(dfs, summary, read_data.json_name)\n        read_data.json = data_json\n        time.sleep(5)", "fn_id": 3, "class_fn": false, "repo": "cs481-ekh/s21-team-jat", "file": "python/read_data.py", "last_update_at": "2021-04-06T17:16:24+00:00", "pred": {"ppl": 3.8536691665649414, "ppl_lower": 4.337866306304932, "ppl/lowercase_ppl": -1.0877350711905818, "ppl/zlib": 0.004835217651366581, "Min_5.0% Prob": 10.433301318775523, "Min_10.0% Prob": 8.396623893217606, "Min_20.0% Prob": 5.958234956529405, "Min_30.0% Prob": 4.394994588930215, "Min_40.0% Prob": 3.360179154906008, "Min_50.0% Prob": 2.6921575471956647, "Min_60.0% Prob": 2.257619189305438}}
{"hexsha": "7848c02f06f57265c259b7cf28bbf7fbc43f4a4a", "ext": "py", "lang": "Python", "content": "def fecha_caixa():\n    global aberto\n    tot = 0\n    for elemento in transacoes_finalizadas:\n        tot += elemento[1]\n    print(f'TOTAL DE VENDAS R${tot:.2f}')\n    print()\n    while len(transacoes_finalizadas) != 0:\n        print('ELIMINE AS TRANSA\u00c7\u00d5ES FINALIZADAS:')\n        for i, elemento in enumerate(transacoes_finalizadas):\n            print(f'{i:<1}', end='|    ')\n            print(f'{elemento[0]:<17}', end='|')\n            print(f'{elemento[1]:>5.2f}')\n        try:\n            aux = int(input(''))\n            tot -= transacoes_finalizadas[aux][1]\n            tot = round(tot, 2)\n            transacoes_finalizadas.pop(aux)\n        except ValueError:\n            print('[ERRO]: Digite valores v\u00e1lidos')\n            return fecha_caixa()\n        except IndexError:\n            print(f' Indice <= {len(transacoes_finalizadas)}')\n    print(f'TRANSA\u00c7\u00d5ES ELIMINADAS TOTAL: R${tot}')\n    print('CAIXA FECHADO COM SUCESSO!')\n    aberto = False", "fn_id": 17, "class_fn": false, "repo": "FelipeECarvalho/Projetos", "file": "Sistema Caixa Supermercados/principal.py", "last_update_at": "2021-08-22T17:10:08+00:00", "pred": {"ppl": 3.563450574874878, "ppl_lower": 4.543792724609375, "ppl/lowercase_ppl": -1.1912545180812646, "ppl/zlib": 0.002894599858855475, "Min_5.0% Prob": 9.885782309940883, "Min_10.0% Prob": 8.073703067643303, "Min_20.0% Prob": 5.5616374643225415, "Min_30.0% Prob": 4.087648164524752, "Min_40.0% Prob": 3.1488181638874506, "Min_50.0% Prob": 2.547003882373093, "Min_60.0% Prob": 2.117309882349133}}
{"hexsha": "c370b87e8143a97ff5064d02515dc7a0a2cf09a6", "ext": "py", "lang": "Python", "content": "def patch():\n    global _patched\n    if not _patched:\n        conf.Settings = Settings\n        conf.LazySettings = LazySettings\n        conf.settings = settings\n        _patched = True", "fn_id": 0, "class_fn": false, "repo": "jayvdb/django-service-urls", "file": "service_urls/patch.py", "last_update_at": "2021-01-13T02:41:26+00:00", "pred": {"ppl": 6.22233247756958, "ppl_lower": 11.701937675476074, "ppl/lowercase_ppl": -1.3454921060840932, "ppl/zlib": 0.019871139487514525, "Min_5.0% Prob": 11.250134468078613, "Min_10.0% Prob": 10.236032485961914, "Min_20.0% Prob": 7.447209392275129, "Min_30.0% Prob": 5.629367850043557, "Min_40.0% Prob": 4.692468128034046, "Min_50.0% Prob": 3.726068508293894, "Min_60.0% Prob": 3.0655199250375684}}
{"hexsha": "a9d142291ba38842e31d3177869d6447f084d025", "ext": "py", "lang": "Python", "content": "def time_model(model: nn.Module, test_set: Type[LightFieldDataset], device) -> np.ndarray:\n    model.eval()\n    custom = CustomProgressBar('N/A')\n    loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=1, sampler=SequentialSampler(test_set), num_workers=1, pin_memory=True)\n    test_set.set_only_x_dataset()\n    model.eval()\n    torch.set_grad_enabled(False)\n    print('Timing')\n    all_times = []\n    for input_data in custom.bar(loader):\n        tick = time.time()\n        input_var = input_data.to(device).float().div_(255.0)\n        _ = model(input_var)\n        tock = time.time()\n        time_taken = tock - tick\n        all_times.append(time_taken)\n    test_set.revert_only_x_dataset()\n    return np.array(all_times)", "fn_id": 0, "class_fn": false, "repo": "leaveitout/deep_light_field_interp", "file": "deeplfinterp/util/train_tools.py", "last_update_at": "2021-08-06T13:39:19+00:00", "pred": {"ppl": 3.442730665206909, "ppl_lower": 4.562400817871094, "ppl/lowercase_ppl": -1.2277699651474856, "ppl/zlib": 0.0031297846949861967, "Min_5.0% Prob": 9.261277849023992, "Min_10.0% Prob": 7.54012790593234, "Min_20.0% Prob": 5.450538961092631, "Min_30.0% Prob": 3.9877714488436196, "Min_40.0% Prob": 3.0751473155322966, "Min_50.0% Prob": 2.470111643209269, "Min_60.0% Prob": 2.0721924861495875}}
{"hexsha": "e8bc0e0cfb812d7c32521e012f61a1e17efddd71", "ext": "py", "lang": "Python", "content": "def save_mel_dataset(out_path, *paths, in_db=True, root_path=None):\n    \"\"\"\n    \"\"\"\n    ds_len = len(paths)\n    with IncrementalHDF5(out_path, CONF.NUM_MELS, np.float32) as ihdf5:\n        LOGGER.info(f'Writing to {out_path}')\n        for i, abspath in enumerate(paths, 1):\n            if root_path is not None:\n                metadata_str = str(abspath.relative_to(root_path))\n            else:\n                metadata_str = str(abspath)\n            if i % 100 == 0:\n                LOGGER.info(f'[{i}/{ds_len}] save_mel_dataset: {metadata_str}')\n            arr = wavpath_to_mel(str(abspath), CONF.WAV_SR, wav_norm=CONF.WAV_NORM, n_mels=CONF.NUM_MELS, hop_length=CONF.STFT_HOPSIZE, pad_mode='constant', in_decibels=in_db, logger=LOGGER)\n            if arr is None:\n                continue\n            ihdf5.append(arr, metadata_str)\n            _, arr_w = arr.shape\n            assert (arr == ihdf5.data_ds[:, -arr_w:]).all(), 'Should never happen'\n        LOGGER.info(f'Finished writing to {out_path}')", "fn_id": 1, "class_fn": false, "repo": "andres-fr/dcase2021_umaps", "file": "00c_precompute_fraunhofer_fixed.py", "last_update_at": "2021-11-30T09:28:21+00:00", "pred": {"ppl": 3.6960020065307617, "ppl_lower": 4.3302388191223145, "ppl/lowercase_ppl": -1.1211480533982452, "ppl/zlib": 0.002689818305909079, "Min_5.0% Prob": 10.432452233632405, "Min_10.0% Prob": 8.33365684939969, "Min_20.0% Prob": 5.826115646059551, "Min_30.0% Prob": 4.201337873308282, "Min_40.0% Prob": 3.2280243957840553, "Min_50.0% Prob": 2.604846904206576, "Min_60.0% Prob": 2.1861004922735066}}
{"hexsha": "5a93cf64a2f1ac340c8208f986a4fd8f35d03148", "ext": "py", "lang": "Python", "content": "def view(location, browser=None, new='same', autoraise=True):\n    \"\"\" Opens a browser to view the specified location.\n\n        Args:\n            location (str) : location to open\n                If location does not begin with \"http:\" it is assumed\n                to be a file path on the local filesystem.\n            browser (str) : what browser to use\n            new (str) : how to open the location\n                Valid values are:\n                    * \"same\" - open in the current tab\n                    * \"tab\" - open a new tab in the current window\n                    * \"window\" - open in a new window\n            autoraise (bool) : whether to raise the new location\n\n        Returns:\n            None\n\n        \"\"\"\n    new_map = {'same': 0, 'window': 1, 'tab': 2}\n    if location.startswith('http'):\n        url = location\n    else:\n        url = 'file://' + abspath(location)\n    try:\n        controller = get_browser_controller(browser)\n        controller.open(url, new=new_map[new], autoraise=autoraise)\n    except (SystemExit, KeyboardInterrupt):\n        raise\n    except:\n        pass", "fn_id": 1, "class_fn": false, "repo": "tswicegood/bokeh", "file": "bokeh/browserlib.py", "last_update_at": "2021-11-17T10:48:36+00:00", "pred": {"ppl": 3.1109869480133057, "ppl_lower": 3.719827175140381, "ppl/lowercase_ppl": -1.1574860194329644, "ppl/zlib": 0.002374351511454864, "Min_5.0% Prob": 8.945631543795267, "Min_10.0% Prob": 7.147013942400615, "Min_20.0% Prob": 5.042973372401024, "Min_30.0% Prob": 3.7076315162955105, "Min_40.0% Prob": 2.83118214932355, "Min_50.0% Prob": 2.2750169033965757, "Min_60.0% Prob": 1.8958685526049277}}
{"hexsha": "ad091436c7271a654fb820601c6d942f23f49ff5", "ext": "py", "lang": "Python", "content": "def get_rna(fq_dict):\n    \"\"\"\n    Obtain a numpy array with all detected spots in the image. Detection results\n    are saved in a dictionary (see read_FQ_results_matlab for more details).\n    \"\"\"\n    RNAall = nested_lookup('spots', fq_dict)\n    for idx, val in enumerate(RNAall):\n        if idx == 0:\n            spots_all = np.copy(val)\n        else:\n            spots_all = np.append(spots_all, val, axis=0)\n    return spots_all", "fn_id": 3, "class_fn": false, "repo": "muellerflorian/parker-rna-loc-elegans", "file": "rnaloc/FQtoolbox.py", "last_update_at": "2021-01-12T16:51:38+00:00", "pred": {"ppl": 6.12178373336792, "ppl_lower": 6.061104774475098, "ppl/lowercase_ppl": -0.9945020807705423, "ppl/zlib": 0.007218539895453179, "Min_5.0% Prob": 11.04186487197876, "Min_10.0% Prob": 9.040226777394613, "Min_20.0% Prob": 7.045204569896062, "Min_30.0% Prob": 5.608317547374302, "Min_40.0% Prob": 4.442083862363075, "Min_50.0% Prob": 3.6398679198788817, "Min_60.0% Prob": 3.051448197907781}}
{"hexsha": "8b2fa9137563469049632eeb151af101a87de1b0", "ext": "py", "lang": "Python", "content": "@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        if message.content == 'Authentication invalid':\n            await renew_auth(message)\n        return\n    if message.content.startswith('>'):\n        return\n        await parse(message)\n    if isinstance(message.channel, discord.channel.DMChannel):\n        if message.content == 'quit':\n            await do_quit(message)\n        if message.content == 'test':\n            return\n            await do_tests(message)\n        if message.content == 'renew' or message.content == 'reset':\n            await renew_auth(message)\n    if message.content.startswith('/'):\n        await client.process_commands(message)", "fn_id": 5, "class_fn": false, "repo": "joshmiller17/venntbot", "file": "venntbot.py", "last_update_at": "2021-09-11T23:15:38+00:00", "pred": {"ppl": 3.1798629760742188, "ppl_lower": 3.5931851863861084, "ppl/lowercase_ppl": -1.1056335717249932, "ppl/zlib": 0.0046273524263155145, "Min_5.0% Prob": 9.426640374319893, "Min_10.0% Prob": 7.814761288960775, "Min_20.0% Prob": 5.061555231771162, "Min_30.0% Prob": 3.7118558002554853, "Min_40.0% Prob": 2.8436474542944663, "Min_50.0% Prob": 2.3162010747503925, "Min_60.0% Prob": 1.9257475510840454}}
{"hexsha": "385dabe838e94b3bc682d337123e8384c47a3724", "ext": "py", "lang": "Python", "content": "def parse_patterns(query, graph=False):\n    \"\"\"\n    if query['patterns'] looks like so:\n    ['target_type=', 'what=', '!tag_k=not_equals_thistag_v', 'tag_k:match_this_val', 'arbitrary', 'words']\n\n    then the patterns will look like so:\n    {\n    'tag_k=not_equals_thistag_v': {'negate': True, 'match_tag_equality': ['tag_k', 'not_equals_thistag_v']},\n    'target_type=':               {'negate': False, 'match_tag_equality': ['target_type', '']},\n    'what=':                      {'negate': False, 'match_tag_equality': ['what', '']},\n    'tag_k:match_this_val':       {'negate': False, 'match_tag_regex': ['tag_k', 'match_this_val']},\n    'words':                      {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x2612cb0>},\n    'arbitrary':                  {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x7f6cc000bd90>}\n    }\n    \"\"\"\n    patterns = {}\n    for pattern in query['patterns']:\n        negate = False\n        if pattern.startswith('!'):\n            negate = True\n            pattern = pattern[1:]\n        patterns[pattern] = {'negate': negate}\n        if '=' in pattern:\n            if not graph or pattern not in ('target_type=', 'what='):\n                patterns[pattern]['match_tag_equality'] = pattern.split('=')\n            else:\n                del patterns[pattern]\n        elif ':' in pattern:\n            if not graph or pattern not in ('target_type:', 'what:'):\n                patterns[pattern]['match_tag_regex'] = pattern.split(':')\n            else:\n                del patterns[pattern]\n        else:\n            patterns[pattern]['match_id_regex'] = re.compile(pattern)\n    return patterns", "fn_id": 2, "class_fn": false, "repo": "bittorrent/graph-explorer", "file": "query.py", "last_update_at": "2021-03-14T19:37:11+00:00", "pred": {"ppl": 2.7691774368286133, "ppl_lower": 2.920194625854492, "ppl/lowercase_ppl": -1.0521328634646616, "ppl/zlib": 0.002045281770855657, "Min_5.0% Prob": 9.150363528210184, "Min_10.0% Prob": 7.460671820539109, "Min_20.0% Prob": 4.814453028618021, "Min_30.0% Prob": 3.360315081938891, "Min_40.0% Prob": 2.5488680136936996, "Min_50.0% Prob": 2.0362223601224145, "Min_60.0% Prob": 1.6998393202362858}}
{"hexsha": "c465816e2eca187bfd4fc478284eec3b6c703e51", "ext": "py", "lang": "Python", "content": "def generalInquiry(choiceList, message):\n    choiceList.append(colored('Return', 'red'))\n    options = [inquirer.List('inputVal', message=message, choices=choiceList)]\n    print(colored('Use arrow keys to navigate\\n', 'blue'))\n    print(colored('Proceed --> Enter / Return key\\n', 'green'))\n    return inquirer.prompt(options)['inputVal']", "fn_id": 15, "class_fn": false, "repo": "HiLabTufts/GailBot-3", "file": "gailbot-3.py", "last_update_at": "2021-06-28T10:26:20+00:00", "pred": {"ppl": 7.436314582824707, "ppl_lower": 10.383840560913086, "ppl/lowercase_ppl": -1.1664072613043244, "ppl/zlib": 0.009787196948033702, "Min_5.0% Prob": 10.690325498580933, "Min_10.0% Prob": 9.705373883247375, "Min_20.0% Prob": 7.877009447883157, "Min_30.0% Prob": 6.258102586636176, "Min_40.0% Prob": 4.962874017442975, "Min_50.0% Prob": 4.022102898494764, "Min_60.0% Prob": 3.363624947672745}}
{"hexsha": "3b7d7e72a7f0b786dd6d72495ed17a1c7b0e1e9f", "ext": "py", "lang": "Python", "content": "@card('Rolling Spoil')\ndef rolling_spoil(card, abilities):\n\n    def rolling_spoil():\n        return AbilityNotImplemented\n    return (rolling_spoil,)", "fn_id": 155, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/ravnica_city_of_guilds.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 10.280193328857422, "ppl_lower": 28.50979995727539, "ppl/lowercase_ppl": -1.4377394533299919, "ppl/zlib": 0.02284528496234579, "Min_5.0% Prob": 15.915847778320312, "Min_10.0% Prob": 12.787074089050293, "Min_20.0% Prob": 9.893598079681396, "Min_30.0% Prob": 7.784342744133689, "Min_40.0% Prob": 5.8596336056788765, "Min_50.0% Prob": 4.655313331045602, "Min_60.0% Prob": 4.023620015560565}}
{"hexsha": "d090023df2a9fa2d3a531ad91449ef05aefa4e12", "ext": "py", "lang": "Python", "content": "def dice_loss(pred, target, smooth=1.0):\n    pred = pred.contiguous()\n    target = target.contiguous()\n    intersection = (pred * target).sum(dim=1).sum(dim=1)\n    loss = 1 - (2.0 * intersection + smooth) / (pred.sum(dim=1).sum(dim=1) + target.sum(dim=1).sum(dim=1) + smooth)\n    return loss.mean()", "fn_id": 1, "class_fn": false, "repo": "rispoli-lab/Deep-Learning-Breast-FGT", "file": "loss.py", "last_update_at": "2021-09-17T17:10:52+00:00", "pred": {"ppl": 1.607329249382019, "ppl_lower": 1.607329249382019, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0031428738428047297, "Min_5.0% Prob": 5.282515573501587, "Min_10.0% Prob": 3.6868804931640624, "Min_20.0% Prob": 2.33719684779644, "Min_30.0% Prob": 1.618003116796414, "Min_40.0% Prob": 1.1898355572370858, "Min_50.0% Prob": 0.957925008774242, "Min_60.0% Prob": 0.801217573035516}}
{"hexsha": "20fd1f5105839af2bba28ff254523016e1e09b8f", "ext": "py", "lang": "Python", "content": "def _get_pipeline_definition_args(dag):\n    check.inst_param(dag, 'dag', DAG)\n    pipeline_dependencies = {}\n    solid_defs = []\n    seen_tasks = []\n    dag_roots = sorted(dag.roots, key=lambda x: x.task_id)\n    for task in dag_roots:\n        _traverse_airflow_dag(task, seen_tasks, pipeline_dependencies, solid_defs)\n    return (pipeline_dependencies, solid_defs)", "fn_id": 1, "class_fn": false, "repo": "uranusbeam/bit-dagster", "file": "python_modules/libraries/dagster-airflow/dagster_airflow/dagster_pipeline_factory.py", "last_update_at": "2021-11-08T02:10:42+00:00", "pred": {"ppl": 3.626433849334717, "ppl_lower": 3.9851930141448975, "ppl/lowercase_ppl": -1.0732280298493682, "ppl/zlib": 0.006314949778154595, "Min_5.0% Prob": 8.681799125671386, "Min_10.0% Prob": 7.296130704879761, "Min_20.0% Prob": 5.504285108475458, "Min_30.0% Prob": 4.214944756800128, "Min_40.0% Prob": 3.2153910866805484, "Min_50.0% Prob": 2.569479200004969, "Min_60.0% Prob": 2.1659716018697335}}
{"hexsha": "200733e11c459547d9421419b37fface7ce8edae", "ext": "py", "lang": "Python", "content": "def test_qcovariate_num_qs(exreaddata):\n    test = covariate.QCovariate()\n    assert test.num_qs() == 0\n    test.consume_read(exreaddata)\n    assert test.num_qs() == 11", "fn_id": 11, "class_fn": false, "repo": "adamjorr/kbbq-py", "file": "tests/test_covariate.py", "last_update_at": "2021-06-02T00:07:35+00:00", "pred": {"ppl": 9.361067771911621, "ppl_lower": 10.001252174377441, "ppl/lowercase_ppl": -1.029577100224845, "ppl/zlib": 0.02171416856484237, "Min_5.0% Prob": 12.859421730041504, "Min_10.0% Prob": 10.615719159444174, "Min_20.0% Prob": 8.485190351804098, "Min_30.0% Prob": 6.984946529070537, "Min_40.0% Prob": 5.536314795414607, "Min_50.0% Prob": 4.5068361093600595, "Min_60.0% Prob": 3.779229701600141}}
{"hexsha": "eac9bfadf6afe42b2ba6db1b9064946fdf240cf1", "ext": "py", "lang": "Python", "content": "@card('Goblin Archaeologist')\ndef goblin_archaeologist(card, abilities):\n\n    def goblin_archaeologist():\n        return AbilityNotImplemented\n    return (goblin_archaeologist,)", "fn_id": 17, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/darksteel.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 3.07711124420166, "ppl_lower": 7.277927875518799, "ppl/lowercase_ppl": -1.7658911408018387, "ppl/zlib": 0.010407326381000807, "Min_5.0% Prob": 13.076317310333252, "Min_10.0% Prob": 9.142366123199462, "Min_20.0% Prob": 5.589212455532768, "Min_30.0% Prob": 3.860284302965738, "Min_40.0% Prob": 2.8095438039163128, "Min_50.0% Prob": 2.2895071518939436, "Min_60.0% Prob": 1.8733056418079121}}
{"hexsha": "d2beff782efe625c4f930164ec0ecae6152de846", "ext": "py", "lang": "Python", "content": "def get_final_seats_occupied_based_on_sight(seats: list[str]) -> int:\n    old_grid = Grid(seats)\n    while (new_grid := transform_based_on_los(old_grid)) != old_grid:\n        old_grid = new_grid\n    return new_grid.count('#')", "fn_id": 2, "class_fn": false, "repo": "pviafore/AdventOfCode2020", "file": "challenge11.py", "last_update_at": "2021-12-09T09:54:54+00:00", "pred": {"ppl": 6.330731391906738, "ppl_lower": 6.322719097137451, "ppl/lowercase_ppl": -0.999313747762058, "ppl/zlib": 0.012385340759909803, "Min_5.0% Prob": 10.648971239725748, "Min_10.0% Prob": 9.654086657932826, "Min_20.0% Prob": 7.807672841208322, "Min_30.0% Prob": 5.941904599016363, "Min_40.0% Prob": 4.683992448551901, "Min_50.0% Prob": 3.6881070713940503, "Min_60.0% Prob": 3.103088546628979}}
{"hexsha": "65d2c4247e06b070e56286e1c0516a47f5fdba82", "ext": "py", "lang": "Python", "content": "def generate_testcase_files(instance, env, testcase_dir_path):\n    testcases_list = []\n    config = {'config': {'name': instance.name, 'variables': [], 'request': {'base_url': env.base_url if env else ''}}}\n    testcases_list.append(config)\n    include = json.loads(instance.include, encoding='utf-8')\n    request = json.loads(instance.request, encoding='utf-8')\n    module_name = instance.module.name\n    project_name = instance.module.project.name\n    testcase_dir_path = os.path.join(testcase_dir_path, project_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n        debugtalk_obj = Projects.objects.get(name=project_name).debugtalk\n        if debugtalk_obj:\n            debugtalk = debugtalk_obj.debugtalk\n        else:\n            debugtalk = ''\n        with open(os.path.join(testcase_dir_path, 'debugtalk.py'), mode='w', encoding='utf-8') as one_file:\n            one_file.write(debugtalk)\n    testcase_dir_path = os.path.join(testcase_dir_path, module_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n    if 'testcases' in include:\n        for t_id in include.get('testcases'):\n            testcase_obj = Testcases.objects.filter(id=t_id).first()\n            if testcase_obj:\n                try:\n                    testcase_request = json.loads(testcase_obj.request, encoding='utf-8')\n                except Exception as e:\n                    logger.error(e)\n                    continue\n                else:\n                    extract = testcase_request['test'].get('extract')\n                    if extract:\n                        for e in extract:\n                            testcases_list[0]['config']['variables'].append({[i for i in e.keys()][0]: ''})\n                    testcase_request['test'] = OrderedDict(testcase_request['test'])\n                    testcases_list.append(OrderedDict(testcase_request))\n    request['test'] = OrderedDict(request['test'])\n    testcases_list.append(request)\n    with open(os.path.join(testcase_dir_path, instance.name + '.yml'), mode='w', encoding='utf-8') as one_file:\n        ordered_yaml_dump(testcases_list, one_file, default_flow_style=False, allow_unicode=True)", "fn_id": 1, "class_fn": false, "repo": "op896898466/apitest", "file": "utils/common.py", "last_update_at": "2021-08-16T05:48:43+00:00", "pred": {"ppl": 2.258915662765503, "ppl_lower": 2.401526689529419, "ppl/lowercase_ppl": -1.0751268708310902, "ppl/zlib": 0.0012328062071242463, "Min_5.0% Prob": 8.201337814331055, "Min_10.0% Prob": 6.056256339467805, "Min_20.0% Prob": 3.8264186458709912, "Min_30.0% Prob": 2.683628301024437, "Min_40.0% Prob": 2.0301255188946032, "Min_50.0% Prob": 1.63148573290697, "Min_60.0% Prob": 1.3580283454461475}}
{"hexsha": "679616cb8b1011d2bf2813d8352a4c19d23a2b17", "ext": "py", "lang": "Python", "content": "def save_current_window_and_open_tools_window():\n    \"\"\"\n    Save the current window with `save_current_window' and open the eiffel\n    tools buffer in a window. The window containing the eiffel tools buffer\n    will be selected after the launch of this routine. To reselect the\n    window saved by this routine, use the `select_saved_window' routine.\n    \"\"\"\n    tools_buffer_name = environment.get_global_variable('eiffel_tools_buffer_name')\n    tools_buffer_number = get_tools_buffer_number()\n    if tools_buffer_number < 0:\n        save_current_window_and_open_new_tools_window(tools_buffer_name)\n    else:\n        tools_buffer_window_number = int(environment.evaluate('bufwinnr(\"' + tools_buffer_name + '\")'))\n        if tools_buffer_window_number < 0:\n            save_current_window_and_open_existing_tools_window(tools_buffer_name)\n        else:\n            save_current_window_and_select_tools_window(tools_buffer_window_number)\n    environment.execute('setlocal filetype=')", "fn_id": 8, "class_fn": false, "repo": "tioui/Vim_Eiffel_IDE", "file": "pyplugin/eiffel_ide.py", "last_update_at": "2021-11-23T20:12:06+00:00", "pred": {"ppl": 3.895136833190918, "ppl_lower": 4.112997531890869, "ppl/lowercase_ppl": -1.0400250988486077, "ppl/zlib": 0.003787545429465981, "Min_5.0% Prob": 10.160293872539814, "Min_10.0% Prob": 8.135505181092482, "Min_20.0% Prob": 5.881570857304793, "Min_30.0% Prob": 4.353153630902495, "Min_40.0% Prob": 3.379985108687764, "Min_50.0% Prob": 2.710658718013402, "Min_60.0% Prob": 2.270251221164967}}
{"hexsha": "a1475fa68fd62c2546f13e320d8164046b674af2", "ext": "py", "lang": "Python", "content": "def sub_special_tokens(text):\n    text = re.sub(' www.', ' http://www.', text)\n    text = re.sub('(https|http)?:\\\\/\\\\/(\\\\w|\\\\.|\\\\/|\\\\?|\\\\=|\\\\&|\\\\%)*\\\\b', ' xxurl ', text)\n    pat = '\\\\d{3}[-\\\\.\\\\s]??\\\\d{4}[-\\\\.\\\\s]??\\\\d{4}|\\\\d{5}[-\\\\.\\\\s]??\\\\d{3}[-\\\\.\\\\s]??\\\\d{3}|(?:\\\\d{4}\\\\)?[\\\\s-]?\\\\d{3}[\\\\s-]?\\\\d{4})'\n    text = re.sub(pat, ' xxphone ', text)\n    text = text.replace('\u00a3', '$ ')\n    text = re.sub('(\\\\d+)[ ]{0,1}p', '$ 0.\\x01', text)\n    text = re.sub('\\\\$[ ]*(\\\\d+[,\\\\.])*\\\\d+', ' xxmon ', text)\n    text = re.sub('(\\\\b[A-Z][A-Z0-9]*\\\\b)', ' xxup \\\\1 ', text)\n    text = re.sub('(\\\\b[A-Z][a-z0-9]+\\\\b)', ' xxcap \\\\1 ', text)\n    text = re.sub('[:;][ ]*[-]*[ ]*[()]', ' xxemoji ', text)\n    return text", "fn_id": 0, "class_fn": false, "repo": "rkingery/ml_tutorials", "file": "notebooks/utils.py", "last_update_at": "2021-01-15T10:26:34+00:00", "pred": {"ppl": 3.2710673809051514, "ppl_lower": 3.3372111320495605, "ppl/lowercase_ppl": -1.0168921135856495, "ppl/zlib": 0.003750368189322584, "Min_5.0% Prob": 8.717805057764053, "Min_10.0% Prob": 6.713107913732529, "Min_20.0% Prob": 4.76962109712454, "Min_30.0% Prob": 3.6382860510619643, "Min_40.0% Prob": 2.8834411575244023, "Min_50.0% Prob": 2.3540402597810592, "Min_60.0% Prob": 1.9781442642116394}}
{"hexsha": "10e63bec5b7e172368421e76129581befebd5bc0", "ext": "py", "lang": "Python", "content": "def part_sum(bitlist, indices):\n    \"\"\"Compute the mod 2 sum of the subset of bits in bitlist given by the list of indices.\"\"\"\n    sum = 0\n    for x in indices:\n        sum = sum ^ bitlist[x]\n    return sum", "fn_id": 6, "class_fn": false, "repo": "wmkirby1/CS-VQE", "file": "misc/legacy/fermions/yaferp/general/fermions.py", "last_update_at": "2021-11-10T18:03:49+00:00", "pred": {"ppl": 6.863592624664307, "ppl_lower": 7.913569927215576, "ppl/lowercase_ppl": -1.0738997485369037, "ppl/zlib": 0.013857777056624736, "Min_5.0% Prob": 12.565610885620117, "Min_10.0% Prob": 10.425871753692627, "Min_20.0% Prob": 7.584336237473921, "Min_30.0% Prob": 6.070060342550278, "Min_40.0% Prob": 4.756461100144819, "Min_50.0% Prob": 3.8225250520876477, "Min_60.0% Prob": 3.2632984381281966}}
{"hexsha": "90681b31e1662f4f8ed10dcfc71a183b60796d93", "ext": "py", "lang": "Python", "content": "def experimental_parallel_interleave_dataset(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f, output_types, output_shapes, name=None):\n    \"\"\"Creates a dataset that applies `f` to the outputs of `input_dataset`.\n\n  The resulting dataset is similar to the `InterleaveDataset`, with the exception\n  that if retrieving the next value from a dataset would cause the requester to\n  block, it will skip that input dataset. This dataset is especially useful\n  when loading data from a variable-latency datastores (e.g. HDFS, GCS), as it\n  allows the training step to proceed so long as some data is available.\n\n  !! WARNING !! This dataset is not deterministic!\n\n  Args:\n    input_dataset: A `Tensor` of type `variant`.\n    other_arguments: A list of `Tensor` objects.\n    cycle_length: A `Tensor` of type `int64`.\n    block_length: A `Tensor` of type `int64`.\n    sloppy: A `Tensor` of type `bool`.\n    buffer_output_elements: A `Tensor` of type `int64`.\n    prefetch_input_elements: A `Tensor` of type `int64`.\n    f: A function decorated with @Defun.\n      A function mapping elements of `input_dataset`, concatenated with\n      `other_arguments`, to a Dataset variant that contains elements matching\n      `output_types` and `output_shapes`.\n    output_types: A list of `tf.DTypes` that has length `>= 1`.\n    output_shapes: A list of shapes (each a `tf.TensorShape` or list of `ints`) that has length `>= 1`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A `Tensor` of type `variant`.\n  \"\"\"\n    _ctx = _context._context or _context.context()\n    tld = _ctx._thread_local_data\n    if tld.is_eager:\n        try:\n            _result = pywrap_tfe.TFE_Py_FastPathExecute(_ctx._context_handle, tld.device_name, 'ExperimentalParallelInterleaveDataset', name, tld.op_callbacks, input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, 'f', f, 'output_types', output_types, 'output_shapes', output_shapes)\n            return _result\n        except _core._NotOkStatusException as e:\n            _ops.raise_from_not_ok_status(e, name)\n        except _core._FallbackException:\n            pass\n        try:\n            return experimental_parallel_interleave_dataset_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name, ctx=_ctx)\n        except _core._SymbolicException:\n            pass\n    if not isinstance(output_types, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_types' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_types)\n    output_types = [_execute.make_type(_t, 'output_types') for _t in output_types]\n    if not isinstance(output_shapes, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_shapes' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_shapes)\n    output_shapes = [_execute.make_shape(_s, 'output_shapes') for _s in output_shapes]\n    _, _, _op, _outputs = _op_def_library._apply_op_helper('ExperimentalParallelInterleaveDataset', input_dataset=input_dataset, other_arguments=other_arguments, cycle_length=cycle_length, block_length=block_length, sloppy=sloppy, buffer_output_elements=buffer_output_elements, prefetch_input_elements=prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name)\n    _result = _outputs[:]\n    if _execute.must_record_gradient():\n        _attrs = ('f', _op.get_attr('f'), 'Targuments', _op.get_attr('Targuments'), 'output_types', _op.get_attr('output_types'), 'output_shapes', _op.get_attr('output_shapes'))\n        _inputs_flat = _op.inputs\n        _execute.record_gradient('ExperimentalParallelInterleaveDataset', _inputs_flat, _attrs, _result)\n    _result, = _result\n    return _result", "fn_id": 68, "class_fn": false, "repo": "Lube-Project/ProgettoLube", "file": "ProgettoLube/WebInspector/venv/Lib/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py", "last_update_at": "2021-01-28T01:57:41+00:00", "pred": {"ppl": 1.398522138595581, "ppl_lower": 2.0607855319976807, "ppl/lowercase_ppl": -2.1557919086604467, "ppl/zlib": 0.0002657813500618966, "Min_5.0% Prob": 4.883665108213238, "Min_10.0% Prob": 3.0821379388079926, "Min_20.0% Prob": 1.6719726933458565, "Min_30.0% Prob": 1.120757634307903, "Min_40.0% Prob": 0.838885555294081, "Min_50.0% Prob": 0.6714790059622241, "Min_60.0% Prob": 0.559754906358503}}
{"hexsha": "5d67dd4c40040dcf2e4bbcd0df1123cacc8a09a7", "ext": "py", "lang": "Python", "content": "def get_conversion_rate(response_data):\n    data = str(response_data)\n    keyword_conversion = 'conversion_rate'\n    slen = len(keyword_conversion)\n    start_index = data.find(keyword_conversion)\n    extra_len = 9\n    extracted_str = data[start_index:start_index + slen + extra_len]\n    word_list = extracted_str.split(':')\n    conversion_rate = word_list[1]\n    result = float(conversion_rate)\n    loginfo('Conversion Rate = ' + str(result), get_conversion_rate.__name__)\n    return result", "fn_id": 3, "class_fn": false, "repo": "jamesjallorina/currency_exchange", "file": "backend/backend.py", "last_update_at": "2021-12-15T17:54:21+00:00", "pred": {"ppl": 3.941063642501831, "ppl_lower": 4.0213704109191895, "ppl/lowercase_ppl": -1.014708583148396, "ppl/zlib": 0.006233866576831986, "Min_5.0% Prob": 10.549580891927084, "Min_10.0% Prob": 9.17644948225755, "Min_20.0% Prob": 6.31293719344669, "Min_30.0% Prob": 4.460211684791053, "Min_40.0% Prob": 3.4535332277969077, "Min_50.0% Prob": 2.758956850013312, "Min_60.0% Prob": 2.2905405873273748}}
{"hexsha": "b740c4349aa6a00f9a664792b9a5d497e887cbae", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('value,expected', (('', ''), (None, ''), ('very long ' * 100, '')))\ndef test_mobile_number_clean(value, expected):\n    field = forms.MobileNumberField(max_length=100)\n    assert field.to_python(value) == expected", "fn_id": 0, "class_fn": false, "repo": "konradko/directory-api", "file": "company/tests/test_forms.py", "last_update_at": "2021-11-06T12:08:26+00:00", "pred": {"ppl": 4.405460834503174, "ppl_lower": 5.781829833984375, "ppl/lowercase_ppl": -1.1833471242893299, "ppl/zlib": 0.008621191105514663, "Min_5.0% Prob": 10.17530886332194, "Min_10.0% Prob": 8.608102866581508, "Min_20.0% Prob": 6.0181976045881, "Min_30.0% Prob": 4.649927593412853, "Min_40.0% Prob": 3.7102697917393277, "Min_50.0% Prob": 2.9556186894575753, "Min_60.0% Prob": 2.481917334937079}}
{"hexsha": "eedf072c408246eee339cda55c42a69c694380b4", "ext": "py", "lang": "Python", "content": "def extract_bucket_reference_for_param_reference(template, param_name):\n    param_value = template.get_parameter_default(param_name)\n    if param_value is None:\n        return\n    for resource in template.resources('AWS::Serverless::Function'):\n        policies = resource['Properties'].get('Policies')\n        if policies is None:\n            continue\n        for policy in policies:\n            for statement in policy['Statement']:\n                if param_value not in statement.get('Resource', ''):\n                    continue\n                old_value = statement['Resource']\n                parts = list(old_value.partition(param_value))\n                parts[1] = {'Ref': param_name}\n                new_value = {'Fn::Join': ['', parts]}\n                statement['Resource'] = new_value", "fn_id": 2, "class_fn": false, "repo": "jmespath/jmespath-playground", "file": "template-fixups.py", "last_update_at": "2021-11-24T14:33:45+00:00", "pred": {"ppl": 3.2805211544036865, "ppl_lower": 4.745565891265869, "ppl/lowercase_ppl": -1.3107808694510574, "ppl/zlib": 0.0036109492349918385, "Min_5.0% Prob": 10.799555540084839, "Min_10.0% Prob": 8.472388155320111, "Min_20.0% Prob": 5.538203709265765, "Min_30.0% Prob": 3.8750303288300834, "Min_40.0% Prob": 2.9534163500237116, "Min_50.0% Prob": 2.3732979257098017, "Min_60.0% Prob": 1.979536830363156}}
{"hexsha": "6f11be4ebd108a94cb1027e16e858ff097fa14e5", "ext": "py", "lang": "Python", "content": "def text_to_spreadsheet(directory='.', output_file='text_to_sheet.xlsx'):\n    \"\"\"\n    Searches for all text files at the given directory. Each individual\n    text file is converted to a column in the output_file spreadsheet.\n\n    :param str directory: path to directory to search\n    :param str output_file: name of output file\n    \"\"\"\n    path = os.path.abspath(directory)\n    wb = openpyxl.Workbook()\n    wb.create_sheet(title='Text to Columns', index=0)\n    sheet = wb.active\n    bold = Font(bold=True)\n    print(f'Searching for text files...')\n    files = [file for file in os.listdir(path) if file.lower().endswith('.txt')]\n    column = 1\n    print(f'Writing lines of text to columns...')\n    for file in files:\n        row = 2\n        with open(os.path.join(path, file)) as text:\n            sheet.cell(row=1, column=column).value = file\n            sheet.cell(row=1, column=column).font = bold\n            for line in text:\n                sheet.cell(row=row, column=column).value = line\n                row += 1\n        column += 1\n    wb.save(filename=output_file)\n    print(f\"Resulting file saved as '{output_file}'\")", "fn_id": 0, "class_fn": false, "repo": "zspatter/automate-the-boring-stuff", "file": "text_to_spreadsheet/text_to_spreadsheet.py", "last_update_at": "2021-09-05T20:19:40+00:00", "pred": {"ppl": 3.1734960079193115, "ppl_lower": 3.723315477371216, "ppl/lowercase_ppl": -1.1383581809510033, "ppl/zlib": 0.002277778741264388, "Min_5.0% Prob": 9.79646270615714, "Min_10.0% Prob": 7.843120015900711, "Min_20.0% Prob": 5.2762050850916715, "Min_30.0% Prob": 3.811769322063146, "Min_40.0% Prob": 2.8931231180033765, "Min_50.0% Prob": 2.3160422768306312, "Min_60.0% Prob": 1.9288745299293841}}
{"hexsha": "1b7c720289e99957b1d1e5c9b70d89bb7e355da1", "ext": "py", "lang": "Python", "content": "@tf.function\ndef train_step(x_target, y_target, model, optimizer, model_loss):\n    with tf.GradientTape() as model_tape:\n        y_predic = model(x_target, training=True)\n        loss = model_loss(y_target, y_predic)\n    gradients_of_model = model_tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients_of_model, model.trainable_variables))\n    return loss", "fn_id": 1, "class_fn": false, "repo": "awagot/CNN-POD", "file": "training/training.py", "last_update_at": "2021-08-18T11:23:05+00:00", "pred": {"ppl": 1.8255996704101562, "ppl_lower": 2.6320629119873047, "ppl/lowercase_ppl": -1.607832227679434, "ppl/zlib": 0.0030246659275770756, "Min_5.0% Prob": 8.767922496795654, "Min_10.0% Prob": 5.662626748735255, "Min_20.0% Prob": 3.0555922734466465, "Min_30.0% Prob": 2.0116319124970365, "Min_40.0% Prob": 1.5236555436108676, "Min_50.0% Prob": 1.2036327767725055, "Min_60.0% Prob": 1.009052797280567}}
{"hexsha": "49f5a6884183e7a4dcbfcde101a491ad27898026", "ext": "py", "lang": "Python", "content": "def _get_eval_config_from_service_classification(classification: configuration_pb2.ClassificationProblemSpec, eval_config: model_evaluation_pb2.EvaluationConfig) -> None:\n    if classification.HasField('ground_truth_column_spec'):\n        eval_config.data_spec.label_key_spec.CopyFrom(classification.ground_truth_column_spec)\n    if classification.HasField('example_weight_column_spec'):\n        eval_config.data_spec.example_weight_key_spec.CopyFrom(classification.example_weight_column_spec)\n    if classification.HasField('prediction_score_column_spec'):\n        eval_config.data_spec.predicted_score_key_spec.CopyFrom(classification.prediction_score_column_spec)\n    if classification.HasField('prediction_label_column_spec'):\n        eval_config.data_spec.predicted_label_key_spec.CopyFrom(classification.prediction_label_column_spec)\n    if classification.HasField('prediction_id_column_spec'):\n        eval_config.data_spec.predicted_label_id_key_spec.CopyFrom(classification.prediction_id_column_spec)\n    eval_config.data_spec.labels.extend(classification.class_names)\n    num_classes = len(classification.class_names)\n    if classification.type == configuration_pb2.ClassificationProblemSpec.MULTICLASS:\n        problem_type = constants.ProblemType.MULTICLASS\n    elif classification.type == configuration_pb2.ClassificationProblemSpec.MULTILABEL:\n        problem_type = constants.ProblemType.MULTILABEL\n    else:\n        raise NotImplementedError('Classification type %r not implemented' % classification.type)\n    adapter = tfma_adapter.TFMAToME(class_name_list=list(classification.class_names))\n    tfma_metric_specs = _get_metric_specs(problem_type, list(classification.class_names), list(classification.evaluation_options.positive_classes), list(classification.evaluation_options.top_k_list))\n    for tfma_metric_spec in tfma_metric_specs:\n        eval_config.metrics_specs.append(adapter.metrics_spec(tfma_metric_spec))", "fn_id": 3, "class_fn": false, "repo": "tomar27/pipelines", "file": "components/google-cloud/google_cloud_pipeline_components/experimental/evaluation/flex/lib/config.py", "last_update_at": "2021-10-23T00:39:47+00:00", "pred": {"ppl": 2.14603590965271, "ppl_lower": 2.7365503311157227, "ppl/lowercase_ppl": -1.31831930779956, "ppl/zlib": 0.0015151237646116485, "Min_5.0% Prob": 8.281410427093506, "Min_10.0% Prob": 5.879588141441345, "Min_20.0% Prob": 3.637249804959439, "Min_30.0% Prob": 2.5384622381025594, "Min_40.0% Prob": 1.9073411463252683, "Min_50.0% Prob": 1.530135636151831, "Min_60.0% Prob": 1.2726842618556793}}
{"hexsha": "02819a01b041692ac69ff145ea5f13a590fc9b34", "ext": "py", "lang": "Python", "content": "def _guess_package_name(file_type, file_name):\n    if not file_type:\n        return None\n    file_name = file_name.lower()\n    if 'Bourne-Again' in file_type or 'bash' in file_type:\n        return 'bash'\n    elif 'Mach-O' in file_type and 'executable' in file_type:\n        return 'macho'\n    elif 'directory' in file_type or (file_name.endswith('.app') or file_name.endswith('.app/')) or (file_name.endswith('.pkg') or file_name.endswith('.pkg/')):\n        return 'app'\n    elif 'Zip archive' in file_type and file_name.endswith('.zip'):\n        return 'zip'\n    elif 'PDF' in file_type or file_name.endswith('.pdf'):\n        return 'pdf'\n    elif 'Microsoft Word' in file_type or 'Microsoft Office Word' in file_type or file_name.endswith('.docx') or file_name.endswith('.doc'):\n        return 'doc'\n    elif 'Rich Text Format' in file_type or file_name.endswith('.rtf') or 'property list' in file_type or file_name.endswith('.plist'):\n        return 'rtf'\n    elif 'HTML' in file_type or file_name.endswith('.htm') or file_name.endswith('.html'):\n        return 'html'\n    elif file_name.endswith('.jar'):\n        return 'jar'\n    elif file_name.endswith('.py') or 'Python script' in file_type:\n        return 'python'\n    elif file_name.endswith('.pl') or 'perl script' in file_type.lower():\n        return 'perl'\n    elif file_name.endswith('.dmg'):\n        return 'dmg'\n    else:\n        return 'generic'", "fn_id": 2, "class_fn": false, "repo": "phdphuc/mac-a-mal-cuckoo", "file": "analyzer/darwin/lib/core/packages.py", "last_update_at": "2021-04-07T08:26:25+00:00", "pred": {"ppl": 1.8800930976867676, "ppl_lower": 2.00559139251709, "ppl/lowercase_ppl": -1.1023530821947423, "ppl/zlib": 0.0015942456961159945, "Min_5.0% Prob": 6.808927837171052, "Min_10.0% Prob": 4.807317923276853, "Min_20.0% Prob": 3.0225238830228394, "Min_30.0% Prob": 2.090744197118182, "Min_40.0% Prob": 1.5761565202671401, "Min_50.0% Prob": 1.2617038170755583, "Min_60.0% Prob": 1.0555503224717264}}
{"hexsha": "6576548aed0db505fcd1e0ff4f67a6208131321a", "ext": "py", "lang": "Python", "content": "def login0(auth=None):\n    \"\"\"Handle secure login for performance and stress testing.\n\n    Signature is the signature of email value with the application key.\n    \"\"\"\n    if not auth:\n        auth = request.headers.get('Authorization')\n        if not auth:\n            resp = Response()\n            resp.headers['WWW-Authenticate'] = 'Basic realm=\"Access to the load-testing login\"'\n            resp.status_code = 401\n            return resp\n        if ':' not in auth:\n            auth = base64.b64decode(auth).decode()\n    email, signature = auth.split(':')\n    s = Signer(app.secret_key)\n    if s.validate(email + '.' + signature):\n        try:\n            u = User.get(email=email)\n            login_user(u)\n            return redirect(get_next_url() or url_for('index'))\n        except User.DoesNotExist:\n            return handle_login()\n    abort(403)", "fn_id": 7, "class_fn": false, "repo": "tenet-ac-za/NZ-ORCID-Hub", "file": "orcid_hub/authcontroller.py", "last_update_at": "2021-07-22T08:53:40+00:00", "pred": {"ppl": 4.727939128875732, "ppl_lower": 6.725576400756836, "ppl/lowercase_ppl": -1.2268623302598691, "ppl/zlib": 0.0035226517129651864, "Min_5.0% Prob": 10.738308429718018, "Min_10.0% Prob": 9.016412916637602, "Min_20.0% Prob": 6.476044887588138, "Min_30.0% Prob": 4.933869244560363, "Min_40.0% Prob": 3.8375202821833745, "Min_50.0% Prob": 3.1000366173329805, "Min_60.0% Prob": 2.588354421461681}}
{"hexsha": "782e47ae6e2a1bc565a53c10fee16a15dc5e46b5", "ext": "py", "lang": "Python", "content": "def readStr_qm9():\n    f = open(current_dir + '/../_dataset/QM9/qm9.smi', 'r')\n    L = []\n    for line in f:\n        line = line.strip()\n        L.append(line)\n    f.close()\n    np.random.seed(1)\n    np.random.shuffle(L)\n    return L", "fn_id": 2, "class_fn": false, "repo": "drigoni/ComparisonsDGM", "file": "_utils/read_dataset.py", "last_update_at": "2021-04-12T13:17:50+00:00", "pred": {"ppl": 4.111893653869629, "ppl_lower": 3.9961471557617188, "ppl/lowercase_ppl": -0.9798052836621124, "ppl/zlib": 0.008727676947115038, "Min_5.0% Prob": 9.142691850662231, "Min_10.0% Prob": 8.380029916763306, "Min_20.0% Prob": 6.323450982570648, "Min_30.0% Prob": 4.606642706940572, "Min_40.0% Prob": 3.5077465320937335, "Min_50.0% Prob": 2.8214185453951357, "Min_60.0% Prob": 2.355188395556373}}
{"hexsha": "cbd6d9414697897c65c3690922a074fdd0eec5b2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('method_name', ['from_pandas', 'iter_from_pandas'])\ndef test_dynamic_defines_key_fields(pandas_data, method_name):\n    model = PandasToRecordsTransformer(pandas_data, 'MyRecord', key_fields={'key_field'})\n    from_pandas_method = getattr(model, method_name)\n    record = list(from_pandas_method(pandas_data))[0]\n    assert record.key_fields == {'key_field'}", "fn_id": 4, "class_fn": false, "repo": "AbsaOSS/py2k", "file": "tests/test_models.py", "last_update_at": "2021-09-08T12:33:46+00:00", "pred": {"ppl": 4.837264537811279, "ppl_lower": 6.76641321182251, "ppl/lowercase_ppl": -1.2129107678403346, "ppl/zlib": 0.007542341544578985, "Min_5.0% Prob": 10.394297218322754, "Min_10.0% Prob": 8.362425457347523, "Min_20.0% Prob": 6.388204726305875, "Min_30.0% Prob": 4.959858493371443, "Min_40.0% Prob": 3.8876622407273813, "Min_50.0% Prob": 3.1612602629444817, "Min_60.0% Prob": 2.6485851474219197}}
{"hexsha": "6b441b738c1e2efec58e60abe442cbe344419f54", "ext": "py", "lang": "Python", "content": "def avro_schema(avsc: Union[dict, str]) -> dict:\n    \"\"\" Create avro schema from dictionary or filepath string \"\"\"\n    logging.info('Parsing avro schema')\n    if isinstance(avsc, dict):\n        avsc = avro.schema.parse_schema(avsc)\n    elif isinstance(avsc, str):\n        avsc = avro.schema.load_schema(avsc)\n    return avsc", "fn_id": 3, "class_fn": false, "repo": "staylorx/cupyopt", "file": "src/cupyopt/nuggets/schema.py", "last_update_at": "2021-03-12T20:46:34+00:00", "pred": {"ppl": 3.510141611099243, "ppl_lower": 4.04880952835083, "ppl/lowercase_ppl": -1.1136987114189631, "ppl/zlib": 0.0070542493354295195, "Min_5.0% Prob": 9.60805881023407, "Min_10.0% Prob": 7.475895086924235, "Min_20.0% Prob": 5.385086046324836, "Min_30.0% Prob": 4.097089687983195, "Min_40.0% Prob": 3.1341065615415573, "Min_50.0% Prob": 2.5318163630107176, "Min_60.0% Prob": 2.121719359301708}}
{"hexsha": "f4365a09ba1797e4fafc8682981c9fb04235a5c1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('space_group', ['P2', 'P3', 'P6', 'R3:h', 'I23'][:])\ndef test_determine_space_group(space_group):\n    sgi = sgtbx.space_group_info(symbol=space_group)\n    sg = sgi.group()\n    cs = sgi.any_compatible_crystal_symmetry(volume=10000)\n    cs = cs.best_cell()\n    cs = cs.minimum_cell()\n    intensities = generate_fake_intensities(cs)\n    result = LaueGroupAnalysis([intensities], normalisation=None)\n    print(result)\n    assert result.best_solution.subgroup['best_subsym'].space_group() == sg.build_derived_patterson_group()\n    assert result.best_solution.likelihood > 0.8\n    for score in result.subgroup_scores[1:]:\n        assert score.likelihood < 0.1", "fn_id": 1, "class_fn": false, "repo": "TiankunZhou/dials", "file": "algorithms/symmetry/test_laue_group.py", "last_update_at": "2021-11-18T04:20:54+00:00", "pred": {"ppl": 3.154078960418701, "ppl_lower": 3.6043989658355713, "ppl/lowercase_ppl": -1.1161825673928865, "ppl/zlib": 0.003199711763890184, "Min_5.0% Prob": 8.452014793049205, "Min_10.0% Prob": 6.776501027020541, "Min_20.0% Prob": 4.692308889495002, "Min_30.0% Prob": 3.6066091683373522, "Min_40.0% Prob": 2.8211165365245607, "Min_50.0% Prob": 2.2826160195127, "Min_60.0% Prob": 1.9196519060819237}}
{"hexsha": "3f0ef81e04475f7801a661ee804b85c33aca42e7", "ext": "py", "lang": "Python", "content": "def get_installed_packages():\n    reqs = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze'])\n    installed_packages = [r.decode().split('==')[0] for r in reqs.split()]\n    return installed_packages", "fn_id": 0, "class_fn": false, "repo": "vymana/nlpwiz", "file": "nlpwiz/utils/pkg_utils.py", "last_update_at": "2021-04-20T18:46:52+00:00", "pred": {"ppl": 1.6210429668426514, "ppl_lower": 1.6210429668426514, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0032420788508903714, "Min_5.0% Prob": 7.51556134223938, "Min_10.0% Prob": 4.792230415344238, "Min_20.0% Prob": 2.511317626996474, "Min_30.0% Prob": 1.6441424642963445, "Min_40.0% Prob": 1.2172556032993547, "Min_50.0% Prob": 0.9659359363341254, "Min_60.0% Prob": 0.8239887440628509}}
{"hexsha": "9cb1075cc24b8fabc3e7e078623e7b3ba9e43ca3", "ext": "py", "lang": "Python", "content": "def run_sample_whole_range():\n    log_file = '../results/DBEsti_tpcds_100k_all.log'\n    db = DBEst(dataset='tpcds', logger_file=log_file)\n    table = 'store_sales'\n    file = '../data/tpcDs10k/store_sales.csv'\n    num_of_points = {'store_sales': '2685596178'}\n    tableColumnSets = [['ss_list_price', 'ss_wholesale_cost']]\n    db.init_whole_range(file=file, table=table, columnItems=tableColumnSets, num_of_points=num_of_points)\n    db.clear_training_data()\n    db.logger.logger.info('Total size of DBEst is ' + str(db.get_size()) + ' bytes.')", "fn_id": 7, "class_fn": false, "repo": "qingzma/CRegressionRDBM", "file": "dbest/dbestclient.py", "last_update_at": "2021-08-04T06:39:19+00:00", "pred": {"ppl": 7.633535385131836, "ppl_lower": 8.012896537780762, "ppl/lowercase_ppl": -1.0238622388961833, "ppl/zlib": 0.006514586830800304, "Min_5.0% Prob": 11.423664304945204, "Min_10.0% Prob": 9.194252039256849, "Min_20.0% Prob": 7.415215174357097, "Min_30.0% Prob": 6.1178602404513605, "Min_40.0% Prob": 4.970195996455657, "Min_50.0% Prob": 4.040952976869077, "Min_60.0% Prob": 3.3838037406489}}
{"hexsha": "41a7419f7ecd636b33374eda954170a04c2d6f82", "ext": "py", "lang": "Python", "content": "def get_cert(client, service, file_path, local_path, remote_cert_path, remote_csr_path):\n    \"\"\"\n    Gets the certificate (sign or auth) from the CA.\n\n    NB! This requires the user to have sudo rights without password prompt.\n    :param client: SSHClient object\n    :param service: str - service type: sign-sign (signing certificates) or sign-auth (authentication certificates)\n    :param file_path: str - local CSR path (input)\n    :param local_path: str - local certificate path (output)\n    :param remote_cert_path: str - remote certificate path (output)\n    :param remote_csr_path: str - remote CSR path (input)\n    :return: None\n    \"\"\"\n    client.exec_command('rm temp*')\n    sftp = client.get_client().open_sftp()\n    sftp.put(file_path, remote_csr_path)\n    client.exec_command('cat ' + remote_csr_path + ' | ' + service + ' > ' + remote_cert_path)\n    time.sleep(3)\n    sftp.get(remote_cert_path, local_path)\n    sftp.close()\n    client.close()", "fn_id": 2, "class_fn": false, "repo": "ria-ee/XTM", "file": "common/xrd-ui-tests-python/tests/xroad_ss_delete_hardware_token_certificate/del_management.py", "last_update_at": "2021-11-08T10:30:35+00:00", "pred": {"ppl": 3.3961167335510254, "ppl_lower": 3.7396960258483887, "ppl/lowercase_ppl": -1.078823095858992, "ppl/zlib": 0.0030874561658977345, "Min_5.0% Prob": 9.101515329801119, "Min_10.0% Prob": 7.387130048539904, "Min_20.0% Prob": 5.290010606801069, "Min_30.0% Prob": 3.9345211504418174, "Min_40.0% Prob": 3.0364329158156007, "Min_50.0% Prob": 2.443456908494786, "Min_60.0% Prob": 2.0375201106761343}}
{"hexsha": "2cf7ecb49570612ea3ef106c4439aab58551dc8a", "ext": "py", "lang": "Python", "content": "def render_bokeh_figure(result, state):\n    from bokeh.resources import CDN\n    if 'headers' not in state:\n        state['headers'] = set()\n    state['headers'].update(['<script src=\"%s\" async=\"\"></script>' % CDN.js_files[0], '<link rel=\"stylesheet\" href=\"%s\" type=\"text/css\"/>' % CDN.css_files[0]])\n    from bokeh.embed import components\n    script, div = components(result, CDN)\n    if 'footers' not in state:\n        state['footers'] = list()\n    state['footers'].append(script)\n    return [closing_fence(state['code']), div, state['code']]", "fn_id": 9, "class_fn": false, "repo": "mrocklin/pymarkdown", "file": "pymarkdown/core.py", "last_update_at": "2021-12-25T10:56:53+00:00", "pred": {"ppl": 4.4444050788879395, "ppl_lower": 5.222714900970459, "ppl/lowercase_ppl": -1.1081834034792981, "ppl/zlib": 0.005197372890203058, "Min_5.0% Prob": 11.984855651855469, "Min_10.0% Prob": 9.426963233947754, "Min_20.0% Prob": 6.5569865544637045, "Min_30.0% Prob": 4.9405152797698975, "Min_40.0% Prob": 3.7262601836538707, "Min_50.0% Prob": 3.00028497355647, "Min_60.0% Prob": 2.5075492568078688}}
{"hexsha": "17fa8f3d90779608a0fa731c756323ee0bb02290", "ext": "py", "lang": "Python", "content": "def set_up_outputs(OutputObj):\n    OutputObj.add_output('lead_snps_matching_quality_file', 'lead_snps_matching_quality.tsv', add_root=True)\n    OutputObj.add_output('ldscore_for_expanded_control_sets_quality_file', 'ldscore_matching_quality_for_ldexpanded_sets.tsv', add_root=True)\n    OutputObj.add_output('ldsnp_coverage_by_input_snp', 'ldsnp_coverage_by_input_snp.tsv', add_root=True)\n    return OutputObj", "fn_id": 6, "class_fn": false, "repo": "abraham-abin13/gsel_vec", "file": "gsel_vec/scripts/check_ld_expanded_control_sets.py", "last_update_at": "2021-07-22T23:14:33+00:00", "pred": {"ppl": 5.27642822265625, "ppl_lower": 5.87362003326416, "ppl/lowercase_ppl": -1.0644652262784529, "ppl/zlib": 0.009614158357371741, "Min_5.0% Prob": 10.745516618092855, "Min_10.0% Prob": 9.35584618495061, "Min_20.0% Prob": 7.334614029637089, "Min_30.0% Prob": 5.460442428181811, "Min_40.0% Prob": 4.17313372113488, "Min_50.0% Prob": 3.3448133982070116, "Min_60.0% Prob": 2.7840229010501183}}
{"hexsha": "44f8ed8d741874b6b1b7ec273d09a2bf1be84c93", "ext": "py", "lang": "Python", "content": "def test_schemakey():\n    typemap = {'BareAsset': 'Asset', 'PublishedAsset': 'Asset', 'PublishedDandiset': 'Dandiset'}\n    for val in dir(models):\n        if val in ['BaseModel']:\n            continue\n        klass = getattr(models, val)\n        if isinstance(klass, pydantic.main.ModelMetaclass):\n            assert 'schemaKey' in klass.__fields__\n            if val in typemap:\n                assert typemap[val] == klass.__fields__['schemaKey'].default\n            else:\n                assert val == klass.__fields__['schemaKey'].default", "fn_id": 3, "class_fn": false, "repo": "dandi/dandischema", "file": "dandischema/tests/test_models.py", "last_update_at": "2021-09-19T10:56:25+00:00", "pred": {"ppl": 3.4877333641052246, "ppl_lower": 4.658139705657959, "ppl/lowercase_ppl": -1.23162987975638, "ppl/zlib": 0.005098987997337089, "Min_5.0% Prob": 9.372674147288004, "Min_10.0% Prob": 8.038080056508383, "Min_20.0% Prob": 5.6449953031539915, "Min_30.0% Prob": 4.102173947974255, "Min_40.0% Prob": 3.1192182097949233, "Min_50.0% Prob": 2.4962070854962803, "Min_60.0% Prob": 2.1035361727515824}}
{"hexsha": "2888eb7991df8f7416f4f9dbfa57abb2f621d817", "ext": "py", "lang": "Python", "content": "def plot_mne_circular_connectivity_network(con_mat, labels, perc_conn=0.25, cfc=False, fig=None, subplot=111, fig_title=None, node_name=True, vmax=None, vmin=0, colormap='Blues', facecolor='white', textcolor='black'):\n    from mne.viz import circular_layout, plot_connectivity_circle\n    fig_title = '' if fig_title is None else fig_title\n    node_colors = [label.color for label in labels]\n    label_names = [label.name for label in labels]\n    lh_labels = [name for name in label_names if name.endswith('lh')]\n    rh_labels = [name for name in label_names if name.endswith('rh')]\n    labels_network_sorted, idx_lbl_sort = rearrange_labels_network(labels)\n    label_names_sorted = [label_names[ii] for ii in idx_lbl_sort]\n    lh_labels = [name[:-3] for name in label_names_sorted if name.endswith('lh')]\n    rh_labels = [name[:-3] for name in label_names_sorted if name.endswith('rh')]\n    label_names = [name[:-3] for name in label_names]\n    node_order = lh_labels[::-1] + rh_labels\n    node_angles = circular_layout(label_names, node_order, start_pos=90, group_boundaries=[0, len(label_names) // 2])\n    if not node_name:\n        label_names = [''] * len(label_names)\n    else:\n        label_names = [label.name[13:-3] for label in labels]\n    if perc_conn < 1:\n        n_lines = int(np.prod(con_mat.shape) / 2 * perc_conn)\n    else:\n        n_lines = None\n    if fig is None:\n        fig = plt.figure(num=None, figsize=(8, 8), facecolor='black')\n    if cfc:\n        return plot_connectivity_circle_cfc(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)\n    else:\n        plot_connectivity_circle(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)", "fn_id": 3, "class_fn": false, "repo": "harmonic-minimization/harmoni_manuscript_codes", "file": "tools_connectivity_plot.py", "last_update_at": "2021-12-16T08:00:15+00:00", "pred": {"ppl": 2.1185312271118164, "ppl_lower": 2.2218616008758545, "ppl/lowercase_ppl": -1.0634353420510632, "ppl/zlib": 0.0011916238590078604, "Min_5.0% Prob": 7.5491660833358765, "Min_10.0% Prob": 5.60607647523284, "Min_20.0% Prob": 3.5439276611432433, "Min_30.0% Prob": 2.486722303011144, "Min_40.0% Prob": 1.879838211418246, "Min_50.0% Prob": 1.5010249388833585, "Min_60.0% Prob": 1.2518039144696547}}
{"hexsha": "27b7373c43ce0501e65b8ff161bfcf8803e53e2c", "ext": "py", "lang": "Python", "content": "def showmesh(node, elem, **kwargs):\n    triangulation = tri.Triangulation(node[:, 0], node[:, 1], elem)\n    markersize = 3000 / len(node)\n    if kwargs.items():\n        h = plt.triplot(triangulation, 'b-h', **kwargs)\n    else:\n        h = plt.triplot(triangulation, 'b-h', linewidth=0.5, alpha=0.5, markersize=markersize)\n    return h", "fn_id": 0, "class_fn": false, "repo": "scaomath/torch-fem", "file": "mesh/utils.py", "last_update_at": "2021-11-14T04:02:54+00:00", "pred": {"ppl": 3.124166488647461, "ppl_lower": 3.457777738571167, "ppl/lowercase_ppl": -1.089063798362582, "ppl/zlib": 0.00629374322640043, "Min_5.0% Prob": 9.813068389892578, "Min_10.0% Prob": 7.31907506422563, "Min_20.0% Prob": 5.015250720761039, "Min_30.0% Prob": 3.6699886129182926, "Min_40.0% Prob": 2.8635807355244953, "Min_50.0% Prob": 2.2755269111836687, "Min_60.0% Prob": 1.9091852338135462}}
{"hexsha": "6e9344b369513894bde3339419e2b7d6be02f344", "ext": "py", "lang": "Python", "content": "def load_character_json(path):\n    with open(path, 'r') as f:\n        raw = f.read()\n        raw = raw.replace('inf,', '999999999,')\n        logging.info('Returning python object')\n        return json.loads(raw)", "fn_id": 1, "class_fn": false, "repo": "trainb0y1/PyMultibound", "file": "editor.py", "last_update_at": "2021-09-18T17:59:47+00:00", "pred": {"ppl": 5.17548942565918, "ppl_lower": 5.236325263977051, "ppl/lowercase_ppl": -1.0071085930290313, "ppl/zlib": 0.011259821299219888, "Min_5.0% Prob": 11.00389575958252, "Min_10.0% Prob": 9.604755401611328, "Min_20.0% Prob": 7.119837925984309, "Min_30.0% Prob": 5.38024123718864, "Min_40.0% Prob": 4.123072927960982, "Min_50.0% Prob": 3.272190428028504, "Min_60.0% Prob": 2.7762739036518793}}
{"hexsha": "58199be75c2f936778ed896013450ada42119647", "ext": "py", "lang": "Python", "content": "def _setup(dataset_dir, label_types=None, classes=None, attrs=None, seed=None, download=False):\n    did_download = False\n    _label_types = _parse_label_types(label_types)\n    if etau.is_str(classes):\n        classes = [classes]\n    if etau.is_str(attrs):\n        attrs = [attrs]\n    if seed is not None:\n        random.seed(seed)\n    classes_map, _did_download = _get_classes_map(dataset_dir, download=download)\n    classes_map_rev = {v: k for k, v in classes_map.items()}\n    did_download |= _did_download\n    all_classes = sorted(classes_map.values())\n    if classes is not None:\n        oi_classes = []\n        missing_classes = []\n        filtered_classes = []\n        for c in classes:\n            if c in classes_map_rev:\n                oi_classes.append(classes_map_rev[c])\n                filtered_classes.append(c)\n            else:\n                missing_classes.append(c)\n        classes = filtered_classes\n        if missing_classes:\n            logger.warning('Ignoring invalid classes %s\\nYou can view the available classes via `fiftyone.utils.openimages.get_classes()`', missing_classes)\n    else:\n        oi_classes = None\n    if 'relationships' in _label_types:\n        attrs_map, _did_download = _get_attrs_map(dataset_dir, download=download)\n        attrs_map_rev = {v: k for k, v in attrs_map.items()}\n        did_download |= _did_download\n        all_attrs = sorted(attrs_map.values())\n        if attrs is None:\n            oi_attrs = [attrs_map_rev[a] for a in all_attrs]\n        else:\n            oi_attrs = []\n            missing_attrs = []\n            filtered_attrs = []\n            for a in attrs:\n                if a in attrs_map_rev:\n                    oi_attrs.append(attrs_map_rev[a])\n                    filtered_attrs.append(a)\n                else:\n                    missing_attrs.append(a)\n            attrs = filtered_attrs\n            if missing_attrs:\n                logger.warning('Ignoring invalid attributes %s\\nYou can view the available attributes via `fiftyone.utils.openimages.get_attributes()`', missing_attrs)\n    else:\n        attrs = None\n        attrs_map = None\n        oi_attrs = None\n        all_attrs = None\n    if 'segmentations' in _label_types:\n        seg_classes, _did_download = _get_seg_classes(dataset_dir, classes_map=classes_map, download=download)\n        did_download |= _did_download\n    else:\n        seg_classes = None\n    return (classes_map, all_classes, classes, oi_classes, attrs_map, all_attrs, attrs, oi_attrs, seg_classes, did_download)", "fn_id": 4, "class_fn": false, "repo": "Fariborzzz/fiftyone", "file": "fiftyone/utils/openimages.py", "last_update_at": "2021-12-17T10:11:37+00:00", "pred": {"ppl": 1.909277081489563, "ppl_lower": 1.9625306129455566, "ppl/lowercase_ppl": -1.042537560961209, "ppl/zlib": 0.0009710580766454675, "Min_5.0% Prob": 7.700734629775539, "Min_10.0% Prob": 5.346952461484653, "Min_20.0% Prob": 3.1678369652424285, "Min_30.0% Prob": 2.1587311492964107, "Min_40.0% Prob": 1.617391794904388, "Min_50.0% Prob": 1.2953020936606445, "Min_60.0% Prob": 1.0800029378804732}}
{"hexsha": "55c73198735716cc50f10f1745bd41508e18f45d", "ext": "py", "lang": "Python", "content": "def count_verbose_skip(func):\n\n    def decorator(obj, *args, **kw):\n        fname = check_parameters(func, args, kw)\n        if obj.is_truncated() or obj.is_canceled() or obj.is_aborted():\n            return 0\n        if obj.testing_syntax:\n            func(obj, *args, calc_time=True, **kw)\n            return 0\n        obj.debug('{} {} {}'.format(fname, args, kw))\n        return func(obj, *args, **kw)\n    return decorator", "fn_id": 0, "class_fn": false, "repo": "ael-noblegas/pychron", "file": "pychron/pyscripts/decorators.py", "last_update_at": "2021-08-17T15:38:24+00:00", "pred": {"ppl": 6.471816062927246, "ppl_lower": 7.0379252433776855, "ppl/lowercase_ppl": -1.0449042033621816, "ppl/zlib": 0.008808758296767116, "Min_5.0% Prob": 12.812451362609863, "Min_10.0% Prob": 10.36440340677897, "Min_20.0% Prob": 7.566841870546341, "Min_30.0% Prob": 5.810240490569009, "Min_40.0% Prob": 4.594122466320793, "Min_50.0% Prob": 3.733503883332014, "Min_60.0% Prob": 3.1303776021425924}}
{"hexsha": "ae4b7326c41a7e04e0d0c89af9536dff4cc979a0", "ext": "py", "lang": "Python", "content": "def process_ccdlab(output=None, time_list=None, XY_integers=None, XY_fractions=None, flat_list=None, framecount_per_sec=framecount_per_sec):\n    \"\"\"Generate a Curvit compatible events list from CCDLAB files.\n\n    Parameters\n    ----------\n    output : file path\n        The name of the output events list FITS file.\n        \n    time_list : file path\n        The name of the CCDLAB time list FITS file\n        \n    XY_integers : file path\n        The name of the CCDLAB XY integers FITS file\n        \n    XY_fractions : file path\n        The name of the CCDLAB XY fractions FITS file\n        \n    flat_list : file path\n        The name of the CCDLAB flat list FITS file\n        \n    framecount_per_sec : float, optional\n        The framerate of the observation, with a default value of 28.7185\n        frames per second for 512 x 512 window mode. \n        The most accurate way to get the framerate would be to take the value \n        of (``1 / INT_TIME``). \n        ``INT_TIME`` value can be found from the corresponding image header. \n        Approximate values of framerate for different window modes of UVIT \n        are given in the table below.\n\n        +---------------+---------------------+\n        | window mode   | frames per second   |\n        +===============+=====================+\n        | 512 x 512     | 28.7                |\n        +---------------+---------------------+\n        | 350 x 350     | 61                  |\n        +---------------+---------------------+\n        | 300 x 300     | 82                  |\n        +---------------+---------------------+\n        | 250 x 250     | 115                 |\n        +---------------+---------------------+\n        | 200 x 200     | 180                 |\n        +---------------+---------------------+\n        | 150 x 150     | 300                 |\n        +---------------+---------------------+\n        | 100 x 100     | 640                 |\n        +---------------+---------------------+ \n        \n\n    Note\n    ---- \n    It is essential to set the correct value of the framerate. \n    Most UVIT observations are carried out in 512 x 512 window mode.\n            \n    Warning\n    -------\n    This function is new; please report if you find any bugs.\n        \n    Example\n    --------\n    >>> import curvit\n    >>> process_ccdlab(output = 'output_events_list.fits',\n    ...                time_list = 'sample_TimeList.fits', \n    ...                XY_integers = 'sample_XYInts_List.fits',\n    ...                XY_fractions = 'sample_XYFrac_List.fits',\n    ...                flat_list = 'sample_FlatList.fits',\n    ...                framecount_per_sec = 28.7185)\n    \n    The above script will generate a FITS table called ``output_events_list.fits``.\n    You may then use it as input to ``curve`` or ``makecurves``. \n    \"\"\"\n    time = fits.open(time_list)[0].data / 1000\n    XYFrac = fits.open(XY_fractions)[0].data\n    XYInts = fits.open(XY_integers)[0].data\n    weight = fits.open(flat_list)[0].data\n    photons = weight * framecount_per_sec\n    fx = CCDLAB_to_4k(XYInts[:, 0], XYFrac[:, 0])\n    fy = CCDLAB_to_4k(XYInts[:, 1], XYFrac[:, 1])\n    col1 = fits.Column(name='MJD_L2', format='D', array=time)\n    col2 = fits.Column(name='Fx', format='D', array=fx)\n    col3 = fits.Column(name='Fy', format='D', array=fy)\n    col4 = fits.Column(name='EFFECTIVE_NUM_PHOTONS', format='D', array=photons)\n    cols = fits.ColDefs([col1, col2, col3, col4])\n    tbhdu = fits.BinTableHDU.from_columns(cols)\n    tbhdu.writeto(output, overwrite=True)\n    return", "fn_id": 14, "class_fn": false, "repo": "prajwel/curvit", "file": "curvit/curvit.py", "last_update_at": "2021-11-15T12:01:29+00:00", "pred": {"ppl": 3.253474235534668, "ppl_lower": 3.5359981060028076, "ppl/lowercase_ppl": -1.0705861956657472, "ppl/zlib": 0.0010375755680931444, "Min_5.0% Prob": 9.96599880177924, "Min_10.0% Prob": 7.931966365011115, "Min_20.0% Prob": 5.355283832674876, "Min_30.0% Prob": 3.8621209799620333, "Min_40.0% Prob": 2.94770814622728, "Min_50.0% Prob": 2.3612459967990316, "Min_60.0% Prob": 1.966792165319588}}
{"hexsha": "7d9f104ac0e3008ea503327f64672715cc84a452", "ext": "py", "lang": "Python", "content": "def encode_routing_info(r_tags):\n    result = bitstring.BitArray()\n    for route in r_tags:\n        result.append(bitstring.pack('uint:8', len(route)))\n        for step in route:\n            pubkey, channel, feebase, feerate, cltv = step\n            result.append(bitstring.BitArray(pubkey) + bitstring.BitArray(channel) + bitstring.pack('intbe:32', feebase) + bitstring.pack('intbe:32', feerate) + bitstring.pack('intbe:16', cltv))\n    return result.tobytes()", "fn_id": 0, "class_fn": false, "repo": "RonSherfey/electrum", "file": "electrum/trampoline.py", "last_update_at": "2021-04-22T07:51:24+00:00", "pred": {"ppl": 2.2703959941864014, "ppl_lower": 2.512298107147217, "ppl/lowercase_ppl": -1.1234747549910096, "ppl/zlib": 0.0037960845511916287, "Min_5.0% Prob": 9.59846830368042, "Min_10.0% Prob": 6.497525300298419, "Min_20.0% Prob": 3.861740489091192, "Min_30.0% Prob": 2.7295370286419276, "Min_40.0% Prob": 2.043651389578978, "Min_50.0% Prob": 1.6480315269403893, "Min_60.0% Prob": 1.378823996050393}}
{"hexsha": "a016e584bf0e1d2da7b3d8766cb1e7cb07b0e46c", "ext": "py", "lang": "Python", "content": "def preprocess(paragraph):\n    result = []\n    sentences = tokenizer.tokenize(paragraph)\n    for sentence in sentences:\n        words = nltk.regexp_tokenize(sentence, pattern)\n        temp = []\n        for word in words:\n            toDeal = []\n            if camelCase1.match(word) or camelCase2.match(word):\n                toDeal = splitCode(word)\n            elif upperExtCase.match(word):\n                toDeal = splitFinalExt(word)\n            else:\n                toDeal.append(word)\n            for deal in toDeal:\n                if not isDelete(deal.lower()):\n                    temp.append(stemmer.stem(deal))\n        result.append(temp)\n    return result", "fn_id": 1, "class_fn": false, "repo": "anonym-user-1/ICSME2021", "file": "preprocessor.py", "last_update_at": "2021-07-01T17:13:10+00:00", "pred": {"ppl": 4.5121965408325195, "ppl_lower": 4.7072296142578125, "ppl/lowercase_ppl": -1.0280833004593941, "ppl/zlib": 0.0055193555781272614, "Min_5.0% Prob": 12.681386130196708, "Min_10.0% Prob": 10.93363390650068, "Min_20.0% Prob": 7.125803162311685, "Min_30.0% Prob": 4.997699824246493, "Min_40.0% Prob": 3.7865070259924662, "Min_50.0% Prob": 3.0311734567119464, "Min_60.0% Prob": 2.522044619011661}}
{"hexsha": "225b550790ae56458e3be71c37a81107f822f14e", "ext": "py", "lang": "Python", "content": "def find_boost(self):\n    global boost_pos\n    boost_pos = pyAG.locateCenterOnScreen('images/{}.png'.format(self))\n    if boost_pos == None:\n        print('No', self.replace('_', ' '), 'found')\n        return False\n    else:\n        return True", "fn_id": 7, "class_fn": false, "repo": "nebelorz/NST", "file": "NST v1.3 (source)/functions.py", "last_update_at": "2021-11-30T22:09:13+00:00", "pred": {"ppl": 9.142910957336426, "ppl_lower": 12.018327713012695, "ppl/lowercase_ppl": -1.1235682742679116, "ppl/zlib": 0.013172492977653024, "Min_5.0% Prob": 13.716374715169271, "Min_10.0% Prob": 11.381478786468506, "Min_20.0% Prob": 8.333522393153263, "Min_30.0% Prob": 6.714778486051057, "Min_40.0% Prob": 5.302278837332358, "Min_50.0% Prob": 4.4063805639743805, "Min_60.0% Prob": 3.659727543974534}}
{"hexsha": "63b326f4f249f15f3d820d4b7228b3b70a34e6a6", "ext": "py", "lang": "Python", "content": "def write_file(filename, data):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w+') as f:\n        print('writing file %s' % filename)\n        f.write(data)", "fn_id": 0, "class_fn": false, "repo": "ahmednofal/DFFRAM", "file": "openlane/rtl/RTL_openlane_flow.py", "last_update_at": "2021-11-08T09:13:45+00:00", "pred": {"ppl": 2.4170291423797607, "ppl_lower": 3.184880256652832, "ppl/lowercase_ppl": -1.3125929661093885, "ppl/zlib": 0.00658611312612949, "Min_5.0% Prob": 8.24797534942627, "Min_10.0% Prob": 7.231469821929932, "Min_20.0% Prob": 4.382322463122281, "Min_30.0% Prob": 2.9439781277495274, "Min_40.0% Prob": 2.2831660873171957, "Min_50.0% Prob": 1.7957213955066567, "Min_60.0% Prob": 1.479342783582123}}
{"hexsha": "67b6579ce4e0d25dfadfeb81d73e475c2f423051", "ext": "py", "lang": "Python", "content": "def millify(n):\n    n = float(n)\n    millidx = max(0, min(len(millnames) - 1, int(math.floor(0 if n == 0 else math.log10(abs(n)) / 3))))\n    return '{:.0f}{}'.format(n / 10 ** (3 * millidx), millnames[millidx])", "fn_id": 0, "class_fn": false, "repo": "ZhiruiFeng/CarsMemory", "file": "web/app.py", "last_update_at": "2021-08-13T11:55:56+00:00", "pred": {"ppl": 1.5175788402557373, "ppl_lower": 1.5175788402557373, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002691072236399848, "Min_5.0% Prob": 6.636058032512665, "Min_10.0% Prob": 4.080425381660461, "Min_20.0% Prob": 2.0775553071323563, "Min_30.0% Prob": 1.4274258521944285, "Min_40.0% Prob": 1.053881445160026, "Min_50.0% Prob": 0.8341264956452082, "Min_60.0% Prob": 0.7033470628909223}}
{"hexsha": "e3f7b9dd2486d6d82391b6ab2cce6e07c345cb5c", "ext": "py", "lang": "Python", "content": "def uninitializePlugin(mobject):\n    mplugin = OpenMayaMPx.MFnPlugin(mobject)\n    try:\n        mplugin.deregisterNode(spSimpleSpringNodeId)\n    except:\n        sys.stderr.write('Failed to deregister node: %s' % kPluginNodeTypeName)\n        raise", "fn_id": 2, "class_fn": false, "repo": "leegoonz/Maya-devkit", "file": "osx/devkit/plug-ins/scripted/simpleSpring.py", "last_update_at": "2021-12-07T07:29:19+00:00", "pred": {"ppl": 2.2927017211914062, "ppl_lower": 12.976099967956543, "ppl/lowercase_ppl": -3.089084859953253, "ppl/zlib": 0.0050286722004426, "Min_5.0% Prob": 8.277559598286947, "Min_10.0% Prob": 7.10779333114624, "Min_20.0% Prob": 4.162880418392328, "Min_30.0% Prob": 2.760303957760334, "Min_40.0% Prob": 2.131803882523225, "Min_50.0% Prob": 1.6834170688225916, "Min_60.0% Prob": 1.3895207743829814}}
{"hexsha": "67782e299b60e3d6714308f0cda66ce9bb82d1a5", "ext": "py", "lang": "Python", "content": "def get_depths(flows, x, h, roughness=0.01, slope=0.001, conv=1.0, dd=0.0001, verbose=False):\n    if isinstance(flows, float):\n        flows = np.array([flows], dtype=float)\n    if isinstance(roughness, float):\n        roughness = np.ones(x.shape, dtype=float) * roughness\n    depths = np.zeros(flows.shape, dtype=float)\n    for idx, q in enumerate(flows):\n        depths[idx] = qtodepth(x, h, q, roughness=roughness, slope=slope, conv=conv, dd=dd, verbose=False)\n    return depths", "fn_id": 7, "class_fn": false, "repo": "scharlton2/modflow6", "file": "autotest/scripts/cross_section_functions.py", "last_update_at": "2021-10-08T00:56:20+00:00", "pred": {"ppl": 3.2515203952789307, "ppl_lower": 3.6284539699554443, "ppl/lowercase_ppl": -1.0930216617792194, "ppl/zlib": 0.005038985901208557, "Min_5.0% Prob": 9.35461437702179, "Min_10.0% Prob": 7.381566256284714, "Min_20.0% Prob": 5.067858163267374, "Min_30.0% Prob": 3.7218521930733504, "Min_40.0% Prob": 2.9146064923359796, "Min_50.0% Prob": 2.3429167585947166, "Min_60.0% Prob": 1.969309654143848}}
{"hexsha": "6a706ba112e6e0c7b57c1e46bd9b0418402db376", "ext": "pyde", "lang": "Python", "content": "def draw():\n    loadPixels()\n    x = 4.0\n    y = 0.0\n    for i in range(1, 120000, 1):\n        x1 = b * y + f(x)\n        y = -x + f(x1)\n        x = x1\n        pixels[350 + int(x * 26) + (280 - int(y * 26)) * width] = color(i % 255, 100, 100)\n    updatePixels()", "fn_id": 1, "class_fn": false, "repo": "kantel/processingpy", "file": "sketches/mira/mira.pyde", "last_update_at": "2021-08-18T19:55:15+00:00", "pred": {"ppl": 4.234523773193359, "ppl_lower": 4.610927581787109, "ppl/lowercase_ppl": -1.0590035991970852, "ppl/zlib": 0.00848982865606772, "Min_5.0% Prob": 8.744747559229532, "Min_10.0% Prob": 7.14828085899353, "Min_20.0% Prob": 5.26971157391866, "Min_30.0% Prob": 4.1620406276649895, "Min_40.0% Prob": 3.4018829647375615, "Min_50.0% Prob": 2.848551574300547, "Min_60.0% Prob": 2.4143574729765933}}
{"hexsha": "704ba9392622d555589cf12d7af04a6f1811b620", "ext": "py", "lang": "Python", "content": "def energy_plot(scenarios, color_dict):\n    \"\"\"\n    \"\"\"\n    layout = go.Layout(barmode='relative', legend_orientation='h', title='Aggregated supply and demand', paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', yaxis=dict(title='Energy in {}'.format('TWh'), titlefont=dict(size=16, color='rgb(107, 107, 107)'), tickfont=dict(size=14, color='rgb(107, 107, 107)')))\n    data = []\n    for idx, row in scenarios.T.iteritems():\n        if '-cos' in idx:\n            legend = False\n        else:\n            legend = True\n        data.append(go.Bar(x=row.index, y=row.values, text=[v.round(1) if v > 20 or v < -20 else None for v in row.values], hovertext=[', '.join([str(v.round(2)), idx.replace('-cos', '')]) for v in row.values], hoverinfo='text', textposition='auto', showlegend=legend, name=idx, marker=dict(color=color_dict.get(idx.replace('-cos', ''), 'gray'))))\n    return {'data': data, 'layout': layout}", "fn_id": 3, "class_fn": false, "repo": "znes/angus-scenarios", "file": "documentation/plotly_plots.py", "last_update_at": "2021-06-02T01:43:57+00:00", "pred": {"ppl": 2.5709314346313477, "ppl_lower": 3.1197338104248047, "ppl/lowercase_ppl": -1.2048987879844801, "ppl/zlib": 0.001975456609149186, "Min_5.0% Prob": 7.797897752126058, "Min_10.0% Prob": 6.0162382279672935, "Min_20.0% Prob": 4.191286450432193, "Min_30.0% Prob": 3.0619869847451486, "Min_40.0% Prob": 2.3563547135000267, "Min_50.0% Prob": 1.8848390656953247, "Min_60.0% Prob": 1.5749147646652066}}
{"hexsha": "bb6e599aba13747a581a01c8843fac9626122356", "ext": "py", "lang": "Python", "content": "def show_image_series(image_series: ImageSeries, neurodata_vis_spec: dict):\n    if len(image_series.data.shape) == 3:\n        return show_grayscale_image_series(image_series, neurodata_vis_spec)\n\n    def show_image(index=0, mode='rgb'):\n        fig, ax = plt.subplots(subplot_kw={'xticks': [], 'yticks': []})\n        image = image_series.data[index]\n        if mode == 'bgr':\n            image = image[:, :, ::-1]\n        ax.imshow(image.transpose([1, 0, 2]), cmap='gray', aspect='auto')\n        fig.show()\n        return fig2widget(fig)\n    slider = widgets.IntSlider(value=0, min=0, max=image_series.data.shape[0] - 1, orientation='horizontal', continuous_update=False, description='index')\n    mode = widgets.Dropdown(options=('rgb', 'bgr'), layout=Layout(width='200px'), description='mode')\n    controls = {'index': slider, 'mode': mode}\n    out_fig = widgets.interactive_output(show_image, controls)\n    vbox = widgets.VBox(children=[out_fig, slider, mode])\n    return vbox", "fn_id": 0, "class_fn": false, "repo": "NeurodataWithoutBorders/nwb-jupyter-widgets", "file": "nwbwidgets/image.py", "last_update_at": "2021-11-16T11:50:33+00:00", "pred": {"ppl": 2.4243996143341064, "ppl_lower": 2.9356274604797363, "ppl/lowercase_ppl": -1.216057791169339, "ppl/zlib": 0.0018488181879293092, "Min_5.0% Prob": 7.7616947037833075, "Min_10.0% Prob": 5.922755586689916, "Min_20.0% Prob": 4.0721636846147735, "Min_30.0% Prob": 2.8846478506245394, "Min_40.0% Prob": 2.2095354647081122, "Min_50.0% Prob": 1.7684814048436832, "Min_60.0% Prob": 1.4789926046452655}}
{"hexsha": "ca0dd379bf0cfd2ef3ea5b0e3ce3a98b03b1d3f8", "ext": "py", "lang": "Python", "content": "@api.route('/send_code/<email>', methods=['POST'])\n@cross_domain\ndef send_code(email):\n    \"\"\"\n    This endpoint generates a unique code that will be used to allow\n    the user to change his/her password. The unique code is send to\n    the specified email address.\n    \"\"\"\n    from zeeguu.core.emailer.password_reset import send_password_reset_email\n    try:\n        User.find(email)\n    except sqlalchemy.orm.exc.NoResultFound:\n        return bad_request('Email unknown')\n    code = UniqueCode(email)\n    db_session.add(code)\n    db_session.commit()\n    send_password_reset_email(email, code)\n    return 'OK'", "fn_id": 2, "class_fn": false, "repo": "zeeguu-ecosystem/zeeguu-api", "file": "zeeguu/api/api/accounts.py", "last_update_at": "2021-05-26T15:24:49+00:00", "pred": {"ppl": 3.2737412452697754, "ppl_lower": 4.735255718231201, "ppl/lowercase_ppl": -1.3112335610610248, "ppl/zlib": 0.0034778106821567313, "Min_5.0% Prob": 7.516344845294952, "Min_10.0% Prob": 6.082070767879486, "Min_20.0% Prob": 4.6825640723109245, "Min_30.0% Prob": 3.6673357312877974, "Min_40.0% Prob": 2.9252585829235613, "Min_50.0% Prob": 2.359805571904153, "Min_60.0% Prob": 1.9786524198104425}}
{"hexsha": "861044681bbdc6a4088c31b9167d9eb267f0536d", "ext": "py", "lang": "Python", "content": "@app.route('/rest/<jobname>/<jobid>/executionduration')\ndef get_executionduration(jobname, jobid):\n    \"\"\"Get the maximum execution duration of job <jobid>\n\n    Returns:\n        200 OK: text/plain: integer number of seconds (on success)\n        404 Not Found: Job not found (on NotFoundWarning)\n        500 Internal Server Error (on error)\n    \"\"\"\n    user = set_user()\n    try:\n        logger.info('{} {}'.format(jobname, jobid))\n        job = Job(jobname, jobid, user)\n        response.content_type = 'text/plain; charset=UTF-8'\n        return str(job.execution_duration)\n    except JobAccessDenied as e:\n        abort_403(str(e))\n    except storage.NotFoundWarning as e:\n        abort_404(str(e))\n    except:\n        abort_500_except()", "fn_id": 45, "class_fn": false, "repo": "ParisAstronomicalDataCentre/OPUS", "file": "uws_server/uws_server.py", "last_update_at": "2021-01-06T08:54:54+00:00", "pred": {"ppl": 5.25541353225708, "ppl_lower": 5.842683792114258, "ppl/lowercase_ppl": -1.0638426971922421, "ppl/zlib": 0.004377991277931213, "Min_5.0% Prob": 10.821319770812988, "Min_10.0% Prob": 9.134069681167603, "Min_20.0% Prob": 6.959038152927306, "Min_30.0% Prob": 5.2766708308650605, "Min_40.0% Prob": 4.097354432186449, "Min_50.0% Prob": 3.317116405026844, "Min_60.0% Prob": 2.770894057661295}}
{"hexsha": "2c2b3fa036cbe03c2fdfc1bafeba98b37b90d378", "ext": "py", "lang": "Python", "content": "def bbox_sample(region, metric):\n    \"\"\"Extract image that lies within region bounding box\n\n    Parameters\n    ----------\n    region: skimage.RegionProperties\n        Region defining pixels within image to analyse\n    metric: array-like\n        Metric for all pixels in image to be analysed\n    \"\"\"\n    indices = bbox_indices(region)\n    return metric[indices]", "fn_id": 1, "class_fn": false, "repo": "franklongford/ImageCol", "file": "pyfibre/model/tools/utilities.py", "last_update_at": "2021-07-26T05:53:01+00:00", "pred": {"ppl": 12.322633743286133, "ppl_lower": 14.76159381866455, "ppl/lowercase_ppl": -1.071907450290779, "ppl/zlib": 0.012310969181971942, "Min_5.0% Prob": 12.114623387654623, "Min_10.0% Prob": 10.413151741027832, "Min_20.0% Prob": 8.623748881476265, "Min_30.0% Prob": 7.160618180320377, "Min_40.0% Prob": 5.8452333540752015, "Min_50.0% Prob": 4.950102132227686, "Min_60.0% Prob": 4.223478408746941}}
{"hexsha": "2b6b31ac1b8a4e33d35999ea6fa8cea0493f8cb2", "ext": "py", "lang": "Python", "content": "@njit(fastmath=False, cache=True)\ndef get_mean_curvature(traj_list, num_traj):\n    out = np.empty((num_traj,))\n    for i in range(num_traj):\n        out[i] = np.mean(np.abs(traj_list[i * trajectory_generator.NUM_STEPS:(i + 1) * trajectory_generator.NUM_STEPS, 3]))\n    return out", "fn_id": 9, "class_fn": false, "repo": "travelbureau/f0_icml_code", "file": "Simulator/python/mpc/trajectory_generator_utils.py", "last_update_at": "2021-02-17T20:53:38+00:00", "pred": {"ppl": 3.4599218368530273, "ppl_lower": 3.8728504180908203, "ppl/lowercase_ppl": -1.090831938160495, "ppl/zlib": 0.00674590216472586, "Min_5.0% Prob": 9.987467050552368, "Min_10.0% Prob": 8.298843648698595, "Min_20.0% Prob": 5.532438667196977, "Min_30.0% Prob": 4.064883754171174, "Min_40.0% Prob": 3.128691484530767, "Min_50.0% Prob": 2.5029293079765473, "Min_60.0% Prob": 2.0820631680820707}}
{"hexsha": "5148fe31f1a672fe0541555158917c8256ff125f", "ext": "py", "lang": "Python", "content": "def test_dataframe_barh(dataframe, with_plotting_backend):\n    chart = dataframe.plot.barh()\n    spec = chart.to_dict()\n    assert spec['mark'] == {'type': 'bar', 'orient': 'horizontal'}\n    assert spec['encoding']['y']['field'] == 'index'\n    assert spec['encoding']['x']['field'] == 'value'\n    assert spec['encoding']['color']['field'] == 'column'\n    assert spec['transform'][0]['fold'] == ['x', 'y']", "fn_id": 5, "class_fn": false, "repo": "altair-viz/altair_pandas", "file": "altair_pandas/test_plotting.py", "last_update_at": "2021-12-15T21:34:00+00:00", "pred": {"ppl": 2.8307526111602783, "ppl_lower": 2.8307526111602783, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005026775925790355, "Min_5.0% Prob": 8.805286121368407, "Min_10.0% Prob": 7.176463820717552, "Min_20.0% Prob": 4.640593750910326, "Min_30.0% Prob": 3.3655260440075034, "Min_40.0% Prob": 2.5640242351426017, "Min_50.0% Prob": 2.0823420926130245, "Min_60.0% Prob": 1.7493074481278212}}
{"hexsha": "ac18a96ded8e760d6d2a171c418c6b63db8231ef", "ext": "py", "lang": "Python", "content": "def init_estimators_train(columns, null_value, no_compression=False):\n    if no_compression:\n        res = [NoCompressionEstimatorTrain(columns, null_value)]\n    else:\n        res = [NoCompressionEstimatorTrain(columns, null_value), DictEstimatorTrain(columns, null_value, max_dict_size), RleEstimatorTrain(columns, null_value), ForEstimatorTrain(columns, null_value)]\n    return res", "fn_id": 1, "class_fn": false, "repo": "bogdanghita/whitebox-compression", "file": "evaluation/theoretical_evaluation.py", "last_update_at": "2021-12-28T05:31:03+00:00", "pred": {"ppl": 4.34873104095459, "ppl_lower": 6.313083171844482, "ppl/lowercase_ppl": -1.253584680085284, "ppl/zlib": 0.009734331707420487, "Min_5.0% Prob": 10.26883053779602, "Min_10.0% Prob": 8.74535216225518, "Min_20.0% Prob": 6.430759229158101, "Min_30.0% Prob": 4.814318050598276, "Min_40.0% Prob": 3.728527373389194, "Min_50.0% Prob": 2.966171940943847, "Min_60.0% Prob": 2.4575802677889067}}
{"hexsha": "0629068ef6b33dbfeb46975094295e4a4c07df96", "ext": "py", "lang": "Python", "content": "def which(program):\n    \"\"\"Determines if and where an executable exists on the users path.\n    This code was contributed by Jay at http://stackoverflow.com/a/377028\n    Args:\n        program (str): The name, or path for the program.\n    Returns:\n        The program or executable.\n    \"\"\"\n    import os\n\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n    fpath, fname = os.path.split(program)\n    if fpath and is_exe(program):\n        return program\n    else:\n        for path in os.environ['PATH'].split(os.pathsep):\n            path = path.strip('\"')\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n    return None", "fn_id": 5, "class_fn": false, "repo": "wsmorgan/phonon-enumeration", "file": "phenum/io_utils.py", "last_update_at": "2021-05-30T21:02:08+00:00", "pred": {"ppl": 2.286454200744629, "ppl_lower": 3.1549229621887207, "ppl/lowercase_ppl": -1.3893119405093528, "ppl/zlib": 0.0022782430678417375, "Min_5.0% Prob": 8.743985388014051, "Min_10.0% Prob": 6.531860891141389, "Min_20.0% Prob": 4.069658000499774, "Min_30.0% Prob": 2.789270850990353, "Min_40.0% Prob": 2.0775279809708875, "Min_50.0% Prob": 1.6539484575825592, "Min_60.0% Prob": 1.3853943340135684}}
{"hexsha": "12f9436289446182577ceaab3eda30ea64c2e38b", "ext": "py", "lang": "Python", "content": "def upscale2d_conv2d(x, fmaps, kernel, gain=np.sqrt(2), use_wscale=False):\n    assert kernel >= 1 and kernel % 2 == 1\n    w = get_weight([kernel, kernel, fmaps, x.shape[1].value], gain=gain, use_wscale=use_wscale, fan_in=kernel ** 2 * x.shape[1].value)\n    w = tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')\n    w = tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])\n    w = tf.cast(w, x.dtype)\n    os = [tf.shape(x)[0], fmaps, x.shape[2] * 2, x.shape[3] * 2]\n    return tf.nn.conv2d_transpose(x, w, os, strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')", "fn_id": 7, "class_fn": false, "repo": "zhuxinqimac/stylegan2", "file": "training/vc2_subnets_pggan.py", "last_update_at": "2021-07-04T09:51:28+00:00", "pred": {"ppl": 1.477990746498108, "ppl_lower": 1.6367290019989014, "ppl/lowercase_ppl": -1.2611222674836406, "ppl/zlib": 0.001169711262514045, "Min_5.0% Prob": 5.076317035234892, "Min_10.0% Prob": 3.363313085757769, "Min_20.0% Prob": 1.9218477059442263, "Min_30.0% Prob": 1.3107717824765506, "Min_40.0% Prob": 0.9775514738323788, "Min_50.0% Prob": 0.7841911895444105, "Min_60.0% Prob": 0.6544292624355783}}
{"hexsha": "5306ddb4712ea725043386b81d8c897bbc57d019", "ext": "py", "lang": "Python", "content": "def get_first_pos(vcf):\n    p = {}\n    for line in file_util.gzopen(vcf):\n        line = file_util.decodeb(line)\n        if line[0] != '#':\n            arr = line.split('\\t')\n            print(arr)\n            p['chrom'] = arr[0]\n            p['spos'] = int(arr[1])\n            p['epos'] = int(arr[1])\n            p['str'] = p['chrom'] + ':' + str(p['spos']) + '-' + str(p['epos'])\n    return p", "fn_id": 0, "class_fn": false, "repo": "dbmi-bgm/cgap-annotation-server", "file": "tests/annotviewer.py", "last_update_at": "2021-05-27T14:27:47+00:00", "pred": {"ppl": 2.6171317100524902, "ppl_lower": 2.6171317100524902, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005010827869386357, "Min_5.0% Prob": 9.862330198287964, "Min_10.0% Prob": 7.889585296312968, "Min_20.0% Prob": 4.763802580833435, "Min_30.0% Prob": 3.236929521944962, "Min_40.0% Prob": 2.4279839008608284, "Min_50.0% Prob": 1.9381226579571376, "Min_60.0% Prob": 1.6115931547881865}}
{"hexsha": "427cceb85af895991c1b9f9596f2e1bb0c5b7263", "ext": "py", "lang": "Python", "content": "def deprecated(version, reason):\n\n    def decorator_deprecated(fn):\n\n        @wraps(fn)\n        def wrapper_deprecated(*args, **kwds):\n            warnings.warn(f'Deprecated since {version}. The reason: {reason}', category=DeprecationWarning)\n            return fn(*args, **kwds)\n        return wrapper_deprecated\n    return decorator_deprecated", "fn_id": 16, "class_fn": false, "repo": "Sberbank-Technology/ignite-python-thin-client", "file": "pyignite/utils.py", "last_update_at": "2021-07-16T01:35:39+00:00", "pred": {"ppl": 3.154634952545166, "ppl_lower": 4.2172722816467285, "ppl/lowercase_ppl": -1.2526961724956962, "ppl/zlib": 0.006640883149571202, "Min_5.0% Prob": 9.886167208353678, "Min_10.0% Prob": 7.316277912684849, "Min_20.0% Prob": 4.907951180140177, "Min_30.0% Prob": 3.7251045920632104, "Min_40.0% Prob": 2.846777802705765, "Min_50.0% Prob": 2.327482167732071, "Min_60.0% Prob": 1.9147247454526628}}
{"hexsha": "208074ab27944df3955e997903e9acaee5afdb6b", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef rus_player_json():\n    \"\"\"Expected JSON for rus_player model-fixture\"\"\"\n    return {'name': 'Rus', 'id_': 'PjBYO_8gbf'}", "fn_id": 0, "class_fn": false, "repo": "BenjaminNMitchell/Pyker", "file": "test/encoders/json_fixtures.py", "last_update_at": "2021-04-12T17:18:19+00:00", "pred": {"ppl": 25.70520782470703, "ppl_lower": 25.01576042175293, "ppl/lowercase_ppl": -0.9916260754419256, "ppl/zlib": 0.026183012987631493, "Min_5.0% Prob": 13.481464385986328, "Min_10.0% Prob": 11.922201156616211, "Min_20.0% Prob": 9.475530677371555, "Min_30.0% Prob": 7.852055140904018, "Min_40.0% Prob": 7.0364551941553755, "Min_50.0% Prob": 6.099901572517727, "Min_60.0% Prob": 5.237470316035407}}
{"hexsha": "2c502e5877d8fa61f6c9c0acfe9451fb744aa183", "ext": "py", "lang": "Python", "content": "def create_table(name):\n    name = name.title()\n    name = name.split()\n    name = ''.join(name)\n    with sqlite3.connect('supplies.db') as conn:\n        cur = conn.cursor()\n        cur.execute(f'CREATE TABLE IF NOT EXISTS {name} (Item TEXT, Part Number TEXT, Description TEXT, Vendor TEXT, Price REAL, QOH INT, QNeed INT, Ordering TEXT, Ordered DATE)')", "fn_id": 0, "class_fn": false, "repo": "irondru562/InventoryManagement", "file": "inback.py", "last_update_at": "2021-04-14T18:41:41+00:00", "pred": {"ppl": 4.829351902008057, "ppl_lower": 6.365231990814209, "ppl/lowercase_ppl": -1.1753580043832104, "ppl/zlib": 0.006700903305882685, "Min_5.0% Prob": 9.619675278663635, "Min_10.0% Prob": 7.9179193708631725, "Min_20.0% Prob": 6.017445815236945, "Min_30.0% Prob": 4.84037400994982, "Min_40.0% Prob": 3.8260174519137333, "Min_50.0% Prob": 3.1141128490368524, "Min_60.0% Prob": 2.6441930923284147}}
{"hexsha": "5b2a8ea69b3198b3f678cebb3485c95da3b6d811", "ext": "py", "lang": "Python", "content": "def _graph_from_dict(P, weights=False):\n    G = pairDiGraph()\n    for (a, b), n in P.items():\n        if weights:\n            G.add_edge(a, b, weight=n)\n        else:\n            G.add_edge(a, b)\n    if weights:\n        G.addPd()\n    return G", "fn_id": 2, "class_fn": false, "repo": "jpgil/logdelay", "file": "src/theory202105.py", "last_update_at": "2021-05-28T16:03:39+00:00", "pred": {"ppl": 4.229828357696533, "ppl_lower": 5.263178825378418, "ppl/lowercase_ppl": -1.151559850738995, "ppl/zlib": 0.010301152963272832, "Min_5.0% Prob": 15.964898427327475, "Min_10.0% Prob": 11.204542364392962, "Min_20.0% Prob": 6.902269562085469, "Min_30.0% Prob": 4.878205741229265, "Min_40.0% Prob": 3.6614791330310608, "Min_50.0% Prob": 2.9185055619917617, "Min_60.0% Prob": 2.4235174466083023}}
{"hexsha": "2c730cc2f3073d60e2b37cd3db6bc2590e864582", "ext": "py", "lang": "Python", "content": "def parse_args():\n    parser = argparse.ArgumentParser(description='Train a network with Detectron')\n    parser.add_argument('--cfg', dest='cfg_file', help='Config file for training (and optionally testing)', default=None, type=str)\n    parser.add_argument('--multi-gpu-testing', dest='multi_gpu_testing', help='Use cfg.NUM_GPUS GPUs for inference', action='store_true')\n    parser.add_argument('--skip-test', dest='skip_test', help='Do not test the final model', action='store_true')\n    parser.add_argument('opts', help='See detectron/core/config.py for all options', default=None, nargs=argparse.REMAINDER)\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "994374821/maskrcnn_body25", "file": "tools/train_stage2.py", "last_update_at": "2021-10-12T22:58:13+00:00", "pred": {"ppl": 1.3008990287780762, "ppl_lower": 1.8169997930526733, "ppl/lowercase_ppl": -2.270191956347997, "ppl/zlib": 0.0007368503810873138, "Min_5.0% Prob": 3.9201942814721003, "Min_10.0% Prob": 2.4639184663170264, "Min_20.0% Prob": 1.3166510311838908, "Min_30.0% Prob": 0.8830340599357072, "Min_40.0% Prob": 0.6621298288301671, "Min_50.0% Prob": 0.5287083526876298, "Min_60.0% Prob": 0.4398884172188147}}
{"hexsha": "01415ebda64b25b4823eab1699f9886d6bb0651b", "ext": "py", "lang": "Python", "content": "def get_buildings_in_radius(poly: Polygon, radius: float, excluded_poly: Polygon=None) -> List[Polygon]:\n    \"\"\"\n    Get all buildings within $radius\n    Args:\n        poly: polygon to intersect the buildings in\n        radius: radius from within we will retrieve all buildings\n        excluded_poly: optional polygon to exclude from the nearest\n\n    Returns:\n        A Geoseries with all the polygons of the buildings\n    \"\"\"\n    eng = get_connection('POSTGRES')\n    if excluded_poly is not None:\n        excluded_sql = f\"AND ST_INTERSECTS(way, ST_GEOMFROMTEXT('{excluded_poly.wkt}', 4326))=FALSE\"\n    else:\n        excluded_sql = ''\n    query = f\"\\n        SELECT st_astext(way) as geom FROM (\\n            SELECT way\\n            FROM {OSM_POLYGON_TABLE}\\n            WHERE {BUILDING}\\n                  {excluded_sql}\\n                  AND ST_DWithin(way, ST_GEOMFROMTEXT('{poly.wkt}', 4326), {radius}, true)\\n            ) t\\n        \"\n    df = get_df(query, eng)\n    eng.dispose()\n    gs = [wkt.loads(geom) for geom in df['geom'].unique()]\n    return gs", "fn_id": 3, "class_fn": false, "repo": "jonzarecki/coord2vec", "file": "coord2vec/feature_extraction/osm/osm_utils.py", "last_update_at": "2021-01-25T09:21:17+00:00", "pred": {"ppl": 4.8983988761901855, "ppl_lower": 5.5254316329956055, "ppl/lowercase_ppl": -1.075808634933612, "ppl/zlib": 0.003085259013121798, "Min_5.0% Prob": 10.825698988778251, "Min_10.0% Prob": 8.860014142661258, "Min_20.0% Prob": 6.533748667815636, "Min_30.0% Prob": 5.009629100218587, "Min_40.0% Prob": 3.946572461518748, "Min_50.0% Prob": 3.1694951591222256, "Min_60.0% Prob": 2.650041838229767}}
{"hexsha": "0ea7da24a0926bef44f6a6ab9c0f2b679c6306d1", "ext": "py", "lang": "Python", "content": "def get_corner_loss_lidar(pred_bbox3d, gt_bbox3d):\n    \"\"\"\n    :param pred_bbox3d: (N, 7)\n    :param gt_bbox3d: (N, 7)\n    :return: corner_loss: (N)\n    \"\"\"\n    assert pred_bbox3d.shape[0] == gt_bbox3d.shape[0]\n    pred_box_corners = box_torch_ops.center_to_corner_box3d(pred_bbox3d[:, 0:3], pred_bbox3d[:, 3:6], pred_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_box_corners = box_torch_ops.center_to_corner_box3d(gt_bbox3d[:, 0:3], gt_bbox3d[:, 3:6], gt_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_bbox3d_flip = gt_bbox3d.clone()\n    gt_bbox3d_flip[:, 6] += np.pi\n    gt_box_corners_flip = box_torch_ops.center_to_corner_box3d(gt_bbox3d_flip[:, 0:3], gt_bbox3d_flip[:, 3:6], gt_bbox3d_flip[:, 6], [0.5, 0.5, 0], axis=2)\n    corner_dist = torch.min(torch.norm(pred_box_corners - gt_box_corners, dim=2), torch.norm(pred_box_corners - gt_box_corners_flip, dim=2))\n    corner_loss = huber_loss(corner_dist, delta=1.0)\n    return corner_loss.mean(dim=1)", "fn_id": 2, "class_fn": false, "repo": "xy-guo/mmdetection_kitti", "file": "mmdet/utils/det3d/loss_utils.py", "last_update_at": "2021-12-27T10:59:51+00:00", "pred": {"ppl": 1.2587971687316895, "ppl_lower": 1.2835166454315186, "ppl/lowercase_ppl": -1.0844948607740195, "ppl/zlib": 0.0007283437880543261, "Min_5.0% Prob": 3.842573563257853, "Min_10.0% Prob": 2.2246038778906776, "Min_20.0% Prob": 1.1478990288122612, "Min_30.0% Prob": 0.7715641444816628, "Min_40.0% Prob": 0.5767041766386041, "Min_50.0% Prob": 0.46030699425820887, "Min_60.0% Prob": 0.38449612171882075}}
{"hexsha": "605df9b62c38bf133d0aa401619574d4bb7f6839", "ext": "py", "lang": "Python", "content": "def get_position(fallback=defaults.CURSOR_POS_FALLBACK):\n    \"\"\" Return the current column number of the terminal cursor.\n        Used to figure out if we need to print an extra newline.\n\n        Returns:\n            tuple(int): (x, y) | (,)  - empty, if an error occurred.\n    \"\"\"\n    values = fallback\n    try:\n        with TermStack() as fd:\n            termios.tcflush(fd, termios.TCIFLUSH)\n            tty.setcbreak(fd, termios.TCSANOW)\n            sys.stdout.write(CSI + '6n')\n            sys.stdout.flush()\n            log.debug('about to read get_position response\u2026')\n            resp = _read_until_select(max_bytes=10, end='R')\n    except AttributeError:\n        return values\n    resp = resp.lstrip(CSI)\n    try:\n        values = tuple((int(token) for token in resp.partition(';')[::-2]))\n    except (ValueError, IndexError) as err:\n        log.error('parse error: %s on %r', err, resp)\n    return values", "fn_id": 16, "class_fn": false, "repo": "Dsa-Terminal/Dsa-Terminal", "file": "Python3/Lib/site-packages/console/detection.py", "last_update_at": "2021-04-02T17:14:25+00:00", "pred": {"ppl": 7.408315658569336, "ppl_lower": 9.110189437866211, "ppl/lowercase_ppl": -1.1032607998571393, "ppl/zlib": 0.003981318304043931, "Min_5.0% Prob": 11.934063196182251, "Min_10.0% Prob": 10.137451748053232, "Min_20.0% Prob": 7.996717810630798, "Min_30.0% Prob": 6.186249857079493, "Min_40.0% Prob": 4.909362124413559, "Min_50.0% Prob": 3.974640803014646, "Min_60.0% Prob": 3.341141917296264}}
{"hexsha": "5ee4210df799d29db459911536ee02f9a5a1fd24", "ext": "py", "lang": "Python", "content": "def readlines(file):\n    with open(file) as f:\n        content = f.readlines()\n    return [x.strip() for x in content]", "fn_id": 1, "class_fn": false, "repo": "omidroshani/DeepDIA", "file": "code/deepdetect/py/predict_ensemble.py", "last_update_at": "2021-12-25T20:09:40+00:00", "pred": {"ppl": 2.660045862197876, "ppl_lower": 2.660045862197876, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01063416700079075, "Min_5.0% Prob": 9.334742546081543, "Min_10.0% Prob": 7.376605192820231, "Min_20.0% Prob": 5.080198625723521, "Min_30.0% Prob": 3.561076905992296, "Min_40.0% Prob": 2.4790590942765656, "Min_50.0% Prob": 2.0170136768720113, "Min_60.0% Prob": 1.699079115305243}}
{"hexsha": "12e6a066caf160f30a66f07074f6d4b7810f6f9d", "ext": "py", "lang": "Python", "content": "def motion(pin):\n    print('Bewegung erkannt')\n    with picamera.PiCamera() as camera:\n        for filename in camera.capture_continuous('/home/pi/Desktop/Fotos/{timestamp:%d.%m_%H-%M-%S}Uhr.jpg'):\n            print('Captured %s' % filename)\n            break", "fn_id": 0, "class_fn": false, "repo": "meigrafd/Sample-Code", "file": "PIR_interrupt_pic.py", "last_update_at": "2021-03-31T04:22:25+00:00", "pred": {"ppl": 5.343084812164307, "ppl_lower": 8.420218467712402, "ppl/lowercase_ppl": -1.271411712886342, "ppl/zlib": 0.009058395493836335, "Min_5.0% Prob": 10.368816693623861, "Min_10.0% Prob": 9.015905244009835, "Min_20.0% Prob": 6.676581732432047, "Min_30.0% Prob": 5.283482448621229, "Min_40.0% Prob": 4.124505056937536, "Min_50.0% Prob": 3.386529313350046, "Min_60.0% Prob": 2.7912954330858257}}
{"hexsha": "971e98315817be02de95647ef3faaea39f4b2047", "ext": "py", "lang": "Python", "content": "@export\ndef tlv_pack(*args):\n    if len(args) == 2:\n        tlv = {'type': args[0], 'value': args[1]}\n    else:\n        tlv = args[0]\n    data = ''\n    if tlv['type'] & TLV_META_TYPE_UINT == TLV_META_TYPE_UINT:\n        data = struct.pack('>III', 12, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_QWORD == TLV_META_TYPE_QWORD:\n        data = struct.pack('>IIQ', 16, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_BOOL == TLV_META_TYPE_BOOL:\n        data = struct.pack('>II', 9, tlv['type']) + bytes(chr(int(bool(tlv['value']))), 'UTF-8')\n    else:\n        value = tlv['value']\n        if sys.version_info[0] < 3 and value.__class__.__name__ == 'unicode':\n            value = value.encode('UTF-8')\n        elif not is_bytes(value):\n            value = bytes(value, 'UTF-8')\n        if tlv['type'] & TLV_META_TYPE_STRING == TLV_META_TYPE_STRING:\n            data = struct.pack('>II', 8 + len(value) + 1, tlv['type']) + value + NULL_BYTE\n        elif tlv['type'] & TLV_META_TYPE_RAW == TLV_META_TYPE_RAW:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_GROUP == TLV_META_TYPE_GROUP:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_COMPLEX == TLV_META_TYPE_COMPLEX:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n    return data", "fn_id": 6, "class_fn": false, "repo": "madhavarao-yejarla/VoIP", "file": "data/meterpreter/meterpreter.py", "last_update_at": "2021-04-07T18:00:44+00:00", "pred": {"ppl": 1.5352332592010498, "ppl_lower": 1.6286022663116455, "ppl/lowercase_ppl": -1.1377239219311457, "ppl/zlib": 0.001015834904942922, "Min_5.0% Prob": 5.716965128978093, "Min_10.0% Prob": 3.919942016504249, "Min_20.0% Prob": 2.132817057949124, "Min_30.0% Prob": 1.4309417124925143, "Min_40.0% Prob": 1.0725412062233566, "Min_50.0% Prob": 0.8573233884204989, "Min_60.0% Prob": 0.7163808231017179}}
{"hexsha": "83e9ee54f5b91fb9bed39ac8b9254bc4e100e0bc", "ext": "py", "lang": "Python", "content": "def vector_valued_monomial_basis_fn(nu, i, n):\n    \"\"\"\n    Generate a vector valued monomial basis polynomial :math:`p_{\\\\nu, i}` in the space\n    :math:`\\\\mathcal{P}_r(\\\\mathbb{R}^m, \\\\mathbb{R}^n)`, where :math:`r = |\\\\nu|` and m is equal to the length of nu.\n\n    The vector valued basis polynomial is generated by specifying a scalar valued basis polynomial and the component\n    of the vector valued basis polynomial that should be equal to the scalar valued basis polynomial. All other\n    components of the vector valued basis polynomial will be zero, i.e.\n\n    .. math:: p_{\\\\nu, i}^j (x) = \\\\begin{cases} p_{\\\\nu} (x), & i = j \\\\\\\\ 0, & \\\\text{else} \\\\end{cases}.\n\n    :param nu: Multi-index indicating which scalar valued monomial basis polynomial should be generated for the\n        non-zero component.\n    :type nu: int or :class:`~polynomials_on_simplices.algebra.multiindex.MultiIndex` or Tuple[int, ...]\n    :param int i: Index of the vector component that is non-zero.\n    :param int n: Dimension of the target.\n    :return: The monomial base polynomial as specified by nu, r, i and n.\n    :rtype: :class:`Polynomial`.\n\n    .. rubric:: Examples\n\n    >>> import sympy as sp\n    >>> x1, x2 = sp.symbols('x1 x2')\n    >>> vector_valued_monomial_basis_fn(0, 0, 2)(x1)\n    array([1, 0])\n    >>> vector_valued_monomial_basis_fn(1, 1, 2)(x1)\n    array([0, x1], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 0), 0, 2)((x1, x2))\n    array([x1, 0], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 1), 1, 3)((x1, x2))\n    array([0, x1*x2, 0], dtype=object)\n    \"\"\"\n    if n == 1:\n        assert i == 0\n        return monomial_basis_fn(nu)\n    assert i >= 0\n    assert i < n\n    try:\n        m = len(nu)\n    except TypeError:\n        m = 1\n    if not isinstance(nu, multiindex.MultiIndex):\n        nu = multiindex.MultiIndex(nu)\n    r = multiindex.norm(nu)\n    dim = get_dimension(r, m)\n    coeff = np.zeros((dim, n), dtype=int)\n    j = multiindex.get_index(nu, r)\n    coeff[j][i] = 1\n    return Polynomial(coeff, r, m)", "fn_id": 3, "class_fn": false, "repo": "FAndersson/polynomials_on_simplices", "file": "polynomials_on_simplices/polynomial/polynomials_monomial_basis.py", "last_update_at": "2021-03-17T11:41:21+00:00", "pred": {"ppl": 2.506660223007202, "ppl_lower": 2.9702541828155518, "ppl/lowercase_ppl": -1.184662949872713, "ppl/zlib": 0.0011331088516418075, "Min_5.0% Prob": 7.861751049757004, "Min_10.0% Prob": 5.876790167735173, "Min_20.0% Prob": 3.9991488738824392, "Min_30.0% Prob": 2.9470837004293644, "Min_40.0% Prob": 2.285586901407205, "Min_50.0% Prob": 1.8381956878299939, "Min_60.0% Prob": 1.5319807767775855}}
{"hexsha": "6bd2ed2c7bff37b5c4b35bd8f9b870bb8d243202", "ext": "py", "lang": "Python", "content": "def main(argv=None):\n    \"\"\"Main entrance into app.  Setup logging, create App, and enter main loop\n    \"\"\"\n    global DEBUG\n    args = process_command_line(argv)\n    if args.debug:\n        DEBUG = True\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    if another_instance_running(args.srcfiles):\n        print('Another instance of Marcam is already running.  Exiting.')\n        return 1\n    if (const.USER_CONFIG_DIR / 'debug').exists():\n        DEBUG = True\n        log_level = logging.DEBUG\n    logging_setup(log_level)\n    sys.stderr = marcam_extra.StderrToLog()\n    log_debug_main()\n    LOGGER.info(repr(args))\n    sanity_checks()\n    myapp = MarcamApp(args.srcfiles)\n    myapp.MainLoop()\n    return 0", "fn_id": 7, "class_fn": false, "repo": "itsayellow/marcam", "file": "marcam/marcam.py", "last_update_at": "2021-10-05T10:22:16+00:00", "pred": {"ppl": 6.963065147399902, "ppl_lower": 8.705192565917969, "ppl/lowercase_ppl": -1.115066292397269, "ppl/zlib": 0.00508015647157694, "Min_5.0% Prob": 12.670239978366428, "Min_10.0% Prob": 10.23749768106561, "Min_20.0% Prob": 7.827031930287679, "Min_30.0% Prob": 5.998944925049604, "Min_40.0% Prob": 4.767672593835034, "Min_50.0% Prob": 3.8697180400292077, "Min_60.0% Prob": 3.2350837404237076}}
{"hexsha": "3ee5df8aa3ce8621360bf2c27434ac72151c3d37", "ext": "py", "lang": "Python", "content": "def context_geo(key, values, dataset, namecount):\n    geoname = '\"' + key + '\"'\n    spar2 = '\\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n    PREFIX gndo: <http://d-nb.info/standards/elementset/gnd#>\\n    PREFIX pro: <http://purl.org/hpi/patchr#>\\n    PREFIX owl: <http://www.w3.org/2002/07/owl#>\\n    PREFIX edm: <http://www.europeana.eu/schemas/edm/>\\n    PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n    PREFIX dblp: <http://dblp.org/rdf/schema-2015-01-26#>\\n    PREFIX dcterms: <http://purl.org/dc/terms/>\\n    PREFIX bibtex: <http://data.bibbase.org/ontology/#>\\n    PREFIX geo: <http://www.opengis.net/ont/geosparql#>\\n\\n        select ?x  (group_concat(?alt; SEPARATOR=\", \") as ?altname) (group_concat(?sameas; SEPARATOR=\", \") as ?same)\\n\\n        WHERE{{\\n\\n          graph <http://maral.wisslab.org/graphs/gnd> {{\\n\\n\\n            \\t?x (gndo:preferredNameForThePlaceOrGeographicName | gndo:variantNameForThePlaceOrGeographicName){0}.\\n                optional {{?x gndo:variantNameForThePlaceOrGeographicName ?alt.}}\\n                optional {{?x owl:sameAs ?sameas.}}\\n               # ?x geo:hasGeometry ?geo.\\n               # optional {{?geo geo:asWKT ?coo}}\\n          }}\\n          }} group by ?x\\n\\n        '.format(geoname)\n    sparql.setQuery(spar2)\n    sparql.setReturnFormat(XML)\n    results = sparql.query().convert()\n    for i in range(0, len(results.bindings)):\n        uri = 'https://data.jhn.ngo/spatial/' + str(dataset) + '/' + str(namecount)\n        graph.add((URIRef(uri), RDF.type, edm.Place))\n        for z in range(0, len(values)):\n            graph.add((URIRef(uri), edm.identifier, Literal(values[z])))\n        graph.add((URIRef(uri), skos.prefLabel, Literal(key)))\n        if 'altname' in results.bindings[i].keys():\n            count1 = results.bindings[i]['altname'].value.count(',')\n            if count1 > 0:\n                for j in range(0, count1 + 1):\n                    graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value.rsplit(', ', count1)[count1 - j])))\n            else:\n                graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value)))\n        if 'same' in results.bindings[i].keys():\n            count2 = results.bindings[i]['same'].value.count(',')\n            if count2 > 0:\n                for j in range(0, count2 + 1):\n                    graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value.rsplit(', ', count2)[count2 - j])))\n            else:\n                graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value)))\n    graph.serialize(destination=dataset + '_Spatial_01.ttl', format='turtle')", "fn_id": 1, "class_fn": false, "repo": "ubffm/judaica-europeana-2-0", "file": "scripts/contextualize_output_spatial_01.py", "last_update_at": "2021-03-17T08:38:58+00:00", "pred": {"ppl": 1.8603848218917847, "ppl_lower": 2.0578761100769043, "ppl/lowercase_ppl": -1.1625221987727914, "ppl/zlib": 0.0006226513137570814, "Min_5.0% Prob": 7.1080879860735955, "Min_10.0% Prob": 5.10672856130098, "Min_20.0% Prob": 3.0254294299642455, "Min_30.0% Prob": 2.0673603075002873, "Min_40.0% Prob": 1.5527853197320634, "Min_50.0% Prob": 1.2414429517327437, "Min_60.0% Prob": 1.035702702848347}}
{"hexsha": "00500ee126bf98712c024187bb2a8536d5e82f46", "ext": "py", "lang": "Python", "content": "@login_required\ndef productlist(request):\n    organization = request.user.info.organization\n    if not hasattr(request.user, 'organization'):\n        if not hasattr(request.user, 'permissions'):\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n        if request.user.permissions.product_permissions < 1:\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n    products = Product.objects.filter(organization=organization).order_by('-id').annotate(earmarked=Sum('salesinvoiceentry__quantity', filter=Q(salesinvoiceentry__invoice__finalized=0)))\n    productfilter = ProductFilter(request.GET, queryset=products)\n    paginator = Paginator(productfilter.qs, 25)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    context = {'page_obj': page_obj, 'filter': productfilter}\n    return render(request, 'products/product_list.html', context=context)", "fn_id": 0, "class_fn": false, "repo": "drtweety/busman", "file": "products/views.py", "last_update_at": "2021-06-13T18:12:21+00:00", "pred": {"ppl": 2.7928640842437744, "ppl_lower": 4.277699947357178, "ppl/lowercase_ppl": -1.4151117583998674, "ppl/zlib": 0.002600171196911268, "Min_5.0% Prob": 9.549555518410422, "Min_10.0% Prob": 7.567469327346139, "Min_20.0% Prob": 4.79470421151912, "Min_30.0% Prob": 3.3867230648306053, "Min_40.0% Prob": 2.5808366301291166, "Min_50.0% Prob": 2.061244932350592, "Min_60.0% Prob": 1.7138378601373685}}
{"hexsha": "04feed9797eeb64fb97ec419811711f467958210", "ext": "py", "lang": "Python", "content": "def get_marks(cos_scores, max_marks, bias):\n    max_cos_score = max(cos_scores)\n    marks_obtained = max([(max_cos_score - bias[0]) / (1 - bias[0]) * max_marks if max_cos_score < bias[1] else max_marks, 0])\n    return marks_obtained", "fn_id": 1, "class_fn": false, "repo": "iamyajat/auto-grader", "file": "autograder/text_similarity.py", "last_update_at": "2021-12-24T13:03:22+00:00", "pred": {"ppl": 4.638623237609863, "ppl_lower": 4.638623237609863, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.012082028395093664, "Min_5.0% Prob": 10.949722290039062, "Min_10.0% Prob": 8.558945775032043, "Min_20.0% Prob": 6.3751058876514435, "Min_30.0% Prob": 4.888352195421855, "Min_40.0% Prob": 3.847438095137477, "Min_50.0% Prob": 3.0537868382000344, "Min_60.0% Prob": 2.5650606439733994}}
{"hexsha": "6e4206da9fd80226e539745dda7d6ae8f2010e3a", "ext": "py", "lang": "Python", "content": "@card('Pacifism')\ndef pacifism(card, abilities):\n\n    def pacifism():\n        return AbilityNotImplemented\n\n    def pacifism():\n        return AbilityNotImplemented\n    return (pacifism, pacifism)", "fn_id": 150, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/mirage.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 3.0493431091308594, "ppl_lower": 7.658390998840332, "ppl/lowercase_ppl": -1.8259521764115403, "ppl/zlib": 0.011613814514245228, "Min_5.0% Prob": 12.003864288330078, "Min_10.0% Prob": 9.635722279548645, "Min_20.0% Prob": 5.553451326158312, "Min_30.0% Prob": 3.7054479100874493, "Min_40.0% Prob": 2.9036061231874757, "Min_50.0% Prob": 2.2772515757900216, "Min_60.0% Prob": 1.8712727411018153}}
{"hexsha": "58f3964892634b3c801b485b006283a9cc644941", "ext": "py", "lang": "Python", "content": "def test_vertex_merger_vertices():\n    merger = MeshVertexMerger()\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    assert merger.vertices == [(1, 2, 3), (4, 5, 6)]", "fn_id": 1, "class_fn": false, "repo": "jpsantos-mf/ezdxf", "file": "tests/test_07_render/test_703_render_mesh.py", "last_update_at": "2021-06-05T09:15:15+00:00", "pred": {"ppl": 1.939929723739624, "ppl_lower": 2.3401811122894287, "ppl/lowercase_ppl": -1.2830696183052195, "ppl/zlib": 0.006251431580590732, "Min_5.0% Prob": 7.691023468971252, "Min_10.0% Prob": 5.270253366894192, "Min_20.0% Prob": 3.172676977184084, "Min_30.0% Prob": 2.226518055355107, "Min_40.0% Prob": 1.6541565515705057, "Min_50.0% Prob": 1.3380040265619755, "Min_60.0% Prob": 1.1203034991271454}}
{"hexsha": "40c216bc802b50376ba5e2720ccd9e0872685eb7", "ext": "py", "lang": "Python", "content": "def parse_args():\n    global args\n    parser = argparse.ArgumentParser(description='Reset RFID Reader')\n    parser.add_argument('host', help='hostname or IP address of RFID reader', nargs='+')\n    parser.add_argument('-p', '--port', default=llrp.LLRP_PORT, help='port to connect to (default {})'.format(llrp.LLRP_PORT))\n    parser.add_argument('-d', '--debug', action='store_true', help='show debugging output')\n    args = parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/reset.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 2.4247922897338867, "ppl_lower": 3.125216007232666, "ppl/lowercase_ppl": -1.286490228816565, "ppl/zlib": 0.00358601565588248, "Min_5.0% Prob": 9.77131519317627, "Min_10.0% Prob": 6.566963715986772, "Min_20.0% Prob": 4.11019780324853, "Min_30.0% Prob": 2.9265543290546963, "Min_40.0% Prob": 2.2236722363753523, "Min_50.0% Prob": 1.7824801834836854, "Min_60.0% Prob": 1.4838306378297719}}
{"hexsha": "81170dea07b0b06f634847b4f0645d72a042dbbb", "ext": "py", "lang": "Python", "content": "def test_laser_timing_delay(lxt):\n    \"\"\"\n    Check basic moves are getting to the fs_tgt_time signal.\n\n    That signal's value is off by 10e9 for the ns to s conversion\n    and negative due to the convention that positive lxt means earlier laser.\n    \"\"\"\n    logger.debug('test_laser_timing_delay')\n    assert lxt.wm() == 0\n    assert lxt._fs_tgt_time.get() == -0\n    lxt.mv(1e-06)\n    assert lxt.wm() == 1e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(-1000)\n    lxt.mv(-5e-06)\n    assert lxt.wm() == -5e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(5000)", "fn_id": 7, "class_fn": false, "repo": "cristinasewell/pcdsdevices", "file": "tests/test_lxe.py", "last_update_at": "2021-06-15T14:09:42+00:00", "pred": {"ppl": 5.341408729553223, "ppl_lower": 5.458110809326172, "ppl/lowercase_ppl": -1.0128996929054328, "ppl/zlib": 0.006228585223842326, "Min_5.0% Prob": 11.091515827178956, "Min_10.0% Prob": 9.187170791625977, "Min_20.0% Prob": 6.71852223277092, "Min_30.0% Prob": 5.194146943092346, "Min_40.0% Prob": 4.094841972177411, "Min_50.0% Prob": 3.3434106115952575, "Min_60.0% Prob": 2.8083360313384}}
{"hexsha": "10296073b3cc74d61d9da67e57a17da208e30b41", "ext": "py", "lang": "Python", "content": "def corrSpin2(ra, dec, g1a, g2a, g1b=None, g2b=None, raUnits='degrees', decUnits='degrees', **treecorrKwargs):\n    \"\"\"Function to compute correlations between at most two shear-like fields.\n    This is used to compute Rho statistics, given the appropriate spin-2\n    (shear-like) fields.\n    Parameters\n    ----------\n    ra : `numpy.array`\n        The right ascension values of entries in the catalog.\n    dec : `numpy.array`\n        The declination values of entries in the catalog.\n    g1a : `numpy.array`\n        The first component of the primary shear-like field.\n    g2a : `numpy.array`\n        The second component of the primary shear-like field.\n    g1b : `numpy.array`, optional\n        The first component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    g2b : `numpy.array`, optional\n        The second component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    raUnits : `str`, optional\n        Unit of the right ascension values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    decUnits : `str`, optional\n        Unit of the declination values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    **treecorrKwargs\n        Keyword arguments to be passed to `treecorr.GGCorrelation`.\n    Returns\n    -------\n    xy : `treecorr.GGCorrelation`\n        A `treecorr.GGCorrelation` object containing the correlation function.\n    \"\"\"\n    xy = treecorr.GGCorrelation(**treecorrKwargs)\n    catA = treecorr.Catalog(ra=ra, dec=dec, g1=g1a, g2=g2a, ra_units=raUnits, dec_units=decUnits)\n    if g1b is None or g2b is None:\n        xy.process(catA)\n    else:\n        catB = treecorr.Catalog(ra=ra, dec=dec, g1=g1b, g2=g2b, ra_units=raUnits, dec_units=decUnits)\n        xy.process(catA, catB)\n    return xy", "fn_id": 1, "class_fn": false, "repo": "lsst-dmsst/metric-pipeline-tasks", "file": "python/lsst/faro/utils/tex.py", "last_update_at": "2021-02-23T16:05:17+00:00", "pred": {"ppl": 1.9833558797836304, "ppl_lower": 2.2176284790039062, "ppl/lowercase_ppl": -1.163039800082059, "ppl/zlib": 0.0011171130485855578, "Min_5.0% Prob": 7.915668787779631, "Min_10.0% Prob": 5.53447335296207, "Min_20.0% Prob": 3.3154334417723734, "Min_30.0% Prob": 2.2771790044427647, "Min_40.0% Prob": 1.7126552067446144, "Min_50.0% Prob": 1.3694632611807647, "Min_60.0% Prob": 1.1440727597498441}}
{"hexsha": "7cfa76a0e321448c9b715a43fe2ae910c799972c", "ext": "py", "lang": "Python", "content": "def make_summary_file(filename):\n    \"\"\"\n    Given a DLIS file, make a short human readable summary of it.\n    Show things like headers, well parameters and which well curves are\n    available.\n\n    Args:\n    filename: A DLIS file.\n\n    Returns:\n    summaryfile: The DLIS file without the extention and the suffix\n    _summary.txt.\n    \"\"\"\n    summaryfile = open(filename.replace('.DLIS', '_summary.txt'), 'w')\n    f, *f_tail = dlis.load(filename)\n    if len(f_tail):\n        print('There are more logical files in tail')\n    origin, *origin_tail = f.origins\n    if len(origin_tail):\n        print(filename + ' contains multiple origins')\n    header = f.fileheader\n    parameter_table = summarize(f.parameters, name='Name', long_name='Long name', values='Value(s)')\n    mask = ~parameter_table['Name'].isin(['R8', 'RR1', 'WITN', 'ENGI'])\n    parameter_table = parameter_table[mask]\n    parameter_table.sort_values('Name')\n    summaryfile.write(str(f.describe()))\n    summaryfile.write(str(origin.describe()))\n    summaryfile.write(str(header.describe()))\n    summaryfile.write(str(parameter_table))\n    for frame in f.frames:\n        index_channel = next((ch for ch in frame.channels if ch.name == frame.index))\n        summaryfile.write(f'\\nFrame {frame.name}:\\n')\n        summaryfile.write(f'Description      : {frame.description}\\n')\n        summaryfile.write(f'Indexed by       : {frame.index_type}\\n')\n        summaryfile.write(f'Interval         : [{frame.index_min}, {frame.index_max}] {index_channel.units}\\n')\n        summaryfile.write(f'Direction        : {frame.direction}\\n')\n        summaryfile.write(f'Constant spacing : {frame.spacing} {index_channel.units}\\n')\n        summaryfile.write(f'Index channel    : {index_channel}\\n')\n        summaryfile.write(f'No. of channels  : {len(frame.channels)}\\n')\n    channel_table = summarize(f.channels, name='Name', long_name='Long name', units='Units', dimension='Dimension', frame='Frame')\n    channel_table.sort_values('Name')\n    summaryfile.write(str(channel_table))\n    summaryfile.close()\n    return summaryfile", "fn_id": 1, "class_fn": false, "repo": "softwareunderground/northern-lights", "file": "scripts/dlis_summary.py", "last_update_at": "2021-04-17T09:13:20+00:00", "pred": {"ppl": 4.014514923095703, "ppl_lower": 4.194549560546875, "ppl/lowercase_ppl": -1.0315626400201643, "ppl/zlib": 0.0018532220319125473, "Min_5.0% Prob": 10.163115297045026, "Min_10.0% Prob": 8.331565145860639, "Min_20.0% Prob": 6.047617801448755, "Min_30.0% Prob": 4.452367289373052, "Min_40.0% Prob": 3.4373407120113835, "Min_50.0% Prob": 2.7753870407217427, "Min_60.0% Prob": 2.3187278895666115}}
{"hexsha": "4be3288dc749ae714f5530e0b9af4e86fbcb9c14", "ext": "py", "lang": "Python", "content": "def set_crs(df: GDF, epsg_code: Union[int, str]) -> GDF:\n    \"\"\"Sets dataframe crs in geopandas pipeline.\n\n    TODO: Deprecate with next rasterio version that will integrate set_crs method.\n    \"\"\"\n    df.crs = {'init': f'epsg:{str(epsg_code)}'}\n    return df", "fn_id": 2, "class_fn": false, "repo": "ZakariaELHAJOUY/Remote-sensing-", "file": "utils/geo.py", "last_update_at": "2021-07-12T06:28:31+00:00", "pred": {"ppl": 6.693109035491943, "ppl_lower": 8.718360900878906, "ppl/lowercase_ppl": -1.1390540979292285, "ppl/zlib": 0.009699380076327811, "Min_5.0% Prob": 12.220021486282349, "Min_10.0% Prob": 9.68753695487976, "Min_20.0% Prob": 7.4260974526405334, "Min_30.0% Prob": 5.813038522998492, "Min_40.0% Prob": 4.634521842002869, "Min_50.0% Prob": 3.7844032030552626, "Min_60.0% Prob": 3.165439991047606}}
{"hexsha": "28241061cc6276467c762df6e87e9db4f4a59e1b", "ext": "py", "lang": "Python", "content": "def total_lights():\n    total_lights_on = 0\n    for y, _ in enumerate(lights):\n        for x, _ in enumerate(lights[y]):\n            if lights[y][x] == 1:\n                total_lights_on += 1\n    return total_lights_on", "fn_id": 6, "class_fn": false, "repo": "josephroquedev/advent-of-code", "file": "2015/day_18/python/day18.py", "last_update_at": "2021-11-30T10:05:29+00:00", "pred": {"ppl": 2.3892288208007812, "ppl_lower": 2.3892288208007812, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.007990556373885556, "Min_5.0% Prob": 8.849721908569336, "Min_10.0% Prob": 6.442246635754903, "Min_20.0% Prob": 4.3084170917669935, "Min_30.0% Prob": 3.018545911543899, "Min_40.0% Prob": 2.1928462775051596, "Min_50.0% Prob": 1.7698071985317754, "Min_60.0% Prob": 1.4829473604394652}}
{"hexsha": "c85e03d56b4d6fc548188cd588d9ea2d6a3b23be", "ext": "py", "lang": "Python", "content": "def argopen(file, mode, encoding=None, errors=None):\n    closefd = True\n    if file == '-':\n        closefd = False\n        if 'r' in mode:\n            file = sys.stdin.fileno()\n        else:\n            file = sys.stdout.fileno()\n    return io.open(file, mode, encoding=encoding, errors=errors, closefd=closefd)", "fn_id": 0, "class_fn": false, "repo": "olivier-compilatio/uniseg-python", "file": "uniseg/samples/unibreak.py", "last_update_at": "2021-05-11T02:01:47+00:00", "pred": {"ppl": 2.098339080810547, "ppl_lower": 2.5809576511383057, "ppl/lowercase_ppl": -1.279316574403117, "ppl/zlib": 0.004750936653155282, "Min_5.0% Prob": 8.350176692008972, "Min_10.0% Prob": 5.962878495454788, "Min_20.0% Prob": 3.4045750007909885, "Min_30.0% Prob": 2.4858242893218994, "Min_40.0% Prob": 1.8660987279213526, "Min_50.0% Prob": 1.4816920547637829, "Min_60.0% Prob": 1.2496611542164293}}
{"hexsha": "96a9ce1af1b9abc8e61b5491562c9ddee1c883c3", "ext": "py", "lang": "Python", "content": "def infer_replicates(target_labels_long):\n    \"\"\" Infer replicate experiments based on their long form labels.\n\n    In:\n        target_labels_long [str]: list of long form target labels\n    Out:\n        replicate_lists {exp_label -> [target indexes]}\n    \"\"\"\n    replicate_lists = {}\n    rep_re = []\n    rep_re.append(re.compile('rep\\\\d+'))\n    rep_re.append(re.compile('donor\\\\d+'))\n    for ti in range(len(target_labels_long)):\n        label = target_labels_long[ti]\n        for ri in range(len(rep_re)):\n            rep_m = rep_re[ri].search(label)\n            if rep_m:\n                rep_str = rep_m.group(0)\n                label = label.replace(rep_str, '')\n        replicate_lists.setdefault(label, []).append(ti)\n    return replicate_lists", "fn_id": 1, "class_fn": false, "repo": "JasperSnoek/basenji", "file": "bin/basenji_test_reps.py", "last_update_at": "2021-05-12T08:51:44+00:00", "pred": {"ppl": 3.9621920585632324, "ppl_lower": 3.9866085052490234, "ppl/lowercase_ppl": -1.0044621295827778, "ppl/zlib": 0.004302491944550798, "Min_5.0% Prob": 10.696051788330077, "Min_10.0% Prob": 8.77629599571228, "Min_20.0% Prob": 6.305320582738736, "Min_30.0% Prob": 4.50918783103266, "Min_40.0% Prob": 3.4632398352572102, "Min_50.0% Prob": 2.7655750368676575, "Min_60.0% Prob": 2.2982500547922458}}
{"hexsha": "eb9320bc73ea082b4d99c1b4dbcaed9bf2e92e33", "ext": "py", "lang": "Python", "content": "def verify_flow_region_func(height: float, boundary_layer_height: float) -> FlowFieldRegion:\n    if height < boundary_layer_height:\n        return FlowFieldRegion.BOUNDARY_LAYER\n    else:\n        return FlowFieldRegion.FREE_FLOW", "fn_id": 0, "class_fn": false, "repo": "lucasralves/steady-flow-prediction", "file": "src/pre_processing/core/mesh/functions/verify_flow_region.py", "last_update_at": "2021-07-16T19:59:39+00:00", "pred": {"ppl": 4.878627777099609, "ppl_lower": 6.576596736907959, "ppl/lowercase_ppl": -1.1884410357133224, "ppl/zlib": 0.011320457050753836, "Min_5.0% Prob": 8.953655242919922, "Min_10.0% Prob": 8.706518936157227, "Min_20.0% Prob": 6.9469897530295635, "Min_30.0% Prob": 5.0215389658423035, "Min_40.0% Prob": 3.999624474482103, "Min_50.0% Prob": 3.212231350264379, "Min_60.0% Prob": 2.6554056757732347}}
{"hexsha": "3f5030776c04f54c1b5b6703282b5954e3f6c54c", "ext": "py", "lang": "Python", "content": "def timeit(method):\n\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        if 'log_time' in kw:\n            name = kw.get('log_name', method.__name__.upper())\n            kw['log_time'][name] = int((te - ts) * 1000)\n        else:\n            print('%r  %2.2f ms' % (method.__name__, (te - ts) * 1000))\n        return result\n    return timed", "fn_id": 0, "class_fn": false, "repo": "xiongjuncheng/futu_algo", "file": "strategies/Strategies.py", "last_update_at": "2021-06-09T01:16:13+00:00", "pred": {"ppl": 1.3000658750534058, "ppl_lower": 1.3000658750534058, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00130554694677441, "Min_5.0% Prob": 4.801062027613322, "Min_10.0% Prob": 2.7375392466783524, "Min_20.0% Prob": 1.3303170168399812, "Min_30.0% Prob": 0.8766678130548251, "Min_40.0% Prob": 0.6664413526811405, "Min_50.0% Prob": 0.528965158155881, "Min_60.0% Prob": 0.43849888772695667}}
{"hexsha": "89cf74e1d86ffce9e2a638d3306254d23a748771", "ext": "py", "lang": "Python", "content": "def infer_remote_zip_file_directory_name() -> List[str]:\n    from ..version import __version__\n    remote_zip_file_directory_name: List[str] = [__version__]\n    remote_zip_file_directory_name.append(f'python_{PYTHON_VERSION}')\n    if Env.ON_WINDOWS:\n        remote_zip_file_directory_name.append('windows')\n    else:\n        remote_zip_file_directory_name.append('linux')\n    return remote_zip_file_directory_name", "fn_id": 3, "class_fn": false, "repo": "Reefledge/reefledge", "file": "reefledge/remote_zip_file_path/__init__.py", "last_update_at": "2021-09-23T10:44:32+00:00", "pred": {"ppl": 3.002446413040161, "ppl_lower": 3.1652443408966064, "ppl/lowercase_ppl": -1.048027568579367, "ppl/zlib": 0.005817076335268044, "Min_5.0% Prob": 10.204839515686036, "Min_10.0% Prob": 8.339152596213601, "Min_20.0% Prob": 5.363765794297923, "Min_30.0% Prob": 3.6793530430112567, "Min_40.0% Prob": 2.771869516911659, "Min_50.0% Prob": 2.2156934591357484, "Min_60.0% Prob": 1.8425721651661329}}
{"hexsha": "c8cc0e831e5f48f15a8c98373df38d2e3f24ded3", "ext": "py", "lang": "Python", "content": "def heap_sort(list_item):\n    \"\"\"\n    Heap Sort\n    Time Complexity of Solution:\n    Best - O(nlog(n))\n    Average - O(nlog(n))\n    Worst - O(nlog(n))\n\n    Approach:\n    Heap sort takes place in two steps. In first step, array is\n    transformed into a heap.\n    In second step, heap is continously reduced to a sorted array.\n\n    \"\"\"\n    end = len(list_item)\n    start = end // 2 - 1\n    for i in range(start, -1, -1):\n        heapify(list_item, end, i)\n    for i in range(end - 1, 0, -1):\n        swap(list_item, i, 0)\n        heapify(list_item, i, 0)", "fn_id": 0, "class_fn": false, "repo": "mish24/pydsa", "file": "pydsa/heap_sort.py", "last_update_at": "2021-11-02T09:24:38+00:00", "pred": {"ppl": 3.2320151329040527, "ppl_lower": 3.855875015258789, "ppl/lowercase_ppl": -1.1504486098955373, "ppl/zlib": 0.004087476734697909, "Min_5.0% Prob": 9.992366366916233, "Min_10.0% Prob": 8.207861423492432, "Min_20.0% Prob": 5.395714925395118, "Min_30.0% Prob": 3.8716164843903647, "Min_40.0% Prob": 2.944112360684408, "Min_50.0% Prob": 2.359048560140137, "Min_60.0% Prob": 1.9660140193449882}}
{"hexsha": "29dcd0e7194a9a266ef5c8a71033e49f8cc50186", "ext": "py", "lang": "Python", "content": "def a_star(grid, h, start, goal):\n    path = []\n    path_cost = 0\n    queue = PriorityQueue()\n    queue.put((0, start))\n    visited = set(start)\n    branch = {}\n    found = False\n    while not queue.empty():\n        item = queue.get()\n        current_node = item[1]\n        if current_node == start:\n            current_cost = 0.0\n        else:\n            current_cost = branch[current_node][0]\n        if current_node == goal:\n            print('Found a path.')\n            found = True\n            break\n        else:\n            for action in valid_actions(grid, current_node):\n                da = action.delta\n                next_node = (current_node[0] + da[0], current_node[1] + da[1])\n                branch_cost = current_cost + action.cost\n                queue_cost = branch_cost + h(next_node, goal)\n                if next_node not in visited:\n                    visited.add(next_node)\n                    branch[next_node] = (branch_cost, current_node, action)\n                    queue.put((queue_cost, next_node))\n    if found:\n        n = goal\n        path_cost = branch[n][0]\n        path.append(goal)\n        while branch[n][1] != start:\n            path.append(branch[n][1])\n            n = branch[n][1]\n        path.append(branch[n][1])\n    else:\n        print('**********************')\n        print('Failed to find a path!')\n        print('**********************')\n    return (path[::-1], path_cost)", "fn_id": 2, "class_fn": false, "repo": "allthatido/Drone_Motion_Planning", "file": "planning_utils.py", "last_update_at": "2021-07-08T18:54:42+00:00", "pred": {"ppl": 1.6064845323562622, "ppl_lower": 1.7647565603256226, "ppl/lowercase_ppl": -1.1982171205402434, "ppl/zlib": 0.0010172709685933494, "Min_5.0% Prob": 6.220890442530314, "Min_10.0% Prob": 4.398207604885101, "Min_20.0% Prob": 2.374274511821568, "Min_30.0% Prob": 1.580445992999599, "Min_40.0% Prob": 1.1896594048493767, "Min_50.0% Prob": 0.9480417021172848, "Min_60.0% Prob": 0.7915185456381926}}
{"hexsha": "7fa31603a252cfd1d536877477d7abb4da4bdef3", "ext": "py", "lang": "Python", "content": "def decimal_to_binary(n: int):\n    \"\"\"\n    Function to convert Decimal number to Binary number \n    \n    :param n: \n    :return: \n    \"\"\"\n    return int('{0:b}'.format(n))", "fn_id": 0, "class_fn": false, "repo": "ikostan/python", "file": "secret-handshake/secret_handshake.py", "last_update_at": "2021-08-02T19:20:10+00:00", "pred": {"ppl": 6.367006301879883, "ppl_lower": 6.351991653442383, "ppl/lowercase_ppl": -0.9987245727505273, "ppl/zlib": 0.014928462829085833, "Min_5.0% Prob": 11.390507698059082, "Min_10.0% Prob": 10.336530208587646, "Min_20.0% Prob": 7.670560002326965, "Min_30.0% Prob": 5.8140267592210035, "Min_40.0% Prob": 4.6597884753171135, "Min_50.0% Prob": 3.68709173663096, "Min_60.0% Prob": 3.1293213871809153}}
{"hexsha": "66a6d587f9640fe42f4703541334c4465b7b3a16", "ext": "py", "lang": "Python", "content": "def _parse_word(operand):\n    value = OP_EVALUATOR.eval_int(operand)\n    if 0 <= value < 65536:\n        return (value % 256, value // 256)\n    raise ValueError", "fn_id": 6, "class_fn": false, "repo": "skoolkid/sk6502", "file": "sk6502/assembler.py", "last_update_at": "2021-01-26T17:44:49+00:00", "pred": {"ppl": 6.288918495178223, "ppl_lower": 7.123448848724365, "ppl/lowercase_ppl": -1.0677635517744246, "ppl/zlib": 0.014710312924605506, "Min_5.0% Prob": 13.090604305267334, "Min_10.0% Prob": 10.262962818145752, "Min_20.0% Prob": 7.614703915335915, "Min_30.0% Prob": 5.979048907756805, "Min_40.0% Prob": 4.563253101977435, "Min_50.0% Prob": 3.6487521774002483, "Min_60.0% Prob": 3.111893526306658}}
{"hexsha": "f46d4201935576f7c5b0f071b01e8b9a5b4caddc", "ext": "py", "lang": "Python", "content": "def test_proportions_delta_aa(proportions_data_small):\n    exp = Experiment(proportions_data_small, name='proportions-test')\n    test_aa = HypothesisTest(metric='metric', control='A', variation='A', hypothesis='larger', inference_method='proportions_delta')\n    results_aa = exp.run_test(test_aa)\n    assert not results_aa.accept_hypothesis", "fn_id": 4, "class_fn": false, "repo": "quizlet/abracadabra", "file": "test/test_proportions_delta.py", "last_update_at": "2021-09-01T12:25:38+00:00", "pred": {"ppl": 5.73427152633667, "ppl_lower": 6.382872104644775, "ppl/lowercase_ppl": -1.0613569191052978, "ppl/zlib": 0.008910513877951758, "Min_5.0% Prob": 9.072587585449218, "Min_10.0% Prob": 7.784856176376342, "Min_20.0% Prob": 6.400544023513794, "Min_30.0% Prob": 5.2338565190633135, "Min_40.0% Prob": 4.211445537209511, "Min_50.0% Prob": 3.4550898343324663, "Min_60.0% Prob": 2.922109409670035}}
{"hexsha": "dd575f7aaba2cc90075652902b7b83a55562e8f2", "ext": "py", "lang": "Python", "content": "def _load_cache():\n    if not os.path.exists(cache_file_name):\n        raise ValueError('No cache file found.')\n    else:\n        with open(cache_file_name, 'rb') as f:\n            dataset_stats = pickle.load(f)\n    return dataset_stats", "fn_id": 0, "class_fn": false, "repo": "cmusatyalab/dronesearch", "file": "experiments/random_select/plot_random_select_and_filter.py", "last_update_at": "2021-10-08T23:19:12+00:00", "pred": {"ppl": 2.948993682861328, "ppl_lower": 3.966371774673462, "ppl/lowercase_ppl": -1.2740616255698318, "ppl/zlib": 0.00711489465593263, "Min_5.0% Prob": 7.403576215108235, "Min_10.0% Prob": 6.554431200027466, "Min_20.0% Prob": 4.738295714060466, "Min_30.0% Prob": 3.435397223422402, "Min_40.0% Prob": 2.7347795605659484, "Min_50.0% Prob": 2.1579057512572035, "Min_60.0% Prob": 1.8208035469226735}}
{"hexsha": "d4e3e838774528218776e66d0b619c26190040dd", "ext": "py", "lang": "Python", "content": "@api_view(['PUT'])\n@permission_classes((IsAuthenticated,))\n@allowed_groups(group_names=['admin'])\ndef updateUser(request: HttpRequest, id):\n    user = get_object_or_404(User, id=id)\n    groups = request.data.pop('authGroups', [])\n    serialised = UserSerializer(user, data=request.data, context={'request': request}, partial=True)\n    if serialised.is_valid():\n        serialised.save()\n        user_group_many.objects.filter(user=user).delete()\n        for group in groups:\n            user_group_many.objects.create(user=user, group_id=group['id'])\n        return Response(status=status.HTTP_200_OK)\n    print(serialised.error_messages)\n    return Response(status=status.HTTP_400_BAD_REQUEST)", "fn_id": 6, "class_fn": false, "repo": "JetLightStudio/Jet-Gest-stock-management", "file": "server/auth_app/views/authViews.py", "last_update_at": "2021-08-18T18:53:02+00:00", "pred": {"ppl": 2.333662271499634, "ppl_lower": 3.10154390335083, "ppl/lowercase_ppl": -1.335671660138378, "ppl/zlib": 0.0022478483393931475, "Min_5.0% Prob": 8.80621271133423, "Min_10.0% Prob": 6.586672520637512, "Min_20.0% Prob": 4.01631224155426, "Min_30.0% Prob": 2.774143688629071, "Min_40.0% Prob": 2.105626940447837, "Min_50.0% Prob": 1.6923760401271284, "Min_60.0% Prob": 1.4118709294435878}}
{"hexsha": "7a6ac05f5c406402bdf62d0f733ffe486364b813", "ext": "py", "lang": "Python", "content": "def speak_rank_top_10():\n    sql = '\\n        select * \\n        from(select row_number() over(order by user_speak_total desc) as row_number,* from user_info)\\n        where row_number <= 10\\n    '\n    data = sql_dql(sql)\n    msg = f'\ud83d\ude48\u53d1\u8a00\u5149\u8363\u699c\ud83d\ude48\\n__________________\\n'\n    for item in data:\n        rank = item[0]\n        name = item[1]\n        id = item[2]\n        num = item[3]\n        num_emoji = rank_emoji(rank)\n        msg += f'{num_emoji}{name}({id})\ud83d\udde3\ufe0f:{num}\\n'\n    msg += f'\u8fd9\u4e9b\ud83d\udc68\u90fd4\ufe0f\u20e3\u5927\ud83d\udca6\ud83d\udc7e'\n    return msg", "fn_id": 2, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/user/user_speaki_rank/__init__.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 6.542088031768799, "ppl_lower": 6.542088031768799, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005623522112052861, "Min_5.0% Prob": 11.674381891886393, "Min_10.0% Prob": 9.927466127607557, "Min_20.0% Prob": 7.489768118471713, "Min_30.0% Prob": 5.821171807391303, "Min_40.0% Prob": 4.627911958694458, "Min_50.0% Prob": 3.7544495807366167, "Min_60.0% Prob": 3.136506901345158}}
{"hexsha": "43ee7c52704e9f62de936933b0306b16b4a79105", "ext": "py", "lang": "Python", "content": "def test_model_default_implementations():\n\n    class MyModel(Model):\n        pass\n    model = MyModel()\n    with pytest.raises(NotImplementedError):\n        model.__prior__()\n    with pytest.raises(NotImplementedError):\n        model.__condition__(None, None)\n    with pytest.raises(NotImplementedError):\n        model.__noiseless__()\n    with pytest.raises(NotImplementedError):\n        model.logpdf(None, None)\n    with pytest.raises(NotImplementedError):\n        model.sample(None)\n\n    class MyModel2(Model):\n\n        def __prior__(self):\n            pass\n\n        def sample(self, x):\n            return 1\n    model = MyModel2()\n    assert model.predict(None, num_samples=100) == (1, 0)", "fn_id": 8, "class_fn": false, "repo": "wesselb/probmods", "file": "tests/test_model.py", "last_update_at": "2021-08-28T16:32:03+00:00", "pred": {"ppl": 2.858123540878296, "ppl_lower": 3.4049153327941895, "ppl/lowercase_ppl": -1.1666925844988953, "ppl/zlib": 0.004412459264340109, "Min_5.0% Prob": 8.34627652168274, "Min_10.0% Prob": 6.809209734201431, "Min_20.0% Prob": 4.635183384924224, "Min_30.0% Prob": 3.4331811313726464, "Min_40.0% Prob": 2.600769976323301, "Min_50.0% Prob": 2.1075297960239214, "Min_60.0% Prob": 1.7495591021189936}}
{"hexsha": "7d2d407dbcaa652ae9d9750427e051162ad2d2e3", "ext": "py", "lang": "Python", "content": "def pattern_loader(path_to_rules='patterns.jsonl') -> List:\n    \"\"\" Loads the patterns from the pattern list. \"\"\"\n    patterns = []\n    patternDicts = []\n    with open(path_to_rules, encoding='utf8') as f:\n        try:\n            for line in f:\n                data = json.loads(line)\n                patternDicts.append(data)\n        except:\n            pass\n    for patternDict in patternDicts:\n        patterns.append(Pattern(**patternDict))\n    return patterns", "fn_id": 5, "class_fn": false, "repo": "ChrisChross/turCy", "file": "turcy/tree_dep_pattern.py", "last_update_at": "2021-04-15T12:29:32+00:00", "pred": {"ppl": 4.0303568840026855, "ppl_lower": 4.688179969787598, "ppl/lowercase_ppl": -1.1084686139173263, "ppl/zlib": 0.006307035877204323, "Min_5.0% Prob": 10.404195976257324, "Min_10.0% Prob": 8.50147550756281, "Min_20.0% Prob": 6.046400427818298, "Min_30.0% Prob": 4.512809018294017, "Min_40.0% Prob": 3.495134900578044, "Min_50.0% Prob": 2.808069003305652, "Min_60.0% Prob": 2.343395572155714}}
{"hexsha": "9a23cc6017e673eb9497903c018a6480ea3f8e60", "ext": "py", "lang": "Python", "content": "def readVDAT(fid, address):\n    vdat = namedtuple('vdat', [])\n    if address != -1:\n        fid.seek(address, 0)\n    [dumCRC, lastSize, lastType, dumMisc] = readARDFpointer(fid, -1)\n    vdat.force = struct.unpack('i', fid.read(4))[0]\n    vdat.line = struct.unpack('i', fid.read(4))[0]\n    vdat.point = struct.unpack('i', fid.read(4))[0]\n    vdat.sizeData = struct.unpack('i', fid.read(4))[0]\n    vdat.forceType = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt0 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt1 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt2 = struct.unpack('i', fid.read(4))[0]\n    dum = struct.unpack('i' * 2, fid.read(4 * 2))[0]\n    sizeData = vdat.sizeData\n    vdat.data = struct.unpack('f' * sizeData, fid.read(4 * sizeData))\n    return vdat", "fn_id": 6, "class_fn": false, "repo": "yu-efremov/ViscoIndent", "file": "import_ARDF.py", "last_update_at": "2021-12-21T13:26:53+00:00", "pred": {"ppl": 3.149547815322876, "ppl_lower": 3.0794131755828857, "ppl/lowercase_ppl": -0.9803707423167837, "ppl/zlib": 0.0044467398908604825, "Min_5.0% Prob": 10.9444979258946, "Min_10.0% Prob": 8.751235024682407, "Min_20.0% Prob": 5.485029430224977, "Min_30.0% Prob": 3.802251186007741, "Min_40.0% Prob": 2.8657023974790654, "Min_50.0% Prob": 2.294305094244794, "Min_60.0% Prob": 1.9120730316010839}}
{"hexsha": "4621fba19fcf958d4877519ee2e7db8ca9d513e9", "ext": "py", "lang": "Python", "content": "def search_froms():\n    \"\"\"\n    Search for unique \"from xxx import yyy\" statements, returning a sorted list.\n    \"\"\"\n    _froms = []\n    _lib_dir_regex = '{}\\\\.'.format(LIB_DIR)\n    _regex = '^[ ]*from '\n    print(Fore.GREEN + '\\nimport list contents:' + Style.RESET_ALL)\n    for _items in _find_in_files('^[ ]*from.*import.*'):\n        _item = _items[0]\n        _filename = _items[1]\n        _library_name = re.sub(' import.*', '', _item)\n        _library_name = re.sub(_regex, '', _library_name).strip()\n        if IGNORE_LIB and re.match(_lib_dir_regex, _library_name):\n            pass\n        elif len(_library_name) > 1 and _library_name not in _froms:\n            _froms.append(_library_name)\n    _froms.sort()\n    print(Fore.CYAN + \"\\n-- complete: {:d} instances of '{}' found.\".format(len(_froms), _regex) + Style.RESET_ALL)\n    return _froms", "fn_id": 3, "class_fn": false, "repo": "ifurusato/ros", "file": "import_report.py", "last_update_at": "2021-07-23T14:20:05+00:00", "pred": {"ppl": 6.049800395965576, "ppl_lower": 6.437732696533203, "ppl/lowercase_ppl": -1.0345279224667085, "ppl/zlib": 0.004245342639377606, "Min_5.0% Prob": 11.24476278745211, "Min_10.0% Prob": 9.174415551699125, "Min_20.0% Prob": 6.998078162853535, "Min_30.0% Prob": 5.626671080405895, "Min_40.0% Prob": 4.459109558222385, "Min_50.0% Prob": 3.5871545080351463, "Min_60.0% Prob": 3.0014458894966896}}
{"hexsha": "f5243a5a3b358ca43895541eb22f25937e8336f3", "ext": "py", "lang": "Python", "content": "def try_to_get_last_line_as_json(file_location: str, max_tries=3, await_in_seconds_between_tries=1) -> Optional[dict]:\n    attempts = 0\n    while True:\n        line = last_line_from_some_file(file_location)\n        line_as_json = json.loads(line) if line else None\n        if line_as_json:\n            return line_as_json\n        if attempts >= max_tries:\n            return None\n        sleep(await_in_seconds_between_tries)\n        attempts += 1", "fn_id": 5, "class_fn": false, "repo": "juntossomosmais/python-fluentd-testing", "file": "python_fluentd_testing/utils.py", "last_update_at": "2021-11-12T20:00:54+00:00", "pred": {"ppl": 3.145733594894409, "ppl_lower": 3.9011571407318115, "ppl/lowercase_ppl": -1.1877986407062344, "ppl/zlib": 0.005162374416532405, "Min_5.0% Prob": 10.456493377685547, "Min_10.0% Prob": 8.012933254241943, "Min_20.0% Prob": 5.451706111431122, "Min_30.0% Prob": 3.7941740907728674, "Min_40.0% Prob": 2.8915431692774565, "Min_50.0% Prob": 2.2907373375996056, "Min_60.0% Prob": 1.919380539256963}}
{"hexsha": "b82969bc09d27dd516accba17236411cb1f5adb8", "ext": "py", "lang": "Python", "content": "def test_get_binary_patterns():\n    wl = Wordlist(data_path('wichmannmixezoquean.tsv'))\n    pats, characters = get_binary_patterns(wl, 'cogid')\n    etd = wl.get_etymdict(ref='cogid')\n    assert len(etd) == len(pats)", "fn_id": 0, "class_fn": false, "repo": "WesScivetti/data", "file": "tests/test_wordlist.py", "last_update_at": "2021-05-23T18:25:06+00:00", "pred": {"ppl": 8.718350410461426, "ppl_lower": 9.013310432434082, "ppl/lowercase_ppl": -1.015365250360979, "ppl/zlib": 0.014246250308639317, "Min_5.0% Prob": 13.083290417989096, "Min_10.0% Prob": 10.99466609954834, "Min_20.0% Prob": 8.045863564809164, "Min_30.0% Prob": 6.426253741437739, "Min_40.0% Prob": 5.188879164059957, "Min_50.0% Prob": 4.255965238339023, "Min_60.0% Prob": 3.632665201359325}}
{"hexsha": "1609ca3cfecd7e4bdac13a4eed7e722233b86773", "ext": "py", "lang": "Python", "content": "async def get_prefix(bot_, message):\n    \"\"\"Returns the appropriate prefix for the bot.\"\"\"\n    with open('./data/options.json', 'r') as options_file:\n        options_dict = json.load(options_file)\n    if message.guild and str(message.guild.id) in options_dict:\n        prefixes = options_dict[str(message.guild.id)]['prefix']\n    else:\n        prefixes = '.'\n    return commands.when_mentioned_or(*prefixes)(bot_, message)", "fn_id": 0, "class_fn": false, "repo": "ethantv1234567890/ServerAntiRaid", "file": "main.py", "last_update_at": "2021-01-28T06:22:08+00:00", "pred": {"ppl": 2.4192187786102295, "ppl_lower": 2.5273587703704834, "ppl/lowercase_ppl": -1.0494995616288048, "ppl/zlib": 0.0039264207524235565, "Min_5.0% Prob": 8.331112957000732, "Min_10.0% Prob": 6.158759745684537, "Min_20.0% Prob": 4.307339744134382, "Min_30.0% Prob": 2.948875068037799, "Min_40.0% Prob": 2.2230768505568532, "Min_50.0% Prob": 1.7819156873463229, "Min_60.0% Prob": 1.4857154504173773}}
{"hexsha": "9886643486593889d35875fc98bf1b7805dee00d", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('operation', [cirq.CNOT(AspenQubit(0, 1), AspenQubit(0, 2))])\ndef test_rigetti_qcs_aspen_device_valid_operation(operation: cirq.Operation, qcs_aspen8_isa: InstructionSetArchitecture):\n    \"\"\"test RigettiQCSAspenDevice throws no error when validating 2Q operations on\n    adjacent qubits\n    \"\"\"\n    device = RigettiQCSAspenDevice(isa=qcs_aspen8_isa)\n    device.validate_operation(operation)", "fn_id": 14, "class_fn": false, "repo": "dabacon/Cirq", "file": "cirq-rigetti/cirq_rigetti/aspen_device_test.py", "last_update_at": "2021-04-29T15:30:32+00:00", "pred": {"ppl": 4.829675197601318, "ppl_lower": 7.730119705200195, "ppl/lowercase_ppl": -1.2986736961034226, "ppl/zlib": 0.006427670279713779, "Min_5.0% Prob": 11.75057077407837, "Min_10.0% Prob": 9.426010608673096, "Min_20.0% Prob": 6.6069113766705545, "Min_30.0% Prob": 5.016744881868362, "Min_40.0% Prob": 3.8866069074030274, "Min_50.0% Prob": 3.163036153943681, "Min_60.0% Prob": 2.6224467140840897}}
{"hexsha": "8090bbc869f16bd9ee00e270a16a5e0352ae7028", "ext": "py", "lang": "Python", "content": "def categoryFilter(doc):\n    categories = doc.Settings.Categories\n    cats = [ElementCategoryFilter(c.Id) for c in categories if c.CategoryType == CategoryType.Model and c.CanAddSubcategory]\n    filter = None\n    if len(cats):\n        try:\n            filter = LogicalOrFilter(List[ElementFilter](cats))\n        except Exception as ex:\n            raise Exception(str(ex) + str(len(cats)))\n    return filter", "fn_id": 0, "class_fn": false, "repo": "pabloderen/pyRevitExtension", "file": "lib/tools.py", "last_update_at": "2021-10-24T00:05:02+00:00", "pred": {"ppl": 6.894728660583496, "ppl_lower": 16.072168350219727, "ppl/lowercase_ppl": -1.4383419952969427, "ppl/zlib": 0.008980265848377111, "Min_5.0% Prob": 12.33548903465271, "Min_10.0% Prob": 10.219176769256592, "Min_20.0% Prob": 7.516793451811138, "Min_30.0% Prob": 5.950013826633322, "Min_40.0% Prob": 4.711011414344494, "Min_50.0% Prob": 3.8113823925354042, "Min_60.0% Prob": 3.2444605985335233}}
{"hexsha": "534d6702940b8bc6ddbaba4862587a1683235de5", "ext": "py", "lang": "Python", "content": "def view_form_force(form, force, forcescale=0.5, edge_label=True):\n    if edge_label:\n        form_edge_label = {uv: index for index, uv in enumerate(form.edges())}\n        force_edge_label = force_edge_labels\n    else:\n        form_edge_label = None\n        force_edge_label = None\n    viewer = Viewer(form, force, delay_setup=False)\n    viewer.draw_form(edgelabel=form_edge_label, forces_on=True, forcescale=forcescale, vertexcolor={key: '#000000' for key in form.vertices_where({'is_fixed': True})})\n    viewer.draw_force(edgelabel=force_edge_label)\n    viewer.show()", "fn_id": 0, "class_fn": false, "repo": "BlockResearchGroup/compas_ags", "file": "scripts/paper-CSD/exampleD_truss_constant.py", "last_update_at": "2021-12-15T18:47:04+00:00", "pred": {"ppl": 3.6447057723999023, "ppl_lower": 4.449347496032715, "ppl/lowercase_ppl": -1.1542453964361474, "ppl/zlib": 0.005071669181664997, "Min_5.0% Prob": 10.184090733528137, "Min_10.0% Prob": 8.028586555929746, "Min_20.0% Prob": 5.279226742471967, "Min_30.0% Prob": 4.08002410026697, "Min_40.0% Prob": 3.191977913039071, "Min_50.0% Prob": 2.574692969887771, "Min_60.0% Prob": 2.1650556415142046}}
{"hexsha": "b36cd3ac7c6ccf4bb43ebb3004f30af35e47297a", "ext": "py", "lang": "Python", "content": "def generateCoordsForLayersPG(dictDlsLayers, graphvizLayout, isHorizontal):\n    theGraph = pyg.AGraph()\n    for kk, vv in dictDlsLayers.items():\n        for ll in vv['cfg']['wires']:\n            theGraph.add_edge(kk, ll)\n    if isHorizontal:\n        pArgs = '-Grankdir=LR'\n    else:\n        pArgs = '-Grankdir=TB'\n    if graphvizLayout is None:\n        graphvizLayout = 'dot'\n    theGraph.layout(prog=graphvizLayout, args=pArgs)\n    theGraphPos = {}\n    for kk in dictDlsLayers.keys():\n        tnode = theGraph.get_node(kk)\n        tpos = [int(float(xx)) for xx in tnode.attr['pos'].split(',')]\n        theGraphPos[kk] = tuple(tpos)\n    return theGraphPos", "fn_id": 2, "class_fn": false, "repo": "SummaLabs/DLS", "file": "app/backend/core/models/convertors/keras2dls.py", "last_update_at": "2021-02-16T23:08:34+00:00", "pred": {"ppl": 4.245131969451904, "ppl_lower": 5.354841232299805, "ppl/lowercase_ppl": -1.160625604664545, "ppl/zlib": 0.004532203471756079, "Min_5.0% Prob": 11.310340881347656, "Min_10.0% Prob": 9.505988447289718, "Min_20.0% Prob": 6.59872676164676, "Min_30.0% Prob": 4.782879606141883, "Min_40.0% Prob": 3.6310623336253287, "Min_50.0% Prob": 2.9046249764153, "Min_60.0% Prob": 2.4173837684470567}}
{"hexsha": "3fa1da9767d379e042b89a14701794778faba152", "ext": "py", "lang": "Python", "content": "@numba.njit([types.Long(types.Keys)], cache=True)\ndef find_depth(tree):\n    \"\"\"\n    Return maximum depth of a linear octree.\n    \"\"\"\n    levels = morton.find_level(np.unique(tree))\n    return np.max(levels)", "fn_id": 7, "class_fn": false, "repo": "Excalibur-SLE/AdapOctree", "file": "adaptoctree/tree.py", "last_update_at": "2021-04-27T10:58:52+00:00", "pred": {"ppl": 12.240504264831543, "ppl_lower": 15.517684936523438, "ppl/lowercase_ppl": -1.0947119744081775, "ppl/zlib": 0.016370918132958913, "Min_5.0% Prob": 14.14556090037028, "Min_10.0% Prob": 12.634750207265219, "Min_20.0% Prob": 10.120958606402079, "Min_30.0% Prob": 7.732779753835578, "Min_40.0% Prob": 6.210850269794464, "Min_50.0% Prob": 4.976605121977627, "Min_60.0% Prob": 4.209167324594762}}
{"hexsha": "52b60b2ec451113de42ad06d277c614499c2007a", "ext": "py", "lang": "Python", "content": "@expose_builtin('del_attrs', unwrap_spec=['obj'])\ndef impl_del_attrs(engine, heap, attvar):\n    if isinstance(attvar, AttVar):\n        if attvar.value_list is not None:\n            for name, index in attvar.attmap.indexes.iteritems():\n                heap.add_trail_atts(attvar, name)\n            attvar.value_list = None", "fn_id": 5, "class_fn": false, "repo": "ForoughA/CORGI", "file": "testnet/prolog/builtin/attvars.py", "last_update_at": "2021-12-11T12:39:51+00:00", "pred": {"ppl": 10.606005668640137, "ppl_lower": 13.403246879577637, "ppl/lowercase_ppl": -1.099125326246405, "ppl/zlib": 0.012172270171080588, "Min_5.0% Prob": 12.686635494232178, "Min_10.0% Prob": 10.590059810214573, "Min_20.0% Prob": 8.341777192221748, "Min_30.0% Prob": 6.887328227361043, "Min_40.0% Prob": 5.677592853705089, "Min_50.0% Prob": 4.6697923527823555, "Min_60.0% Prob": 3.9267636061542563}}
{"hexsha": "504b87ddee9917d8fa486f13be56f5b536985c45", "ext": "py", "lang": "Python", "content": "def test_client_with_wrong_credentials(zendesk_credentials):\n    \"\"\"Test check with wrong credentials\"\"\"\n    client = Client(**zendesk_credentials)\n    alive, error = client.health_check()\n    assert not alive\n    assert error", "fn_id": 0, "class_fn": false, "repo": "rajatariya21/airbyte", "file": "airbyte-integrations/connectors/source-zendesk-talk/unit_tests/unit_test.py", "last_update_at": "2021-04-30T13:53:34+00:00", "pred": {"ppl": 5.4434990882873535, "ppl_lower": 8.166475296020508, "ppl/lowercase_ppl": -1.2393826981312435, "ppl/zlib": 0.012368044298194197, "Min_5.0% Prob": 10.842841625213623, "Min_10.0% Prob": 8.774969577789307, "Min_20.0% Prob": 6.680672883987427, "Min_30.0% Prob": 5.182675290107727, "Min_40.0% Prob": 4.1485117226839066, "Min_50.0% Prob": 3.4112180507183076, "Min_60.0% Prob": 2.865502874304851}}
{"hexsha": "241fb0211e37aae619cf601b0686c40ee27576eb", "ext": "py", "lang": "Python", "content": "def update_doing_card():\n    \"\"\"\n    DOING \uc0c1\ud0dc\uc758 \uce74\ub4dc\uc758 DURATION\uc744 \uc0c8\ub85c \uae30\ub85d\ud569\ub2c8\ub2e4.\n    DURATION\uc758 \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0\uc5d0\ub294 \uc2dc\uc791\uc77c\uc744 \ub2f9\uc77c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n    \"\"\"\n    status = notion.CARD_STATUS\n    doing = notion.DOING\n    duration = notion.CARD_DURATION\n    today = date.today()\n    for card_id in notion.get_filtered_card_ids(status, doing):\n        card = notion.client.get_block(card_id)\n        notion_date = card.get_property(duration)\n        if not notion_date or notion_date.start == None:\n            notion_date = NotionDate(start=today)\n        card.set_property(duration, notion_date)", "fn_id": 1, "class_fn": false, "repo": "wormwlrm/notion-scrum-analytics", "file": "commands/run_update_duration.py", "last_update_at": "2021-08-29T03:23:02+00:00", "pred": {"ppl": 4.1692705154418945, "ppl_lower": 5.037683486938477, "ppl/lowercase_ppl": -1.1325207131402764, "ppl/zlib": 0.004056082625462198, "Min_5.0% Prob": 10.85576581954956, "Min_10.0% Prob": 8.552549698773552, "Min_20.0% Prob": 5.927577481951032, "Min_30.0% Prob": 4.451218908687808, "Min_40.0% Prob": 3.4913626539875082, "Min_50.0% Prob": 2.8352329426267175, "Min_60.0% Prob": 2.3931432849253125}}
{"hexsha": "7354359d5802ce995119a41c90b85838a4204d5d", "ext": "py", "lang": "Python", "content": "@app.route('/commands_per_day')\n@cache(time=datetime.timedelta(minutes=DEFAULT_CACHE_MINUTES))\ndef commands_per_day():\n    command_names = [row.get('command_name') for row in bigquery_client.query('SELECT DISTINCT command_name FROM analytics.commands').result()]\n    print(command_names)\n    command_names = filter(lambda item: item not in ['list', 'set', 'voices', 'languages', 'property'], command_names)\n    result = {}\n    for command_name in command_names:\n        usage = {date: {'text_count': 0, 'slash_count': 0} for date in get_days_in_range(datetime.datetime(2021, 1, 1), datetime.datetime.today())}\n        query = 'SELECT DATE(time) as d, COUNTIF(NOT is_slash) as cnt, COUNTIF(is_slash) as slash_cnt FROM analytics.commands WHERE command_name = @command_name GROUP BY d ORDER BY d'\n        job_config = bigquery.QueryJobConfig(query_parameters=[bigquery.ScalarQueryParameter('command_name', 'STRING', command_name)])\n        for row in bigquery_client.query(query, job_config=job_config).result():\n            d = row_to_dict(row)\n            usage[d['d']]['text_count'] = d['cnt']\n            usage[d['d']]['slash_count'] = d['slash_cnt']\n        result[command_name] = [{'date': date, **usage[date]} for date in usage.keys()]\n    response = jsonify(result)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response", "fn_id": 4, "class_fn": false, "repo": "TychoTheTaco/Discord-Dictionary-Bot", "file": "api/main.py", "last_update_at": "2021-12-12T20:35:49+00:00", "pred": {"ppl": 2.6834521293640137, "ppl_lower": 3.306387186050415, "ppl/lowercase_ppl": -1.2114792560359071, "ppl/zlib": 0.001554494604086725, "Min_5.0% Prob": 9.416329434043483, "Min_10.0% Prob": 7.340556521164744, "Min_20.0% Prob": 4.6632095668222995, "Min_30.0% Prob": 3.2514793398822177, "Min_40.0% Prob": 2.4724630749506225, "Min_50.0% Prob": 1.9783101967280161, "Min_60.0% Prob": 1.64649520150726}}
{"hexsha": "f31065a13878fbae4e2467fa58de8efe0ace1f13", "ext": "py", "lang": "Python", "content": "def test_delete_all_album():\n    rq_album.delete_all(token=env.env_var['USER_1_TOKEN'], user_id=env.env_var['USER_1_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_2_TOKEN'], user_id=env.env_var['USER_2_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_3_TOKEN'], user_id=env.env_var['USER_3_MAIL'])", "fn_id": 3, "class_fn": false, "repo": "OsiriX-Foundation/IntegrationTest", "file": "test_sharing_with_album_token_no_permission.py", "last_update_at": "2021-06-02T07:41:28+00:00", "pred": {"ppl": 2.4192276000976562, "ppl_lower": 2.5001156330108643, "ppl/lowercase_ppl": -1.0372276088091859, "ppl/zlib": 0.007958993835211921, "Min_5.0% Prob": 7.830611864725749, "Min_10.0% Prob": 6.579959233601888, "Min_20.0% Prob": 4.3871043682098385, "Min_30.0% Prob": 2.9709833933922805, "Min_40.0% Prob": 2.2167766048828614, "Min_50.0% Prob": 1.7668421903235867, "Min_60.0% Prob": 1.4879016978836597}}
{"hexsha": "1b7e2d214e5eeb85cf50702bb2e69e77348f954c", "ext": "py", "lang": "Python", "content": "def _delete_old(old_ids):\n    db = get_db('yahoo')\n    for item in ['financial_data', 'key_stats']:\n        collection = db[item]\n        id_ = old_ids[item]\n        if id_:\n            result = collection.delete_many({'_id': {'$lte': id_}})\n            logger.info(f'\u5220\u9664 {item} \u65e7\u6570\u636e {result.deleted_count} \u884c')", "fn_id": 5, "class_fn": false, "repo": "NeoBert/liudengfeng-cnswd", "file": "cnswd/scripts/yahoo.py", "last_update_at": "2021-06-26T13:23:01+00:00", "pred": {"ppl": 4.497493267059326, "ppl_lower": 4.497493267059326, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006772613467570732, "Min_5.0% Prob": 8.548635482788086, "Min_10.0% Prob": 7.409677929348415, "Min_20.0% Prob": 5.683208779284828, "Min_30.0% Prob": 4.702671953610012, "Min_40.0% Prob": 3.707386247421566, "Min_50.0% Prob": 2.995757596256832, "Min_60.0% Prob": 2.5298605217157224}}
{"hexsha": "a9df1185d80d2c045bcd42e083755fc20bd784de", "ext": "py", "lang": "Python", "content": "def split_indices(idx, n_total, fractions):\n    \"\"\"\n    splits idx containing n_total distinct events into fractions given in fractions list.\n    returns the number of events in each split\n    \"\"\"\n    num_ids = [ceil(n_total * f) for f in fractions]\n    if sum(num_ids) > n_total:\n        num_ids[-1] -= sum(num_ids) - n_total\n    return num_ids", "fn_id": 0, "class_fn": false, "repo": "fact-project/classifier", "file": "aict_tools/scripts/split_data.py", "last_update_at": "2021-01-22T11:57:26+00:00", "pred": {"ppl": 4.398076057434082, "ppl_lower": 4.398076057434082, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.008049821661001388, "Min_5.0% Prob": 10.204347610473633, "Min_10.0% Prob": 8.610734987258912, "Min_20.0% Prob": 6.215871059894562, "Min_30.0% Prob": 4.684355135758718, "Min_40.0% Prob": 3.6671014353632927, "Min_50.0% Prob": 2.9580254094302654, "Min_60.0% Prob": 2.4682202138782787}}
{"hexsha": "0e43d54d54e3eafdf583b28f0be4bd0753b4013d", "ext": "py", "lang": "Python", "content": "@app.route('/json-rpc', methods=['GET', 'POST', 'OPTIONS'])\ndef jsonrpc():\n    result = ''\n    if request.headers['CONTENT_LENGTH']:\n        handler = JSONRPCHandler()\n        result = handler.handle(request.data)\n    response = make_response(result, 200)\n    hdr = 'Access-Control-Allow-%s'\n    response.headers[hdr % 'Origin'] = '*'\n    response.headers[hdr % 'Headers'] = 'Content-Type, Authentication'\n    response.headers[hdr % 'Method'] = 'POST, GET, OPTIONS, PUT, DELETE, TRACE'\n    return response", "fn_id": 0, "class_fn": false, "repo": "MasonM/apeye", "file": "examples/api.apeye.org/example_server/rpc.py", "last_update_at": "2021-07-27T18:31:15+00:00", "pred": {"ppl": 3.5487890243530273, "ppl_lower": 4.304771423339844, "ppl/lowercase_ppl": -1.1524685265941326, "ppl/zlib": 0.004382721195128516, "Min_5.0% Prob": 11.182674249013266, "Min_10.0% Prob": 8.405134017650898, "Min_20.0% Prob": 5.900255463741444, "Min_30.0% Prob": 4.177046198670457, "Min_40.0% Prob": 3.177812791412527, "Min_50.0% Prob": 2.547561600804329, "Min_60.0% Prob": 2.1206195148616938}}
{"hexsha": "6461501746c4c91ad65a43d4651b57d08946bf5f", "ext": "py", "lang": "Python", "content": "def contains_inappropriate_phrases(tweet_text):\n    if 'sex' in tweet_text:\n        return True\n    return False", "fn_id": 4, "class_fn": false, "repo": "mgreiler/code-review-twitter-bot", "file": "code-review-bot/matching_rules.py", "last_update_at": "2021-10-04T08:36:17+00:00", "pred": {"ppl": 4.977978706359863, "ppl_lower": 6.965514659881592, "ppl/lowercase_ppl": -1.2093100077161039, "ppl/zlib": 0.017833599182077862, "Min_5.0% Prob": 9.713467597961426, "Min_10.0% Prob": 7.843461990356445, "Min_20.0% Prob": 6.285021018981934, "Min_30.0% Prob": 5.168459534645081, "Min_40.0% Prob": 4.144923936236989, "Min_50.0% Prob": 3.3086640076445684, "Min_60.0% Prob": 2.7337023451486053}}
{"hexsha": "dedf80bf95ac67960c80fd880c96b74b9b20d6cf", "ext": "py", "lang": "Python", "content": "def test_local_missing_url(tmpdir):\n    \"\"\" Test creating a toolchain from path to a local feed xml \"\"\"\n    full = '<feed>\\n<feed />\\n</feed>\\n'\n    with pytest.raises(Exception) as e:\n        _generic_test_local(tmpdir, full)\n    assert 'not parse' in str(e)\n    assert \"Non-root 'feed' element must have an 'url' attribute\" in str(e)", "fn_id": 9, "class_fn": false, "repo": "aldebaran/qibuild", "file": "python/qitoolchain/test/test_feed.py", "last_update_at": "2021-07-27T06:46:59+00:00", "pred": {"ppl": 11.727931022644043, "ppl_lower": 13.848018646240234, "ppl/lowercase_ppl": -1.067494193830048, "ppl/zlib": 0.011140150514487317, "Min_5.0% Prob": 12.98911714553833, "Min_10.0% Prob": 10.99140633477105, "Min_20.0% Prob": 8.66795768235859, "Min_30.0% Prob": 7.123291114280963, "Min_40.0% Prob": 5.973435116441626, "Min_50.0% Prob": 4.917047007009387, "Min_60.0% Prob": 4.105570643883327}}
{"hexsha": "3ca816c1fdae9c07f862a54969748690cccccdc9", "ext": "py", "lang": "Python", "content": "def get_authorization_token(event) -> str:\n    cookie = SimpleCookie()\n    cookie.load(', '.join(event['cookies']))\n    if COOKIE_TOKEN_KEY in cookie:\n        return cookie[COOKIE_TOKEN_KEY].value\n    header = event['headers'].get('authorization')\n    if header is None:\n        return None\n    return header.replace('Bearer ', '')", "fn_id": 0, "class_fn": false, "repo": "adacotech/terraform-aws-api-auth-proxy", "file": "modules/oauth2/lambda/authorizer/function.py", "last_update_at": "2021-09-17T03:22:05+00:00", "pred": {"ppl": 4.5796332359313965, "ppl_lower": 7.442389011383057, "ppl/lowercase_ppl": -1.3191160287445522, "ppl/zlib": 0.007763361813411217, "Min_5.0% Prob": 12.85057258605957, "Min_10.0% Prob": 10.11034733908517, "Min_20.0% Prob": 6.990701023737589, "Min_30.0% Prob": 5.057504892349243, "Min_40.0% Prob": 3.841872242189223, "Min_50.0% Prob": 3.0716781767132955, "Min_60.0% Prob": 2.5549799323161233}}
{"hexsha": "fbbdcaf00a8d9fa8c6f2f80cfad9ef55df7708dc", "ext": "py", "lang": "Python", "content": "def fromList(li: List[int]):\n    if len(li) == 0:\n        return None\n    root = TreeNode(val=li[0])\n    queue = [root]\n    i = 1\n    while i < len(li):\n        node = queue[0]\n        del queue[0]\n        if li[i] is not None:\n            node.left = TreeNode(val=li[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(li):\n            if li[i]:\n                node.right = TreeNode(val=li[i])\n                queue.append(node.right)\n            i += 1\n    return root", "fn_id": 0, "class_fn": false, "repo": "wanglongjiang/leetcode", "file": "easy/897-increasing-order-search-tree.py", "last_update_at": "2021-03-14T11:38:30+00:00", "pred": {"ppl": 1.5158560276031494, "ppl_lower": 1.7869832515716553, "ppl/lowercase_ppl": -1.3955681172135377, "ppl/zlib": 0.0020291722639554696, "Min_5.0% Prob": 5.960975102015904, "Min_10.0% Prob": 3.912870751959937, "Min_20.0% Prob": 2.0863661694115607, "Min_30.0% Prob": 1.4118223042162352, "Min_40.0% Prob": 1.0470582432312296, "Min_50.0% Prob": 0.8319480185474114, "Min_60.0% Prob": 0.6980796113516223}}
{"hexsha": "9a9f21e89303399d79c67e75c99b8d626266c51f", "ext": "py", "lang": "Python", "content": "def get_maximum_mutation_frequency(counts, distance_matrix, frequencies):\n    \"\"\"\n    # ========================================================================\n\n    GET MAXMIMUM MUTATION FREQUENCY\n\n    PURPOSE\n    -------\n\n    Returns the maximum mutation frequency of the haplotypes.\n\n\n    INPUT\n    -----\n\n    [INT LIST] [counts]\n        A haplotype counts, from the counts of the most abundant to the counts\n        of the least abundant haplotype.\n\n    [FLOAT LIST] [frequencies]\n        A list of (relative) frequencies of the Haplotypes.\n\n    [2D ARRAY] [distance_matrix]\n        A two dimensional array, representing the distance matrix of distances\n        between the sorted haplotypes.\n\n        This is expected to be calculated in a similar manner as:\n            haplotype.build_distiance_matrix(haplotypes)\n\n\n    RETURN\n    ------\n\n    [FLOAT] [maximum_mutation_frequency]\n        The maximum mutation frequency.\n\n    # ========================================================================\n    \"\"\"\n    H = len(counts)\n    F = frequencies\n    D = distance_matrix\n    maximum_mutation_frequency = calculate.maximum_mutation_frequency(H, F, D)\n    return maximum_mutation_frequency", "fn_id": 7, "class_fn": false, "repo": "phac-nml/quasitools", "file": "quasitools/commands/cmd_complexity.py", "last_update_at": "2021-03-15T07:28:20+00:00", "pred": {"ppl": 6.84263277053833, "ppl_lower": 6.734691619873047, "ppl/lowercase_ppl": -0.9917321280909543, "ppl/zlib": 0.00413585497967705, "Min_5.0% Prob": 9.75903606414795, "Min_10.0% Prob": 8.800763209660849, "Min_20.0% Prob": 7.168433805306752, "Min_30.0% Prob": 5.736359746488806, "Min_40.0% Prob": 4.661499051089139, "Min_50.0% Prob": 3.8130444241840333, "Min_60.0% Prob": 3.2090647406365775}}
{"hexsha": "e8db797381a8d4f3d0f04952d696026266dfabdc", "ext": "py", "lang": "Python", "content": "def add_zero(lst):\n    \"\"\" Add pulses for logical zero \"\"\"\n    pulse = 1875\n    space = 1875\n    lst.extend([pulse, space])\n    return lst", "fn_id": 2, "class_fn": false, "repo": "skbobade/UniversalRemote", "file": "src/irxm.py", "last_update_at": "2021-03-31T23:54:12+00:00", "pred": {"ppl": 11.590466499328613, "ppl_lower": 11.97809886932373, "ppl/lowercase_ppl": -1.013426336973426, "ppl/zlib": 0.02289890567008803, "Min_5.0% Prob": 14.184146881103516, "Min_10.0% Prob": 11.171750783920288, "Min_20.0% Prob": 8.58320826292038, "Min_30.0% Prob": 6.961839536825816, "Min_40.0% Prob": 5.563768520074732, "Min_50.0% Prob": 4.807644798642113, "Min_60.0% Prob": 4.165898320674896}}
{"hexsha": "6e0e15f18889c25b4f39d64ec87555d40f8d8c97", "ext": "py", "lang": "Python", "content": "def apply_mask_criteria(column):\n    \"\"\"Apply simple masking criteria to a single column, and return '-' if the\n    column does not meet the criteria, and 'I' if it does.\n    \"\"\"\n    mask_char = '-'\n    num_seqs = len(column)\n    half_num_seqs = num_seqs / 2\n    num_gaps_in_col = column.count('-')\n    column_no_gaps = column.replace('-', '')\n    if column_no_gaps == '':\n        return mask_char\n    elif not column_no_gaps == '':\n        most_common_residue = collections.Counter(column_no_gaps).most_common(1)[0]\n        most_common_residue_count = most_common_residue[1]\n        percent_identity = most_common_residue_count * 100 / num_seqs\n        if num_gaps_in_col < num_seqs * 0.3:\n            mask_char = 'I'\n        if percent_identity >= 50:\n            mask_char = 'I'\n        return mask_char", "fn_id": 0, "class_fn": false, "repo": "laelbarlow/amoebae", "file": "amoebaelib/mask_nex.py", "last_update_at": "2021-11-28T08:32:05+00:00", "pred": {"ppl": 3.1759727001190186, "ppl_lower": 3.4136416912078857, "ppl/lowercase_ppl": -1.0624479468788792, "ppl/zlib": 0.0034807649026130615, "Min_5.0% Prob": 9.523486892382303, "Min_10.0% Prob": 7.42342655857404, "Min_20.0% Prob": 4.993933643613543, "Min_30.0% Prob": 3.7704536253458834, "Min_40.0% Prob": 2.8710391662862835, "Min_50.0% Prob": 2.3172547472182843, "Min_60.0% Prob": 1.9258066591898575}}
{"hexsha": "d24a6419f9fcb2d3facd5e3d432818cfe2776fbb", "ext": "py", "lang": "Python", "content": "def get_activity_rawdata(cfg: DictConfig, id: int) -> pd.DataFrame:\n    \"\"\"query rawdata from strava api for a given id\n\n    Args:\n        cfg (DictConfig): configuration\n        id (int): activity id\n\n    Returns:\n        pd.DataFrame: activity rawdata\n    \"\"\"\n    with MySession(cfg) as session:\n        stream = session.get(cfg.api.BASE_URL + f'/activities/{id}/streams', params={'keys': ','.join(cfg.api.STREAMS)})\n    activity = dict()\n    found = list()\n    for values in stream.json():\n        activity[values['type']] = values['data']\n        found.append(values['type'])\n    res_df = pd.DataFrame(activity)\n    try:\n        res_df['lat'] = res_df['latlng'].apply(lambda x: x[0])\n        res_df['long'] = res_df['latlng'].apply(lambda x: x[-1])\n    except KeyError:\n        res_df['lat'], res_df['long'] = (np.nan, np.nan)\n    missings = set(cfg.api.STREAMS) - set(found)\n    if missings:\n        for missing in missings:\n            res_df[missing] = np.nan\n    res_df['id'] = id\n    if 'latlng' in res_df:\n        del res_df['latlng']\n    if cfg.TO_DB:\n        res_df['last_update'] = save_datetime_now()\n        with sqlite3.connect(call(cfg.DB)) as con:\n            res_df.to_sql('ACTIVITIES_RAW', con=con, if_exists='append', index=False, index_label='id')\n    time.sleep(cfg.api.SLEEP)\n    return res_df", "fn_id": 6, "class_fn": false, "repo": "Ektoplasmakugel/strava_datacollect", "file": "strava_datacollect/strava_query.py", "last_update_at": "2021-01-05T10:58:30+00:00", "pred": {"ppl": 3.2603447437286377, "ppl_lower": 3.6910555362701416, "ppl/lowercase_ppl": -1.1049890613156235, "ppl/zlib": 0.0019248093475529838, "Min_5.0% Prob": 10.43270697593689, "Min_10.0% Prob": 8.0649063706398, "Min_20.0% Prob": 5.372853051126003, "Min_30.0% Prob": 3.873641548802455, "Min_40.0% Prob": 2.9439661676529796, "Min_50.0% Prob": 2.361976643553935, "Min_60.0% Prob": 1.9694588405177151}}
{"hexsha": "66ec3f6ee6f74fd6f9a9ebdb2510fc97b493104f", "ext": "py", "lang": "Python", "content": "def get_output_dir(output_dir):\n    if not output_dir or os.path.isfile(output_dir):\n        output_dir = '.'\n    elif not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    return output_dir", "fn_id": 0, "class_fn": false, "repo": "bjwuzh/autocase", "file": "axxac/path_tool.py", "last_update_at": "2021-07-02T09:46:23+00:00", "pred": {"ppl": 1.9411472082138062, "ppl_lower": 1.9411472082138062, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006198870492898297, "Min_5.0% Prob": 5.357719898223877, "Min_10.0% Prob": 4.463677962621053, "Min_20.0% Prob": 3.080437128742536, "Min_30.0% Prob": 2.180194355547428, "Min_40.0% Prob": 1.6549374011034768, "Min_50.0% Prob": 1.3264100029288481, "Min_60.0% Prob": 1.1054510620156686}}
{"hexsha": "95f32217242b488480e02ece9bfc4b27508cb75d", "ext": "py", "lang": "Python", "content": "def minimal(input_size=2, output_size=2, weight_low=-2, weight_high=2, depth=3):\n    \"\"\" Builds a minimal genome with specified inputs and\n    outputs, weight bounds, depth and one connected node in\n    the first layer.\n\n    :param input_size: Number of input nodes\n    :param output_size: Number of output nodes\n    :param weight_low: Maximum weight on node and edges\n    :param weight_high: Minimum weight on node and edges\n    :param depth: Number of layers in network.\n    :return: Constructed genome.\n    \"\"\"\n    genome = Genome(input_size=input_size, output_size=output_size, weight_low=weight_low, weight_high=weight_high, depth=depth)\n    genome.layers = [genome.inputs, *[[] for _ in range(depth)], genome.outputs]\n    genome.add_node(1)\n    for n in genome.inputs:\n        genome.add_edge(n, genome.layers[1][0])\n    for n in genome.outputs:\n        genome.add_edge(genome.layers[1][0], n)\n    return genome", "fn_id": 1, "class_fn": false, "repo": "mauicv/genrl", "file": "src/gerel/genome/factories.py", "last_update_at": "2021-03-25T23:29:07+00:00", "pred": {"ppl": 3.331172466278076, "ppl_lower": 3.5630111694335938, "ppl/lowercase_ppl": -1.055913177818785, "ppl/zlib": 0.0033333084044263623, "Min_5.0% Prob": 9.037579894065857, "Min_10.0% Prob": 7.421453380584717, "Min_20.0% Prob": 5.271506164073944, "Min_30.0% Prob": 3.925237849553426, "Min_40.0% Prob": 2.9971042064451936, "Min_50.0% Prob": 2.4142640451826747, "Min_60.0% Prob": 2.016043767424775}}
{"hexsha": "5d7651dffd876fa23e9cd979e7ddb5ed364b6b00", "ext": "py", "lang": "Python", "content": "def validate_bool(value):\n    \"\"\"Check that ``value`` is an boolean value.\"\"\"\n    if value not in (0, 1, False, True):\n        raise ValidationError(value, INVALID_BOOL)\n    return bool(value)", "fn_id": 4, "class_fn": false, "repo": "agarwalrounak/readthedocs.org", "file": "readthedocs/config/validation.py", "last_update_at": "2021-04-26T21:59:29+00:00", "pred": {"ppl": 5.853554725646973, "ppl_lower": 10.481252670288086, "ppl/lowercase_ppl": -1.3296677335995448, "ppl/zlib": 0.012271174459109623, "Min_5.0% Prob": 10.965471267700195, "Min_10.0% Prob": 8.875912427902222, "Min_20.0% Prob": 6.984284427430895, "Min_30.0% Prob": 5.474058900560651, "Min_40.0% Prob": 4.404405261340894, "Min_50.0% Prob": 3.568607265750567, "Min_60.0% Prob": 2.9804391051674712}}
{"hexsha": "65836e5e8c8f2024ffb8b16e84f296ad241bb07d", "ext": "py", "lang": "Python", "content": "def run_async(factor, func, *args, **kwargs):\n    \"\"\"\n    Asynchronously executes a callable within a :class:`hiro.Timeline`\n\n    :param int factor: scale factor to use for the timeline during execution\n    :param function func: the function to invoke\n    :param args: the arguments to pass to the function\n    :param kwargs: the keyword arguments to pass to the function\n    :returns: an instance of :class:`hiro.core.ScaledAsyncRunner`\n\n    \"\"\"\n    return ScaledAsyncRunner(factor, func, *args, **kwargs)", "fn_id": 1, "class_fn": false, "repo": "alisaifee/hiro", "file": "hiro/core.py", "last_update_at": "2021-04-07T15:42:23+00:00", "pred": {"ppl": 4.882803440093994, "ppl_lower": 6.472195625305176, "ppl/lowercase_ppl": -1.1777085228296222, "ppl/zlib": 0.006498850534206201, "Min_5.0% Prob": 11.128992080688477, "Min_10.0% Prob": 9.309571385383606, "Min_20.0% Prob": 6.639617085456848, "Min_30.0% Prob": 4.996192923850483, "Min_40.0% Prob": 3.8980310230205455, "Min_50.0% Prob": 3.1594912440826497, "Min_60.0% Prob": 2.6405910771184913}}
{"hexsha": "f3817abe4aba076e3056537deae3e73cf43cce08", "ext": "py", "lang": "Python", "content": "@patch('inventory.readers._logger', autospec=True)\ndef test_given_error_from_boto_then_account_is_skipped_but_others_still_processed(mock_logger):\n    os.environ['ACCOUNT_LIST'] = '[ { \"name\": \"foo\", \"id\": \"210987654321\" }, { \"name\": \"bar\", \"id\": \"123456789012\" } ]'\n    mock_mapper = Mock(spec=DataMapper)\n    mock_mapper.can_map.return_value = True\n    mock_mapper.map.return_value = [{'test': True}]\n    mock_select_resource_config = Mock(side_effect=[ClientError(error_response={'Error': {'Code': 'ResourceInUseException'}}, operation_name='select_resource_config'), {'NextToken': None, 'Results': [json.dumps({'resourceType': 'foobar'})]}])\n    mock_config_client_factory = Mock()\n    mock_config_client_factory.return_value.select_resource_config = mock_select_resource_config\n    reader = AwsConfigInventoryReader(lambda_context=MagicMock(), sts_client=Mock(), mappers=[mock_mapper])\n    reader._get_config_client = mock_config_client_factory\n    all_inventory = reader.get_resources_from_all_accounts()\n    assert len(all_inventory) == 1, 'inventory from the successful call should be returned'\n    assert len(mock_select_resource_config.mock_calls) == 2, 'boto should have been called twice to page through results'\n    mock_logger.error.assert_called_with(String() & Contains('moving onto next account'), ANY, ANY, exc_info=True)", "fn_id": 2, "class_fn": false, "repo": "Alpacked/fedramp-integrated-inventory-workbook", "file": "tests/test_inventory_reader.py", "last_update_at": "2021-12-15T22:29:08+00:00", "pred": {"ppl": 3.816758155822754, "ppl_lower": 5.332825660705566, "ppl/lowercase_ppl": -1.2497233655445656, "ppl/zlib": 0.0019961272906151516, "Min_5.0% Prob": 10.154278421401978, "Min_10.0% Prob": 8.19261566400528, "Min_20.0% Prob": 5.725682386755944, "Min_30.0% Prob": 4.303499158720175, "Min_40.0% Prob": 3.326276437472552, "Min_50.0% Prob": 2.6820006498508153, "Min_60.0% Prob": 2.237472494932202}}
{"hexsha": "640f81533781b97654cf6abb19ee0b856a6e367b", "ext": "py", "lang": "Python", "content": "def th_mdn_loss_dense(gt, mu, sigma, pi, mask, V, **kwargs):\n    C = 17\n    BS = gt.shape[0]\n    M = pi.shape[1]\n    H = gt.shape[2]\n    W = gt.shape[3]\n    gt = gt.permute(0, 2, 3, 1)\n    mu = mu.permute(0, 2, 3, 1)\n    sigma = sigma.permute(0, 2, 3, 1)\n    pi = pi.permute(0, 2, 3, 1)\n    mask = mask.permute(0, 2, 3, 1)\n    lmask = (torch.sum(mask, 3) > 0).float()\n    mask = torch.reshape(mask[:, :, :, np.repeat(np.arange(C), 2)], (BS, H, W, 1, C * 2))\n    mask = mask.repeat(1, 1, 1, M, 1)\n    gt = gt.reshape(BS, H, W, 1, 2 * C)\n    gt = gt.repeat(1, 1, 1, M, 1)\n    mu = mu.reshape(BS, H, W, M, 2 * C)\n    V = torch.reshape(V[np.repeat(np.arange(C), 2)], (1, 1, 1, 1, C * 2))\n    sigma = torch.reshape(sigma, (BS, H, W, M, 2))[:, :, :, :, np.concatenate([np.arange(2) for _ in np.arange(C)])]\n    e = 0.5 * ((gt - mu) * torch.reciprocal(sigma) * torch.reciprocal(V)) ** 2\n    e = torch.where(mask > 0.0, e, torch.zeros_like(e))\n    e = torch.sum(e, -1)\n    nviskps = torch.sum(mask[:, :, :, :, 0::2] > 0.0, -1).float().detach()\n    sigma_y = sigma[:, :, :, :, 0]\n    sigma_x = sigma[:, :, :, :, 1]\n    PI = torch.tensor(np.pi).cuda()\n    coef = -nviskps * torch.log(sigma_y) - nviskps * torch.log(sigma_x) - nviskps * torch.log(2 * PI)\n    exponent = torch.log(pi) + coef - e\n    loss = -torch.squeeze(log_sum_exp(exponent, 3), 3)\n    if kwargs.get('debug', False):\n        print('exponent.shape', exponent.shape)\n        print('loss.shape', loss.shape)\n    loss = torch.sum(lmask * loss) / (1.0 + torch.sum(lmask))\n    return loss", "fn_id": 4, "class_fn": false, "repo": "alivaramesh/MixtureDenseRegression", "file": "src/lib/models/losses.py", "last_update_at": "2021-11-30T01:22:48+00:00", "pred": {"ppl": 2.449018716812134, "ppl_lower": 2.469233512878418, "ppl/lowercase_ppl": -1.009177714283038, "ppl/zlib": 0.0014978050511294738, "Min_5.0% Prob": 8.088068369663123, "Min_10.0% Prob": 6.2266748529492, "Min_20.0% Prob": 4.09051611817869, "Min_30.0% Prob": 2.9136757607758046, "Min_40.0% Prob": 2.232441103632065, "Min_50.0% Prob": 1.7914579750651174, "Min_60.0% Prob": 1.4932103640399874}}
{"hexsha": "075a378bb5687e7c4ee731ece7a5af55df206c93", "ext": "py", "lang": "Python", "content": "def validate(model, dataset, opt, ctx):\n    \"\"\"Test on validation dataset.\"\"\"\n    detector = CenterDetector(opt)\n    detector.model = model\n    results = {}\n    num_iters = len(dataset)\n    bar = Bar('{}'.format(opt.exp_id), max=num_iters)\n    time_stats = ['tot', 'load', 'pre', 'net', 'dec', 'post', 'merge']\n    avg_time_stats = {t: AverageMeter() for t in time_stats}\n    print('Reporting every 1000 images...')\n    for ind in range(num_iters):\n        img_id = dataset.images[ind]\n        img_info = dataset.coco.loadImgs(ids=[img_id])[0]\n        img_path = os.path.join(dataset.img_dir, img_info['file_name'])\n        ret = detector.run(img_path)\n        results[img_id] = ret['results']\n        Bar.suffix = '[{0}/{1}]|Tot: {total:} |ETA: {eta:} '.format(ind, num_iters, total=bar.elapsed_td, eta=bar.eta_td)\n        for t in avg_time_stats:\n            avg_time_stats[t].update(ret[t])\n            Bar.suffix = Bar.suffix + '|{} {:.3f} '.format(t, avg_time_stats[t].avg)\n        if ind % 1000 == 0:\n            bar.next()\n    bar.finish()\n    val_dataset.run_eval(results=results, save_dir='./output/')", "fn_id": 3, "class_fn": false, "repo": "Guanghan/mxnet-centernet", "file": "train.py", "last_update_at": "2021-05-12T08:41:33+00:00", "pred": {"ppl": 1.736810326576233, "ppl_lower": 2.2330870628356934, "ppl/lowercase_ppl": -1.4552749679698906, "ppl/zlib": 0.0010242120321204196, "Min_5.0% Prob": 6.281222012307909, "Min_10.0% Prob": 4.456904378202227, "Min_20.0% Prob": 2.6602546523014703, "Min_30.0% Prob": 1.8217469200629879, "Min_40.0% Prob": 1.3770794759814937, "Min_50.0% Prob": 1.1034521198443448, "Min_60.0% Prob": 0.9199596867838409}}
{"hexsha": "2b63ae4e99c2f9a3f9a1f7f166698e9931cfc29c", "ext": "py", "lang": "Python", "content": "def get_roc_data(df_test, df_prob, encoding):\n    tprs = []\n    aucs = []\n    mean_fpr = np.linspace(0, 1, 100)\n    for i in range(df_test.shape[0]):\n        y_true = df_test.iloc[i, :].dropna().values\n        y_pred = df_prob.iloc[i, :].dropna().values\n        fpr, tpr, _ = roc_curve(y_true, y_pred)\n        interp_tpr = np.interp(mean_fpr, fpr, tpr)\n        interp_tpr[0] = 0.0\n        tprs.append(interp_tpr)\n        aucs.append(roc_auc_score(y_true, y_pred))\n    mean_tpr = np.mean(tprs, axis=0)\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n    std_auc = np.std(aucs)\n    std_tpr = np.std(tprs, axis=0)\n    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)\n    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)\n    df = pd.DataFrame({'x': mean_fpr, 'y': mean_tpr, 'tprs_lower': tprs_lower, 'tprs_upper': tprs_upper})\n    df['Encoding'] = encoding\n    df['mean_auc'] = np.round(mean_auc, 2)\n    df['legend_label'] = df.apply(lambda row: f\"{row['Encoding']} (AUC: {row['mean_auc']})\", axis=1)\n    return df", "fn_id": 1, "class_fn": false, "repo": "spaenigs/peptidereactor", "file": "nodes/vis/sds_3_Curves/scripts/roc_pr_curve.py", "last_update_at": "2021-06-07T07:03:38+00:00", "pred": {"ppl": 1.5177713632583618, "ppl_lower": 1.5563945770263672, "ppl/lowercase_ppl": -1.06022611339748, "ppl/zlib": 0.0009355225348434801, "Min_5.0% Prob": 5.801918244361877, "Min_10.0% Prob": 3.7588688542203204, "Min_20.0% Prob": 2.0688901179265686, "Min_30.0% Prob": 1.3893021380422803, "Min_40.0% Prob": 1.0429350172187963, "Min_50.0% Prob": 0.8344569006514531, "Min_60.0% Prob": 0.6954000166086455}}
{"hexsha": "d7d0cc76bd9ced96d824215c265e0b8c9d95c87b", "ext": "py", "lang": "Python", "content": "def get_unique_changed_packages(diffs):\n    packages_changed = {}\n    for change in diffs:\n        if len(change) != 2:\n            logging.debug(change)\n            continue\n        change_type, path = change\n        path_tokens = path.split('/')\n        if path_tokens[-1] in IGNORE_CHANGES_FILES:\n            continue\n        try:\n            package = Package(package_dir=path_tokens[0])\n        except PackageDoesNotExistException:\n            continue\n        if package.package_name not in packages_changed:\n            packages_changed.update({package.package_name: package})\n    return packages_changed", "fn_id": 2, "class_fn": false, "repo": "r-kells/scream", "file": "scream/detect_changed_packages.py", "last_update_at": "2021-11-22T18:45:19+00:00", "pred": {"ppl": 3.8551182746887207, "ppl_lower": 5.141809940338135, "ppl/lowercase_ppl": -1.2134304864495147, "ppl/zlib": 0.004819291740706251, "Min_5.0% Prob": 8.65952205657959, "Min_10.0% Prob": 6.9534729444063625, "Min_20.0% Prob": 5.3980490190011485, "Min_30.0% Prob": 4.22661889617036, "Min_40.0% Prob": 3.3650776666623576, "Min_50.0% Prob": 2.7067456143524717, "Min_60.0% Prob": 2.251889532545536}}
{"hexsha": "bc24e936ef606bdcce7d65b0ddb291682889d4ea", "ext": "py", "lang": "Python", "content": "def tx_register(tx, cursor):\n    payload = json.loads(tx.payload)\n    owner = models.Account(tx.chain_id, tx.sender, cursor)\n    parcel = models.Parcel(tx.chain_id, payload['target'], owner.address, cursor)\n    storage = models.Storage(tx.chain_id, parcel.storage_id, None, cursor)\n    host = models.Account(tx.chain_id, storage.owner, cursor)\n    parcel.custody = payload['custody']\n    if parcel.custody != None and len(parcel.custody) > 100:\n        parcel.custody = parcel.custody[:100]\n    parcel.proxy_account = payload.get('proxy_account', None)\n    if parcel.proxy_account != None and len(parcel.proxy_account) > 40:\n        parcel.proxy_account = parcel.proxy_account[:40]\n    parcel.extra = payload.get('extra', '{}')\n    parcel.on_sale = True\n    parcel.save(cursor)\n    owner.balance -= storage.registration_fee\n    owner.save(cursor)\n    host.balance += storage.registration_fee\n    host.save(cursor)", "fn_id": 7, "class_fn": false, "repo": "MECTrace/edge-data-chain-explorer", "file": "crawler/tx.py", "last_update_at": "2021-12-17T08:52:58+00:00", "pred": {"ppl": 2.8143749237060547, "ppl_lower": 2.920961380004883, "ppl/lowercase_ppl": -1.035924589955502, "ppl/zlib": 0.003079583883824509, "Min_5.0% Prob": 9.26585344167856, "Min_10.0% Prob": 7.219814153817984, "Min_20.0% Prob": 4.69542736152433, "Min_30.0% Prob": 3.3578679583966733, "Min_40.0% Prob": 2.57554061515866, "Min_50.0% Prob": 2.071976130939464, "Min_60.0% Prob": 1.7281238855620533}}
{"hexsha": "a6ecbbb0e40168d4238d3a4dc7a1087809d1ed3f", "ext": "py", "lang": "Python", "content": "@box.cron('0 3 * * *')\nasync def refresh_db(bot):\n    logger.info('refresh subway')\n    tasks = []\n    for service_region, api_version in REGION_TABLE.values():\n        tasks.append(fetch_station_db(bot, service_region, api_version))\n    await asyncio.wait(tasks)", "fn_id": 2, "class_fn": false, "repo": "item4/yui", "file": "yui/apps/search/subway.py", "last_update_at": "2021-01-31T17:57:41+00:00", "pred": {"ppl": 7.144000053405762, "ppl_lower": 7.211178302764893, "ppl/lowercase_ppl": -1.0047600276179536, "ppl/zlib": 0.010744660388250319, "Min_5.0% Prob": 10.70953369140625, "Min_10.0% Prob": 8.958747523171562, "Min_20.0% Prob": 7.22389357884725, "Min_30.0% Prob": 5.937215753223585, "Min_40.0% Prob": 4.845909376298228, "Min_50.0% Prob": 3.911584822413249, "Min_60.0% Prob": 3.3275946660534195}}
{"hexsha": "70836ca1748caea3d326c0101f9ea4804dc8b95e", "ext": "py", "lang": "Python", "content": "def save_3D_animation(embeddings, emb_space_sizes, train_losses, test_losses, opt_name, n_bins=10, horizon_size=10, cmap_name='jet', **plotting_kwargs):\n    \"\"\"Utility function for visualizing the changes in weights over time in\n    UMAP space. The visualization is in 3D for better appreciating the descent\n    on the error surface.\n\n        Args:\n            - embeddings: list of embeddings, result of alligned UMAP\n            - emb_space_sizes: list of arrays, define the limits of the\n                embedding space for the three layers of the MLP.\n            - train_losses: list, training losses history.\n            - test_losses: list, test losses.\n            - opt_name: string, name of the optimizer used.\n            - n_bins: int, number of bins for discretizing the training loss.\n            -  horizon_size: int, maximum number of points simultaneously\n                on screen.\n            - cmap_name: string, name of the colormap used for representing\n                the change in train losses.\n            - **plotting_kwargs: keyword arguments, keyword arguments for the\n                plotting function.\n\n        Returns:\n            - None\n    \"\"\"\n    discretizer = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy='uniform')\n    cmap = matplotlib.cm.get_cmap(cmap_name)\n    colors = np.array(train_losses)\n    colors = discretizer.fit_transform(colors.reshape(-1, 1)).flatten()\n    norm = plt.Normalize(colors.min(), colors.max())\n    for i in tqdm(range(embeddings[0].shape[0])):\n        fig, axs = plt.subplots(1, 3, figsize=(30, 10), subplot_kw=dict(projection='3d'))\n        for index, emb in enumerate(embeddings):\n            min_sizes, max_sizes = emb_space_sizes[index]\n            past_horizon = max(0, i - horizon_size)\n            axs[index].scatter(emb[past_horizon:i, 0], emb[past_horizon:i, 1], train_losses[past_horizon:i], c=[cmap(norm(color)) for color in colors[past_horizon:i]], **plotting_kwargs)\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=train_losses[past_horizon:i], c='grey', zdir='y', zs=max_sizes[1], linewidth=5, alpha=0.25)\n            axs[index].plot(xs=emb[past_horizon:i, 1], ys=train_losses[past_horizon:i], c='grey', zdir='x', linewidth=5, alpha=0.25, zs=min_sizes[0])\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=emb[past_horizon:i, 1], c='grey', zdir='z', linewidth=5, alpha=0.25, zs=min_sizes[2])\n            axs[index].text2D(0.05, 0.95, f'Layer {index + 1}', transform=axs[index].transAxes)\n            if index == 1:\n                axs[index].text2D(0.5, 1.1, f'Optimizer: {opt_name}                     \\nTrain Loss: {round(train_losses[i], 3)}                     \\n Test Loss: {round(test_losses[i], 3)}', transform=axs[index].transAxes)\n            elif index == 2:\n                axs[index].set_xlabel('Weights Space \\n UMAP 1')\n                axs[index].set_ylabel('Weights Space \\n UMAP 2')\n                axs[index].set_zlabel('Trainining Loss')\n        if not os.path.exists(f'results\\\\3D_{opt_name}'):\n            os.makedirs(f'results\\\\3D_{opt_name}')\n        plt.savefig(f'results\\\\3D_{opt_name}\\\\{i}.png', bbox_inches='tight')\n        plt.close('all')\n    return None", "fn_id": 0, "class_fn": false, "repo": "vb690/machine_learning_exercises", "file": "shops/visualize_gradient_descent/utilities/viz_utils.py", "last_update_at": "2021-04-26T19:06:06+00:00", "pred": {"ppl": 2.784297227859497, "ppl_lower": 3.1046857833862305, "ppl/lowercase_ppl": -1.106364738585704, "ppl/zlib": 0.0008744624249820573, "Min_5.0% Prob": 9.700209029177403, "Min_10.0% Prob": 7.267985316326744, "Min_20.0% Prob": 4.741107056278209, "Min_30.0% Prob": 3.3496868494715724, "Min_40.0% Prob": 2.548735035905195, "Min_50.0% Prob": 2.0483189848070062, "Min_60.0% Prob": 1.7063729971680581}}
{"hexsha": "2096e74d026f92b88f279c71ae6c465be2f77b95", "ext": "py", "lang": "Python", "content": "def is_accuracy_aware_training(config: NNCFConfig, compression_config_passed: bool=False) -> bool:\n    \"\"\"\n    Returns True if the compression config contains an accuracy-aware\n    training related section, False otherwise.\n    \"\"\"\n    compression_config = config.get('compression', {}) if not compression_config_passed else config\n    if isinstance(compression_config, list):\n        for algo_config in compression_config:\n            if algo_config.get('accuracy_aware_training') is not None:\n                return True\n        return False\n    if compression_config.get('accuracy_aware_training') is not None:\n        return True\n    return False", "fn_id": 0, "class_fn": false, "repo": "sarthakpati/nncf", "file": "nncf/config/utils.py", "last_update_at": "2021-07-23T07:46:52+00:00", "pred": {"ppl": 2.562601327896118, "ppl_lower": 3.6882400512695312, "ppl/lowercase_ppl": -1.3869475572100431, "ppl/zlib": 0.003498226343034743, "Min_5.0% Prob": 7.432991981506348, "Min_10.0% Prob": 5.764839444841657, "Min_20.0% Prob": 4.064123545374189, "Min_30.0% Prob": 3.011261921553385, "Min_40.0% Prob": 2.3368544208684137, "Min_50.0% Prob": 1.879244033566543, "Min_60.0% Prob": 1.5679822170197786}}
{"hexsha": "f4d5118418f49eeb3e5a0e0d7756f5a28b10fda6", "ext": "py", "lang": "Python", "content": "def decoder_layer(input_prob, input_aspect, n_hidden, n_class, n_aspects, random_base, l2_reg, sub_vocab, FLAGS, scope_name='1', use_aspect=True):\n    \"\"\"\n    Decoder structure of the autoencoder-like model taht reconstructs the sentence using the sentimenet embedding matrix\n\n    :param input_prob:\n    :param input_aspect:\n    :param n_hidden:\n    :param n_class:\n    :param n_aspects:\n    :param random_base:\n    :param l2_reg:\n    :param sub_vocab:\n    :param FLAGS:\n    :param scope_name:\n    :param use_aspect:\n    :return:\n    \"\"\"\n    w = tf.get_variable(name='sentiment_embedding' + scope_name, shape=[n_class, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    if use_aspect:\n        w_aspect = tf.get_variable(name='aspect_w' + scope_name, shape=[n_aspects, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    batch_size = tf.shape(input_prob)[0]\n    if use_aspect:\n        outputs = tf.matmul(input_prob, w) + tf.matmul(input_aspect, w_aspect)\n    else:\n        outputs = tf.matmul(input_prob, w)\n    return (outputs, w)", "fn_id": 3, "class_fn": false, "repo": "LucaZampierin/ABSE", "file": "nn_layer.py", "last_update_at": "2021-10-17T13:53:20+00:00", "pred": {"ppl": 2.5650269985198975, "ppl_lower": 2.684136390686035, "ppl/lowercase_ppl": -1.048186330448988, "ppl/zlib": 0.0021408386461502023, "Min_5.0% Prob": 9.098562642147666, "Min_10.0% Prob": 6.960814752076802, "Min_20.0% Prob": 4.452638039463444, "Min_30.0% Prob": 3.120145653684934, "Min_40.0% Prob": 2.3570632733723245, "Min_50.0% Prob": 1.8881180194500637, "Min_60.0% Prob": 1.573939596879778}}
{"hexsha": "c4ee4862ccbeff5f750d6e6bb757e31dbab056f4", "ext": "py", "lang": "Python", "content": "def solve_format_ArithOperation(optree, integer_size_func=lambda lhs_prec, rhs_prec: None, frac_size_func=lambda lhs_prec, rhs_prec: None, signed_func=lambda lhs, lhs_prec, rhs, rhs_prec: False, format_solver=None):\n    \"\"\" determining fixed-point format for a generic 2-op arithmetic\n        operation (e.g. Multiplication, Addition, Subtraction)\n    \"\"\"\n    lhs = optree.get_input(0)\n    rhs = optree.get_input(1)\n    lhs_precision = lhs.get_precision()\n    rhs_precision = rhs.get_precision()\n    abstract_operation = lhs_precision is ML_Integer and rhs_precision is ML_Integer\n    if abstract_operation:\n        return ML_Integer\n    if lhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(lhs, input_prec_solver=format_solver)\n        lhs_precision = solve_format_Constant(Constant(cst_eval))\n    if rhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(rhs, input_prec_solver=format_solver)\n        rhs_precision = solve_format_Constant(Constant(cst_eval))\n    if is_fixed_point(lhs_precision) and is_fixed_point(rhs_precision):\n        int_size = integer_size_func(lhs_precision, rhs_precision)\n        frac_size = frac_size_func(lhs_precision, rhs_precision)\n        is_signed = signed_func(lhs, lhs_precision, rhs, rhs_precision)\n        return fixed_point(int_size, frac_size, signed=is_signed)\n    else:\n        return optree.get_precision()", "fn_id": 3, "class_fn": false, "repo": "nibrunie/metalibm", "file": "metalibm_core/opt/p_size_datapath.py", "last_update_at": "2021-03-12T18:54:53+00:00", "pred": {"ppl": 2.9457578659057617, "ppl_lower": 3.0758302211761475, "ppl/lowercase_ppl": -1.0399945265092023, "ppl/zlib": 0.002449809804679046, "Min_5.0% Prob": 10.8317407055905, "Min_10.0% Prob": 8.12176052117959, "Min_20.0% Prob": 5.0853734740728065, "Min_30.0% Prob": 3.588222473354663, "Min_40.0% Prob": 2.704188471860429, "Min_50.0% Prob": 2.1603387648949983, "Min_60.0% Prob": 1.8051320065946597}}
{"hexsha": "bc8a29dc53319c769a4b51f92593b8f3fdee45c6", "ext": "py", "lang": "Python", "content": "def update_df_all(df_all, training_data, validation_data, test_data):\n    \"\"\"Add a column \"group\" to df_all indicating train/validation or test\"\"\"\n    df_all['group'] = 0\n    for simu_name in training_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'train'\n    for simu_name in validation_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'validation'\n    for simu_name in test_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'test'\n    return df_all", "fn_id": 1, "class_fn": false, "repo": "louisletoumelin/wind_downscaling_cnn", "file": "pre_process/preprocess_folds.py", "last_update_at": "2021-12-13T16:26:31+00:00", "pred": {"ppl": 2.4602344036102295, "ppl_lower": 2.467744827270508, "ppl/lowercase_ppl": -1.0033857865080915, "ppl/zlib": 0.004840089416264868, "Min_5.0% Prob": 9.625861465930939, "Min_10.0% Prob": 7.357986643910408, "Min_20.0% Prob": 4.4367288034409285, "Min_30.0% Prob": 2.9976532767925943, "Min_40.0% Prob": 2.271115572829373, "Min_50.0% Prob": 1.8004837620232492, "Min_60.0% Prob": 1.5065499166175869}}
{"hexsha": "6bef08836876832f7516142a645d88720de907e9", "ext": "py", "lang": "Python", "content": "def update_image_metadata_from_image_path(image_path: str, metadata: Dict):\n    \"\"\" \"\"\"\n    pickled = codecs.encode(pickle.dumps(metadata), 'base64').decode()\n    db = get_db()\n    cur = db.cursor()\n    cur.execute(f'UPDATE images SET metadata = \"{pickled}\" WHERE path = \"{image_path}\" AND metadata IS NULL')\n    db.commit()", "fn_id": 0, "class_fn": false, "repo": "frederikgram/describe", "file": "dev/frontend/models/database_updaters.py", "last_update_at": "2021-03-10T01:32:19+00:00", "pred": {"ppl": 3.2126410007476807, "ppl_lower": 3.3246536254882812, "ppl/lowercase_ppl": -1.0293653936356175, "ppl/zlib": 0.005557587335911756, "Min_5.0% Prob": 10.555477023124695, "Min_10.0% Prob": 7.846467865837945, "Min_20.0% Prob": 5.165572073724535, "Min_30.0% Prob": 3.70576525585992, "Min_40.0% Prob": 2.903784877545125, "Min_50.0% Prob": 2.3189964944377857, "Min_60.0% Prob": 1.9567318343490894}}
{"hexsha": "6c468eb327991e8438e939f0e8280fc938e87e2b", "ext": "py", "lang": "Python", "content": "def float_sanitiser():\n\n    def sanitise(n, debug_name):\n        if not isinstance(n, float):\n            raise CefTypeError('{}: Expected float, got {}'.format(debug_name, type(n)))\n        else:\n            return str(n)\n    return sanitise", "fn_id": 3, "class_fn": false, "repo": "slallum/format_cef", "file": "src/format_cef/_cef/base.py", "last_update_at": "2021-04-28T08:58:00+00:00", "pred": {"ppl": 8.15079116821289, "ppl_lower": 9.042963981628418, "ppl/lowercase_ppl": -1.0495072941297023, "ppl/zlib": 0.013713169924153975, "Min_5.0% Prob": 9.826198895772299, "Min_10.0% Prob": 8.828029155731201, "Min_20.0% Prob": 7.565104722976685, "Min_30.0% Prob": 6.317242476675245, "Min_40.0% Prob": 5.09627927839756, "Min_50.0% Prob": 4.163469216227531, "Min_60.0% Prob": 3.491793923286928}}
{"hexsha": "22b492bfb5e030f558182e6d784c2ccfc5064429", "ext": "py", "lang": "Python", "content": "def hive_copy_to_table(source_dataset, source_table_name, destination_dataset, destination_table_name, s3_step_path, local_step_path, action_id, set_hive_vars, step_num, steps_total):\n    hive_source_path = os.path.join(local_step_path, 'hive', 'copy_to_table.hql')\n    hive_target_path = os.path.join(local_step_path, 'hive', 'copy_to_table_%s.hql' % destination_table_name)\n    with open(hive_source_path, 'r') as s, open(hive_target_path, 'w') as t:\n        contents = s.read().format(source_table_name=source_table_name, destination_table_name=destination_table_name, partitions=get_partitions(source_dataset), columns=get_columns(source_dataset, destination_dataset), compression=get_emr_compression(destination_dataset), set_hive_vars=set_hive_vars if set_hive_vars else '')\n        t.write(contents)\n    return StepWrapper(JarStep(name='dart: (%s) copy_to_table_%s.hql (from %s)' % (_title_data(action_id, step_num, steps_total), destination_table_name, source_table_name), jar=_command_runner_jar, action_on_failure='CONTINUE', step_args=_hive_args + [s3_step_path + '/hive/copy_to_table_%s.hql' % destination_table_name]), step_num, steps_total)", "fn_id": 4, "class_fn": false, "repo": "RetailMeNotSandbox/dart", "file": "src/python/dart/engine/emr/steps.py", "last_update_at": "2021-07-14T22:37:35+00:00", "pred": {"ppl": 3.628180503845215, "ppl_lower": 3.8024253845214844, "ppl/lowercase_ppl": -1.0363984631970133, "ppl/zlib": 0.0029900957865535054, "Min_5.0% Prob": 10.930519129100599, "Min_10.0% Prob": 8.37526327685306, "Min_20.0% Prob": 5.7403464254580046, "Min_30.0% Prob": 4.204637866271169, "Min_40.0% Prob": 3.224965558632424, "Min_50.0% Prob": 2.5761409918265663, "Min_60.0% Prob": 2.1496234641173513}}
{"hexsha": "1a8166a42e84641b39cb8babc256e3c8ddcff393", "ext": "py", "lang": "Python", "content": "def check_post_status(func):\n    \"\"\"\n     call the func only if the smc.setting is not already posted via API\n    Args:\n        func:write_file\n\n    Returns:\n        wrapper: confirmation if the smc.settings file has been posted already\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        if os.environ.get('stealth_watch_post', '0') == '0':\n            func(*args, **kwargs)\n        else:\n            print(f'{Style.RED}smc.setting file data is already posted to smc server from this machine, so skipping the operation for function {func.__qualname__}{Style.RESET}')\n            print(f'{Style.GREEN}Thank you!{Style.RESET}')\n    return wrapper", "fn_id": 2, "class_fn": false, "repo": "CiscoDevNet/sna-initial-config-setup-script", "file": "utils/misc.py", "last_update_at": "2021-12-23T20:16:15+00:00", "pred": {"ppl": 12.08120059967041, "ppl_lower": 12.3084135055542, "ppl/lowercase_ppl": -1.0074779660563449, "ppl/zlib": 0.007285527996953229, "Min_5.0% Prob": 14.612333178520203, "Min_10.0% Prob": 11.963340878486633, "Min_20.0% Prob": 8.877122223377228, "Min_30.0% Prob": 7.084314202268918, "Min_40.0% Prob": 5.897259136661887, "Min_50.0% Prob": 4.9307910144329075, "Min_60.0% Prob": 4.168864617589861}}
{"hexsha": "1380364880e72805de31c21c228ab7d9dbd45947", "ext": "py", "lang": "Python", "content": "def update_activity_notice_seed_date_of_notice_earlier_than_update_window(activity_notice_seed):\n    status = ''\n    success = True\n    activity_notice_seed_changed = False\n    from activity.models import get_lifespan_of_seed\n    lifespan_of_seed_in_seconds = get_lifespan_of_seed(activity_notice_seed.kind_of_seed)\n    earliest_date_of_notice = now() - timedelta(seconds=lifespan_of_seed_in_seconds)\n    if activity_notice_seed.date_of_notice < earliest_date_of_notice:\n        try:\n            activity_notice_seed.date_of_notice_earlier_than_update_window = True\n            activity_notice_seed.save()\n            activity_notice_seed_changed = True\n            status += 'DATE_OF_NOTICE_EARLIER_THAN_UPDATE_WINDOW_SET_TRUE '\n        except Exception as e:\n            status += 'COULD_NOT_UPDATE-date_of_notice_earlier_than_update_window: ' + str(e) + ' '\n            success = False\n    results = {'success': success, 'status': status, 'activity_notice_seed': activity_notice_seed, 'activity_notice_seed_changed': activity_notice_seed_changed, 'date_of_notice_earlier_than_update_window': activity_notice_seed.date_of_notice_earlier_than_update_window}\n    return results", "fn_id": 24, "class_fn": false, "repo": "aucoeur/WeVoteServer", "file": "activity/controllers.py", "last_update_at": "2021-03-17T02:08:26+00:00", "pred": {"ppl": 2.3267993927001953, "ppl_lower": 2.441340446472168, "ppl/lowercase_ppl": -1.0569022377628159, "ppl/zlib": 0.0021709348895945614, "Min_5.0% Prob": 8.732266482184915, "Min_10.0% Prob": 6.662137760835535, "Min_20.0% Prob": 4.038661555103634, "Min_30.0% Prob": 2.7946543626200695, "Min_40.0% Prob": 2.1203198048785543, "Min_50.0% Prob": 1.6935954885207376, "Min_60.0% Prob": 1.4088261823746087}}
{"hexsha": "6f641f627b8305f23c544478d79bdef1903c7e0c", "ext": "py", "lang": "Python", "content": "def sample_mask(idx, l):\n    \"\"\"Create mask.\"\"\"\n    mask = np.zeros(l)\n    mask[idx] = 1\n    return np.array(mask, dtype=np.bool)", "fn_id": 1, "class_fn": false, "repo": "psychologyphd/HWGCN", "file": "utils.py", "last_update_at": "2021-08-04T09:31:04+00:00", "pred": {"ppl": 1.7756816148757935, "ppl_lower": 2.3456368446350098, "ppl/lowercase_ppl": -1.484813943966444, "ppl/zlib": 0.005316521829590369, "Min_5.0% Prob": 7.539172172546387, "Min_10.0% Prob": 5.404807209968567, "Min_20.0% Prob": 2.97036337479949, "Min_30.0% Prob": 1.9225039098125238, "Min_40.0% Prob": 1.4841493052594803, "Min_50.0% Prob": 1.1481907227320003, "Min_60.0% Prob": 0.9716407757245739}}
{"hexsha": "6f3e2a72a770d5215943ec27b58899302ae9bfa0", "ext": "py", "lang": "Python", "content": "def table_args(model: Base) -> None:\n\n    def create_new_column(column: sa.Column) -> sa.Column:\n        attributes: List[str] = ['name', 'type', 'key', 'primary_key', 'nullable', 'default', 'server_default', 'server_onupdate', 'index', 'unique', 'system', 'doc', 'onupdate', 'autoincrement', 'comment']\n        kwargs: Dict[str, Any] = {a: getattr(column, a, None) for a in attributes}\n        kwargs['type_']: 'TypeEngine' = kwargs.get('type', None)\n        del kwargs['type']\n        return sa.Column(**kwargs)\n    columns: List[sa.Column] = list(map(create_new_column, model.__table__.columns.values()))\n    return (model.__tablename__, *columns)", "fn_id": 0, "class_fn": false, "repo": "h4wldev/seed", "file": "migrations/utils.py", "last_update_at": "2021-06-01T06:23:41+00:00", "pred": {"ppl": 3.2045607566833496, "ppl_lower": 3.981673002243042, "ppl/lowercase_ppl": -1.186443162375222, "ppl/zlib": 0.0034659971178087373, "Min_5.0% Prob": 8.401699701944986, "Min_10.0% Prob": 6.803079419665867, "Min_20.0% Prob": 5.040909283869976, "Min_30.0% Prob": 3.7586510436875478, "Min_40.0% Prob": 2.9033460219701133, "Min_50.0% Prob": 2.3353112577757935, "Min_60.0% Prob": 1.9466308430826242}}
{"hexsha": "fe84bfb3726301394e904f8a5ed253c3c9774c54", "ext": "py", "lang": "Python", "content": "def enlarge_bbox(bbox, im_size, ratio=0.15):\n    width, height = (bbox[2] - bbox[0], bbox[3] - bbox[1])\n    half_width_inc, half_height_inc = ((width * ratio).astype(np.int32), (height * ratio).astype(np.int32))\n    bbox[0], bbox[1], bbox[2], bbox[3] = (bbox[0] - half_width_inc, bbox[1] - half_height_inc, bbox[2] + half_width_inc, bbox[3] + half_height_inc)\n    bbox[0], bbox[1] = (max(bbox[0], 0), max(bbox[1], 0))\n    bbox[3], bbox[2] = (min(bbox[3], im_size[0]), min(bbox[2], im_size[1]))\n    return bbox", "fn_id": 0, "class_fn": false, "repo": "ErestorX/Buddha_alignment", "file": "generate_dataset.py", "last_update_at": "2021-05-10T08:27:46+00:00", "pred": {"ppl": 1.9108256101608276, "ppl_lower": 1.9108256101608276, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002984034125766178, "Min_5.0% Prob": 8.315398550033569, "Min_10.0% Prob": 5.660013425917852, "Min_20.0% Prob": 3.204461392902193, "Min_30.0% Prob": 2.1661546448807396, "Min_40.0% Prob": 1.6262440213357054, "Min_50.0% Prob": 1.301177751790965, "Min_60.0% Prob": 1.08434903630936}}
{"hexsha": "13d942d0b49cb364c495b965f3f53cdb29e47d14", "ext": "py", "lang": "Python", "content": "def line_counts_as_uncovered(line: str, is_from_cover_annotation_file: bool) -> bool:\n    \"\"\"\n    Args:\n        line: The line of code (including coverage annotation).\n        is_from_cover_annotation_file: Whether this line has been annotated.\n    Returns:\n        Does the line count as uncovered?\n    \"\"\"\n    if is_from_cover_annotation_file:\n        if not line.startswith('! '):\n            return False\n        content = line[2:]\n    else:\n        content = line\n    content = content.strip()\n    if '#' in content:\n        content = content[:content.index('#')].strip()\n    if any((re.search(pat, content) for pat in IGNORED_LINE_PATTERNS)):\n        return False\n    return is_from_cover_annotation_file or line_content_counts_as_uncovered_manual(content)", "fn_id": 6, "class_fn": false, "repo": "Uzayyy/Cirq", "file": "dev_tools/incremental_coverage.py", "last_update_at": "2021-03-07T19:34:28+00:00", "pred": {"ppl": 4.488323211669922, "ppl_lower": 5.256314277648926, "ppl/lowercase_ppl": -1.1051968570875796, "ppl/zlib": 0.004377490327952784, "Min_5.0% Prob": 9.8713075849745, "Min_10.0% Prob": 8.404781416842813, "Min_20.0% Prob": 6.461418854884612, "Min_30.0% Prob": 4.799243004645332, "Min_40.0% Prob": 3.7439063768356275, "Min_50.0% Prob": 3.0106097966128464, "Min_60.0% Prob": 2.5057340745293235}}
{"hexsha": "3013d6318ebcca79568b59c329de03eb84f3b683", "ext": "py", "lang": "Python", "content": "def save_builtin(img, path):\n    path.parent.mkdir(parents=True, exist_ok=True)\n    img.filepath = str(path).replace('.png', '-builtinsave.png')\n    img.file_format = 'PNG'\n    img.save()\n    log.info(f'wrote {path}')", "fn_id": 0, "class_fn": false, "repo": "drewp/megasecond", "file": "world_export/image.py", "last_update_at": "2021-04-06T07:51:27+00:00", "pred": {"ppl": 4.750030040740967, "ppl_lower": 6.210655689239502, "ppl/lowercase_ppl": -1.1720728889048626, "ppl/zlib": 0.009861714825272597, "Min_5.0% Prob": 12.180315653483072, "Min_10.0% Prob": 9.62682410648891, "Min_20.0% Prob": 6.902795212609427, "Min_30.0% Prob": 5.076876135099502, "Min_40.0% Prob": 3.9082330965570042, "Min_50.0% Prob": 3.1557171776890756, "Min_60.0% Prob": 2.633220975497915}}
{"hexsha": "0322be0d34cfd540d38d08178833c28642a03567", "ext": "py", "lang": "Python", "content": "def MinSpanning(n, m):\n    dt = defaultdict(list)\n    for i in range(m):\n        x, y, w = map(int, input().slpit())\n        dt[x].append([y, w])\n        dt[y].append([x, w])\n    parent = [-1] * n\n    key = [float('inf')] * n\n    mstSet = [False] * n\n    prq = [(0, 0)]\n    key[0] = 0\n    for i in range(n - 1):\n        u = heappop(prq)[1]\n        mstSet[u] = True\n        for x, w in dt[u]:\n            if not mstSet[x] and w < key[x]:\n                parent[x] = u\n                key[x] = w\n                heappush(prq, (key[x], x))", "fn_id": 0, "class_fn": false, "repo": "Saicharan67/Interview-Coding-Questions", "file": "Graphs/MinSpanningTreeByPrims.py", "last_update_at": "2021-11-04T03:30:00+00:00", "pred": {"ppl": 2.253833055496216, "ppl_lower": 2.5199687480926514, "ppl/lowercase_ppl": -1.1373488925456843, "ppl/zlib": 0.0030322102499627528, "Min_5.0% Prob": 9.34756194220649, "Min_10.0% Prob": 6.681093918649774, "Min_20.0% Prob": 3.9866479551180816, "Min_30.0% Prob": 2.7260291359933286, "Min_40.0% Prob": 2.0311057361720417, "Min_50.0% Prob": 1.6335546027985401, "Min_60.0% Prob": 1.3543667152376486}}
{"hexsha": "715d0f56efd10b24b6c396c628f36713f9d9d35a", "ext": "py", "lang": "Python", "content": "def is_frozen():\n    \"\"\"Return a bool indicating if application is compressed\"\"\"\n    import imp\n    return hasattr(sys, 'frozen') or imp.is_frozen('__main__')", "fn_id": 4, "class_fn": false, "repo": "zywek123/accessible_output2", "file": "build/lib/accessible_output2/platform_utils/paths.py", "last_update_at": "2021-11-29T05:20:10+00:00", "pred": {"ppl": 5.028505325317383, "ppl_lower": 5.269218921661377, "ppl/lowercase_ppl": -1.0289509576491027, "ppl/zlib": 0.012920982303430879, "Min_5.0% Prob": 10.98112964630127, "Min_10.0% Prob": 8.495842774709066, "Min_20.0% Prob": 6.058837345668247, "Min_30.0% Prob": 4.782267397100275, "Min_40.0% Prob": 3.942404051621755, "Min_50.0% Prob": 3.200222631034098, "Min_60.0% Prob": 2.7789340859109704}}
{"hexsha": "9c4f0f1dce62fe32e46d081a9b30a7b8429010c4", "ext": "py", "lang": "Python", "content": "def test_offline_chunked():\n    r = http('--offline', '--chunked', '--form', 'https://this-should.never-resolve/foo', 'hello=world')\n    assert 'POST /foo' in r\n    assert 'Transfer-Encoding: chunked' in r, r\n    assert 'hello=world' in r", "fn_id": 5, "class_fn": false, "repo": "Wallyhs04/httpie", "file": "tests/test_offline.py", "last_update_at": "2021-05-29T14:40:37+00:00", "pred": {"ppl": 5.322799205780029, "ppl_lower": 6.490234851837158, "ppl/lowercase_ppl": -1.1186001582509075, "ppl/zlib": 0.010857138516081189, "Min_5.0% Prob": 11.12887986501058, "Min_10.0% Prob": 8.651314871651786, "Min_20.0% Prob": 6.4642379113606045, "Min_30.0% Prob": 5.1243485155559725, "Min_40.0% Prob": 4.106506841523307, "Min_50.0% Prob": 3.3657767253262656, "Min_60.0% Prob": 2.819653396539035}}
{"hexsha": "9c3d586ec62841559008de5a1baefd1f7c1ea4ef", "ext": "py", "lang": "Python", "content": "def parse_logging_lvl(lvl_name: str) -> int:\n    if lvl_name:\n        lvl_name = lvl_name.strip().upper()\n        return logging._nameToLevel.get(lvl_name, logging.INFO)\n    else:\n        return logging.INFO", "fn_id": 0, "class_fn": false, "repo": "ove/ove-asset-manager", "file": "common/util.py", "last_update_at": "2021-06-06T23:01:57+00:00", "pred": {"ppl": 2.503466844558716, "ppl_lower": 3.6861963272094727, "ppl/lowercase_ppl": -1.4216285454470552, "ppl/zlib": 0.007169347727068286, "Min_5.0% Prob": 7.931211948394775, "Min_10.0% Prob": 6.3725000222524, "Min_20.0% Prob": 4.172911147276561, "Min_30.0% Prob": 2.9733508129914603, "Min_40.0% Prob": 2.279250410695871, "Min_50.0% Prob": 1.8318823526923855, "Min_60.0% Prob": 1.5292349010317896}}
{"hexsha": "977d85f77545dff9112557fdde20247c847ed065", "ext": "py", "lang": "Python", "content": "@login_required\ndef edit_folder(request, set_id):\n    folder = get_object_or_404(CardFolder, id=set_id)\n    if folder.user != request.user:\n        return redirect('/no_access/')\n    if folder.being_edited:\n        return render(request, 'Cards/folder_being_updated.html', {'folder': folder})\n    if request.method == 'POST':\n        form = FolderForm(request.POST or None, instance=folder)\n        if form.is_valid():\n            folder = form.save(commit=False)\n            folder.being_edited = True\n            folder.save()\n            t = Thread(target=edit_folder_translate, args=[folder])\n            t.setDaemon(False)\n            t.start()\n            enough = len(folder.multicard_set.all()) > 2\n            return render(request, 'Cards/view_set.html', {'folder': folder, 'enough': enough})\n    else:\n        form = FolderForm(instance=folder)\n    return render(request, 'Cards/edit_set.html', {'form': form, 'folder': folder})", "fn_id": 3, "class_fn": false, "repo": "Solurix/Flashcards-Django", "file": "FCards/Cards/views.py", "last_update_at": "2021-05-16T03:20:23+00:00", "pred": {"ppl": 2.483180522918701, "ppl_lower": 3.261014223098755, "ppl/lowercase_ppl": -1.299599785376299, "ppl/zlib": 0.002314351672862305, "Min_5.0% Prob": 11.02830425898234, "Min_10.0% Prob": 7.652448625564575, "Min_20.0% Prob": 4.456065970659256, "Min_30.0% Prob": 3.0083019841266307, "Min_40.0% Prob": 2.280964558999432, "Min_50.0% Prob": 1.8179669064858297, "Min_60.0% Prob": 1.5196820218238587}}
{"hexsha": "1767ab96cf054ceb50f317b23720f5c55d829e30", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef fixture_property_typed_multiple_choice_filter():\n    TypedMultipleChoiceFilterModel.objects.create(id=-1, text='1')\n    TypedMultipleChoiceFilterModel.objects.create(id=0, text='One')\n    TypedMultipleChoiceFilterModel.objects.create(id=1, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=2, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=3, text='Not a Number')\n    TypedMultipleChoiceFilterModel.objects.create(id=4, text='3')\n    TypedMultipleChoiceFilterModel.objects.create(id=5, text='3.3')\n    TypedMultipleChoiceFilterModel.objects.create(id=6)\n    global LOOKUP_CHOICES\n    LOOKUP_CHOICES = [(c.text, c.text) for c in TypedMultipleChoiceFilterModel.objects.order_by('id')]\n    LOOKUP_CHOICES.append(('666', '666'))", "fn_id": 0, "class_fn": false, "repo": "ericziethen/django-filter-property", "file": "tests/django_property_filter/filters/test_property_typed_multiple_choice_filter.py", "last_update_at": "2021-11-28T12:02:59+00:00", "pred": {"ppl": 2.2424769401550293, "ppl_lower": 2.491987466812134, "ppl/lowercase_ppl": -1.1306364755833778, "ppl/zlib": 0.0032962491093916973, "Min_5.0% Prob": 8.776176712729715, "Min_10.0% Prob": 6.340629432512366, "Min_20.0% Prob": 3.917338306489198, "Min_30.0% Prob": 2.6837508411187194, "Min_40.0% Prob": 2.0183517297922187, "Min_50.0% Prob": 1.6150742860804514, "Min_60.0% Prob": 1.3459586504360377}}
{"hexsha": "ea4d849d98e292e6186433a00e5238e2edf41505", "ext": "py", "lang": "Python", "content": "def test_render(using_temp_config, disabling_caching):\n    scene = SquareToCircle()\n    renderer = scene.renderer\n    renderer.update_frame = Mock(wraps=renderer.update_frame)\n    renderer.add_frame = Mock(wraps=renderer.add_frame)\n    scene.render()\n    assert renderer.add_frame.call_count == config['frame_rate']\n    assert renderer.update_frame.call_count == config['frame_rate']\n    assert_file_exists(config['output_file'])", "fn_id": 0, "class_fn": false, "repo": "fargetan/manim", "file": "tests/test_scene_rendering/test_cairo_renderer.py", "last_update_at": "2021-07-17T04:09:59+00:00", "pred": {"ppl": 3.442824363708496, "ppl_lower": 4.402802467346191, "ppl/lowercase_ppl": -1.1989409121580195, "ppl/zlib": 0.006339959848622703, "Min_5.0% Prob": 9.189818286895752, "Min_10.0% Prob": 7.3981123837557705, "Min_20.0% Prob": 5.3701266827790635, "Min_30.0% Prob": 3.9459293365478514, "Min_40.0% Prob": 3.093743519290634, "Min_50.0% Prob": 2.4862160761037777, "Min_60.0% Prob": 2.0653837253073495}}
{"hexsha": "5479d7749b7f0f4c38907d23268688673d78cc7e", "ext": "py", "lang": "Python", "content": "def save():\n    website = website_e.get()\n    email = email_e.get()\n    password = password_e.get()\n    new_data = {website.upper(): {'email': email, 'password': password}}\n    if len(website) == 0 or len(password) == 0:\n        messagebox.showinfo(title='Oops!', message=\"Please don't leave any fields empty!!\")\n    else:\n        out = messagebox.askokcancel(title=website, message=f'These are the details entered: \\nEmail: {email}\\nPassword: {password} \\nDo you wish to proceed with these details?\\n\\n Note: If you want to update a new password for an existing website,also click OK\\n Else cancel the operation and search for the existing password!')\n        if out:\n            try:\n                with open('data.json', 'r') as data_file:\n                    data = json.load(data_file)\n            except FileNotFoundError:\n                with open('data.json', 'w') as data_file:\n                    json.dump(new_data, data_file, indent=4)\n            else:\n                data.update(new_data)\n                with open('data.json', 'w') as data_file:\n                    json.dump(data, data_file, indent=4)\n            finally:\n                messagebox.showinfo(title=website, message='Password saved successfully!')\n                website_e.delete(0, END)\n                password_e.delete(0, END)", "fn_id": 2, "class_fn": false, "repo": "SrihariMurali01/Password-manager", "file": "main.py", "last_update_at": "2021-12-21T18:17:28+00:00", "pred": {"ppl": 2.5883100032806396, "ppl_lower": 2.8988168239593506, "ppl/lowercase_ppl": -1.1191344832733001, "ppl/zlib": 0.0017909701588499911, "Min_5.0% Prob": 9.635253131389618, "Min_10.0% Prob": 6.962005326242158, "Min_20.0% Prob": 4.444931507110596, "Min_30.0% Prob": 3.149505721800255, "Min_40.0% Prob": 2.388220161693453, "Min_50.0% Prob": 1.9015463505708894, "Min_60.0% Prob": 1.5865297580243733}}
{"hexsha": "293907725bd25c3293fb9246b3cf2af13bae51d7", "ext": "py", "lang": "Python", "content": "@app.route('/getNotifications', methods=['GET'])\ndef getNotifications():\n    page = request.args.get('page', default=1, type=int)\n    limit = request.args.get('limit', default=25, type=int)\n    data = rdb.getNotifications(page, limit)\n    return jsonify(data)", "fn_id": 10, "class_fn": false, "repo": "naztronaut/easyUptime", "file": "upService.py", "last_update_at": "2021-05-05T06:29:10+00:00", "pred": {"ppl": 2.2979559898376465, "ppl_lower": 2.6362102031707764, "ppl/lowercase_ppl": -1.1650469031788708, "ppl/zlib": 0.005167826259232859, "Min_5.0% Prob": 10.260067145029703, "Min_10.0% Prob": 6.941593987601144, "Min_20.0% Prob": 4.157226477350507, "Min_30.0% Prob": 2.8390169526849474, "Min_40.0% Prob": 2.081531547523778, "Min_50.0% Prob": 1.683717781626102, "Min_60.0% Prob": 1.4113081365953697}}
{"hexsha": "6d928cb5cd52bb854817785ae392fcb7dd1a50d7", "ext": "py", "lang": "Python", "content": "def test_eds_plugins_built_property():\n    e = Event(False, True, 'url', 'project_name', 'project_version')\n    assert e.eds_plugins_built\n    e = Event(True, False, 'url', 'project_name', 'project_version')\n    assert not e.eds_plugins_built", "fn_id": 1, "class_fn": false, "repo": "jleopold28/eds", "file": "tests/test_event.py", "last_update_at": "2021-12-06T13:21:15+00:00", "pred": {"ppl": 4.631280899047852, "ppl_lower": 5.462158203125, "ppl/lowercase_ppl": -1.1076506398138533, "ppl/zlib": 0.012262667855193508, "Min_5.0% Prob": 10.786584536234537, "Min_10.0% Prob": 8.88814994267055, "Min_20.0% Prob": 6.89208367892674, "Min_30.0% Prob": 5.101604734148298, "Min_40.0% Prob": 3.813951569384542, "Min_50.0% Prob": 3.102348785433504, "Min_60.0% Prob": 2.602084582335814}}
{"hexsha": "2aa04fe50cb3ff88be7ef0d11bebb4e8eabb4c12", "ext": "py", "lang": "Python", "content": "def _h(y):\n\n    def foo(x):\n        \"\"\"funcdoc\"\"\"\n        return [x + z for z in y]\n    return foo", "fn_id": 3, "class_fn": false, "repo": "QZLin/nogil", "file": "Lib/test/test_dis.py", "last_update_at": "2021-11-19T02:20:24+00:00", "pred": {"ppl": 15.711910247802734, "ppl_lower": 15.711910247802734, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.03624235577975589, "Min_5.0% Prob": 9.120879173278809, "Min_10.0% Prob": 8.814200083414713, "Min_20.0% Prob": 8.232503255208334, "Min_30.0% Prob": 7.3353298505147295, "Min_40.0% Prob": 6.423520624637604, "Min_50.0% Prob": 5.423202753067017, "Min_60.0% Prob": 4.574122555553913}}
{"hexsha": "be2ff543f0b705a68df4d91c081b06d11c31d754", "ext": "py", "lang": "Python", "content": "def LogSquad_Damage(data_str, server_id):\n    matchObj = re.search('[([0-9.:-]+]\\\\[([ 0-9]*)]LogSquad: Player:(.*) ActualDamage=(\\\\d+(\\\\.\\\\d+)?) from (.*) caused by (.*).*', data_str, re.M | re.I)\n    date_time = datetime.datetime.strptime(matchObj.group(0).split('[')[1].split(']')[0], '%Y.%m.%d-%H.%M.%S:%f')\n    date_time_n = (date_time + datetime.timedelta(hours=8)).strftime('%Y.%m.%d-%H.%M.%S:%f')\n    date = date_time_n.split('-')[0]\n    time = date_time_n.split('-')[1]\n    Player_take_damage = matchObj.group(2)\n    Damage = matchObj.group(3)\n    Player_make_damage = matchObj.group(5)\n    Weapon = matchObj.group(6).split('_C_')[0]\n    return (date, time, str(Player_take_damage), str(Damage), str(Player_make_damage), str(Weapon), server_id)\n    pass", "fn_id": 0, "class_fn": false, "repo": "ChenjianS47/SquadPy", "file": "Core/Log_Plugins/LogSquad_Damage.py", "last_update_at": "2021-09-27T07:32:32+00:00", "pred": {"ppl": 2.9932901859283447, "ppl_lower": 3.8882205486297607, "ppl/lowercase_ppl": -1.2385852157083015, "ppl/zlib": 0.003037044817289628, "Min_5.0% Prob": 8.910043580191475, "Min_10.0% Prob": 7.086153609412057, "Min_20.0% Prob": 4.931120619177818, "Min_30.0% Prob": 3.558471898947443, "Min_40.0% Prob": 2.719468672493739, "Min_50.0% Prob": 2.187975840483393, "Min_60.0% Prob": 1.826608085927243}}
{"hexsha": "fea44362f63483b4569ec189eda480b3e3b01e26", "ext": "py", "lang": "Python", "content": "def QA_save_tdx_to_mongo(file_dir, client=DATABASE):\n    reader = TdxMinBarReader()\n    __coll = client.stock_min_five\n    for a, v, files in os.walk(file_dir):\n        for file in files:\n            if str(file)[0:2] == 'sh' and int(str(file)[2]) == 6 or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 0) or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 3):\n                QA_util_log_info('Now_saving ' + str(file)[2:8] + \"'s 5 min tick\")\n                fname = file_dir + os.sep + file\n                df = reader.get_df(fname)\n                df['code'] = str(file)[2:8]\n                df['market'] = str(file)[0:2]\n                df['datetime'] = [str(x) for x in list(df.index)]\n                df['date'] = [str(x)[0:10] for x in list(df.index)]\n                df['time_stamp'] = df['datetime'].apply(lambda x: QA_util_time_stamp(x))\n                df['date_stamp'] = df['date'].apply(lambda x: QA_util_date_stamp(x))\n                data_json = json.loads(df.to_json(orient='records'))\n                __coll.insert_many(data_json)", "fn_id": 0, "class_fn": false, "repo": "liujiannong/QUANTAXIS", "file": "QUANTAXIS/QASU/save_tdx_file.py", "last_update_at": "2021-04-01T08:59:46+00:00", "pred": {"ppl": 2.87273907661438, "ppl_lower": 3.2106995582580566, "ppl/lowercase_ppl": -1.1053979680440609, "ppl/zlib": 0.0024771501331786335, "Min_5.0% Prob": 9.316099194919362, "Min_10.0% Prob": 7.1328245980399, "Min_20.0% Prob": 4.81089118037905, "Min_30.0% Prob": 3.4649787678605035, "Min_40.0% Prob": 2.644016563839146, "Min_50.0% Prob": 2.108680211721962, "Min_60.0% Prob": 1.760008520986311}}
{"hexsha": "9d3c3cf62b10c24e35584ee9f62074dd84ba8c6b", "ext": "py", "lang": "Python", "content": "def preprocess_prices(df_prices: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Preprocessing of price dataframe. Get latest available price.\n    :param df_prices: Needed columns: ISIN, Price, Datum, Currency\n    :return: dataframe containing prices of stocks defined by ISIN on latest available date\n    \"\"\"\n    dfp = df_prices.copy()\n    assert dfp['Currency'].drop_duplicates().count() == 1, 'Multiple currencies used for price data!'\n    assert dfp['Currency'].iloc[0] == 'EUR', 'Currency is not Euro!'\n    dfp['Date'] = pd.to_datetime(dfp['Date'], format='%d.%m.%Y')\n    latest_date = dfp['Date'].max()\n    df_current_prices = dfp[dfp['Date'] == latest_date].reset_index(drop=True)\n    return df_current_prices", "fn_id": 5, "class_fn": false, "repo": "christophpernul/personal-finance-dashboard", "file": "lib_data_operations.py", "last_update_at": "2021-02-19T15:27:06+00:00", "pred": {"ppl": 4.131246089935303, "ppl_lower": 5.12491512298584, "ppl/lowercase_ppl": -1.1519371663381421, "ppl/zlib": 0.0038339975085323525, "Min_5.0% Prob": 9.730656051635743, "Min_10.0% Prob": 8.013836741447449, "Min_20.0% Prob": 5.960889518260956, "Min_30.0% Prob": 4.522125029563904, "Min_40.0% Prob": 3.5239887967705728, "Min_50.0% Prob": 2.8438267255201937, "Min_60.0% Prob": 2.3745137232976656}}
{"hexsha": "178e3d96179baff608652d760ff54f1c5c188588", "ext": "py", "lang": "Python", "content": "def get_phonopy_options(postprocess_parameters):\n    \"\"\"Return phonopy command option strings.\"\"\"\n    mesh_opts = []\n    if 'mesh' in postprocess_parameters:\n        mesh = postprocess_parameters['mesh']\n        try:\n            length = float(mesh)\n            mesh_opts.append('--mesh=%f' % length)\n        except TypeError:\n            mesh_opts.append('--mesh=\"%d %d %d\"' % tuple(mesh))\n        mesh_opts.append('--nowritemesh')\n    fc_opts = []\n    if 'fc_calculator' in postprocess_parameters:\n        if postprocess_parameters['fc_calculator'].lower().strip() == 'alm':\n            fc_opts.append('--alm')\n    return (mesh_opts, fc_opts)", "fn_id": 4, "class_fn": false, "repo": "atztogo/aiida-phonopy", "file": "aiida_phonopy/common/file_generators.py", "last_update_at": "2021-12-18T03:05:40+00:00", "pred": {"ppl": 2.7553062438964844, "ppl_lower": 3.189441442489624, "ppl/lowercase_ppl": -1.144364164905344, "ppl/zlib": 0.003739957917845787, "Min_5.0% Prob": 8.06579476594925, "Min_10.0% Prob": 6.434521719813347, "Min_20.0% Prob": 4.509281396865845, "Min_30.0% Prob": 3.362244418689183, "Min_40.0% Prob": 2.537097715631579, "Min_50.0% Prob": 2.02441235865096, "Min_60.0% Prob": 1.6988942014815456}}
{"hexsha": "b087ca6dbcea8e5a3be1946bdd709bb2ed25f366", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('factory', [lambda x: list(x), lambda x: MultiDict(x), lambda x: MultiDictProxy(MultiDict(x))])\ndef test_multi_dict_multidict_less_keys_substitution(factory: Callable):\n    with given:\n        sch = schema_multi_dict([('id', schema.int), ('name', schema.str)])\n    with when:\n        res = substitute(sch, factory([('id', 1)]))\n    with then:\n        assert res == schema_multi_dict([('id', schema.int(1)), ('name', schema.str)])\n        assert res != sch", "fn_id": 5, "class_fn": false, "repo": "nikitanovosibirsk/district42-exp-types", "file": "tests/multi_dict/substitutor/test_multi_dict_multidict_substitutor.py", "last_update_at": "2021-08-01T10:06:28+00:00", "pred": {"ppl": 4.0449113845825195, "ppl_lower": 4.275700569152832, "ppl/lowercase_ppl": -1.0397065648345456, "ppl/zlib": 0.00604960884361178, "Min_5.0% Prob": 11.20975399017334, "Min_10.0% Prob": 9.002551010676793, "Min_20.0% Prob": 6.17735738839422, "Min_30.0% Prob": 4.510437512681598, "Min_40.0% Prob": 3.475996272372348, "Min_50.0% Prob": 2.805027757904359, "Min_60.0% Prob": 2.3431100908755544}}
{"hexsha": "f04872eed07d871c244788341ce7469a3e8c2ec3", "ext": "py", "lang": "Python", "content": "def get_random_vals(mean_vel):\n    init_v = 20 + np.random.choice(range(-5, 5))\n    action_magnitute = np.random.uniform(-3, 3)\n    action_freq = np.random.uniform(0.02, 0.06)\n    return (init_v, action_magnitute, action_freq)", "fn_id": 3, "class_fn": false, "repo": "saArbabi/sim", "file": "src/exploratory_experiments/_data_generator.py", "last_update_at": "2021-03-26T15:28:31+00:00", "pred": {"ppl": 4.026244640350342, "ppl_lower": 4.026244640350342, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009878255960892321, "Min_5.0% Prob": 9.307544112205505, "Min_10.0% Prob": 7.6465789675712585, "Min_20.0% Prob": 5.457209404777078, "Min_30.0% Prob": 4.280368149280548, "Min_40.0% Prob": 3.4508995974765106, "Min_50.0% Prob": 2.791703315668328, "Min_60.0% Prob": 2.3266486482551465}}
{"hexsha": "539c6e5edfed9d87bb33e2513733ff5fcbd5e916", "ext": "py", "lang": "Python", "content": "def _make_dagster_event(event_type: DagsterEventType, pipeline_name: str, step_key: str):\n    event_specific_data = None\n    if event_type == DagsterEventType.STEP_SUCCESS:\n        event_specific_data = StepSuccessData(duration_ms=1.0)\n    elif event_type == DagsterEventType.STEP_FAILURE:\n        event_specific_data = StepFailureData(error=None, user_failure_data=None)\n    return DagsterEvent(event_type.value, pipeline_name, step_key=step_key, event_specific_data=event_specific_data)", "fn_id": 1, "class_fn": false, "repo": "denimalpaca/OpenLineage", "file": "integration/dagster/tests/conftest.py", "last_update_at": "2021-12-03T17:00:00+00:00", "pred": {"ppl": 1.7719334363937378, "ppl_lower": 3.1877310276031494, "ppl/lowercase_ppl": -2.026512102093144, "ppl/zlib": 0.0025653420958092117, "Min_5.0% Prob": 6.3828959465026855, "Min_10.0% Prob": 4.632028341293335, "Min_20.0% Prob": 2.733790426418699, "Min_30.0% Prob": 1.9255645153827445, "Min_40.0% Prob": 1.438243457244645, "Min_50.0% Prob": 1.1439608462850168, "Min_60.0% Prob": 0.9600143640682813}}
{"hexsha": "8e050af63a97f4a7f86ee722501d806903d052be", "ext": "py", "lang": "Python", "content": "def test_clip_lines(two_line_gdf, single_rectangle_gdf):\n    \"\"\"Test what happens when you give the clip_extent a line GDF.\"\"\"\n    clip_line = cl.clip_shp(two_line_gdf, single_rectangle_gdf)\n    assert len(clip_line.geometry) == 2", "fn_id": 19, "class_fn": false, "repo": "jlpalomino/earthpy", "file": "earthpy/tests/test_clip.py", "last_update_at": "2021-01-02T02:32:41+00:00", "pred": {"ppl": 7.436800003051758, "ppl_lower": 7.908936977386475, "ppl/lowercase_ppl": -1.030677575165844, "ppl/zlib": 0.01355703141355206, "Min_5.0% Prob": 12.379659016927084, "Min_10.0% Prob": 10.324598039899554, "Min_20.0% Prob": 7.776689179738363, "Min_30.0% Prob": 6.225349068641663, "Min_40.0% Prob": 4.914239106575648, "Min_50.0% Prob": 4.048500667955424, "Min_60.0% Prob": 3.3404182500309414}}
{"hexsha": "cab40a1d1240c5bed8edb2cf223d0f234868dfd0", "ext": "py", "lang": "Python", "content": "def daily_mean(data):\n    \"\"\"Calculate the daily mean of a 2D inflammation data array.\n\n    :param data: A 2D data array with inflammation data (each row contains measurements for a single patient across all days).\n    :returns: An array of mean values of measurements for each day.\n    \"\"\"\n    return np.mean(data, axis=0)", "fn_id": 1, "class_fn": false, "repo": "raphaelshirley/python-intermediate-inflammation-1", "file": "inflammation/models.py", "last_update_at": "2021-12-10T12:28:49+00:00", "pred": {"ppl": 3.9993772506713867, "ppl_lower": 4.188476085662842, "ppl/lowercase_ppl": -1.0333287748785809, "ppl/zlib": 0.007000700311450538, "Min_5.0% Prob": 10.444539308547974, "Min_10.0% Prob": 7.613761067390442, "Min_20.0% Prob": 5.421541661024094, "Min_30.0% Prob": 4.262054443359375, "Min_40.0% Prob": 3.384922321885824, "Min_50.0% Prob": 2.7788474693894387, "Min_60.0% Prob": 2.334331593864287}}
{"hexsha": "bc9cb89c9de7c8845a3f7858c2bf081cca88afc4", "ext": "py", "lang": "Python", "content": "def main():\n    parser = argparse.ArgumentParser()\n    default_url = 'https://search.api.hubmapconsortium.org/portal/search'\n    parser.add_argument('--url', default=default_url, help=f'ES endpoint. Default: {default_url}')\n    default_size = 20\n    parser.add_argument('--size', type=int, default=default_size, help=f'Number of records to pull. Default: {default_size}')\n    default_type = 'Dataset'\n    parser.add_argument('--type', default=default_type, help=f'Entity type to query. Default: {default_type}')\n    args = parser.parse_args()\n    query = {'post_filter': {'term': {'entity_type.keyword': args.type}}, 'size': args.size, '_source': ['metadata.metadata' if args.type == 'Dataset' else 'metadata']}\n    response = requests.post(args.url, json=query)\n    hits = response.json()['hits']['hits']\n    writer = DictWriter(sys.stdout, fieldnames=['uuid', 'assay_type', 'field', 'value'], extrasaction='ignore')\n    writer.writeheader()\n    for hit in hits:\n        uuid = hit['_id']\n        if 'metadata' not in hit['_source']:\n            continue\n        meta = hit['_source']['metadata']\n        if 'metadata' in meta:\n            meta = meta['metadata']\n        for field, value in meta.items():\n            if not re.search('[A-Za-z]', value):\n                continue\n            writer.writerow({'uuid': uuid, 'assay_type': meta['assay_type'] if 'assay_type' in meta else 'Sample', 'field': field, 'value': value})\n    assert len(hits) < args.size, f'Result truncated at {args.size}'\n    return 0", "fn_id": 0, "class_fn": false, "repo": "lukasz-migas/ingest-validation-tools", "file": "src/generate_field_values_csv.py", "last_update_at": "2021-03-17T20:48:41+00:00", "pred": {"ppl": 2.2040059566497803, "ppl_lower": 2.476253032684326, "ppl/lowercase_ppl": -1.1473787161230564, "ppl/zlib": 0.0012252350293661723, "Min_5.0% Prob": 7.977560091018677, "Min_10.0% Prob": 5.903374887094265, "Min_20.0% Prob": 3.773682185684342, "Min_30.0% Prob": 2.62223364484887, "Min_40.0% Prob": 1.9719128639672894, "Min_50.0% Prob": 1.5837604783920813, "Min_60.0% Prob": 1.3170455969396948}}
