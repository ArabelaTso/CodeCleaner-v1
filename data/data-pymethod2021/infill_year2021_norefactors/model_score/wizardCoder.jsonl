{"hexsha": "07bea0dee804f4a3dd1cb8de837a2c6f9ce9c771", "ext": "py", "lang": "Python", "content": "def pretty_print_post(url: str):\n    try:\n        text = parse_post(url)\n    except api2ch.Api2chError as e:\n        print('Request Error', e.code, e.reason)\n    else:\n        print(text)", "fn_id": 1, "class_fn": false, "repo": "uburuntu/api2ch", "file": "examples/complex.py", "last_update_at": "2021-07-26T09:40:57+00:00", "pred": {"ppl": 6.783540725708008, "ppl_lower": 7.925506591796875, "ppl/lowercase_ppl": -1.0812677512149593, "ppl/zlib": 0.01472691689667364, "Min_5.0% Prob": 11.363404750823975, "Min_10.0% Prob": 9.395404243469239, "Min_20.0% Prob": 6.913995157588612, "Min_30.0% Prob": 5.558252362643971, "Min_40.0% Prob": 4.713008485057137, "Min_50.0% Prob": 3.817475444504193, "Min_60.0% Prob": 3.182371383642449}}
{"hexsha": "6c31f616e579c190b006f0e8ba4f595d892ad988", "ext": "py", "lang": "Python", "content": "@card('Braids, Cabal Minion')\ndef braids_cabal_minion(card, abilities):\n\n    def braids_cabal_minion():\n        return AbilityNotImplemented\n    return (braids_cabal_minion,)", "fn_id": 28, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/odyssey.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 5.080728054046631, "ppl_lower": 12.203841209411621, "ppl/lowercase_ppl": -1.5391083842351925, "ppl/zlib": 0.014384553708381426, "Min_5.0% Prob": 14.534725666046143, "Min_10.0% Prob": 10.878305625915527, "Min_20.0% Prob": 7.387405655600808, "Min_30.0% Prob": 5.563587563112378, "Min_40.0% Prob": 4.061664924194867, "Min_50.0% Prob": 3.310884729821097, "Min_60.0% Prob": 2.7090664703308986}}
{"hexsha": "fc7e94a2224575fc9faaa120b95dfa7c40d2f253", "ext": "py", "lang": "Python", "content": "def test_extended_projection(ra_module):\n    initial_set = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'y'), [(7, 8), (9, 2)])\n    expected_sum = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(15,), (11,)])\n    expected_lambda = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(14,), (10,)])\n    expected_lambda2 = ra_module.NamedRelationalAlgebraFrozenSet(('z', 'x'), [(14, 8), (10, 10)])\n    expected_new_colum_str = ra_module.NamedRelationalAlgebraFrozenSet(('x', 'z'), [(7, 'a'), (9, 'a')])\n    expected_new_colum_int = ra_module.NamedRelationalAlgebraFrozenSet(('z',), [(1,), (1,)])\n    new_set = initial_set.extended_projection({'z': sum})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': ra_module.RelationalAlgebraStringExpression('x+y')})\n    assert expected_sum == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1})\n    assert expected_lambda == new_set\n    new_set = initial_set.extended_projection({'z': lambda r: r.x + r.y - 1, 'x': ra_module.RelationalAlgebraStringExpression('x+1')})\n    assert expected_lambda2 == new_set\n    new_set = initial_set.extended_projection({'z': 'a', 'x': ra_module.RelationalAlgebraStringExpression('x')})\n    assert expected_new_colum_str == new_set\n    new_set = initial_set.extended_projection({'z': 1})\n    assert expected_new_colum_int == new_set\n    new_set = initial_set.extended_projection({'x': ra_module.RelationalAlgebraColumnStr('x')})\n    assert initial_set.projection('x') == new_set\n    base_set = ra_module.NamedRelationalAlgebraFrozenSet((1, 2), [(7, 8), (9, 2)])\n    new_set = base_set.extended_projection({'x': ra_module.RelationalAlgebraColumnInt(1), 'y': ra_module.RelationalAlgebraColumnInt(2)})\n    assert initial_set == new_set", "fn_id": 31, "class_fn": false, "repo": "demianw/NeuroLang", "file": "neurolang/utils/tests/test_relational_algebra_set.py", "last_update_at": "2021-07-02T09:06:30+00:00", "pred": {"ppl": 1.8230658769607544, "ppl_lower": 1.9997174739837646, "ppl/lowercase_ppl": -1.1540104121411698, "ppl/zlib": 0.001580314820026657, "Min_5.0% Prob": 6.988204620502613, "Min_10.0% Prob": 4.8585921482606365, "Min_20.0% Prob": 2.8698646678580895, "Min_30.0% Prob": 1.9778470738740739, "Min_40.0% Prob": 1.497656270878331, "Min_50.0% Prob": 1.200148985095282, "Min_60.0% Prob": 1.0031028280761733}}
{"hexsha": "b41186cab3d777d1b3f6deea4852d5203576ebc3", "ext": "py", "lang": "Python", "content": "def say(text):\n    hash = hashlib.md5(text.encode()).hexdigest()\n    file = 'speech-cache/{}.wav'.format(hash)\n    cmd = 'play {}'.format(file)\n    if not os.path.isfile(file):\n        cmd = 'pico2wave -w {} \"{}\" && {}'.format(file, text, cmd)\n    os.system(cmd)", "fn_id": 3, "class_fn": false, "repo": "yousefamar/sanctum", "file": "sanctum.py", "last_update_at": "2021-01-17T00:14:06+00:00", "pred": {"ppl": 2.6095755100250244, "ppl_lower": 2.6095755100250244, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005544436810810139, "Min_5.0% Prob": 8.83419382572174, "Min_10.0% Prob": 6.516177266836166, "Min_20.0% Prob": 4.1270757983712585, "Min_30.0% Prob": 3.105711030960083, "Min_40.0% Prob": 2.3659353400854504, "Min_50.0% Prob": 1.9367138192589795, "Min_60.0% Prob": 1.5980312942947243}}
{"hexsha": "efba18d12458eb11af1a1ce332ee1fe30fca6aa2", "ext": "py", "lang": "Python", "content": "def stft(sig, frameSize=FRAMESIZE, overlapFac=OVERLAP, window=np.hanning):\n    hop = int(frameSize - np.floor(overlapFac * frameSize))\n    w = np.sqrt(window(frameSize))\n    out = np.array([np.fft.rfft(w * sig[i:i + frameSize]) for i in range(0, len(sig) - frameSize, hop)])\n    out = np.abs(out)\n    out -= np.mean(out)\n    return out", "fn_id": 0, "class_fn": false, "repo": "glkuzi/CountMTS", "file": "DataGenerator.py", "last_update_at": "2021-07-22T03:45:54+00:00", "pred": {"ppl": 2.2424473762512207, "ppl_lower": 2.2853946685791016, "ppl/lowercase_ppl": -1.0234913794966745, "ppl/zlib": 0.0038639609957934478, "Min_5.0% Prob": 9.033225822448731, "Min_10.0% Prob": 6.415025234222412, "Min_20.0% Prob": 3.795819313629814, "Min_30.0% Prob": 2.6425530076026917, "Min_40.0% Prob": 2.010629265866381, "Min_50.0% Prob": 1.611229091061879, "Min_60.0% Prob": 1.3604148538783192}}
{"hexsha": "3daf2b90efe24d08876eb33fa7e809886b79aacb", "ext": "py", "lang": "Python", "content": "def write_float_list():\n    global result\n    with open('result_shared_memory.txt', 'w') as f:\n        f.write(str(result))\n        f.close()", "fn_id": 7, "class_fn": false, "repo": "alansouls/interop-pysharp", "file": "proof_of_concept/python/text_transfer/connector_file.py", "last_update_at": "2021-05-22T22:37:44+00:00", "pred": {"ppl": 5.051218509674072, "ppl_lower": 5.051218509674072, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.014723904574782903, "Min_5.0% Prob": 9.4044771194458, "Min_10.0% Prob": 8.113879203796387, "Min_20.0% Prob": 6.207847356796265, "Min_30.0% Prob": 4.848607103029887, "Min_40.0% Prob": 3.90519917011261, "Min_50.0% Prob": 3.246456244587898, "Min_60.0% Prob": 2.7432859651744366}}
{"hexsha": "e13fa130c6f556d3b69fbf1da32dc9e4fc944723", "ext": "py", "lang": "Python", "content": "def report():\n    value = grp.value\n    try:\n        say(labels[value], 'selected')\n    except (TypeError, IndexError):\n        say('Value =', value)", "fn_id": 0, "class_fn": false, "repo": "gcewing/PyGUI", "file": "Tests/07-radiogroup.py", "last_update_at": "2021-11-24T19:50:02+00:00", "pred": {"ppl": 22.587860107421875, "ppl_lower": 28.310077667236328, "ppl/lowercase_ppl": -1.0724335444444946, "ppl/zlib": 0.027587722111202556, "Min_5.0% Prob": 15.297704696655273, "Min_10.0% Prob": 11.983608881632486, "Min_20.0% Prob": 9.822775432041713, "Min_30.0% Prob": 8.519798946380615, "Min_40.0% Prob": 7.226964950561523, "Min_50.0% Prob": 6.014264504114787, "Min_60.0% Prob": 5.26197703395571}}
{"hexsha": "d5c45875560e75035fb70d3ac4fa58d21599d27d", "ext": "py", "lang": "Python", "content": "def test_vsi_path_zip_plus_https():\n    \"\"\"A zip+https:// URLs vsi path is correct (see #1151)\"\"\"\n    url = 'zip+https://example.com/foo.zip!bar.tif'\n    assert vsi_path(parse_path(url)) == '/vsizip/vsicurl/https://example.com/foo.zip/bar.tif'", "fn_id": 16, "class_fn": false, "repo": "CloudNiner/rasterio", "file": "tests/test_path.py", "last_update_at": "2021-09-16T00:44:50+00:00", "pred": {"ppl": 4.229720115661621, "ppl_lower": 4.254810333251953, "ppl/lowercase_ppl": -1.0041011127691257, "ppl/zlib": 0.008847459045146205, "Min_5.0% Prob": 8.60430359840393, "Min_10.0% Prob": 7.789506435394287, "Min_20.0% Prob": 5.7034951315985785, "Min_30.0% Prob": 4.441923362237436, "Min_40.0% Prob": 3.5749722404612436, "Min_50.0% Prob": 2.8674179189231084, "Min_60.0% Prob": 2.4085179125720804}}
{"hexsha": "995e126c50514275c11a5e83f7c9eaa1aa63e240", "ext": "py", "lang": "Python", "content": "def timestamp_unpack(seconds, timedelta=datetime.timedelta, relative_to=pg_epoch_datetime.__add__):\n    \"\"\"\n\tCreate a `datetime.datetime` instance from a (seconds, microseconds) pair.\n\t\"\"\"\n    return relative_to(timedelta(0, *seconds))", "fn_id": 1, "class_fn": false, "repo": "autolog/TRV_Controller", "file": "TRV.indigoPlugin/Contents/Server Plugin/postgresql/types/io/stdlib_datetime.py", "last_update_at": "2021-02-03T16:31:26+00:00", "pred": {"ppl": 11.864020347595215, "ppl_lower": 12.789225578308105, "ppl/lowercase_ppl": -1.0303587756437338, "ppl/zlib": 0.016380863045725558, "Min_5.0% Prob": 14.219276746114096, "Min_10.0% Prob": 11.617992242177328, "Min_20.0% Prob": 9.218862454096476, "Min_30.0% Prob": 7.223912490738763, "Min_40.0% Prob": 5.79589042186737, "Min_50.0% Prob": 4.873339414596558, "Min_60.0% Prob": 4.163378220152211}}
{"hexsha": "6f8e9b82a7e7f7ef2e5696e6e11a9da88873c108", "ext": "py", "lang": "Python", "content": "@app.route('/ext/<api_key>/new_session/<session_name>', methods=['POST'])\ndef ext_create_new_session_name(api_key, session_name):\n    logging.debug('EXTERNAL: Create new Session with name')\n    db = Database()\n    user = db.get_user_by_api_key(api_key)\n    if user is None:\n        return (\"Provided API key ('{}') is not associated with any registered user\".format(api_key), HTTPStatus.UNAUTHORIZED.value)\n    if db.does_session_name_exist(session_name):\n        return (\"Provided session name ('{}') already exists\".format(session_name), HTTPStatus.UNAUTHORIZED.value)\n    logging.debug('Creating new session: %s (userid: %s)', session_name, user['user_id'])\n    session_id = db.create_session(session_name, user['user_id'])\n    logging.debug('New session id: %s', session_id)\n    set_current_session(session_id, session_name)\n    return \"New Session ID: '{}'\".format(session_id)", "fn_id": 2, "class_fn": false, "repo": "Samiasa/UsabilityConsole", "file": "console/routes/external.py", "last_update_at": "2021-06-07T17:15:42+00:00", "pred": {"ppl": 2.7126805782318115, "ppl_lower": 3.003230571746826, "ppl/lowercase_ppl": -1.1019615945264574, "ppl/zlib": 0.0024339933884652246, "Min_5.0% Prob": 8.01396139462789, "Min_10.0% Prob": 6.250050325393676, "Min_20.0% Prob": 4.4331109642982485, "Min_30.0% Prob": 3.189210530566542, "Min_40.0% Prob": 2.468355741978872, "Min_50.0% Prob": 1.9877590139609154, "Min_60.0% Prob": 1.6663605935847092}}
{"hexsha": "3b40f31f9e2306102a844f470092207c102189e3", "ext": "py", "lang": "Python", "content": "@pb.route('/detail/<id>', methods=['GET', 'POST'])\ndef single_product(id):\n    product = Product.query.filter_by(id=id).first()\n    if product.out_of_stock == True:\n        status = 'Sold Out'\n    else:\n        status = 'In stock'\n    data = {'id': product.id, 'name': product.name, 'img_url': product.img_url, 'description': product.description, 'seller': User.query.filter_by(id=product.seller_id).first().name, 'seller_id': product.seller_id, 'created': product.created, 'price': product.price, 'status': status, 'seller_img': User.query.filter_by(id=product.seller_id).first().avatar_url}\n    return jsonify(data)", "fn_id": 3, "class_fn": false, "repo": "sori9088/mealplan-server", "file": "app/components/product/__init__.py", "last_update_at": "2021-06-02T00:44:12+00:00", "pred": {"ppl": 2.227039337158203, "ppl_lower": 2.554213762283325, "ppl/lowercase_ppl": -1.1711952200495261, "ppl/zlib": 0.002742030999532089, "Min_5.0% Prob": 8.37278954188029, "Min_10.0% Prob": 6.409045897032085, "Min_20.0% Prob": 3.8036643423532186, "Min_30.0% Prob": 2.6402042395713035, "Min_40.0% Prob": 2.002947158229194, "Min_50.0% Prob": 1.607296830376512, "Min_60.0% Prob": 1.340923357264776}}
{"hexsha": "fe240d6eafcfe9043656fc61dbcdc36afa2f5d4c", "ext": "py", "lang": "Python", "content": "def get_feature(internel_layer, layers, filters, batch_norm=False):\n    \"\"\"Get VGG feature body as stacks of convoltions.\"\"\"\n    for i, num in enumerate(layers):\n        for j in range(num):\n            internel_layer = sym.conv2d(data=internel_layer, kernel_size=(3, 3), padding=(1, 1), channels=filters[i], name='conv%s_%s' % (i + 1, j + 1))\n            if batch_norm:\n                internel_layer = sym.batch_norm(data=internel_layer, name='bn%s_%s' % (i + 1, j + 1))\n            internel_layer = sym.relu(data=internel_layer, name='relu%s_%s' % (i + 1, j + 1))\n        internel_layer = sym.max_pool2d(data=internel_layer, pool_size=(2, 2), strides=(2, 2), name='pool%s' % (i + 1))\n    return internel_layer", "fn_id": 0, "class_fn": false, "repo": "CynthiaProtector/helo", "file": "nnvm/python/nnvm/testing/vgg.py", "last_update_at": "2021-12-25T06:09:46+00:00", "pred": {"ppl": 1.9691764116287231, "ppl_lower": 2.063378095626831, "ppl/lowercase_ppl": -1.068961098673967, "ppl/zlib": 0.0022738771482322426, "Min_5.0% Prob": 8.309621493021647, "Min_10.0% Prob": 5.625128421783447, "Min_20.0% Prob": 3.313765425682068, "Min_30.0% Prob": 2.251368360370398, "Min_40.0% Prob": 1.6929932888178154, "Min_50.0% Prob": 1.3550417065965012, "Min_60.0% Prob": 1.1293286136068248}}
{"hexsha": "d1b6df0cf562b4a74a407607abec54818df78080", "ext": "py", "lang": "Python", "content": "def mech():\n    item = {0: 'mail', 1: 'password'}\n    try:\n        choice = int(input(bcolors.OKBLUE + 'Enter the option no. of data: \\n [0] Mail \\n [1] Password\\n [2] Exit\\nOption:' + bcolors.ENDC))\n        try:\n            pass_data = input(bcolors.OKBLUE + 'Enter the ' + str(item[choice]) + ' to check: ' + bcolors.ENDC)\n        except:\n            exit(0)\n        data = main(str(choice), pass_data)\n        print(bcolors.OKGREEN + data + bcolors.ENDC)\n        print(bcolors.OKBLUE + ' [0] Dump data in a file \\n [1] Go back \\n [2] Exit' + bcolors.ENDC)\n        choice_ = input(bcolors.OKBLUE + 'Option: ' + bcolors.ENDC)\n        if choice_ == '0':\n            raw_filename = input(bcolors.OKBLUE + 'File name to save: ' + bcolors.ENDC)\n            filename = raw_filename + '_' + str(item[choice]) + '.txt'\n            file = open(filename, 'w')\n            file.write(data)\n            file.close()\n            print(bcolors.OKGREEN + 'File is saved in same directory with name {}.'.format(raw_filename) + bcolors.ENDC)\n            print()\n        elif choice_ == '1':\n            print()\n            print()\n            mech()\n        else:\n            exit(0)\n    except Exception as e:\n        print(bcolors.FAIL + e + bcolors.ENDC)\n        exit(0)", "fn_id": 1, "class_fn": false, "repo": "StrinTH/checkleaks", "file": "leakcheck.py", "last_update_at": "2021-01-06T14:45:08+00:00", "pred": {"ppl": 2.6581943035125732, "ppl_lower": 2.8223483562469482, "ppl/lowercase_ppl": -1.0612922928364437, "ppl/zlib": 0.002167731838173018, "Min_5.0% Prob": 8.313226673338148, "Min_10.0% Prob": 6.4373918288462875, "Min_20.0% Prob": 4.346953444480896, "Min_30.0% Prob": 3.16187144591745, "Min_40.0% Prob": 2.438072652469079, "Min_50.0% Prob": 1.9566266935298893, "Min_60.0% Prob": 1.6300545675181413}}
{"hexsha": "a113b237351d78e1a5fa0fd0d24d0327976b7f7a", "ext": "py", "lang": "Python", "content": "def process_data(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"delete column that have most na, and fill na with mean\"\"\"\n    na_count = dataframe.isnull().sum(axis=0).tolist()\n    most_na_col = na_count.index(max(na_count))\n    result = dataframe.drop(dataframe.columns[most_na_col], axis=1)\n    return result.fillna(result.mean())", "fn_id": 1, "class_fn": false, "repo": "coookie89/Intern-Training", "file": "txya900619/Week1/ch2/2.2/exercise1.py", "last_update_at": "2021-08-24T12:14:46+00:00", "pred": {"ppl": 3.0061399936676025, "ppl_lower": 3.361593723297119, "ppl/lowercase_ppl": -1.1015378417772743, "ppl/zlib": 0.00542195498354389, "Min_5.0% Prob": 9.401886105537415, "Min_10.0% Prob": 7.040228658252293, "Min_20.0% Prob": 4.768787660096821, "Min_30.0% Prob": 3.572099769937581, "Min_40.0% Prob": 2.787461841576978, "Min_50.0% Prob": 2.220538838262049, "Min_60.0% Prob": 1.8401117229368538}}
{"hexsha": "be83fdd493ff018b94ad39f9ed435403d860ea8e", "ext": "py", "lang": "Python", "content": "def generate_bio(spans, length):\n    tags = ['O'] * length\n    for span in spans:\n        tags[span.tokens[0]] = f'B-{span.type}'\n        for i in span.tokens[1:]:\n            tags[i] = f'I-{span.type}'\n    return tags", "fn_id": 4, "class_fn": false, "repo": "blester125/iobes", "file": "tests/utils.py", "last_update_at": "2021-12-06T23:15:18+00:00", "pred": {"ppl": 3.004234790802002, "ppl_lower": 3.6641323566436768, "ppl/lowercase_ppl": -1.180513224974125, "ppl/zlib": 0.008148317705450017, "Min_5.0% Prob": 10.58200772603353, "Min_10.0% Prob": 8.445174853006998, "Min_20.0% Prob": 5.313867321381202, "Min_30.0% Prob": 3.679237484931946, "Min_40.0% Prob": 2.7582830863970296, "Min_50.0% Prob": 2.19887883399668, "Min_60.0% Prob": 1.8697297832812183}}
{"hexsha": "1a9febc6fc48fe142ca3755fceef4aa604dfb595", "ext": "py", "lang": "Python", "content": "def assemble(mappings, sequence_file, out_file, min_overlap, max_overhang, min_length):\n    graph, assembled = OverlapGraph.parse_paf(mappings, min_overlap, max_overhang)\n    paths = graph.max_paths()\n    sequences = parse_fasta(sequence_file)\n    with open(out_file, 'w') as f:\n        for path in paths:\n            seq, contained_reads, name = construct_merged_sequence(path, graph, sequences)\n            assembled += contained_reads\n            if len(seq) > min_length:\n                f.write('>%s\\n%s\\n' % (name, seq))\n        for n, s in sequences.items():\n            if n in assembled:\n                continue\n            if len(s) < min_length:\n                continue\n            f.write('>%s\\n%s\\n' % (n, s))", "fn_id": 2, "class_fn": false, "repo": "rikuu/hgga", "file": "asm_node.py", "last_update_at": "2021-04-09T21:56:00+00:00", "pred": {"ppl": 2.9547088146209717, "ppl_lower": 2.9903690814971924, "ppl/lowercase_ppl": -1.0110732057653669, "ppl/zlib": 0.0035874175699049907, "Min_5.0% Prob": 9.139421796798706, "Min_10.0% Prob": 7.152968537807465, "Min_20.0% Prob": 4.848065206408501, "Min_30.0% Prob": 3.546970314780871, "Min_40.0% Prob": 2.7182835497893394, "Min_50.0% Prob": 2.1631555923509715, "Min_60.0% Prob": 1.8079233743204188}}
{"hexsha": "a2c6556c09f53bd180fe20a7e14114c3b4f5b12b", "ext": "py", "lang": "Python", "content": "def get_mycroft_version():\n    try:\n        from mycroft.version import CORE_VERSION_STR\n        return CORE_VERSION_STR\n    except:\n        pass\n    root = search_mycroft_core_location()\n    if root:\n        version_file = join(root, 'version', '__init__.py')\n        if not isfile(version_file):\n            version_file = join(root, 'mycroft', 'version', '__init__.py')\n        if isfile(version_file):\n            version = []\n            with open(version_file) as f:\n                text = f.read()\n                version.append(text.split('CORE_VERSION_MAJOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_MINOR =')[-1].split('\\n')[0].strip())\n                version.append(text.split('CORE_VERSION_BUILD =')[-1].split('\\n')[0].strip())\n                version = '.'.join(version)\n                if \"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \" in text:\n                    version += text.split(\"CORE_VERSION_STR = '.'.join(map(str, CORE_VERSION_TUPLE)) + \")[-1].split('\\n')[0][1:-1]\n                return version\n        return None", "fn_id": 3, "class_fn": false, "repo": "NeonJarbas/ovos_utils", "file": "ovos_utils/fingerprinting.py", "last_update_at": "2021-11-08T07:19:25+00:00", "pred": {"ppl": 1.8455311059951782, "ppl_lower": 2.004727602005005, "ppl/lowercase_ppl": -1.1350286169087314, "ppl/zlib": 0.0017309805039437568, "Min_5.0% Prob": 6.595677916208903, "Min_10.0% Prob": 4.742623794078827, "Min_20.0% Prob": 2.8821073283751804, "Min_30.0% Prob": 2.0185674655732218, "Min_40.0% Prob": 1.5354548539997133, "Min_50.0% Prob": 1.2249736101213402, "Min_60.0% Prob": 1.0234490648170442}}
{"hexsha": "d9fc432fc00d588e5c0efee2aee23a3f4e8a0c91", "ext": "py", "lang": "Python", "content": "def main(_):\n    tf.logging.set_verbosity(tf.logging.INFO)\n    usr_dir.import_usr_dir(FLAGS.t2t_usr_dir)\n    trainer_utils.log_registry()\n    trainer_utils.validate_flags()\n    output_dir = os.path.expanduser(FLAGS.output_dir)\n    tmp_dir = os.path.expanduser(FLAGS.tmp_dir)\n    if not FLAGS.data_dir:\n        raise ValueError('You must specify a --data_dir')\n    data_dir = os.path.expanduser(FLAGS.data_dir)\n    tf.gfile.MakeDirs(output_dir)\n    if FLAGS.generate_data:\n        tf.gfile.MakeDirs(data_dir)\n        tf.gfile.MakeDirs(tmp_dir)\n        for problem_name in FLAGS.problems.split('-'):\n            tf.logging.info('Generating data for %s' % problem_name)\n            problem = registry.problem(problem_name)\n            problem.generate_data(data_dir, tmp_dir)\n    trainer_utils.run(data_dir=data_dir, model=FLAGS.model, output_dir=output_dir, train_steps=FLAGS.train_steps, eval_steps=FLAGS.eval_steps, schedule=FLAGS.schedule)", "fn_id": 0, "class_fn": false, "repo": "ctuning/ck-ml", "file": "program/tensor2tensor-attention-tf/source/tensor2tensor/tensor2tensor/bin/t2t-trainer.py", "last_update_at": "2021-09-14T14:14:10+00:00", "pred": {"ppl": 1.7666088342666626, "ppl_lower": 2.1826834678649902, "ppl/lowercase_ppl": -1.371652558312105, "ppl/zlib": 0.001509447734836597, "Min_5.0% Prob": 6.089292049407959, "Min_10.0% Prob": 4.4478158251992586, "Min_20.0% Prob": 2.7251734096428444, "Min_30.0% Prob": 1.899051614362618, "Min_40.0% Prob": 1.4311567792299622, "Min_50.0% Prob": 1.1378902151466233, "Min_60.0% Prob": 0.9494792653984456}}
{"hexsha": "01b86d405494b9108be791ee779c96fe8f5fc81b", "ext": "py", "lang": "Python", "content": "def test_code_point_of_name():\n    assert demojiprocess.code_point_of_name('yellow_heart') == '1f49b'\n    assert demojiprocess.code_point_of_name(':yellow_heart:') == '1f49b'\n    assert demojiprocess.code_point_of_name('woman_health_worker_tone2') == '1f469-1f3fc-200d-2695-fe0f'\n    assert demojiprocess.code_point_of_name('adult:skin-tone-4') == '1f9d1-1f3fe'", "fn_id": 4, "class_fn": false, "repo": "PommeBleue/discord-emoji", "file": "src/tests/tests.py", "last_update_at": "2021-06-18T09:37:53+00:00", "pred": {"ppl": 2.4287338256835938, "ppl_lower": 2.4287338256835938, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005580943787197302, "Min_5.0% Prob": 10.366397993905204, "Min_10.0% Prob": 7.53578565801893, "Min_20.0% Prob": 4.39710160576064, "Min_30.0% Prob": 2.988075181333856, "Min_40.0% Prob": 2.2393805872396393, "Min_50.0% Prob": 1.7864444352783941, "Min_60.0% Prob": 1.4855263387722883}}
{"hexsha": "b9a0444e34d229fe92febc414b59c043e61e95ce", "ext": "py", "lang": "Python", "content": "def get_blue_marble_image(month):\n    filename = 'world.2004%02i.3x21600x10800.jpg' % month\n    fullpath = os.path.join(os.path.expanduser('~'), '.cache/burned_area/' + filename)\n    if os.path.exists(fullpath):\n        with open(fullpath, 'rb') as f:\n            imgdata = f.read()\n    else:\n        code = _nasa_blue_marble_ng_monthly_image_url_codes[month - 1]\n        url = ('https://eoimages.gsfc.nasa.gov/images/imagerecords/' + '%s/' + filename) % code\n        print('Downloading', url)\n        req = requests.get(url)\n        req.raise_for_status()\n        imgdata = req.content\n        os.makedirs(os.path.dirname(fullpath), exist_ok=True)\n        with open(fullpath, 'wb') as f:\n            f.write(imgdata)\n    img = Image.open(io.BytesIO(imgdata))\n    return img", "fn_id": 4, "class_fn": false, "repo": "benbarsdell/burned-area-viz", "file": "burned_area_viz.py", "last_update_at": "2021-04-16T18:20:36+00:00", "pred": {"ppl": 2.2848780155181885, "ppl_lower": 2.649954319000244, "ppl/lowercase_ppl": -1.1793870224019487, "ppl/zlib": 0.002010493036563436, "Min_5.0% Prob": 8.581801891326904, "Min_10.0% Prob": 6.066846532821655, "Min_20.0% Prob": 3.8743973993787577, "Min_30.0% Prob": 2.732153114366841, "Min_40.0% Prob": 2.0657265830821205, "Min_50.0% Prob": 1.6520274219991162, "Min_60.0% Prob": 1.3842583860092277}}
{"hexsha": "965d7f77982b9eaf53ae37fba39562b4f8c0b34f", "ext": "py", "lang": "Python", "content": "def _split_points_into_batches(points: NumericArray, number_of_points_per_batch: int) -> tp.List[tp.List[NumericArray]]:\n    number_of_points = points.shape[1]\n    n_begin = 0\n    args_list = []\n    while n_begin < number_of_points:\n        n_end = min(n_begin + number_of_points_per_batch, number_of_points)\n        args_list.append([points[:, n_begin:n_end]])\n        n_begin = n_end\n    return args_list", "fn_id": 0, "class_fn": false, "repo": "michaelnowotny/cocos", "file": "cocos/scientific/kde.py", "last_update_at": "2021-11-27T09:09:40+00:00", "pred": {"ppl": 2.4948713779449463, "ppl_lower": 2.941995620727539, "ppl/lowercase_ppl": -1.180315307701694, "ppl/zlib": 0.004594156663059108, "Min_5.0% Prob": 11.036539236704508, "Min_10.0% Prob": 7.554044503432054, "Min_20.0% Prob": 4.551991816896659, "Min_30.0% Prob": 3.094356439434565, "Min_40.0% Prob": 2.289772383446963, "Min_50.0% Prob": 1.8415054579999186, "Min_60.0% Prob": 1.5390540774826174}}
{"hexsha": "01eaa1599fa6952fceac0db02f61801ac8392d27", "ext": "py", "lang": "Python", "content": "def plot_correlation(py, correlated, minimum_arg, minimums):\n    plt.figure()\n    plt.plot(py, correlated[:, 0, 0])\n    plt.plot(py, correlated[:, -1, -1])\n    plt.legend(['pixel 0,0', 'pixel n,n', 'minimum 0 0', 'minimum n n'])\n    plt.title('cross correlation between calibration curve and pixel values')\n    plt.xlabel('Physical distance (im)')\n    plt.ylabel('Focus unit')", "fn_id": 17, "class_fn": false, "repo": "idiap/deepfocus2019", "file": "detection/calibration_fit.py", "last_update_at": "2021-11-26T09:33:14+00:00", "pred": {"ppl": 7.826765060424805, "ppl_lower": 7.704930305480957, "ppl/lowercase_ppl": -0.9923749799735552, "ppl/zlib": 0.01013571072816402, "Min_5.0% Prob": 12.520609664916993, "Min_10.0% Prob": 10.633447647094727, "Min_20.0% Prob": 8.031563325361772, "Min_30.0% Prob": 6.1331564959357765, "Min_40.0% Prob": 4.968148054016961, "Min_50.0% Prob": 4.042933545614543, "Min_60.0% Prob": 3.429180972497253}}
{"hexsha": "d4fedd0a36cd395e4706b0c47428c1465d2a2a9d", "ext": "py", "lang": "Python", "content": "def wl_predict(datasets, test_datasets):\n    \"\"\"\n\n    \"\"\"\n    log_dir = tfu.get_logdir()\n    datasets, test_datasets = get_wl_datasets()\n    x, y = tfu.get_example(datasets)\n    loss_fxn = tf.losses.BinaryCrossentropy()\n    optim = tf.keras.optimizers.Adam()\n    model = lstm.make_mlp_functional(x.shape[-2:], tf.size(y[0]), classify=True)\n    train_summary_writer, test_summary_writer = tfu.init_summary_writers(log_dir)\n    train_loss, train_accuracy, test_loss, test_accuracy = tfu.get_classification_metrics()\n    tr_step = 0\n    te_step = 0\n    for epoch, dataset in enumerate(datasets):\n        if not dataset:\n            continue\n        for xtr, ytr in dataset:\n            ytr = tf.reshape(ytr, (1, -1))\n            tl, ta, preds = fwd.train_step_classify(model, optim, loss_fxn, xtr, ytr, train_loss, train_accuracy)\n            tr_step += 1\n            with train_summary_writer.as_default():\n                tf.summary.scalar('loss', tl.numpy(), step=tr_step)\n                tf.summary.scalar('accuracy', ta.numpy(), step=tr_step)\n            maxed_pred = tf.argmax(preds, 1).numpy()[0]\n            maxed_true = tf.argmax(ytr).numpy()\n            correct = tf.equal(maxed_pred, maxed_true).numpy()\n        test_dataset = random.choice(test_datasets)\n        if not test_dataset:\n            continue\n        for xte, yte in test_dataset:\n            yte = tf.reshape(yte, (1, -1))\n            tel, tea = fwd.test_step(model, loss_fxn, xte, yte, test_loss, test_accuracy)\n            te_step += 1\n            with test_summary_writer.as_default():\n                tf.summary.scalar('loss', tel.numpy(), step=te_step)\n                tf.summary.scalar('accuracy', tea.numpy(), step=te_step)\n        template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}, Preds: {}, Acts: {}'\n        print(template.format(epoch + 1, train_loss.result(), train_accuracy.result() * 100, test_loss.result(), test_accuracy.result() * 100, preds, ytr))\n        train_loss.reset_states()\n        test_loss.reset_states()\n        train_accuracy.reset_states()\n        test_accuracy.reset_states()\n    tf.saved_model.save(model, tfm.WRITE_TO + 'win_loss/')\n    return datasets", "fn_id": 1, "class_fn": false, "repo": "AnandIJain/sip", "file": "sips/ml/tf_models/win_loss.py", "last_update_at": "2021-06-13T13:53:59+00:00", "pred": {"ppl": 2.4997758865356445, "ppl_lower": 2.7455525398254395, "ppl/lowercase_ppl": -1.1023588201145866, "ppl/zlib": 0.001244838427269056, "Min_5.0% Prob": 9.070746392011642, "Min_10.0% Prob": 6.757911902207595, "Min_20.0% Prob": 4.3226803953831014, "Min_30.0% Prob": 3.0263112949255184, "Min_40.0% Prob": 2.286046415824315, "Min_50.0% Prob": 1.834399677948752, "Min_60.0% Prob": 1.530024514156346}}
{"hexsha": "982db6db807b1cdc32803139fd8028059a1a1f18", "ext": "py", "lang": "Python", "content": "def plotvfonsph(theta_rad, phi_rad, F_th, F_ph, freq=0.0, vcoordlist=['sph'], projection='orthographic', cmplx_rep='AbsAng', vfname='Unknown'):\n    \"\"\"Plot transverse vector field on sphere. Different projections are\n    supported as are different bases and complex value representations.\"\"\"\n    x, y, xyNames, nom_xticks, F_th, F_ph = projectdomain(theta_rad, phi_rad, F_th, F_ph, projection)\n    F0_c, F1_c, compNames = vcoordconvert(F_th, F_ph, phi_rad, vcoordlist=vcoordlist)\n    F0_2r, cmplxop0 = cmplx2realrep(F0_c, cmplx_rep)\n    F1_2r, cmplxop1 = cmplx2realrep(F1_c, cmplx_rep)\n    if projection == 'orthographic':\n        xyNames = [xyNames[0] + ' []', xyNames[1] + ' []']\n    if projection == 'azimuthal-equidistant':\n        x = numpy.rad2deg(x)\n        y = numpy.rad2deg(y)\n        xyNames = [xyNames[0] + ' [deg.]', xyNames[1] + ' [deg.]']\n    fig = plt.figure()\n    fig.suptitle(vfname + ' @ ' + str(freq / 1000000.0) + ' MHz' + ', ' + 'projection: ' + projection)\n\n    def plotcomp(vcmpi, cpi, zcomp, cmplxop, xyNames, nom_xticks):\n        if cmplxop[cpi] == 'Ang':\n            cmap = plt.get_cmap('hsv')\n        else:\n            cmap = plt.get_cmap('viridis')\n        plt.pcolormesh(x, y, zcomp[cpi], cmap=cmap)\n        if nom_xticks is not None:\n            plt.xticks(nom_xticks)\n        ax.set_title(cmplxop[cpi] + '(' + compNames[vcmpi] + ')')\n        plt.xlabel(xyNames[0])\n        plt.ylabel(xyNames[1])\n        plt.grid()\n        plt.colorbar()\n        if projection == 'equirectangular':\n            ax.invert_yaxis()\n    ax = plt.subplot(221, polar=False)\n    plotcomp(0, 0, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(222, polar=False)\n    plotcomp(0, 1, F0_2r, cmplxop0, xyNames, nom_xticks)\n    ax = plt.subplot(223, polar=False)\n    plotcomp(1, 0, F1_2r, cmplxop1, xyNames, nom_xticks)\n    ax = plt.subplot(224, polar=False)\n    plotcomp(1, 1, F1_2r, cmplxop1, xyNames, nom_xticks)\n    plt.show()", "fn_id": 12, "class_fn": false, "repo": "David-McKenna/AntPat", "file": "antpat/reps/sphgridfun/tvecfun.py", "last_update_at": "2021-04-06T06:23:25+00:00", "pred": {"ppl": 3.013906717300415, "ppl_lower": 3.107529640197754, "ppl/lowercase_ppl": -1.027728338111539, "ppl/zlib": 0.0015451500699223493, "Min_5.0% Prob": 9.665759549822127, "Min_10.0% Prob": 7.405277151457021, "Min_20.0% Prob": 4.969584478458888, "Min_30.0% Prob": 3.583874565474864, "Min_40.0% Prob": 2.7442237561909666, "Min_50.0% Prob": 2.2048455941267835, "Min_60.0% Prob": 1.8385231959269526}}
{"hexsha": "acf70d67c75b3c219a4cc6fc3e0736e214b7ac7f", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef color_image(image):\n    image.ndim = 3\n    return image", "fn_id": 2, "class_fn": false, "repo": "dxxxm/opencv_wrapper", "file": "tests/conftest.py", "last_update_at": "2021-11-24T09:24:10+00:00", "pred": {"ppl": 5.810720443725586, "ppl_lower": 5.810720443725586, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.02666219036087292, "Min_5.0% Prob": 8.051657676696777, "Min_10.0% Prob": 7.380747556686401, "Min_20.0% Prob": 5.794649720191956, "Min_30.0% Prob": 4.639794985453288, "Min_40.0% Prob": 4.031771928071976, "Min_50.0% Prob": 3.4420978009700773, "Min_60.0% Prob": 3.0208202054103217}}
{"hexsha": "53f7bb295a7670c88ce420c9fc2d3c662110f9c1", "ext": "py", "lang": "Python", "content": "def AvgPooling(pytorch_layer):\n    layer = pb2.LayerParameter()\n    layer.type = 'Pooling'\n    layer.pooling_param.pool = pb2.PoolingParameter.AVE\n    CopyPoolingParameter(pytorch_layer, layer)\n    return layer", "fn_id": 14, "class_fn": false, "repo": "UltronAI/pytorch-caffe", "file": "pytorch2caffe/ConvertLayer_caffe.py", "last_update_at": "2021-11-12T07:39:36+00:00", "pred": {"ppl": 3.491706609725952, "ppl_lower": 7.740832805633545, "ppl/lowercase_ppl": -1.6366959670425547, "ppl/zlib": 0.010333806748878618, "Min_5.0% Prob": 12.092428207397461, "Min_10.0% Prob": 9.603060054779053, "Min_20.0% Prob": 5.686644218184731, "Min_30.0% Prob": 4.173694711178541, "Min_40.0% Prob": 3.1460209529508245, "Min_50.0% Prob": 2.491494830963867, "Min_60.0% Prob": 2.11863346386588}}
{"hexsha": "ed1e84994c73c427aad1a29aacc2fb28de4545f1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('transaction_args,method_args,method_kwargs,expected,skip_testrpc', (({}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gas': 800000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'chainId': None}, False), ({'gasPrice': 21000000000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 21000000000, 'chainId': None}, False), ({'nonce': 7}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 0, 'gasPrice': 1, 'nonce': 7, 'chainId': None}, True), ({'value': 20000}, (5,), {}, {'data': '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005', 'value': 20000, 'gasPrice': 1, 'chainId': None}, False)), ids=['Standard', 'Explicit Gas', 'Explicit Gas Price', 'Explicit Nonce', 'With Value'])\ndef test_build_transaction_with_contract_with_arguments(web3, skip_if_testrpc, math_contract, transaction_args, method_args, method_kwargs, expected, skip_testrpc, buildTransaction):\n    if skip_testrpc:\n        skip_if_testrpc(web3)\n    txn = buildTransaction(contract=math_contract, contract_function='increment', func_args=method_args, func_kwargs=method_kwargs, tx_params=transaction_args)\n    expected['to'] = math_contract.address\n    assert txn is not None\n    if 'gas' in transaction_args:\n        assert txn['gas'] == transaction_args['gas']\n    else:\n        assert 'gas' in txn\n    assert dissoc(txn, 'gas') == expected", "fn_id": 4, "class_fn": false, "repo": "onlinedeal4unow/web3.py", "file": "tests/core/contracts/test_contract_buildTransaction.py", "last_update_at": "2021-11-12T00:38:42+00:00", "pred": {"ppl": 1.5267874002456665, "ppl_lower": 1.629470705986023, "ppl/lowercase_ppl": -1.1538154879038622, "ppl/zlib": 0.0008815953947113067, "Min_5.0% Prob": 5.8315558311266775, "Min_10.0% Prob": 3.783748395835297, "Min_20.0% Prob": 2.100180878485524, "Min_30.0% Prob": 1.4116337420418859, "Min_40.0% Prob": 1.0584678391316178, "Min_50.0% Prob": 0.8463138287638902, "Min_60.0% Prob": 0.7064529330951571}}
{"hexsha": "6f98bbabb72a1fe6a11d10ff1c78a84452e1e916", "ext": "py", "lang": "Python", "content": "def add_preproc_params(parser):\n    parser.add_argument('--effdir_out_preproc', required=False, help='Output directory for preproc')\n    parser.add_argument('--preproc_mask', required=False, help='Preproc processing mask file')\n    parser.add_argument('--preproc_mask_adc', required=False, help='Preproc ADC NL processing mask file')\n    parser.add_argument('--preproc_dark', dest='preproc_dark', default=False, action='store_true', help='Preprocess dark data')\n    parser.add_argument('--preproc_common', dest='preproc_common', default=False, action='store_true', help='Preprocess common data')\n    parser.add_argument('--nbin', required=False, default=10000, type=np.int, help='Number of phase bins')\n    parser.add_argument('--jump_filter_len', required=False, default=40000, type=np.int, help='Jump filter length')\n    parser.add_argument('--jump_threshold', required=False, default=5.0, type=np.float, help='Jump detection threshold')\n    parser.add_argument('--preproc_timeout', required=False, default=120, type=np.int, help='Maximum time allowed for preprocessing a ring')\n    parser.add_argument('--preproc_timeout_intermediate', required=False, default=60, type=np.int, help='Maximum time allowed for preprocessing a ring before last iteration')\n    parser.add_argument('--adc_correction', required=False, help='Full (new) NL correction file.')\n    parser.add_argument('--measure_ADC', dest='measure_ADC', default=False, action='store_true', help='Measure ADC NL')\n    parser.add_argument('--niter_ADC', default=1, type=np.int, help='Number of ADC NL iterations')\n    parser.add_argument('--delta_ADC', default=1.0, type=np.float, help='Width of ADC bin in ADU')\n    parser.add_argument('--nphase4k', required=False, default=2, type=np.int, help='Number of 4K cooler phases to measure ADC NL for.')\n    parser.add_argument('--skip_preproc', dest='skip_preproc', default=False, action='store_true', help='Do not pre-process the TOD')\n    parser.add_argument('--flag_planets', dest='flag_planets', default=False, action='store_true', help='Derive planet flags')\n    parser.add_argument('--planet_flag_radius', required=False, default=2.0, type=np.float, help='New planet flag radius (in FWHM) when --flag_planets')\n    parser.add_argument('--detmask', required=False, type=np.int, help='Detector flag mask')\n    parser.add_argument('--intense_threshold', required=False, default=10000000000.0, type=np.float, help='Intense signal threshold [K_CMB]')\n    parser.add_argument('--preproc_async_time', required=False, default=1000, type=np.int, help='Initial asynchronous processing time before load balancing')\n    parser.add_argument('--preproc_async_time_intermediate', required=False, default=800, type=np.int, help='Initial asynchronous processing time before load balancing before last iteration')\n    return", "fn_id": 5, "class_fn": false, "repo": "planck-npipe/toast-npipe", "file": "pipelines/toast_planck_reduce.py", "last_update_at": "2021-04-20T08:09:35+00:00", "pred": {"ppl": 2.296309232711792, "ppl_lower": 2.4290974140167236, "ppl/lowercase_ppl": -1.0676246697607452, "ppl/zlib": 0.0011995716488097984, "Min_5.0% Prob": 7.87552277247111, "Min_10.0% Prob": 5.836218981803218, "Min_20.0% Prob": 3.8176515814643235, "Min_30.0% Prob": 2.724181792601382, "Min_40.0% Prob": 2.0703570765200827, "Min_50.0% Prob": 1.6609097029220192, "Min_60.0% Prob": 1.3874764565556703}}
{"hexsha": "c0b95f623054d53abb9621aff1a8155369c99b80", "ext": "py", "lang": "Python", "content": "def seed_everything(seed):\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    random.seed(seed)", "fn_id": 0, "class_fn": false, "repo": "boostcampaitech2/model-optimization-level3-cv-17", "file": "train.py", "last_update_at": "2021-12-22T04:52:08+00:00", "pred": {"ppl": 1.4882488250732422, "ppl_lower": 1.881111741065979, "ppl/lowercase_ppl": -1.5891919655766276, "ppl/zlib": 0.003341177677162809, "Min_5.0% Prob": 5.823082208633423, "Min_10.0% Prob": 3.596903610229492, "Min_20.0% Prob": 1.9801615964282642, "Min_30.0% Prob": 1.3882581503130496, "Min_40.0% Prob": 1.0117773714856328, "Min_50.0% Prob": 0.7951747135910929, "Min_60.0% Prob": 0.6747091384773243}}
{"hexsha": "5ecff52b202fb2311f75b717f10ecda7192b0a5e", "ext": "py", "lang": "Python", "content": "def extract_cands_in_generate(type, constraints=set()):\n    cands = []\n    for t in CONCEPTS[type]:\n        if all([is_consistent(t, c) for c in constraints]) or not constraints:\n            cands.append(t)\n    return cands", "fn_id": 5, "class_fn": false, "repo": "simon555/baby-ai-game", "file": "levels/instr_gen.py", "last_update_at": "2021-11-03T15:36:56+00:00", "pred": {"ppl": 6.31563138961792, "ppl_lower": 6.2841105461120605, "ppl/lowercase_ppl": -0.9972852164311589, "ppl/zlib": 0.012369313646477769, "Min_5.0% Prob": 10.41323153177897, "Min_10.0% Prob": 8.872578223546347, "Min_20.0% Prob": 7.144477407137553, "Min_30.0% Prob": 5.642318195766872, "Min_40.0% Prob": 4.415829746723175, "Min_50.0% Prob": 3.6841271000523723, "Min_60.0% Prob": 3.123913339465051}}
{"hexsha": "57728a0d7226be69507552ec44dac52e55264baf", "ext": "py", "lang": "Python", "content": "def make_test_data():\n    \"\"\" \"\"\"\n    tgrid = np.array([0.0, 86400.0])\n    xgrid = np.linspace(-8, 8, 120)\n    ygrid = np.linspace(-7, 7, 110)\n    zgrid = np.linspace(-6, 6, 100)\n    bdip = np.array([[[ptm_dipole.dipole_field([x, y, z]) for z in zgrid] for y in ygrid] for x in xgrid])\n    ex = np.zeros([xgrid.size, ygrid.size, zgrid.size])\n    ey = np.zeros_like(ex)\n    ez = np.zeros_like(ex)\n    pf = ptm_preprocessing.PTMfields()\n    pf.set_grid(xgrid, ygrid, zgrid)\n    pf.set_magnetic(bdip[:, :, :, 0], bdip[:, :, :, 1], bdip[:, :, :, 2])\n    pf.set_electric(ex, ey, ez)\n    pf.write_file('ptm_data/ptm_fields_0001.dat')\n    pf.write_file('ptm_data/ptm_fields_0002.dat')\n    np.savetxt('ptm_data/tgrid.dat', tgrid)", "fn_id": 1, "class_fn": false, "repo": "Pheosics/SHIELDS-PTM", "file": "ptm_python/ptm_test_data.py", "last_update_at": "2021-09-20T19:58:27+00:00", "pred": {"ppl": 2.351524591445923, "ppl_lower": 2.383424997329712, "ppl/lowercase_ppl": -1.0157586443672926, "ppl/zlib": 0.0025832745622905886, "Min_5.0% Prob": 8.313989130655925, "Min_10.0% Prob": 6.103616253022225, "Min_20.0% Prob": 3.8916734447554937, "Min_30.0% Prob": 2.7852217513830104, "Min_40.0% Prob": 2.118483220005319, "Min_50.0% Prob": 1.7109404531586323, "Min_60.0% Prob": 1.4241175815689737}}
{"hexsha": "bb68959040f9d60e5d44b71c03cdbfca7f860c20", "ext": "py", "lang": "Python", "content": "def _read(fname):\n    try:\n        return open(path.join(path.dirname(__file__), fname)).read()\n    except IOError:\n        return ''", "fn_id": 0, "class_fn": false, "repo": "inveniosoftware/flask-collect", "file": "setup.py", "last_update_at": "2021-11-15T12:08:13+00:00", "pred": {"ppl": 2.5436294078826904, "ppl_lower": 4.454209327697754, "ppl/lowercase_ppl": -1.6001097122071062, "ppl/zlib": 0.009243484770935112, "Min_5.0% Prob": 6.376684188842773, "Min_10.0% Prob": 5.386226177215576, "Min_20.0% Prob": 4.445162137349446, "Min_30.0% Prob": 3.3441196348932056, "Min_40.0% Prob": 2.36375329299615, "Min_50.0% Prob": 1.9235916050383821, "Min_60.0% Prob": 1.6209283889467387}}
{"hexsha": "9f339190f0ef239c8b99606a869e09ec3bd344b0", "ext": "py", "lang": "Python", "content": "def top(stack):\n    if len(stack):\n        return stack[-1]\n    return None", "fn_id": 2, "class_fn": false, "repo": "suvambasak/cp", "file": "others/stack.py", "last_update_at": "2021-02-28T20:17:32+00:00", "pred": {"ppl": 3.3264591693878174, "ppl_lower": 5.927792549133301, "ppl/lowercase_ppl": -1.4806884236154552, "ppl/zlib": 0.021462650460328758, "Min_5.0% Prob": NaN, "Min_10.0% Prob": 8.698822021484375, "Min_20.0% Prob": 5.285852750142415, "Min_30.0% Prob": 4.132001566886902, "Min_40.0% Prob": 3.196960415158953, "Min_50.0% Prob": 2.5237020312084093, "Min_60.0% Prob": 2.0708390902727842}}
{"hexsha": "a7cb7c0cbe1316b9f471be562240d8e6e68b5ee9", "ext": "py", "lang": "Python", "content": "def get_items(list_, doc_type):\n    data_table_names = {'PO': 'fss.dbo.bsPRItem', 'SO': 'fss.dbo.bsSaleOrderItem'}\n    result_dict = {}\n    item_list = []\n    try:\n        table_name = data_table_names[doc_type]\n    except KeyError as e:\n        print(f'ERROR: DocType {e} not found')\n        sys.exit()\n        return ({}, [])\n    for p in list_:\n        doc_no = p[1]\n        statement_items = f\"SELECT * FROM {table_name}                            WHERE DocNo = '{doc_no}'\"\n        cursor.execute(statement_items)\n        package = []\n        for r in cursor:\n            item_list.append(r)\n            package.append(r)\n        result_dict[r[1]] = package\n    return (result_dict, item_list)", "fn_id": 1, "class_fn": false, "repo": "adadesions/tenzing-project", "file": "tenzing-mini/tenzing_mini.py", "last_update_at": "2021-01-25T04:45:56+00:00", "pred": {"ppl": 5.087258338928223, "ppl_lower": 5.777358055114746, "ppl/lowercase_ppl": -1.0781978189488388, "ppl/zlib": 0.004728892583409122, "Min_5.0% Prob": 11.495507907867431, "Min_10.0% Prob": 9.193854260444642, "Min_20.0% Prob": 6.7517314612865444, "Min_30.0% Prob": 5.142834639549255, "Min_40.0% Prob": 3.9845448220953528, "Min_50.0% Prob": 3.242384613593026, "Min_60.0% Prob": 2.723882442263286}}
{"hexsha": "e376bb9a7337aed835807b7a81d670cdfa095d2c", "ext": "py", "lang": "Python", "content": "def plot_values(registration_method):\n    global metric_values, multires_iterations\n    metric_values.append(registration_method.GetMetricValue())\n    clear_output(wait=True)\n    plt.plot(metric_values, 'r')\n    plt.plot(multires_iterations, [metric_values[index] for index in multires_iterations], 'b*')\n    plt.xlabel('Iteration Number', fontsize=12)\n    plt.ylabel('Metric Value', fontsize=12)\n    plt.show()", "fn_id": 10, "class_fn": false, "repo": "neurodata/ndreg", "file": "ndreg/plotter.py", "last_update_at": "2021-09-27T01:06:33+00:00", "pred": {"ppl": 2.074185371398926, "ppl_lower": 2.962514877319336, "ppl/lowercase_ppl": -1.4886039506914055, "ppl/zlib": 0.003457670542660215, "Min_5.0% Prob": 9.375337696075439, "Min_10.0% Prob": 6.2226528904654765, "Min_20.0% Prob": 3.60745446248488, "Min_30.0% Prob": 2.416319526951103, "Min_40.0% Prob": 1.8415055122640398, "Min_50.0% Prob": 1.4573545373093926, "Min_60.0% Prob": 1.222694808997296}}
{"hexsha": "56d66414c84d9d6eef940c2d2989f3d4532fde9e", "ext": "py", "lang": "Python", "content": "def pose_to_transformation(pose):\n    \"\"\"\n    Convert poses to transformation matrix\n    \"\"\"\n    temp_0 = pose[0]\n    temp_1 = pose[1]\n    temp_2 = pose[2]\n    temp_x = pose[3]\n    temp_y = pose[4]\n    temp_z = pose[5]\n    temp_w = pose[6]\n    pose[4:6] *= -1\n    pose[0] *= -1\n    rot_mat = quat2mat(pose[3:])\n    translation_vector = np.array([[pose[0]], [pose[1]], [pose[2]]]) / 1000\n    print(translation_vector)\n    rot_mat_2 = np.array([[0, 1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n    flip_x = np.eye(4)\n    flip_x[0, 0] *= -1\n    trans = flip_x @ rot_mat_2\n    translation_offset = np.ones((3, 1)) * 1\n    transformation_mat = np.vstack((np.hstack((rot_mat, translation_vector + 0.5)), np.array([0, 0, 0, 1])))\n    print(transformation_mat.shape)\n    return transformation_mat @ trans", "fn_id": 8, "class_fn": false, "repo": "RahulSajnani/DRACO-Weakly-Supervised-Dense-Reconstruction-And-Canonicalization-of-Objects", "file": "DRACO/visualization-scripts/gen_point_cloud.py", "last_update_at": "2021-12-17T16:55:00+00:00", "pred": {"ppl": 2.3592424392700195, "ppl_lower": 2.357222557067871, "ppl/lowercase_ppl": -0.9990021165720159, "ppl/zlib": 0.002632946525142876, "Min_5.0% Prob": 7.391241520643234, "Min_10.0% Prob": 5.717467233538628, "Min_20.0% Prob": 3.8396424632519484, "Min_30.0% Prob": 2.7750991197923818, "Min_40.0% Prob": 2.131527629913762, "Min_50.0% Prob": 1.71385052644182, "Min_60.0% Prob": 1.4300965660028548}}
{"hexsha": "d7f4490b643639fa5528139f79a00b5f88a06a1f", "ext": "py", "lang": "Python", "content": "def v_bool(Inout=InOut_t.Internal_t, Default=0, varSigConst=None):\n    value = Default\n    if type(Default).__name__ == 'int':\n        Default = \"'\" + str(Default) + \"'\"\n    return v_symbol(v_type='boolean', DefaultValue=Default, Inout=Inout, includes=slv_includes, value=value, varSigConst=varSigConst, Bitwidth=1, primitive_type='boolean')", "fn_id": 0, "class_fn": false, "repo": "HardwareDesignWithPython/HDPython", "file": "HDPython/v_symbol.py", "last_update_at": "2021-10-20T20:08:16+00:00", "pred": {"ppl": 11.580411911010742, "ppl_lower": 11.657097816467285, "ppl/lowercase_ppl": -1.002694715297259, "ppl/zlib": 0.011608128163086482, "Min_5.0% Prob": 14.074954605102539, "Min_10.0% Prob": 11.148730611801147, "Min_20.0% Prob": 8.879974007606506, "Min_30.0% Prob": 7.130877425593715, "Min_40.0% Prob": 5.925312571409272, "Min_50.0% Prob": 4.828842429014353, "Min_60.0% Prob": 4.084131493203102}}
{"hexsha": "db3168c7636e669ffaa426160820cfab9e45c298", "ext": "py", "lang": "Python", "content": "def event(self, event):\n    if event.type() == QEvent.KeyPress and event.key() == Qt.Key_Tab:\n        self.emit(SIGNAL('tabPressed'))\n        return True", "fn_id": 3, "class_fn": false, "repo": "anjanatiha/Generative-Open-Domain-Chatbot-Application-with-Deep-Learning", "file": "code/chat_gui.py", "last_update_at": "2021-11-19T07:31:14+00:00", "pred": {"ppl": 2.614170551300049, "ppl_lower": 7.700913429260254, "ppl/lowercase_ppl": -2.1242995188992495, "ppl/zlib": 0.008356059638317287, "Min_5.0% Prob": 6.250419855117798, "Min_10.0% Prob": 4.9468971490859985, "Min_20.0% Prob": 3.711006313562393, "Min_30.0% Prob": 2.9705073634783425, "Min_40.0% Prob": 2.404399950057268, "Min_50.0% Prob": 1.9022122302225657, "Min_60.0% Prob": 1.6064040568470954}}
{"hexsha": "58b7827b7aa5bd50934dcfc83e24f6888bb30df8", "ext": "py", "lang": "Python", "content": "@pytest.fixture()\ndef enrollment_data(user):\n    \"\"\"enrollment data for testing\"\"\"\n    bootcamps = BootcampFactory.create_batch(2)\n    enrollments = BootcampRunEnrollmentFactory.create_batch(3, user=user, active=factory.Iterator([False, True, True]), bootcamp_run__bootcamp=factory.Iterator([bootcamps[0], bootcamps[0], bootcamps[1]]))\n    unenrollable_run = BootcampRunFactory.create(end_date=now_in_utc() - timedelta(days=1))\n    order = OrderFactory.create(user=user)\n    return SimpleNamespace(bootcamps=bootcamps, enrollments=enrollments, unenrollable_run=unenrollable_run, order=order)", "fn_id": 3, "class_fn": false, "repo": "mitodl/bootcamp-ecommerce", "file": "klasses/api_test.py", "last_update_at": "2021-01-06T09:51:40+00:00", "pred": {"ppl": 2.5809905529022217, "ppl_lower": 3.668410301208496, "ppl/lowercase_ppl": -1.3708026390979395, "ppl/zlib": 0.0033386382411361723, "Min_5.0% Prob": 9.969135046005249, "Min_10.0% Prob": 7.166555586983176, "Min_20.0% Prob": 4.413718739577702, "Min_30.0% Prob": 3.152171525817651, "Min_40.0% Prob": 2.3648157899134925, "Min_50.0% Prob": 1.9058714927249085, "Min_60.0% Prob": 1.5800889872391486}}
{"hexsha": "d07c3f5d3f8bceba3730181638eb4ed2e60e2c51", "ext": "py", "lang": "Python", "content": "def get_toplevel_elements(str_, element, parsed=None):\n    if parsed is None:\n        parsed = bs4.BeautifulSoup(str_, 'html.parser')\n    skip, result = ([], [])\n    for l in parsed(element):\n        if str(l) not in skip:\n            result.append(l)\n        skip += [str(l_nested) for l_nested in l(element)]\n    return result", "fn_id": 0, "class_fn": false, "repo": "memri/pyintegrators", "file": "pyintegrators/indexers/notelist/util.py", "last_update_at": "2021-12-06T16:25:13+00:00", "pred": {"ppl": 4.073661804199219, "ppl_lower": 5.321804046630859, "ppl/lowercase_ppl": -1.1902897840863618, "ppl/zlib": 0.007431440746840956, "Min_5.0% Prob": 10.529777526855469, "Min_10.0% Prob": 8.314429230160183, "Min_20.0% Prob": 6.109280202123854, "Min_30.0% Prob": 4.600318041112688, "Min_40.0% Prob": 3.539715120361911, "Min_50.0% Prob": 2.7956941833962565, "Min_60.0% Prob": 2.345542700724168}}
{"hexsha": "60908cb818b31508f23a6d5114dd56b36a1c0b97", "ext": "py", "lang": "Python", "content": "def factory_create_activity(name: str=None) -> Activity:\n    record = RecordFactory()\n    now = timezone.localtime()\n    start = now\n    end = now + datetime.timedelta(hours=1)\n    spent_time = (end - start).seconds\n    return Activity.objects.create(record_id=record.id, name=name, start=start, end=end, spent_time=spent_time)", "fn_id": 0, "class_fn": false, "repo": "siruku6/life_recorder", "file": "tests/test_models.py", "last_update_at": "2021-05-08T10:04:20+00:00", "pred": {"ppl": 2.968127489089966, "ppl_lower": 4.050041675567627, "ppl/lowercase_ppl": -1.2856760334234347, "ppl/zlib": 0.005494602418827024, "Min_5.0% Prob": 9.785138845443726, "Min_10.0% Prob": 7.474906338585748, "Min_20.0% Prob": 4.971050838629405, "Min_30.0% Prob": 3.5971024522074946, "Min_40.0% Prob": 2.6986615774599283, "Min_50.0% Prob": 2.1888224540845207, "Min_60.0% Prob": 1.837177054414695}}
{"hexsha": "109ffa951504bc25a96cc88a0b6aa9552c14314b", "ext": "py", "lang": "Python", "content": "def _create_nat_match_obj(**kwargs):\n    nat_match_obj = {'ethertype': 'IPv4'}\n    delta = set(kwargs.keys()) - set(MATCH_KEYS)\n    if delta:\n        raise Exception(_('Invalid keys for NAT match: %s'), delta)\n    nat_match_obj.update(kwargs)\n    return nat_match_obj", "fn_id": 51, "class_fn": false, "repo": "ericwanghp/quantum", "file": "quantum/plugins/nicira/nicira_nvp_plugin/nvplib.py", "last_update_at": "2021-04-18T15:23:19+00:00", "pred": {"ppl": 3.8026912212371826, "ppl_lower": 4.633456230163574, "ppl/lowercase_ppl": -1.1479319512492996, "ppl/zlib": 0.007259288218373365, "Min_5.0% Prob": 11.664757490158081, "Min_10.0% Prob": 8.865708410739899, "Min_20.0% Prob": 6.0907813012599945, "Min_30.0% Prob": 4.316720797369878, "Min_40.0% Prob": 3.2870619776658714, "Min_50.0% Prob": 2.6503915693610907, "Min_60.0% Prob": 2.2190863070233413}}
{"hexsha": "3db72119b5d317902b6f4df26947aae91390d2a3", "ext": "py", "lang": "Python", "content": "def VAE(inputs, input_lengths, filters, kernel_size, strides, num_units, is_training, scope):\n    with tf.variable_scope(scope):\n        outputs = ReferenceEncoder(inputs=inputs, input_lengths=input_lengths, filters=filters, kernel_size=kernel_size, strides=strides, is_training=is_training)\n        mu = tf.layers.dense(outputs, num_units, name='mean', activation=tf.nn.relu)\n        log_var = tf.layers.dense(outputs, num_units, name='vari', activation=tf.nn.relu)\n        std = tf.exp(log_var * 0.5)\n        z = tf.random_normal(shape=[tf.shape(mu)[0], num_units], mean=0.0, stddev=1.0)\n        output = mu + z * std\n        style_embeddings = tf.layers.dense(output, hp.encoder_depth)\n        return (style_embeddings, mu, log_var)", "fn_id": 0, "class_fn": false, "repo": "GlitteringAu/vae_tacotron", "file": "models/modules.py", "last_update_at": "2021-09-02T06:04:46+00:00", "pred": {"ppl": 2.2364110946655273, "ppl_lower": 2.278411865234375, "ppl/lowercase_ppl": -1.0231170295136944, "ppl/zlib": 0.002453879241178911, "Min_5.0% Prob": 8.251934831792658, "Min_10.0% Prob": 5.9119321649724785, "Min_20.0% Prob": 3.783576272593604, "Min_30.0% Prob": 2.637681304531939, "Min_40.0% Prob": 2.0205970199571714, "Min_50.0% Prob": 1.6160571632198, "Min_60.0% Prob": 1.343342256397591}}
{"hexsha": "8f760a85301ff2c85907784935bbde2796fc3fc2", "ext": "py", "lang": "Python", "content": "def get_current_commit_id() -> str:\n    \"\"\"Get current commit id\n\n    Returns:\n        str: Current commit id\n    \"\"\"\n    command = 'git rev-parse HEAD'\n    commit_id = subprocess.check_output(command.split()).strip().decode('utf-8')\n    return commit_id", "fn_id": 7, "class_fn": false, "repo": "shagunsodhani/torch-template", "file": "src/utils/utils.py", "last_update_at": "2021-01-12T10:02:16+00:00", "pred": {"ppl": 1.918319582939148, "ppl_lower": 2.435513734817505, "ppl/lowercase_ppl": -1.3664260955215075, "ppl/zlib": 0.0038776761047278905, "Min_5.0% Prob": 4.919212977091472, "Min_10.0% Prob": 4.296126008033752, "Min_20.0% Prob": 2.934540785275973, "Min_30.0% Prob": 2.1736709553944435, "Min_40.0% Prob": 1.628292849717232, "Min_50.0% Prob": 1.2955208441073245, "Min_60.0% Prob": 1.1000501020596578}}
{"hexsha": "a1f55cf8e4ae2523b3711b8a9b769203a9a8a01e", "ext": "py", "lang": "Python", "content": "def search(keywords, max_results=None):\n    url = 'https://html.duckduckgo.com/html/'\n    params = {'q': keywords}\n    headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0'}\n    yielded = 0\n    while True:\n        res = requests.post(url, data=params, headers=headers)\n        doc = html.fromstring(res.text)\n        results = [a.get('href') for a in doc.cssselect('#links .links_main a')]\n        for result in results:\n            yield result\n            time.sleep(0.1)\n            yielded += 1\n            if max_results and yielded >= max_results:\n                return\n        try:\n            form = doc.cssselect('.results_links_more form')[-1]\n        except IndexError:\n            return\n        params = dict(form.fields)", "fn_id": 0, "class_fn": false, "repo": "Jcorb08/programming-support-skill", "file": "duckduckgo.py", "last_update_at": "2021-05-26T11:08:27+00:00", "pred": {"ppl": 1.9372742176055908, "ppl_lower": 2.388195514678955, "ppl/lowercase_ppl": -1.3164400990093346, "ppl/zlib": 0.0015858080158421047, "Min_5.0% Prob": 7.2226808287880635, "Min_10.0% Prob": 4.8956209366971795, "Min_20.0% Prob": 3.0613572245294396, "Min_30.0% Prob": 2.165601925173802, "Min_40.0% Prob": 1.6581771606893352, "Min_50.0% Prob": 1.321771333950372, "Min_60.0% Prob": 1.105319705140193}}
{"hexsha": "b97e6f9295654f19c6ba8f5fa580dfd29d44c69e", "ext": "py", "lang": "Python", "content": "def edit_seller_selector(brief, sellers_to_invite):\n    if brief.lot.slug != 'atm' and sellers_to_invite:\n        seller_selector = brief.data.get('sellerSelector', '')\n        if len(sellers_to_invite.keys()) > 0 and seller_selector and (seller_selector == 'oneSeller'):\n            brief.data['sellerSelector'] = 'someSellers'", "fn_id": 5, "class_fn": false, "repo": "ArenaNetworks/dto-digitalmarketplace-api", "file": "app/api/business/brief/brief_edit_business.py", "last_update_at": "2021-08-23T06:05:06+00:00", "pred": {"ppl": 3.722139596939087, "ppl_lower": 4.480781078338623, "ppl/lowercase_ppl": -1.141138936549554, "ppl/zlib": 0.007965446444916155, "Min_5.0% Prob": 10.709111213684082, "Min_10.0% Prob": 8.026159604390463, "Min_20.0% Prob": 5.301003374551472, "Min_30.0% Prob": 4.072867499930518, "Min_40.0% Prob": 3.19736585021019, "Min_50.0% Prob": 2.602463761034111, "Min_60.0% Prob": 2.2079947102618847}}
{"hexsha": "299d845b4ecb3a12712dbe607958f777e7c89d76", "ext": "py", "lang": "Python", "content": "def dms2dec(dms_str):\n    \"\"\"Return decimal representation of DMS\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"N))\n    48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"E))\n    2.34330555556F\n    \n    >>> dms2dec(utf8(48\u00b053'10.18\"S))\n    -48.8866111111F\n    \n    >>> dms2dec(utf8(2\u00b020'35.09\"W))\n    -2.34330555556F\n    \n    \"\"\"\n    dms_str = re.sub('\\\\s', '', dms_str)\n    sign = -1 if re.search('[swSW]', dms_str) else 1\n    numbers = list(filter(len, re.split('\\\\D+', dms_str, maxsplit=4)))\n    degree = numbers[0]\n    minute = numbers[1] if len(numbers) >= 2 else '0'\n    second = numbers[2] if len(numbers) >= 3 else '0'\n    frac_seconds = numbers[3] if len(numbers) >= 4 else '0'\n    second += '.' + frac_seconds\n    return sign * (int(degree) + float(minute) / 60 + float(second) / 3600)", "fn_id": 1, "class_fn": false, "repo": "Joel-hanson/Iceberg-locations", "file": "iceberg.py", "last_update_at": "2021-08-17T08:21:01+00:00", "pred": {"ppl": 1.9389032125473022, "ppl_lower": 2.156798839569092, "ppl/lowercase_ppl": -1.1608503735739533, "ppl/zlib": 0.0018240288122455706, "Min_5.0% Prob": 7.1022959596970505, "Min_10.0% Prob": 4.9424128392163444, "Min_20.0% Prob": 3.1350807074238274, "Min_30.0% Prob": 2.172839894167428, "Min_40.0% Prob": 1.6544833376079144, "Min_50.0% Prob": 1.3228375472529077, "Min_60.0% Prob": 1.1054076899060057}}
{"hexsha": "40cc7483e6638afc906172fe0592b4a30fce27e5", "ext": "py", "lang": "Python", "content": "@dp.message_handler(commands=['creds'])\nasync def handler_creds(message: types.Message, state: FSMContext):\n    username = await db.get_username(message.from_user['id'])\n    if username is None:\n        await message.answer('You have to be registered to view creds! Use /reg')\n        return\n    username = username.decode()\n    password = (await db.get_secret(message.from_user['id'])).decode()\n    await message.answer(f'Username: {username}\\nPassword: {password}')", "fn_id": 5, "class_fn": false, "repo": "ne-bknn/CSSH", "file": "bot/bot.py", "last_update_at": "2021-05-12T19:38:55+00:00", "pred": {"ppl": 2.769009590148926, "ppl_lower": 4.121340751647949, "ppl/lowercase_ppl": -1.3904691672763942, "ppl/zlib": 0.004057727918648518, "Min_5.0% Prob": 8.068896532058716, "Min_10.0% Prob": 6.275753219922383, "Min_20.0% Prob": 4.409706130623817, "Min_30.0% Prob": 3.2441719339953528, "Min_40.0% Prob": 2.521325190241138, "Min_50.0% Prob": 2.0184694902330147, "Min_60.0% Prob": 1.698220457805142}}
{"hexsha": "13e50b7266dceea05106c82bd6e330375bd50ee2", "ext": "py", "lang": "Python", "content": "def timeline(request):\n    ts = Timeline.objects.all()\n    contaxt = {'ts': ts}\n    return render(request, 'other/timeline.html', contaxt)", "fn_id": 1, "class_fn": false, "repo": "jackyfzh/j_django_blog", "file": "other/views.py", "last_update_at": "2021-05-22T10:57:45+00:00", "pred": {"ppl": 4.395013332366943, "ppl_lower": 5.197877407073975, "ppl/lowercase_ppl": -1.1133286879516677, "ppl/zlib": 0.013337572654622787, "Min_5.0% Prob": 10.84266996383667, "Min_10.0% Prob": 9.992133855819702, "Min_20.0% Prob": 6.785353571176529, "Min_30.0% Prob": 4.792987634738286, "Min_40.0% Prob": 3.663707721978426, "Min_50.0% Prob": 2.950653776153922, "Min_60.0% Prob": 2.464188016097372}}
{"hexsha": "b167197574c1ae8ea60f5374ce76c84554e825b9", "ext": "py", "lang": "Python", "content": "def upgrade_rdr():\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `degree` JSON;')\n    op.execute('ALTER TABLE `workbench_researcher` MODIFY `ethnicity` smallint(6);')\n    op.execute('ALTER TABLE `workbench_researcher_history` MODIFY `ethnicity` smallint(6);')", "fn_id": 0, "class_fn": false, "repo": "all-of-us/raw-data-repository", "file": "rdr_service/alembic/versions/01e685241414_change_degree_for_workbench_researcher__.py", "last_update_at": "2021-09-24T16:58:21+00:00", "pred": {"ppl": 2.178622245788574, "ppl_lower": 2.279282569885254, "ppl/lowercase_ppl": -1.0580049776203853, "ppl/zlib": 0.005522643118168801, "Min_5.0% Prob": 9.327968120574951, "Min_10.0% Prob": 6.654959705140856, "Min_20.0% Prob": 3.84942753064005, "Min_30.0% Prob": 2.63292184626234, "Min_40.0% Prob": 1.9721653721271417, "Min_50.0% Prob": 1.5725203899628655, "Min_60.0% Prob": 1.3064748375869941}}
{"hexsha": "c5d6e28510e9bfcfa523c2d73057ed4afa27c4d5", "ext": "py", "lang": "Python", "content": "def _test_overlap(hits):\n    tester = np.zeros(len(hits), dtype=strax.time_fields)\n    tester['time'] = hits['time'] - (hits['left_integration'] - hits['left']) * hits['dt']\n    tester['endtime'] = hits['time'] + (hits['right_integration'] - hits['left']) * hits['dt']\n    for ch in np.unique(hits['channel']):\n        mask = hits['channel'] == ch\n        test_ch = np.all(tester[mask]['endtime'][:-1] - tester[mask]['time'][1:] <= 0)\n        assert np.all(test_ch), 'Hits overlap!'", "fn_id": 1, "class_fn": false, "repo": "RiceAstroparticleLab/strax", "file": "tests/test_lone_hit_integration.py", "last_update_at": "2021-11-16T18:20:27+00:00", "pred": {"ppl": 3.2201220989227295, "ppl_lower": 3.3052892684936523, "ppl/lowercase_ppl": -1.0223228030519105, "ppl/zlib": 0.005040600335161703, "Min_5.0% Prob": 9.533935751233782, "Min_10.0% Prob": 6.931067180633545, "Min_20.0% Prob": 4.896732306480407, "Min_30.0% Prob": 3.709186477131314, "Min_40.0% Prob": 2.8973703096310297, "Min_50.0% Prob": 2.3426631637414297, "Min_60.0% Prob": 1.9592073735677533}}
{"hexsha": "65850953a74773d8a1f36d8cdb7ca6cda7bf01af", "ext": "py", "lang": "Python", "content": "def message(flag=None):\n    exc_type, exc_obj, exc_tb = sys.exc_info()\n    if flag is None:\n        return exc_obj.message\n    return traceback.extract_tb(exc_tb)[0][3]", "fn_id": 10, "class_fn": false, "repo": "wroldwiedbwe/vfp2py", "file": "vfp2py/vfpfunc.py", "last_update_at": "2021-12-11T18:31:23+00:00", "pred": {"ppl": 3.265916109085083, "ppl_lower": 4.187671184539795, "ppl/lowercase_ppl": -1.2100515431740528, "ppl/zlib": 0.009544679903903138, "Min_5.0% Prob": 9.38578987121582, "Min_10.0% Prob": 6.959226942062378, "Min_20.0% Prob": 4.929216957092285, "Min_30.0% Prob": 3.6662722527980804, "Min_40.0% Prob": 2.973991435198557, "Min_50.0% Prob": 2.3563338446396367, "Min_60.0% Prob": 1.9954450698569417}}
{"hexsha": "c1e6e718242cba1e86b4e900ac601b58a5f8729f", "ext": "py", "lang": "Python", "content": "def count_byte_values(bss: Iterable[ByteString]) -> list[Counter[int]]:\n    \"\"\"Returns a list of Counters, each of which records the values of the\n    bytes at the corresponding index in the given ByteStrings.\"\"\"\n    counts_for_idx: list[Counter[int]] = []\n    bs_len = None\n    for bs in bss:\n        if bs_len is None:\n            bs_len = len(bs)\n            counts_for_idx = [Counter() for _ in range(bs_len)]\n        assert len(bs) == bs_len\n        for i, b in enumerate(bs):\n            counts_for_idx[i][b] += 1\n    return counts_for_idx", "fn_id": 2, "class_fn": false, "repo": "misterfifths/nis_mods", "file": "utils/mining.py", "last_update_at": "2021-10-18T13:42:09+00:00", "pred": {"ppl": 2.8205461502075195, "ppl_lower": 3.571826696395874, "ppl/lowercase_ppl": -1.227736188488294, "ppl/zlib": 0.0037033233445882426, "Min_5.0% Prob": 9.11236320223127, "Min_10.0% Prob": 7.074325434366862, "Min_20.0% Prob": 4.779092458883921, "Min_30.0% Prob": 3.4330886834197574, "Min_40.0% Prob": 2.591298303276789, "Min_50.0% Prob": 2.0860955585406997, "Min_60.0% Prob": 1.7432315756827796}}
{"hexsha": "f3e180cb426f2d4f4869990002b54890e11a8ca1", "ext": "py", "lang": "Python", "content": "def exponential(db, utility, eps=1e-05):\n    \"\"\"\n    Goal:\n        The Exponential mechanism is a DP method for answering categorical queries,\n        by sampling from an exponential distribution over possible choices.\n    Guaranties:\n        1. (eps,0) Differential Privacy\n        2. Accuracy:\n           Let utility: N ^ |Universe| x categories -> R\n           Denote c* = exponential(db, utility, eps)\n                  s = utility.sensitivity\n                  R = utility.categories\n                  Opt(u,x) = max_{c in R} u(x,r)\n           Then forall t > 0\n                  P[u(x,c*) <= Opt(u,x) - (2s / epsilon) (ln(|R|) + t)] <= e^-t\n    \"\"\"\n    assert isinstance(db, Database)\n    assert isinstance(utility, Utility)\n    assert db.rep == 'histogram'\n    assert eps > 0\n    evals = np.array([utility.value(db, cat) for cat in utility.categories])\n    consts = eps / (2 * utility.sensitivity)\n    weights = np.exp(consts * evals)\n    res = np.random.choice(utility.categories, p=normalize(weights, ord=1))\n    return res", "fn_id": 1, "class_fn": false, "repo": "chuxuantinh/differential-privacy-ct", "file": "mechanism/basic.py", "last_update_at": "2021-04-17T04:55:59+00:00", "pred": {"ppl": 7.608273983001709, "ppl_lower": 8.73321533203125, "ppl/lowercase_ppl": -1.0679552552881835, "ppl/zlib": 0.004050371930302866, "Min_5.0% Prob": 10.670200756617955, "Min_10.0% Prob": 9.102023073605128, "Min_20.0% Prob": 6.930604977267129, "Min_30.0% Prob": 5.706012850716, "Min_40.0% Prob": 4.70405913995845, "Min_50.0% Prob": 3.9366170368024282, "Min_60.0% Prob": 3.353828812993708}}
{"hexsha": "748d69ab544fa46cb8d58415b5d688a6b34e3694", "ext": "py", "lang": "Python", "content": "def map_dists(dists: Dict[str, AbstractMessage], values: Dict[str, np.ndarray], _call: str='logpdf') -> Iterator[Tuple[str, np.ndarray]]:\n    \"\"\"\n    Calls a method (default: logpdf) for each Message in dists\n    on the corresponding value in values\n    \"\"\"\n    for v in dists.keys() & values.keys():\n        dist = dists[v]\n        if isinstance(dist, AbstractMessage):\n            yield (v, getattr(dist, _call)(values[v]))", "fn_id": 0, "class_fn": false, "repo": "arfon/PyAutoFit", "file": "autofit/graphical/messages/__init__.py", "last_update_at": "2021-01-18T23:20:31+00:00", "pred": {"ppl": 4.370716094970703, "ppl_lower": 5.461024761199951, "ppl/lowercase_ppl": -1.1509970435181662, "ppl/zlib": 0.006020109640036452, "Min_5.0% Prob": 10.002684211730957, "Min_10.0% Prob": 8.21173043684526, "Min_20.0% Prob": 5.821237843969594, "Min_30.0% Prob": 4.533989005229053, "Min_40.0% Prob": 3.600844778444456, "Min_50.0% Prob": 2.9274762976786186, "Min_60.0% Prob": 2.474894042896188}}
{"hexsha": "85ecf5da466f0df65d97156a925dd2cbb9cc304a", "ext": "py", "lang": "Python", "content": "def predict_labels_datasets(weight0, weight1, weight23, data, transform_x, degree):\n    \"\"\" Generate the predictions given the weigth of the data set with num jet 0, 1  or {2,3} \"\"\"\n    ids = np.arange(data.shape[0])\n    tx_0, tx_1, tx_23 = transform_x(data, degree)\n    ids0 = ids[data[:, 22] == 0]\n    y_pred0 = np.dot(tx_0, weight0)\n    ids1 = ids[data[:, 22] == 1]\n    y_pred1 = np.dot(tx_1, weight1)\n    ids23 = ids[data[:, 22] > 1]\n    y_pred23 = np.dot(tx_23, weight23)\n    y_pred = np.concatenate((np.concatenate((y_pred0, y_pred1), axis=None), y_pred23), axis=None)\n    ids = np.concatenate((np.concatenate((ids0, ids1), axis=None), ids23), axis=None)\n    y = np.transpose(np.array([ids, y_pred]))\n    y = y[y[:, 0].argsort()][:, 1]\n    y[np.where(y <= 0)] = -1\n    y[np.where(y > 0)] = 1\n    return y", "fn_id": 2, "class_fn": false, "repo": "yannvon/higgs-boson", "file": "scripts/split.py", "last_update_at": "2021-11-01T12:55:40+00:00", "pred": {"ppl": 3.024994373321533, "ppl_lower": 3.135242462158203, "ppl/lowercase_ppl": -1.0323398514145037, "ppl/zlib": 0.0030493367256806546, "Min_5.0% Prob": 9.928469181060791, "Min_10.0% Prob": 7.860742814838886, "Min_20.0% Prob": 5.108383121857276, "Min_30.0% Prob": 3.6432018461301157, "Min_40.0% Prob": 2.7615194651369865, "Min_50.0% Prob": 2.2111263270232757, "Min_60.0% Prob": 1.8500634068551545}}
{"hexsha": "9681618928c5641d65d743ec3954a60d579c7fcb", "ext": "py", "lang": "Python", "content": "def bezierSliceFromTo(points, minParam, maxParam):\n    fromP = bezierPointAt(points, minParam)\n    fromT = bezierTangentAt(points, minParam)\n    toP = bezierPointAt(points, maxParam)\n    toT = bezierTangentAt(points, maxParam)\n    paramDiff = maxParam - minParam\n    return [fromP, fromP + fromT * paramDiff, toP - toT * paramDiff, toP]", "fn_id": 15, "class_fn": false, "repo": "calculusrobotics/RNNs-for-Bayesian-State-Estimation", "file": "Blender 2.91/2.91/scripts/addons/curve_tools/internal.py", "last_update_at": "2021-06-30T00:39:40+00:00", "pred": {"ppl": 2.5292985439300537, "ppl_lower": 3.033975601196289, "ppl/lowercase_ppl": -1.1960594826129696, "ppl/zlib": 0.0064440417287044425, "Min_5.0% Prob": 8.59700574874878, "Min_10.0% Prob": 7.545639514923096, "Min_20.0% Prob": 4.468939471812475, "Min_30.0% Prob": 3.1439906608673835, "Min_40.0% Prob": 2.3384016891497943, "Min_50.0% Prob": 1.855495646174224, "Min_60.0% Prob": 1.5612646985340803}}
{"hexsha": "1bafe6e69cd8c367d829bb77f059218e660a5475", "ext": "py", "lang": "Python", "content": "def computeStarsItembased(corated, target_bid, model):\n    \"\"\"\n    corated - {bid: star, ...}\n    \"\"\"\n    if corated == None:\n        return None\n    corated.pop(target_bid, None)\n    bid_cor = list(corated.keys())\n    collect = []\n    for b in bid_cor:\n        pair = None\n        if b < target_bid:\n            pair = (b, target_bid)\n        else:\n            pair = (target_bid, b)\n        w = model.get(pair)\n        if w != None:\n            collect.append((pair, w, b))\n    collect.sort(key=lambda x: x[1], reverse=True)\n    neighbors = collect[:N_NEIGHBORS_ITEMBASED]\n    sum_w = 0\n    n = 0\n    for p, w, b in neighbors:\n        star = corated[b]\n        n += star * w\n        sum_w += w\n    if sum_w == 0:\n        return None\n    else:\n        return n / sum_w", "fn_id": 2, "class_fn": false, "repo": "maple1eaf/data_mining_inf553", "file": "assignment/assignment3/python/task3/task3predict_dev.py", "last_update_at": "2021-05-04T05:17:57+00:00", "pred": {"ppl": 3.242661476135254, "ppl_lower": 3.68746280670166, "ppl/lowercase_ppl": -1.1092696424965176, "ppl/zlib": 0.003304478752404493, "Min_5.0% Prob": 9.820305304093795, "Min_10.0% Prob": 7.53162902334462, "Min_20.0% Prob": 5.228283735031777, "Min_30.0% Prob": 3.826095890147345, "Min_40.0% Prob": 2.92315440926146, "Min_50.0% Prob": 2.345205766385642, "Min_60.0% Prob": 1.967000917161663}}
{"hexsha": "e3a8b073f0f64789f2b3c0b201ed953476be70ca", "ext": "py", "lang": "Python", "content": "def get_quarter(month):\n    if month in ['January', 'April', 'July', 'October']:\n        return True\n    else:\n        return False", "fn_id": 2, "class_fn": false, "repo": "Mindhome/field_service", "file": "mindhome_alpha/erpnext/quality_management/doctype/quality_review/quality_review.py", "last_update_at": "2021-04-29T14:55:29+00:00", "pred": {"ppl": 4.079056262969971, "ppl_lower": 4.92579460144043, "ppl/lowercase_ppl": -1.1341664105394433, "ppl/zlib": 0.013782996603574817, "Min_5.0% Prob": 11.645647048950195, "Min_10.0% Prob": 9.257711251576742, "Min_20.0% Prob": 6.358468969662984, "Min_30.0% Prob": 4.701332986354828, "Min_40.0% Prob": 3.675810602804025, "Min_50.0% Prob": 2.8056619046255946, "Min_60.0% Prob": 2.36685324720058}}
{"hexsha": "c5b9d51ce8759bd19c31258626e669df3a3907b6", "ext": "py", "lang": "Python", "content": "def bias_variable(shape, bias=0.01):\n    \"\"\"Function to initialize the bias. For ReLUs, it MUST be > 0.0\n\n    :param shape: the shape of the bias variable\n    :param val: the value of the bias variable\n    \"\"\"\n    initial = tf.constant(bias, shape=shape)\n    return tf.Variable(initial)", "fn_id": 1, "class_fn": false, "repo": "yxw027/mmWave-localization-learning", "file": "bff_positioning/models/layer_functions.py", "last_update_at": "2021-05-29T20:28:23+00:00", "pred": {"ppl": 4.251025676727295, "ppl_lower": 5.013929843902588, "ppl/lowercase_ppl": -1.1140576612498774, "ppl/zlib": 0.008269487368686226, "Min_5.0% Prob": 12.42263126373291, "Min_10.0% Prob": 8.935989107404437, "Min_20.0% Prob": 6.015021498998006, "Min_30.0% Prob": 4.59962436945542, "Min_40.0% Prob": 3.5955632223236944, "Min_50.0% Prob": 2.906771276623775, "Min_60.0% Prob": 2.426566087105807}}
{"hexsha": "5f30e702c766d9408e95e8e3b793cedd534e612e", "ext": "py", "lang": "Python", "content": "def get_colorscale_values(cmap):\n    \"\"\"Get the colors composing a plotly colorscale.\n\n    Parameter\n    ---------\n    cmap : str\n        Name of the Plotly colorscale\n\n    Returns\n    -------\n    colorscale : array_like\n        Colors associated to the colormap\n    \"\"\"\n    import plotly\n    rev = '_r' if '_r' in cmap.lower() else ''\n    cmap = cmap.lower().replace('_r', '')\n    colorscales = plotly.colors.named_colorscales()\n    assert cmap in colorscales\n    ensembles = ['sequential', 'diverging', 'qualitative']\n    for e in ensembles:\n        cmaps = dir(eval(f'plotly.colors.{e}'))\n        cmaps_lower = [c.lower() for c in cmaps]\n        if cmap in cmaps_lower:\n            cmap_idx = cmaps_lower.index(cmap)\n            return eval(f'plotly.colors.{e}.{cmaps[cmap_idx]}{rev}')\n    assert ValueError(f'{cmap} is not a predefined colorscale {colorscales}')", "fn_id": 0, "class_fn": false, "repo": "brainets/netchos", "file": "netchos/utils/colors.py", "last_update_at": "2021-11-17T15:18:33+00:00", "pred": {"ppl": 3.1928811073303223, "ppl_lower": 3.471230983734131, "ppl/lowercase_ppl": -1.071999223883994, "ppl/zlib": 0.0029095831519490036, "Min_5.0% Prob": 9.705552014437588, "Min_10.0% Prob": 7.611098621202552, "Min_20.0% Prob": 5.076043648922697, "Min_30.0% Prob": 3.7371396890708377, "Min_40.0% Prob": 2.872436061660026, "Min_50.0% Prob": 2.3257601498347573, "Min_60.0% Prob": 1.9337508802150263}}
{"hexsha": "5ea5ff02510da4eb6075ea3e0e4184f4d733ca2e", "ext": "py", "lang": "Python", "content": "def detectFacesByRekognition(image_binary: bytes) -> List[List[float]]:\n    client = boto3.client('rekognition')\n    response = client.detect_faces(Image={'Bytes': image_binary}, Attributes=['ALL'])\n    faces = list()\n    for face_info in response['FaceDetails']:\n        faces.append(face_info['BoundingBox'])\n        print(face_info['BoundingBox'])\n    return faces", "fn_id": 1, "class_fn": false, "repo": "p1ass/emojic.ch", "file": "lambda/detect_face.py", "last_update_at": "2021-08-12T04:24:43+00:00", "pred": {"ppl": 2.6601314544677734, "ppl_lower": 4.916598320007324, "ppl/lowercase_ppl": -1.6278175680044744, "ppl/zlib": 0.004387334262535326, "Min_5.0% Prob": 9.202476620674133, "Min_10.0% Prob": 7.000402874416775, "Min_20.0% Prob": 4.597926722632514, "Min_30.0% Prob": 3.268438402149412, "Min_40.0% Prob": 2.4355946116753526, "Min_50.0% Prob": 1.9726820569485426, "Min_60.0% Prob": 1.653230018321086}}
{"hexsha": "4a4bfa3d96580a5d40c5b2e5e994ece0ab585163", "ext": "py", "lang": "Python", "content": "def test_event_graph_accumulated_time_before_start(mocker: Any) -> None:\n    message = DeferredMessage(MyMessage, 'unittest_args', kwargs_field='unittest_kwargs')\n    topic = Topic(MyMessage)\n    start = Event(message, topic, 0.0, 1.0)\n    graph = EventGraph(start)\n    parent = Event(message, topic, 0.0, 1.0)\n    child = Event(message, topic, -3.0, 1.0)\n    graph.add_event_at_end(parent, start)\n    with pytest.raises(LabGraphError):\n        graph.add_event_at_end(child, parent)", "fn_id": 10, "class_fn": false, "repo": "mofe64/labgraph", "file": "labgraph/events/tests/test_event_generator.py", "last_update_at": "2021-08-01T06:31:08+00:00", "pred": {"ppl": 4.907356262207031, "ppl_lower": 6.829073905944824, "ppl/lowercase_ppl": -1.207736449333715, "ppl/zlib": 0.006440224118732011, "Min_5.0% Prob": 12.1144437789917, "Min_10.0% Prob": 9.26162764231364, "Min_20.0% Prob": 6.492749775609663, "Min_30.0% Prob": 4.8650171173379775, "Min_40.0% Prob": 3.840937176394084, "Min_50.0% Prob": 3.1343439987188653, "Min_60.0% Prob": 2.661356533302906}}
{"hexsha": "4ccaae78da187b459e1b8de6f377e49ceb0a7fea", "ext": "py", "lang": "Python", "content": "def _get_files_from_arcs(extension, arc_list=None, arc_path=None):\n    use_concurrency = False\n    if arc_path:\n        arc_list = find_files(arc_path, '.arc')\n    elif arc_list:\n        arc_list = arc_list\n    else:\n        arc_list = ARC_FILES\n    to_export = [arc_file for arc_file in arc_list if arc_file not in CACHE_ARC]\n    if to_export and use_concurrency:\n        concurrent_unpack(arc_list, CACHE_ARC, extension)\n    elif to_export and (not use_concurrency):\n        for arc_file in to_export:\n            _unpack_arc_in_temp(arc_file, CACHE_ARC)\n    files, ids = _get_files_and_ids(extension, arc_list)\n    return (files, ids)", "fn_id": 0, "class_fn": false, "repo": "BlenderCN-Org/albam", "file": "tests/mtframework/conftest.py", "last_update_at": "2021-01-05T22:58:18+00:00", "pred": {"ppl": 3.793623208999634, "ppl_lower": 4.091975688934326, "ppl/lowercase_ppl": -1.056780266143868, "ppl/zlib": 0.004883961737163601, "Min_5.0% Prob": 10.034214761522081, "Min_10.0% Prob": 8.094842659799676, "Min_20.0% Prob": 5.538361463791285, "Min_30.0% Prob": 4.157931007187942, "Min_40.0% Prob": 3.240639174595857, "Min_50.0% Prob": 2.6557399486143565, "Min_60.0% Prob": 2.217740525483576}}
{"hexsha": "66c3929472e5beb4f365dc128305de4970e9e7a7", "ext": "py", "lang": "Python", "content": "def extract_sentences_and_labels_from_files(files):\n    sentences = []\n    labels = []\n    for infile in files:\n        with open(infile) as file:\n            for line in file:\n                sentence, label = parse_infile_line(line)\n                labels.append(label)\n                sentences.append(sentence)\n            file.close()\n    return (sentences, labels)", "fn_id": 1, "class_fn": false, "repo": "arielrodrigues/nlp-relations-extraction-ptbr", "file": "input-data-preparation/utils.py", "last_update_at": "2021-02-09T16:27:10+00:00", "pred": {"ppl": 2.6186704635620117, "ppl_lower": 2.6186704635620117, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005629630013553103, "Min_5.0% Prob": 8.587116360664368, "Min_10.0% Prob": 6.916623651981354, "Min_20.0% Prob": 4.628619395196438, "Min_30.0% Prob": 3.2480813724299273, "Min_40.0% Prob": 2.457569251419045, "Min_50.0% Prob": 1.923458340555066, "Min_60.0% Prob": 1.6103252900279679}}
{"hexsha": "0924022c1119a245a7cbca668d233e67f604810f", "ext": "py", "lang": "Python", "content": "def get_shifted_3D(tau, X, Y, Z, cam_left, cam_top, traj_left, traj_top, timespan):\n    corr_top, corr_left = shift_cam_coord(timespan, traj_top, traj_left, tau)\n    len_traj = len(corr_top)\n    x = np.zeros(np.shape(X)) * np.nan\n    y = np.zeros(np.shape(Y)) * np.nan\n    z = np.zeros(np.shape(Z)) * np.nan\n    for i in range(0, len_traj):\n        if not (np.isnan(X[i]) or np.isnan(Y[i]) or np.isnan(Z[i])):\n            A, B = make_system_mat(cam_top, cam_left, corr_left[i, :], corr_top[i, :])\n            x[i], y[i], z[i] = np.linalg.solve(np.matrix(A), np.matrix(B).T)\n    return (x, y, z, corr_top, corr_left)", "fn_id": 12, "class_fn": false, "repo": "simonBreumier/3Deye", "file": "data_treat/reconstruction_3d.py", "last_update_at": "2021-06-05T07:51:00+00:00", "pred": {"ppl": 2.955479621887207, "ppl_lower": 3.119657516479492, "ppl/lowercase_ppl": -1.0498885554046935, "ppl/zlib": 0.003698501523135558, "Min_5.0% Prob": 9.529711604118347, "Min_10.0% Prob": 7.496807689666748, "Min_20.0% Prob": 4.975514945983886, "Min_30.0% Prob": 3.508060248274552, "Min_40.0% Prob": 2.700791817195345, "Min_50.0% Prob": 2.1630276032378823, "Min_60.0% Prob": 1.8104396250013164}}
{"hexsha": "f441d0b6f5533ef1211ad198d6e281b4230affcd", "ext": "py", "lang": "Python", "content": "def test_class4_ex4():\n    base_path = '../class4/exercises/exercise4'\n    cmd_list = ['ansible-playbook', 'exercise4.yml']\n    std_out, std_err, return_code = subprocess_runner(cmd_list, exercise_dir=base_path)\n    assert std_err == ''\n    assert return_code == 0", "fn_id": 4, "class_fn": false, "repo": "kinther/ansible_course", "file": "tests/test_class4.py", "last_update_at": "2021-05-24T01:58:08+00:00", "pred": {"ppl": 2.325225353240967, "ppl_lower": 2.325225353240967, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.004992999766079487, "Min_5.0% Prob": 6.964341640472412, "Min_10.0% Prob": 5.448305159807205, "Min_20.0% Prob": 3.8195576891303062, "Min_30.0% Prob": 2.7668081261217594, "Min_40.0% Prob": 2.1357583734206855, "Min_50.0% Prob": 1.6815907120159486, "Min_60.0% Prob": 1.4104851905484588}}
{"hexsha": "f2310222e3119de7c2f2b3c8746814477e78d8d7", "ext": "py", "lang": "Python", "content": "def class_add_student(student_id, student_name):\n    \"\"\"\n    \u7528\u4e8e\u6dfb\u52a0\u5b66\u751f\n    \"\"\"\n    cur.execute(f\"insert into student_list values ({student_id},'{student_name}')\")\n    conn.commit()", "fn_id": 1, "class_fn": false, "repo": "XieJianCheng/ClassAdminSystem", "file": "module_new/class_admin_n.py", "last_update_at": "2021-11-11T12:41:09+00:00", "pred": {"ppl": 4.338160037994385, "ppl_lower": 4.338160037994385, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010261890236636876, "Min_5.0% Prob": 7.347332954406738, "Min_10.0% Prob": 6.2153096199035645, "Min_20.0% Prob": 5.015701174736023, "Min_30.0% Prob": 4.07422103881836, "Min_40.0% Prob": 3.409362280368805, "Min_50.0% Prob": 2.8192161596738377, "Min_60.0% Prob": 2.4418863139806257}}
{"hexsha": "78f066607cb84040dfcf6fa504ecdea051a0dfbc", "ext": "py", "lang": "Python", "content": "def test_calculate_raises_with_no_active_phases_passed():\n    \"\"\"Passing inactive phases to calculate() raises a ConditionError.\"\"\"\n    with pytest.raises(ConditionError):\n        calculate(ALFE_DBF, ['AL', 'VA'], ['AL13FE4'], T=1200, P=101325)", "fn_id": 3, "class_fn": false, "repo": "dschwen/pycalphad", "file": "pycalphad/tests/test_calculate.py", "last_update_at": "2021-07-19T14:25:43+00:00", "pred": {"ppl": 7.829923152923584, "ppl_lower": 11.795480728149414, "ppl/lowercase_ppl": -1.1991123383705287, "ppl/zlib": 0.011692913042688168, "Min_5.0% Prob": 10.514128684997559, "Min_10.0% Prob": 9.306836536952428, "Min_20.0% Prob": 7.286047506332397, "Min_30.0% Prob": 5.795252323150635, "Min_40.0% Prob": 4.764041966007602, "Min_50.0% Prob": 3.9779013716257534, "Min_60.0% Prob": 3.4339050702426746}}
{"hexsha": "3546a7402fd9a0f1b6c55afe3610cdd62558560c", "ext": "py", "lang": "Python", "content": "def __get_stock_bar(code, start, end, freq):\n    df = None\n    _start = start.format()\n    _end = end.format()\n    if freq == util.FREQ_DAY or freq == util.FREQ_WEEK or freq == util.FREQ_MONTH:\n        covert = {util.FREQ_DAY: 'D', util.FREQ_WEEK: 'W', util.FREQ_MONTH: 'M'}\n        df = ts.get_stock_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    else:\n        covert = {util.FREQ_1M: '1MIN', util.FREQ_5M: '5MIN', util.FREQ_15M: '15MIN', util.FREQ_30M: '30MIN'}\n        df = ts.tushare_bar(code=code, start=_start, end=_end, freq=covert[freq], factors=['vr', 'tor'])\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError('df is unknown type %s' % type(df))\n    elif df.empty:\n        log.warn('%s from %s to %s bar[%s] is empty' % (code, start, end, freq))\n    return df", "fn_id": 3, "class_fn": false, "repo": "lijielife/carp", "file": "carp/request.py", "last_update_at": "2021-03-02T15:48:57+00:00", "pred": {"ppl": 2.501117467880249, "ppl_lower": 2.8452351093292236, "ppl/lowercase_ppl": -1.1406161171918723, "ppl/zlib": 0.002546493386547935, "Min_5.0% Prob": 9.152825559888567, "Min_10.0% Prob": 6.734735659190586, "Min_20.0% Prob": 4.279484727926421, "Min_30.0% Prob": 3.023782593739587, "Min_40.0% Prob": 2.2892481745261213, "Min_50.0% Prob": 1.8322319058740202, "Min_60.0% Prob": 1.5347424187537737}}
{"hexsha": "8644f9b2a8f01c213caf5bcbd4d123b465cabeeb", "ext": "py", "lang": "Python", "content": "@leet2git.command()\n@click.option('--source-repository', '-s', default='', help='the path to the folder where the code will be saved')\n@click.option('--language', '-l', default='python3', help='the default language')\n@click.option('--soft/--hard', default=True, help='A soft reset only erases the database. A hard reset also erase the files.')\n@click.pass_obj\ndef reset(cm: ConfigManager, source_repository: str, language: str, soft: bool):\n    \"\"\"Reset the configuration file\n    \\x0c\n    Args:\n        source_repository (str, optional): the path to the folder where the code will be saved.\n            Defaults to \"\".\n        language (str, optional): the default language. Defaults to \"python3\".\n        soft(bool, optional): the reset hardness. Defaults to soft.\n    \"\"\"\n    if not soft:\n        try:\n            click.confirm(f\"This will delete EVERY solution and test file inside                     the {cm.config['source_path']} folder.                      Still want to proceed?\", abort=True)\n        except Abort:\n            return\n        file_list = glob.glob(os.path.join(cm.config['source_path'], 'src', 'leetcode_*')) + glob.glob(os.path.join(cm.config['source_path'], 'tests', 'test_*'))\n        for file in file_list:\n            try:\n                os.remove(file)\n            except FileNotFoundError as e:\n                click.secho(e.args)\n    else:\n        try:\n            click.confirm('This will delete the question database. Still want to proceed?', abort=True)\n        except Abort:\n            return\n    reset_config(cm, source_repository, language)\n    cm.load_config()\n    qdb = QuestionDB(cm.config)\n    qdb.reset()\n    if not soft:\n        data = QuestionData(language=cm.config['language'])\n        file_handler = create_file_handler(data, cm.config)\n        file_handler.generate_repo(cm.config['source_path'])", "fn_id": 7, "class_fn": false, "repo": "sungho-joo/leetcode2github", "file": "src/leet2git/leet2git.py", "last_update_at": "2021-05-07T08:26:47+00:00", "pred": {"ppl": 3.460838794708252, "ppl_lower": 3.878952741622925, "ppl/lowercase_ppl": -1.0918672654845336, "ppl/zlib": 0.0017889207289703225, "Min_5.0% Prob": 9.785483090773873, "Min_10.0% Prob": 7.635346391926641, "Min_20.0% Prob": 5.369023354157157, "Min_30.0% Prob": 3.947138856286588, "Min_40.0% Prob": 3.058666103997746, "Min_50.0% Prob": 2.479130132148018, "Min_60.0% Prob": 2.073285275512116}}
{"hexsha": "d1aed9946c2cb489d711ae8a1fe207359b86da6f", "ext": "py", "lang": "Python", "content": "def buildStartEndBreakProb(fit, nSegments, tag):\n\n    def sebBuilder(s):\n        return ee.String(s).cat('_' + tag)\n    segmentTag = buildSegmentTag(nSegments).map(sebBuilder)\n    zeros = ee.Array(0).repeat(0, nSegments)\n    magImg = fit.select(tag).arrayCat(zeros, 0).float().arraySlice(0, 0, nSegments)\n    return magImg.arrayFlatten([segmentTag])", "fn_id": 5, "class_fn": false, "repo": "rjsheperd/gee-gateway", "file": "gee/ccdc.py", "last_update_at": "2021-03-19T19:51:49+00:00", "pred": {"ppl": 8.953572273254395, "ppl_lower": 13.651777267456055, "ppl/lowercase_ppl": -1.192430203829658, "ppl/zlib": 0.010388874830944922, "Min_5.0% Prob": 11.063042831420898, "Min_10.0% Prob": 9.882244456898082, "Min_20.0% Prob": 7.947540131482211, "Min_30.0% Prob": 6.434288393367421, "Min_40.0% Prob": 5.159976967356422, "Min_50.0% Prob": 4.25941363031214, "Min_60.0% Prob": 3.6089792037100503}}
{"hexsha": "b735786ce4c39a03aae76e4daf78a4867d561247", "ext": "py", "lang": "Python", "content": "def test_subtraction_with_other_types():\n    price1 = Money(40, 'EUR')\n    price2 = Money(80, 'EUR')\n    price_range = MoneyRange(price1, price2)\n    with pytest.raises(TypeError):\n        price_range - 1", "fn_id": 6, "class_fn": false, "repo": "anton-shestakov/prices", "file": "tests/test_money_range.py", "last_update_at": "2021-11-17T14:38:52+00:00", "pred": {"ppl": 3.5276734828948975, "ppl_lower": 5.6056365966796875, "ppl/lowercase_ppl": -1.3673805077731196, "ppl/zlib": 0.009478485591440992, "Min_5.0% Prob": 7.978804111480713, "Min_10.0% Prob": 6.721667925516765, "Min_20.0% Prob": 5.057775616645813, "Min_30.0% Prob": 3.839636012127525, "Min_40.0% Prob": 3.122032105922699, "Min_50.0% Prob": 2.4926264523528516, "Min_60.0% Prob": 2.1146773153817966}}
{"hexsha": "1869c8f32f7f9bd4afb8cbf0bd42e3c02a87fce7", "ext": "py", "lang": "Python", "content": "def Vector4CrossProduct(vectorLeft, vectorRight):\n    assert isinstance(vectorRight, Vector4)\n    v = Vector4()\n    v.x = vectorLeft.y * vectorRight.z - vectorLeft.z * vectorRight.y\n    v.y = vectorLeft.z * vectorRight.x - vectorLeft.x * vectorRight.z\n    v.z = vectorLeft.x * vectorRight.y - vectorLeft.y * vectorRight.x\n    v.w = 0\n    return v", "fn_id": 11, "class_fn": false, "repo": "pome-ta/draftPythonistaScripts", "file": "simd/vector4.py", "last_update_at": "2021-08-05T04:31:02+00:00", "pred": {"ppl": 1.6973627805709839, "ppl_lower": 1.8596338033676147, "ppl/lowercase_ppl": -1.1725723565867896, "ppl/zlib": 0.0035271716066357364, "Min_5.0% Prob": 7.304365253448486, "Min_10.0% Prob": 5.221465253829956, "Min_20.0% Prob": 2.713341378030323, "Min_30.0% Prob": 1.8004283739137463, "Min_40.0% Prob": 1.3410584493391324, "Min_50.0% Prob": 1.0679412458351483, "Min_60.0% Prob": 0.8872183282008477}}
{"hexsha": "6780c64eb55bdd7710a2ca7590d41b28234c58e4", "ext": "py", "lang": "Python", "content": "def polyClipboard(*args, **kwargs):\n    \"\"\"\n    The command allows the user to copy and paste certain polygonal attributes to a clipboard. These attributes are:  1)\n    Shader (shading engine) assignment.  2) Texture coordinate (UV) assignment.  3) Color value assignment. Any combination\n    of attributes can be chosen for the copy or paste operation. If the attribute has not been copied to the clipboard, then\n    naturally it cannot be pasted from the clipboard. The copy option will copy the attribute assignments from a single\n    source polygonal dag object or polygon component. If the source does not have the either UV or color attributes, then\n    nothing will be copied to the clipboard. The paste option will paste the attribute assignments to one or more polygon\n    components or polygonal dag objects. If the destination does not have either UV or color attributes, then new values\n    will be assigned as needed. Additionally, there is the option to clear the clipboard contents\n    \n    Flags:\n      - clear : cl                     (bool)          [create]\n          When used, will mean to clear the specified attribute argument(s).\n    \n      - color : clr                    (bool)          [create]\n          When used, will be to copy or paste color attributes\n    \n      - copy : cp                      (bool)          [create]\n          When used, will mean to copy the specified attribute argument(s).\n    \n      - paste : ps                     (bool)          [create]\n          When used, will mean to paste the specified attribute argument(s).\n    \n      - shader : sh                    (bool)          [create]\n          When used, will be to copy or paste shader attributes\n    \n      - uvCoordinates : uv             (bool)          [create]\n          When used, will be to copy or paste texture coordinate attributes                                  Flag can have\n          multiple arguments, passed either as a tuple or a list.\n    \n    \n    Derived from mel command `maya.cmds.polyClipboard`\n    \"\"\"\n    pass", "fn_id": 220, "class_fn": false, "repo": "FXTD-ODYSSEY/vscode-mayapy", "file": "mayaSDK/pymel/core/modeling.py", "last_update_at": "2021-12-26T06:56:16+00:00", "pred": {"ppl": 3.897920608520508, "ppl_lower": 4.502458095550537, "ppl/lowercase_ppl": -1.1059803554357386, "ppl/zlib": 0.002073846392749398, "Min_5.0% Prob": 10.283895291780171, "Min_10.0% Prob": 7.71843662017431, "Min_20.0% Prob": 5.481140257437018, "Min_30.0% Prob": 4.2136204102460075, "Min_40.0% Prob": 3.342195805888506, "Min_50.0% Prob": 2.7129871943712836, "Min_60.0% Prob": 2.2686969446540504}}
{"hexsha": "ce10512207649c9489cbc69c74570eefc9c463ff", "ext": "py", "lang": "Python", "content": "def get_data_int():\n    X = np.array([[2, 20, 3], [4, 50, 6], [7, 80, 9], [10, 110, 12]])\n    y_int = np.array([1, 2, 3, 4])\n    return (X, y_int)", "fn_id": 0, "class_fn": false, "repo": "gradientzero/dq0-sdk", "file": "tests/test_pipeline/test_pipeline.py", "last_update_at": "2021-03-18T21:26:29+00:00", "pred": {"ppl": 2.3983216285705566, "ppl_lower": 2.343372344970703, "ppl/lowercase_ppl": -0.9735037457815178, "ppl/zlib": 0.007673413783207665, "Min_5.0% Prob": 7.564290523529053, "Min_10.0% Prob": 5.703054249286652, "Min_20.0% Prob": 3.9890307933092117, "Min_30.0% Prob": 2.785646138191223, "Min_40.0% Prob": 2.1866721705053793, "Min_50.0% Prob": 1.7404755730004537, "Min_60.0% Prob": 1.4675574200972914}}
{"hexsha": "a0e82345e90e71c8a988186287df593c48a61aad", "ext": "py", "lang": "Python", "content": "async def selectDB(userid):\n    conn = sqlite3.connect('ID_DATA.db')\n    c = conn.cursor()\n    cursor = c.execute('SELECT *  FROM UIDDATA WHERE USERID = ?', (userid,))\n    for row in cursor:\n        if row[0]:\n            if row[2]:\n                return [row[2], 3]\n            elif row[1]:\n                return [row[1], 2]\n            else:\n                return None\n        else:\n            return None", "fn_id": 1, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/GenshinUID/getDB.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 3.4664430618286133, "ppl_lower": 3.7955667972564697, "ppl/lowercase_ppl": -1.072964863953089, "ppl/zlib": 0.005976581798092887, "Min_5.0% Prob": 9.3727126121521, "Min_10.0% Prob": 7.552383756637573, "Min_20.0% Prob": 5.207034122376215, "Min_30.0% Prob": 3.9482537296510514, "Min_40.0% Prob": 3.041661875588553, "Min_50.0% Prob": 2.4958040387584615, "Min_60.0% Prob": 2.068416228192666}}
{"hexsha": "de5093d7a37e19119c9ed380921063f98f98a572", "ext": "py", "lang": "Python", "content": "def solve_all(l, r):\n    res.clear()\n    nl = l.copy()\n    for i in range(len(nl)):\n        nl[i] = (frac(nl[i]), str(nl[i]))\n    solve_all_rec(nl, frac(r))\n    return res", "fn_id": 1, "class_fn": false, "repo": "mateo-cv/KryptoCards", "file": "solver_all.py", "last_update_at": "2021-11-06T02:19:58+00:00", "pred": {"ppl": 4.950737953186035, "ppl_lower": 4.950737953186035, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.013329472057673233, "Min_5.0% Prob": 11.496500651041666, "Min_10.0% Prob": 9.045453627904257, "Min_20.0% Prob": 6.181560277938843, "Min_30.0% Prob": 4.863489364322863, "Min_40.0% Prob": 3.840148783647097, "Min_50.0% Prob": 3.199686750769615, "Min_60.0% Prob": 2.6518774911379204}}
{"hexsha": "6a6c2ee6803eaaa2206bcf41874368968655c509", "ext": "py", "lang": "Python", "content": "def tsne_plot(model):\n    labels = []\n    tokens = []\n    print('Displaying t-SNE...')\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n    plt.figure(figsize=(16, 16))\n    for i in range(len(x)):\n        plt.scatter(x[i], y[i])\n        plt.annotate(labels[i], xy=(x[i], y[i]), xytext=(5, 2), textcoords='offset points', ha='right', va='bottom')\n    plt.title('t-SNE')\n    plt.show()", "fn_id": 3, "class_fn": false, "repo": "cjbayron/artist2lyrics", "file": "common/utils.py", "last_update_at": "2021-11-08T12:49:36+00:00", "pred": {"ppl": 1.3781931400299072, "ppl_lower": 1.5570734739303589, "ppl/lowercase_ppl": -1.3804392391104097, "ppl/zlib": 0.0008716666370744292, "Min_5.0% Prob": 5.7523720481178975, "Min_10.0% Prob": 3.1961008776789126, "Min_20.0% Prob": 1.6053506523132959, "Min_30.0% Prob": 1.0807417819742113, "Min_40.0% Prob": 0.8051716517186427, "Min_50.0% Prob": 0.6415112430683112, "Min_60.0% Prob": 0.5368901201939653}}
{"hexsha": "71850fd6a06c73964f1a9b9a4f6b911414e14aff", "ext": "py", "lang": "Python", "content": "@pytest.mark.usefixtures('aftersocialregister_app')\ndef test_aftersocialregister(aftersocialregister_config, db_session):\n    \"\"\"Register fresh user and logs him in and check response if redirect from AfterSocialRegister.\"\"\"\n    profile = {'accounts': [{'domain': 'facebook.com', 'userid': '2343'}], 'displayName': 'teddy', 'verifiedEmail': 'we@po.pl', 'preferredUsername': 'teddy', 'emails': [{'value': 'aasd@bwwqwe.pl'}], 'name': 'ted'}\n    credentials = {'oauthAccessToken': '7897048593434'}\n    provider_name = 'facebook'\n    provider_type = 'facebook'\n    request = testing.DummyRequest()\n    request.user = None\n    request.registry = aftersocialregister_config.registry\n    request.remote_addr = '127.0.0.123'\n    request.context = AuthenticationComplete(profile, credentials, provider_name, provider_type)\n    request.login_perform = MagicMock(name='login_perform')\n    request.login_perform.return_value = {'status': True}\n    view = SocialLoginViews(request)\n    out = view()\n    assert out.location == EVENT_PATH.format(AfterSocialRegister)\n    transaction.commit()\n    user = db_session.query(User).one()\n    assert user.is_active\n    assert user.provider_id('facebook') == profile['accounts'][0]['userid']", "fn_id": 24, "class_fn": false, "repo": "fizyk/pyramid_fullauth", "file": "tests/views/test_events.py", "last_update_at": "2021-11-14T15:36:07+00:00", "pred": {"ppl": 4.611522197723389, "ppl_lower": 6.516576766967773, "ppl/lowercase_ppl": -1.2262205331443239, "ppl/zlib": 0.002547596662066995, "Min_5.0% Prob": 10.841277569532394, "Min_10.0% Prob": 8.585992220676307, "Min_20.0% Prob": 6.13422425587972, "Min_30.0% Prob": 4.66724942445755, "Min_40.0% Prob": 3.721605408460574, "Min_50.0% Prob": 3.0254605618601076, "Min_60.0% Prob": 2.543720580637455}}
{"hexsha": "9109af01b75d406c726ca60fbd26a94a9e80f374", "ext": "py", "lang": "Python", "content": "def MultiscaleEntropy_mse(x, scale_factor=[i for i in range(1, 21)], m=[2], r=[0.15], return_type='dict', safe_mode=False):\n    \"\"\"[Multiscale Entropy]\n\n    Arguments:\n        x {[input signal]} -- [an iterator of numbers]\n\n    Keyword Arguments:\n        scale_factor {list} -- [scale factors of coarse graining] (default: {[i for i in range(1,21)]})\n        m {list} -- [m in sample entropy] (default: {[2]})\n        r {list} -- [r in sample entropy] (default: {[0.15]})\n        return_type {str} -- [can be dict or list] (default: {'dict'})\n        safe_mode {bool} -- [if set True, type checking will be skipped] (default: {False})\n\n    Raises:\n        ValueError -- [some values too big]\n\n    Returns:\n        [dict or list as return_type indicates] -- [if dict, nest as [scale_factor][m][r] for each value of scale_factor, m, r; if list nest as [i][j][k] for lengths of scale_factor, m, r]\n    \"\"\"\n    if not safe_mode:\n        m = MultiscaleEntropy_check_type(m, int, 'm')\n        r = MultiscaleEntropy_check_type(r, float, 'r')\n        scale_factor = MultiscaleEntropy_check_type(scale_factor, int, 'scale_factor')\n    try:\n        x = np.array(x)\n    except:\n        print('x should be a sequence of numbers')\n    if max(scale_factor) > len(x):\n        raise ValueError(\"the max scale_factor is bigger than x's length\")\n    sd = np.sqrt(np.var(x))\n    ms_en = MultiscaleEntropy_init_return_type(return_type)\n    for s_f in scale_factor:\n        y = MultiscaleEntropy_coarse_grain(x, s_f)\n        if return_type == 'dict':\n            ms_en[s_f] = MultiscaleEntropy_sample_entropy(y, m, r, sd, 'dict', True)\n        else:\n            ms_en.append(MultiscaleEntropy_sample_entropy(y, m, r, sd, 'list', True))\n    if return_type == 'list':\n        ms_en = [i[0] for i in ms_en]\n        ms_en = [i[0] for i in ms_en]\n    return ms_en", "fn_id": 18, "class_fn": false, "repo": "LRydin/NeuroKit", "file": "tests/tests_complexity.py", "last_update_at": "2021-06-10T03:27:15+00:00", "pred": {"ppl": 2.6722054481506348, "ppl_lower": 2.9795312881469727, "ppl/lowercase_ppl": -1.110755317474041, "ppl/zlib": 0.0014001483504223681, "Min_5.0% Prob": 9.115575856175916, "Min_10.0% Prob": 6.676540230882579, "Min_20.0% Prob": 4.405331709261598, "Min_30.0% Prob": 3.182148207878244, "Min_40.0% Prob": 2.4459912658123106, "Min_50.0% Prob": 1.9624913306170721, "Min_60.0% Prob": 1.6385124569523941}}
{"hexsha": "d2664e1063dfac0585b27173768ffad2c031b7e9", "ext": "py", "lang": "Python", "content": "def _InceptionV3_blockH(x):\n    block1 = conv2d_bn(x, 320, (1, 1))\n    block2 = conv2d_bn(x, 384, (1, 1))\n    block2_1 = conv2d_bn(block2, 384, (1, 3))\n    block2_2 = conv2d_bn(block2, 384, (3, 1))\n    block2 = Concatenate()([block2_1, block2_2])\n    block3 = conv2d_bn(x, 448, (1, 1))\n    block3_1 = conv2d_bn(block3, 384, (3, 3))\n    block3_2 = conv2d_bn(block3, 384, (1, 3))\n    block3_3 = conv2d_bn(block3, 384, (3, 1))\n    block3 = Concatenate()([block3_1, block3_2, block3_3])\n    block4 = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    block4 = conv2d_bn(block4, 192, (1, 1))\n    x = Concatenate()([block1, block2, block3, block4])\n    return x", "fn_id": 8, "class_fn": false, "repo": "Hiroaki-Ozaki/modelib-classification", "file": "keras/models/InceptionV3.py", "last_update_at": "2021-04-14T08:56:01+00:00", "pred": {"ppl": 1.2672706842422485, "ppl_lower": 1.37688148021698, "ppl/lowercase_ppl": -1.350222457495544, "ppl/zlib": 0.0010079383846181753, "Min_5.0% Prob": 3.882378503680229, "Min_10.0% Prob": 2.2747843991965055, "Min_20.0% Prob": 1.194714351091534, "Min_30.0% Prob": 0.7906600496174825, "Min_40.0% Prob": 0.5947896744428716, "Min_50.0% Prob": 0.47369498329939186, "Min_60.0% Prob": 0.3955787508304413}}
{"hexsha": "be392b1159ec0d0cbf136ec1807d49c872f36a16", "ext": "py", "lang": "Python", "content": "def plot_oi(ticker: str, expiry: str, min_sp: float, max_sp: float, calls_only: bool, puts_only: bool, export: str):\n    \"\"\"Plot open interest\n\n    Parameters\n    ----------\n    ticker: str\n        Ticker\n    expiry: str\n        Expiry date for options\n    min_sp: float\n        Min strike to consider\n    max_sp: float\n        Max strike to consider\n    calls_only: bool\n        Show calls only\n    puts_only: bool\n        Show puts only\n    export: str\n        Format to export file\n    \"\"\"\n    options = tradier_model.get_option_chains(ticker, expiry)\n    export_data(export, os.path.dirname(os.path.abspath(__file__)), 'oi_tr', options)\n    current_price = tradier_model.last_price(ticker)\n    if min_sp == -1:\n        min_strike = 0.75 * current_price\n    else:\n        min_strike = min_sp\n    if max_sp == -1:\n        max_strike = 1.25 * current_price\n    else:\n        max_strike = max_sp\n    if calls_only and puts_only:\n        print('Both flags selected, please select one', '\\n')\n        return\n    calls = options[options.option_type == 'call'][['strike', 'open_interest']]\n    puts = options[options.option_type == 'put'][['strike', 'open_interest']]\n    call_oi = calls.set_index('strike')['open_interest'] / 1000\n    put_oi = puts.set_index('strike')['open_interest'] / 1000\n    df_opt = pd.merge(call_oi, put_oi, left_index=True, right_index=True)\n    df_opt = df_opt.rename(columns={'open_interest_x': 'OI_call', 'open_interest_y': 'OI_put'})\n    max_pain = op_helpers.calculate_max_pain(df_opt)\n    plt.style.use('classic')\n    fig, ax = plt.subplots(figsize=plot_autoscale(), dpi=cfp.PLOT_DPI)\n    if not calls_only:\n        put_oi.plot(x='strike', y='open_interest', label='Puts', ax=ax, marker='o', ls='-', c='r')\n    if not puts_only:\n        call_oi.plot(x='strike', y='open_interest', label='Calls', ax=ax, marker='o', ls='-', c='g')\n        ax.axvline(current_price, lw=2, c='k', ls='--', label='Current Price', alpha=0.7)\n        ax.axvline(max_pain, lw=3, c='k', label=f'Max Pain: {max_pain}', alpha=0.7)\n        ax.grid('on')\n        ax.set_xlabel('Strike Price')\n        ax.set_ylabel('Open Interest (1k) ')\n        ax.set_xlim(min_strike, max_strike)\n        if gtff.USE_ION:\n            plt.ion()\n        ax.set_title(f'Open Interest for {ticker.upper()} expiring {expiry}')\n        plt.legend(loc=0)\n        fig.tight_layout(pad=1)\n    plt.show()\n    plt.style.use('default')\n    print('')", "fn_id": 4, "class_fn": false, "repo": "Aerex/GamestonkTerminal", "file": "gamestonk_terminal/stocks/options/tradier_view.py", "last_update_at": "2021-03-11T17:42:35+00:00", "pred": {"ppl": 1.6734273433685303, "ppl_lower": 1.853095293045044, "ppl/lowercase_ppl": -1.1980748344245609, "ppl/zlib": 0.000553033109294686, "Min_5.0% Prob": 5.947830225292005, "Min_10.0% Prob": 4.1775410112581755, "Min_20.0% Prob": 2.463568737888648, "Min_30.0% Prob": 1.7037372231223178, "Min_40.0% Prob": 1.284443727548362, "Min_50.0% Prob": 1.0306634845678981, "Min_60.0% Prob": 0.8580581835317141}}
{"hexsha": "467014e3a54821c2e5ac7b33d2f939b0052d1b15", "ext": "py", "lang": "Python", "content": "def run_task(hosts, command, timeout=None):\n    \"\"\"Create a task to run a command on each host in parallel.\n\n    Args:\n        hosts (list): list of hosts\n        command (str): the command to run in parallel\n        timeout (int, optional): command timeout in seconds. Defaults to None.\n\n    Returns:\n        Task: a ClusterShell.Task.Task object for the executed command\n\n    \"\"\"\n    task = task_self()\n    task.set_info('ssh_options', '-oForwardAgent=yes')\n    kwargs = {'command': command, 'nodes': NodeSet.fromlist(hosts)}\n    if timeout is not None:\n        kwargs['timeout'] = timeout\n    task.run(**kwargs)\n    return task", "fn_id": 3, "class_fn": false, "repo": "kmajzero/daos", "file": "src/tests/ftest/util/general_utils.py", "last_update_at": "2021-04-13T16:04:21+00:00", "pred": {"ppl": 3.1651296615600586, "ppl_lower": 4.553064823150635, "ppl/lowercase_ppl": -1.3155775543610373, "ppl/zlib": 0.00339880242499869, "Min_5.0% Prob": 9.375106062207903, "Min_10.0% Prob": 7.318708992004394, "Min_20.0% Prob": 4.963654458522797, "Min_30.0% Prob": 3.6191365970505607, "Min_40.0% Prob": 2.799698411929803, "Min_50.0% Prob": 2.2904344750078103, "Min_60.0% Prob": 1.928787147278314}}
{"hexsha": "dac2bf672e1bd9ca92568b7538b014b4a37dd949", "ext": "py", "lang": "Python", "content": "def find_euler_random(n):\n    while True:\n        el = np.array([random.randint(0, 4) * 2 for x in range(n + 1)])\n        try:\n            g = Graph.from_sequence(el)\n            choose_biggest_comp(g)\n            if g.adjacency.shape[0] != n:\n                continue\n            print(g.adjacency)\n            for i in range(el.shape[0] * 3):\n                g.randomize_edges()\n            print(g.adjacency)\n            graph = nx.from_numpy_matrix(g.adjacency)\n            euler_list = []\n            euler(g.adjacency.tolist(), 0, euler_list)\n            print(euler_list)\n            plt.subplot(111)\n            nx.draw(graph, with_labels=True, font_weight='bold')\n            plt.show()\n            break\n        except NotGraphicSequenceException:\n            continue", "fn_id": 3, "class_fn": false, "repo": "timcki/graficiarze", "file": "02_project/main.py", "last_update_at": "2021-05-14T11:35:04+00:00", "pred": {"ppl": 4.064021587371826, "ppl_lower": 4.878998279571533, "ppl/lowercase_ppl": -1.1303454732166054, "ppl/zlib": 0.004017687742450936, "Min_5.0% Prob": 9.731492614746093, "Min_10.0% Prob": 7.754423527490525, "Min_20.0% Prob": 5.756713452793303, "Min_30.0% Prob": 4.296806577593088, "Min_40.0% Prob": 3.410113510314156, "Min_50.0% Prob": 2.7744231130753723, "Min_60.0% Prob": 2.337138699600473}}
{"hexsha": "b27331e2a40b51e2950c979f9bac602c12eef9c1", "ext": "py", "lang": "Python", "content": "@app.route('/')\n@app.route('/index')\ndef index():\n    app.logger.debug('Entering index')\n    flask.session['user_id'] = 'creator'\n    flask.session['finished'] = check_completed()\n    flask.session['to_finish'] = PEOPLE_TO_INVITE\n    events = []\n    for record in collection.find({'user_id': 'creator'}):\n        events.append(record)\n    if len(events) > 0:\n        return render_template('waiting.html')\n    if 'begin_date' not in flask.session:\n        init_session_values()\n    return render_template('index.html')", "fn_id": 0, "class_fn": false, "repo": "Dream7hief/MeetMe", "file": "flask_main.py", "last_update_at": "2021-02-08T20:18:11+00:00", "pred": {"ppl": 4.34469747543335, "ppl_lower": 4.633452892303467, "ppl/lowercase_ppl": -1.0438040479988895, "ppl/zlib": 0.00520906429214961, "Min_5.0% Prob": 11.51783289228167, "Min_10.0% Prob": 9.573107923780169, "Min_20.0% Prob": 6.362390123564621, "Min_30.0% Prob": 4.654738348993388, "Min_40.0% Prob": 3.6486184406897118, "Min_50.0% Prob": 2.9359217617813855, "Min_60.0% Prob": 2.447373177517544}}
{"hexsha": "11ad143814ad6766582b44de612f20dfd8d0423f", "ext": "py", "lang": "Python", "content": "def test_x86_direct():\n    insn = ms.ISA_X86.parse_instruction('mov eax, dword ptr [0x8000]')\n    assert insn.num_operands == 2\n    op = insn.operands[1]\n    assert op.is_direct\n    assert op.offset == 32768\n    assert op.base_reg is None\n    assert op.index_reg is None\n    assert op.scale == 1\n    assert str(op) == '0x8000'\n    assert repr(op) == '<MemoryOperand(offset=0x8000)>'", "fn_id": 11, "class_fn": false, "repo": "giltom/megastone", "file": "tests/test_disasm.py", "last_update_at": "2021-04-12T15:12:10+00:00", "pred": {"ppl": 2.885364532470703, "ppl_lower": 3.6053550243377686, "ppl/lowercase_ppl": -1.2102286024316975, "ppl/zlib": 0.004816596574487604, "Min_5.0% Prob": 8.354754130045572, "Min_10.0% Prob": 6.341446216289814, "Min_20.0% Prob": 4.424911318001924, "Min_30.0% Prob": 3.4077605232596397, "Min_40.0% Prob": 2.629701478889695, "Min_50.0% Prob": 2.1072078330771014, "Min_60.0% Prob": 1.7756818889605779}}
{"hexsha": "12b9c9e1e1cd70be553e0f6bc5aeab33f9e284de", "ext": "py", "lang": "Python", "content": "def build_data_str(records):\n    records_data_str = []\n    for record in records:\n        records_data_str.append(tup_to_str(record))\n    return records_data_str", "fn_id": 0, "class_fn": false, "repo": "pangeon/Taskello", "file": "utils/str_utils.py", "last_update_at": "2021-06-22T21:18:37+00:00", "pred": {"ppl": 3.4374048709869385, "ppl_lower": 3.4374048709869385, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.013719075430167241, "Min_5.0% Prob": 10.90202808380127, "Min_10.0% Prob": 8.594178915023804, "Min_20.0% Prob": 5.669454958703783, "Min_30.0% Prob": 4.178148287993211, "Min_40.0% Prob": 3.1010927740070553, "Min_50.0% Prob": 2.45439232043598, "Min_60.0% Prob": 2.099791989558273}}
{"hexsha": "e7dae2609f1a6ef8908cb001bd4912ee60a48a48", "ext": "py", "lang": "Python", "content": "def construct_tabs(selected_pipeline, window, prefs, include_eeg):\n    \"\"\"Constructs as set of tabs based on specifications and the\n    selected pipeline.\n\n    Parameters\n    ----------\n    selected_pipeline : str\n        ID of the selected pipeline\n    window : instance of main window\n        The main window.\n    prefs : Instance of PreferencesHandler\n        Stores e.g. active plugins.\n    include_eeg : bool\n        Whether to add EEG-related actions\n\n    Returns\n    -------\n    list of QDialog\n        Contains the constructed tabs relevant to the pipeline\n    \"\"\"\n    active_plugins = prefs.active_plugins\n    action_specs = find_all_action_specs()\n    datatype_specs = find_all_datatype_specs()\n    package_specs = find_all_package_specs()\n    tabs = []\n    pipelines = []\n    for source, package_spec in package_specs.items():\n        if source not in active_plugins and source != 'meggie':\n            continue\n        if 'tabs' in package_spec:\n            tabs.extend(package_spec['tabs'])\n        if 'pipelines' in package_spec:\n            pipelines.extend(package_spec['pipelines'])\n    for tab in tabs:\n        if 'id' not in tab:\n            raise Exception('Every tab specification must have id.')\n        if 'name' not in tab:\n            tab['name'] = tab['id']\n        if 'inputs' not in tab:\n            tab['inputs'] = []\n        if 'outputs' not in tab:\n            tab['outputs'] = []\n        if 'input_actions' not in tab:\n            tab['input_actions'] = []\n        if 'output_actions' not in tab:\n            tab['output_actions'] = []\n        if 'info' not in tab:\n            tab['info'] = []\n    for pipeline in pipelines:\n        if 'id' not in pipeline:\n            raise Exception('Every pipeline must have id.')\n        if 'name' not in pipeline:\n            pipeline['name'] = pipeline['id']\n    found = False\n    pipeline_spec = None\n    for pipeline in pipelines:\n        if pipeline['id'] == selected_pipeline:\n            found = True\n            pipeline_spec = pipeline\n            break\n    if not found:\n        pipeline_spec = {'id': 'classic', 'name': 'Include everything'}\n    combined_tabs = []\n    for tab_spec in tabs:\n        if pipeline_spec.get('include_tabs'):\n            if tab_spec['id'] not in pipeline_spec['include_tabs']:\n                continue\n        if tab_spec['id'] not in [tab['id'] for tab in combined_tabs]:\n            new_tab = {}\n            new_tab['id'] = tab_spec['id']\n            new_tab['name'] = tab_spec['name']\n            new_tab['inputs'] = []\n            new_tab['outputs'] = []\n            new_tab['input_actions'] = []\n            new_tab['output_actions'] = []\n            new_tab['info'] = []\n            idx = len(combined_tabs)\n            combined_tabs.append(new_tab)\n        else:\n            idx = [tab['id'] for tab in combined_tabs].index(tab_spec['id'])\n        for input_spec in tab_spec['inputs']:\n            if input_spec not in combined_tabs[idx]['inputs']:\n                combined_tabs[idx]['inputs'].append(input_spec)\n        for output_spec in tab_spec['outputs']:\n            if output_spec not in combined_tabs[idx]['outputs']:\n                combined_tabs[idx]['outputs'].append(output_spec)\n        for input_spec in tab_spec['input_actions']:\n            action_spec = action_specs.get(input_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + input_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if input_spec not in combined_tabs[idx]['input_actions']:\n                combined_tabs[idx]['input_actions'].append(input_spec)\n        for output_spec in tab_spec['output_actions']:\n            action_spec = action_specs.get(output_spec)\n            if not action_spec:\n                raise Exception('Cannot read action ' + output_spec + '.')\n            if not include_eeg and 'eeg' in action_spec[2].get('tags', []):\n                continue\n            if output_spec not in combined_tabs[idx]['output_actions']:\n                combined_tabs[idx]['output_actions'].append(output_spec)\n        for info_spec in tab_spec['info']:\n            action_spec = action_specs.get(info_spec)\n            if not action_spec:\n                raise Exception('Cannot read info item ' + info_spec + '.')\n            if info_spec not in combined_tabs[idx]['info']:\n                combined_tabs[idx]['info'].append(info_spec)\n    tabs = []\n    for tab_spec in combined_tabs:\n        tabs.append(construct_tab(tab_spec, action_specs, datatype_specs, window))\n    return tabs", "fn_id": 6, "class_fn": false, "repo": "Teekuningas/meggie", "file": "meggie/mainwindow/dynamic.py", "last_update_at": "2021-01-15T21:21:51+00:00", "pred": {"ppl": 1.890499234199524, "ppl_lower": 2.018796682357788, "ppl/lowercase_ppl": -1.103103756039842, "ppl/zlib": 0.0005874916413934455, "Min_5.0% Prob": 7.887356094285553, "Min_10.0% Prob": 5.365483060771344, "Min_20.0% Prob": 3.1089764962009356, "Min_30.0% Prob": 2.11926874704659, "Min_40.0% Prob": 1.5916173201905959, "Min_50.0% Prob": 1.2747280986937686, "Min_60.0% Prob": 1.0627616990558373}}
{"hexsha": "8ce8096f58ca81419a2edfa556d2c57b16fdd66c", "ext": "py", "lang": "Python", "content": "def deepcopy_and_sign(rlp_signable, privatekey):\n    msg = deepcopy(rlp_signable)\n    msg.sign(privatekey)\n    return msg", "fn_id": 0, "class_fn": false, "repo": "luehrsFred/raidex", "file": "raidex/tests/unit/commitment_service/old_test_swap_commitment.py", "last_update_at": "2021-06-22T05:01:56+00:00", "pred": {"ppl": 6.4926066398620605, "ppl_lower": 6.4926066398620605, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.022538121560295443, "Min_5.0% Prob": 10.382037162780762, "Min_10.0% Prob": 10.164467811584473, "Min_20.0% Prob": 7.843582834516253, "Min_30.0% Prob": 5.879531123421409, "Min_40.0% Prob": 4.817411286490304, "Min_50.0% Prob": 3.81402125954628, "Min_60.0% Prob": 3.1396843293173746}}
{"hexsha": "338af77e36625c6e736374eb318b1d3d29015cd3", "ext": "py", "lang": "Python", "content": "def find_replacement_chord(chord):\n    t = chord.transpose(-chord.bass)\n    if t.pitches == (0, 4, 6, 10):\n        return Chord(bass=0, root=0, pitches=(0, 4, 10)).transpose(chord.bass)\n    if t.pitches == (0, 3, 8, 10):\n        return Chord(bass=0, root=8, pitches=(0, 3, 8)).transpose(chord.bass)\n    if t.pitches == (0, 4, 6, 11):\n        return Chord(bass=0, root=0, pitches=(0, 4, 6, 7, 11)).transpose(chord.bass)\n    if t.pitches == (0, 2, 4, 6, 10):\n        return Chord(bass=0, root=10, pitches=(0, 2, 6, 10)).transpose(chord.bass)\n    raise ValueError('no such chord: ' + str(chord))", "fn_id": 7, "class_fn": false, "repo": "andreasjansson/music-inpainting-bert", "file": "data.py", "last_update_at": "2021-11-25T22:59:11+00:00", "pred": {"ppl": 1.877119541168213, "ppl_lower": 2.060556411743164, "ppl/lowercase_ppl": -1.148057669388969, "ppl/zlib": 0.003180497186530058, "Min_5.0% Prob": 5.986339349013108, "Min_10.0% Prob": 4.613818407058716, "Min_20.0% Prob": 2.9588814602707916, "Min_30.0% Prob": 2.074138579517603, "Min_40.0% Prob": 1.5724486478508632, "Min_50.0% Prob": 1.2586174183073384, "Min_60.0% Prob": 1.054614425903128}}
{"hexsha": "969279abcd7947481d7b6dda02b897ac7a615367", "ext": "py", "lang": "Python", "content": "def main() -> typing.NoReturn:\n    h, w, d = map(int, input().split())\n    I = np.array(sys.stdin.read().split(), dtype=np.int64)\n    a = I[:h * w].reshape(h, w) - 1\n    lr = I[h * w + 1:].reshape(-1, 2) - 1\n    solve(a, d, lr)", "fn_id": 1, "class_fn": false, "repo": "kagemeka/competitive-programming", "file": "src/atcoder/abc089/d/sol_0.py", "last_update_at": "2021-07-11T03:20:10+00:00", "pred": {"ppl": 2.4192142486572266, "ppl_lower": 2.8722362518310547, "ppl/lowercase_ppl": -1.194294539501845, "ppl/zlib": 0.0054198944589427455, "Min_5.0% Prob": 8.841317057609558, "Min_10.0% Prob": 6.702071348826091, "Min_20.0% Prob": 4.203548287090502, "Min_30.0% Prob": 2.9729604439011643, "Min_40.0% Prob": 2.2195863846297326, "Min_50.0% Prob": 1.7634747708604361, "Min_60.0% Prob": 1.4871952645072157}}
{"hexsha": "f25d845a5d072ddbe9a4ba42086800a674959571", "ext": "py", "lang": "Python", "content": "def func_18fc8c7e787b450bb9ba27326af7b455(x):\n    x = sorted(x, reverse=True)\n    rmax = 0.0\n    y = [x[i] for i in xrange(len(x))]\n    return y", "fn_id": 134, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y13R5P1/gepa/generated_py_84001afe6c4e45fca49f21e859b1c46f.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 9.211825370788574, "ppl_lower": 10.576338768005371, "ppl/lowercase_ppl": -1.0622076263139117, "ppl/zlib": 0.017484157677707692, "Min_5.0% Prob": 8.272902170817057, "Min_10.0% Prob": 7.220451082502093, "Min_20.0% Prob": 5.759594202041626, "Min_30.0% Prob": 4.863060054324922, "Min_40.0% Prob": 4.362532266548702, "Min_50.0% Prob": 3.9338208503193326, "Min_60.0% Prob": 3.594201733899671}}
{"hexsha": "35f904677ad8fd1f812f7b5f6172973cf62eaed0", "ext": "py", "lang": "Python", "content": "def mixture_fit(x, K=3, x_w=None, n_itr=100, verbose=False, random_state=0, f_write=None, output_folder=None, suffix=None, fold_number=0):\n    \"\"\"Fit a slope+bump mixture using EM algorithm.\n\n    Args:\n        x ((n,d) ndarray): The covaraites.\n        K (int): The number of bump components.\n        x_w ((n,) ndarray): The weights for each sample.\n        n_itr (int): The maximum number of iterations for the EM algorithm\n        verbose (bool): Indicate if output the computation details.\n        random_state (int): The random seed.\n        f_write (file handler (write mode)): The output file.\n        output_folder (string): The output directory.\n        suffix (string): The suffix of the output file.\n        fold_number (int(0,1)): The fold number.\n\n    Returns:\n        a ((d,) ndarray): slope parameter.\n        mu,sigma ((k,d) ndarray): bump parameter.\n        w ((n,) ndarray): proportion of each component. \n    \"\"\"\n    np.random.seed(random_state)\n    if len(x.shape) == 1:\n        x = x.reshape([-1, 1])\n    n_samp, d = x.shape\n    if x_w is None:\n        x_w = np.ones([n_samp], dtype=float)\n    GMM = GaussianMixture(n_components=K, covariance_type='diag').fit(x)\n    w_old = np.zeros([K + 1])\n    w = 0.5 * np.ones([K + 1]) / K\n    w[0] = 0.5\n    a = ML_slope(x, x_w)\n    mu, sigma = (GMM.means_, GMM.covariances_ ** 0.5)\n    w_samp = np.zeros([K + 1, n_samp], dtype=float)\n    i = 0\n    if verbose:\n        if f_write is not None:\n            f_write.write('## mixture_fit: initialization parameters\\n')\n            f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n            for k in range(K):\n                f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n                f_write.write('         mu=%s\\n' % mu[k])\n                f_write.write('      sigma=%s\\n' % sigma[k])\n            f_write.write('\\n')\n    while np.linalg.norm(w - w_old, 1) > 0.005 and i < n_itr:\n        w_old = w\n        w_samp[0, :] = w[0] * f_slope(x, a)\n        for k in range(K):\n            w_samp[k + 1, :] = w[k + 1] * f_bump(x, mu[k], sigma[k])\n        w_samp = w_samp / np.sum(w_samp, axis=0) * x_w\n        w = np.mean(w_samp, axis=1)\n        a = ML_slope(x, w_samp[0, :])\n        for k in range(K):\n            if w[k + 1] > 0.0001:\n                mu[k], sigma[k] = ML_bump(x, w_samp[k + 1, :])\n        sigma = sigma.clip(min=0.0001)\n        w[w < 0.001] = 0\n        w /= w.sum()\n        i += 1\n    if i >= n_itr and verbose:\n        print('Warning: the model does not converge, w_dif=%0.4f' % np.linalg.norm(w - w_old, 1))\n        if f_write is not None:\n            f_write.write('Warning: the model does not converge, w_dif=%0.4f\\n' % np.linalg.norm(w - w_old, 1))\n    if verbose and f_write is not None:\n        f_write.write('## mixture_fit: learned parameters\\n')\n        f_write.write('# Slope: w=%0.4f, a=%s\\n' % (w[0], a))\n        for k in range(K):\n            f_write.write('# Bump %d: w=%0.4f\\n' % (k, w[k + 1]))\n            f_write.write('         mu=%s\\n' % mu[k])\n            f_write.write('      sigma=%s\\n' % sigma[k])\n        f_write.write('\\n')\n    if output_folder is not None:\n        bins_ = np.linspace(0, 1, 101)\n        x_grid = bins_.reshape([-1, 1])\n        if d == 1:\n            plt.figure(figsize=[8, 5])\n            plt.hist(x, bins=bins_, weights=x_w / np.sum(x_w) * 100)\n            temp_p = f_all(x_grid, a, mu, sigma, w)\n            plt.plot(bins_, temp_p)\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        else:\n            plt.figure(figsize=[8, 12])\n            n_figure = min(d, 5)\n            for i_dim in range(n_figure):\n                plt.subplot(str(n_figure) + '1' + str(i_dim + 1))\n                plt.hist(x[:, i_dim], bins=bins_, weights=x_w / np.sum(x_w) * 100)\n                temp_p = f_all(x_grid, a[[i_dim]], mu[:, [i_dim]], sigma[:, [i_dim]], w)\n                plt.plot(bins_, temp_p)\n                plt.title('Dimension %d' % (i_dim + 1))\n            plt.savefig(output_folder + '/projection%s_fold_%d.png' % (suffix, fold_number))\n        plt.close('all')\n    return (a, mu, sigma, w)", "fn_id": 14, "class_fn": false, "repo": "martinjzhang/adafdr", "file": "adafdr/method.py", "last_update_at": "2021-05-21T09:23:58+00:00", "pred": {"ppl": 2.302872896194458, "ppl_lower": 2.355161190032959, "ppl/lowercase_ppl": -1.0269154735621053, "ppl/zlib": 0.0006192705484625108, "Min_5.0% Prob": 8.28339261634677, "Min_10.0% Prob": 6.072021072986079, "Min_20.0% Prob": 3.8377796265424466, "Min_30.0% Prob": 2.7140072151726367, "Min_40.0% Prob": 2.0696354730095723, "Min_50.0% Prob": 1.6669119906642724, "Min_60.0% Prob": 1.3915042066954222}}
{"hexsha": "184edbc2fe82843b354712c8ba7f81417e3fb3d2", "ext": "py", "lang": "Python", "content": "def main(arguments):\n    cap = cv2.VideoCapture(arguments.video)\n    model: tf.keras.Model = tf.keras.models.load_model(arguments.weights_path)\n    model.compile(optimizer='adam', loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n    classes = get_classes(os.path.join(arguments.data_path, 'training_set'))\n    success, img = cap.read()\n    while success:\n        img_pp = preprocess_image(img, INPUT_SHAPE)\n        x = model.predict(np.expand_dims(img_pp, 0), batch_size=1)\n        img_out = write_class_on_img(img_pp, classes[int(np.argmax(np.array(x)))])\n        cv2.imshow('EfficientNet Prediction', img_out)\n        cv2.waitKey(10)\n        success, img = cap.read()", "fn_id": 0, "class_fn": false, "repo": "vincenzosantopietro/Action-Recognition-EfficientNet-TensorFlow", "file": "demo.py", "last_update_at": "2021-08-24T06:48:24+00:00", "pred": {"ppl": 2.9260945320129395, "ppl_lower": 3.7334980964660645, "ppl/lowercase_ppl": -1.226957377517909, "ppl/zlib": 0.0026575955684842215, "Min_5.0% Prob": 8.948984527587891, "Min_10.0% Prob": 6.889640376681373, "Min_20.0% Prob": 4.734043512233468, "Min_30.0% Prob": 3.430672875734476, "Min_40.0% Prob": 2.6711078339884446, "Min_50.0% Prob": 2.1507959779076002, "Min_60.0% Prob": 1.7910961069811422}}
{"hexsha": "3836b014a35e2f166dd6e956235064be019753de", "ext": "py", "lang": "Python", "content": "def createSampleFile(sampleFilePath):\n    if not os.path.exists(sampleFilePath):\n        _dir = os.path.dirname(sampleFilePath)\n        if not os.path.exists(_dir):\n            os.makedirs(_dir, mode=493)\n        import uuid\n        with open(sampleFilePath, 'w') as f:\n            f.write(str(uuid.uuid1()) + '\\n')\n            f.write(str(uuid.uuid4()) + '\\n')\n    return sampleFilePath", "fn_id": 0, "class_fn": false, "repo": "Fanduzi/huaweicloud-sdk-python-obs", "file": "examples/download_sample.py", "last_update_at": "2021-12-13T07:21:48+00:00", "pred": {"ppl": 2.185767889022827, "ppl_lower": 2.3622524738311768, "ppl/lowercase_ppl": -1.0992987917428076, "ppl/zlib": 0.004417893804699928, "Min_5.0% Prob": 7.686700344085693, "Min_10.0% Prob": 5.685480165481567, "Min_20.0% Prob": 3.7546786155019487, "Min_30.0% Prob": 2.5870772185735404, "Min_40.0% Prob": 1.9541206359863281, "Min_50.0% Prob": 1.5622680845187493, "Min_60.0% Prob": 1.3191992796419072}}
{"hexsha": "8ee4e5b90ef2f57ff31c13abfc6ea37b6aa9f151", "ext": "py", "lang": "Python", "content": "def cosine_similarity(A, B):\n    t1 = vector_multiply(A, B)\n    t2 = sqrt(vector_multiply(A, A))\n    t3 = sqrt(vector_multiply(B, B))\n    if t2 > 0 and t3 > 0:\n        return t1 / (t2 * t3)\n    else:\n        return 0", "fn_id": 0, "class_fn": false, "repo": "Pengeace/LncRNA-Disease-link", "file": "sample/parallel_prediction_CV.py", "last_update_at": "2021-12-12T13:15:20+00:00", "pred": {"ppl": 2.078815460205078, "ppl_lower": 2.013554334640503, "ppl/lowercase_ppl": -0.956413184270811, "ppl/zlib": 0.005762190875637966, "Min_5.0% Prob": 8.755160689353943, "Min_10.0% Prob": 6.2486661076545715, "Min_20.0% Prob": 3.633805544115603, "Min_30.0% Prob": 2.465156253116826, "Min_40.0% Prob": 1.8659147828584537, "Min_50.0% Prob": 1.4614993888067036, "Min_60.0% Prob": 1.2243355002767426}}
{"hexsha": "0a460dfb309ddfb8343e04a6b02b1cc8858e4c42", "ext": "py", "lang": "Python", "content": "def import_no_virt_driver_import_deps(physical_line, filename):\n    \"\"\"Check virt drivers' modules aren't imported by other drivers\n\n    Modules under each virt driver's directory are\n    considered private to that virt driver. Other drivers\n    in Nova must not access those drivers. Any code that\n    is to be shared should be refactored into a common\n    module\n\n    N311\n    \"\"\"\n    thisdriver = _get_virt_name(virt_file_re, filename)\n    thatdriver = _get_virt_name(virt_import_re, physical_line)\n    if thatdriver is not None and thisdriver is not None and (thisdriver != thatdriver):\n        return (0, 'N311: importing code from other virt drivers forbidden')", "fn_id": 4, "class_fn": false, "repo": "KevinWang2015/nova", "file": "nova/hacking/checks.py", "last_update_at": "2021-05-12T07:52:44+00:00", "pred": {"ppl": 7.371403217315674, "ppl_lower": 9.63550090789795, "ppl/lowercase_ppl": -1.1340834606757988, "ppl/zlib": 0.006090268548520882, "Min_5.0% Prob": 9.729626059532166, "Min_10.0% Prob": 8.474096149206161, "Min_20.0% Prob": 6.852800905704498, "Min_30.0% Prob": 5.602110862731934, "Min_40.0% Prob": 4.69764773112077, "Min_50.0% Prob": 3.889313997291937, "Min_60.0% Prob": 3.3155030375536607}}
{"hexsha": "8a91b3f07767ea74f9a6d8cb283d9cb8dd32dbfa", "ext": "py", "lang": "Python", "content": "def task_factory(name, func=None, vars=None, color='GREEN', ext_in=[], ext_out=[], before=[], after=[], shell=False, scan=None):\n    params = {'vars': vars or [], 'color': color, 'name': name, 'ext_in': Utils.to_list(ext_in), 'ext_out': Utils.to_list(ext_out), 'before': Utils.to_list(before), 'after': Utils.to_list(after), 'shell': shell, 'scan': scan}\n    if isinstance(func, str):\n        params['run_str'] = func\n    else:\n        params['run'] = func\n    cls = type(Task)(name, (Task,), params)\n    global classes\n    classes[name] = cls\n    return cls", "fn_id": 8, "class_fn": false, "repo": "He-Ze/Distributed-System-SYSU", "file": "\u4f5c\u4e1a/\u4f5c\u4e1a5/nack-oriented-reliable-multicast-master/norm-1.5r6/.waf3-1.8.11-930623f783bdf2f01355c2002e2b4462/waflib/Task.py", "last_update_at": "2021-09-17T07:35:05+00:00", "pred": {"ppl": 2.6309309005737305, "ppl_lower": 3.096245050430298, "ppl/lowercase_ppl": -1.1683510925652623, "ppl/zlib": 0.003430275667210272, "Min_5.0% Prob": 9.263025045394897, "Min_10.0% Prob": 7.018290884354535, "Min_20.0% Prob": 4.561738876735463, "Min_30.0% Prob": 3.1980769336223602, "Min_40.0% Prob": 2.4048869305330776, "Min_50.0% Prob": 1.9404911733080827, "Min_60.0% Prob": 1.6234192221235593}}
{"hexsha": "1407f6d79ec90ec0ceecb5413d805601158c4cae", "ext": "py", "lang": "Python", "content": "def get_bot() -> Bot:\n    for bot in DRIVER.bots.values():\n        return bot\n    return None", "fn_id": 0, "class_fn": false, "repo": "7sDream/nonebot_plugin_bam", "file": "nonebot_plugin_bam/common.py", "last_update_at": "2021-12-28T07:13:51+00:00", "pred": {"ppl": 5.378815174102783, "ppl_lower": 12.821512222290039, "ppl/lowercase_ppl": -1.5162988048013422, "ppl/zlib": 0.021297064836177725, "Min_5.0% Prob": 7.824894905090332, "Min_10.0% Prob": 7.797749042510986, "Min_20.0% Prob": 7.088185787200928, "Min_30.0% Prob": 5.171630689076015, "Min_40.0% Prob": 4.239339305294885, "Min_50.0% Prob": 3.3201877077420554, "Min_60.0% Prob": 2.863417910678046}}
{"hexsha": "8b6e4daf34e200f38605973d93690899eefdcfed", "ext": "py", "lang": "Python", "content": "def check_build_is_legit(build):\n    build_string = build.lower()\n    build_number = build_string.replace('build', '')\n    if build_number in BUILD_MAP.keys():\n        return True\n    return False", "fn_id": 1, "class_fn": false, "repo": "EBISPOT/gwas-sumstats-validator", "file": "validate/validator.py", "last_update_at": "2021-04-14T17:38:42+00:00", "pred": {"ppl": 4.720393657684326, "ppl_lower": 5.7075700759887695, "ppl/lowercase_ppl": -1.1223675067615768, "ppl/zlib": 0.011495497764233113, "Min_5.0% Prob": 8.205528497695923, "Min_10.0% Prob": 6.938325309753418, "Min_20.0% Prob": 5.7351508140563965, "Min_30.0% Prob": 4.677403418223063, "Min_40.0% Prob": 3.733190643787384, "Min_50.0% Prob": 2.9911779383054147, "Min_60.0% Prob": 2.547024099096175}}
{"hexsha": "eb4e6315d4870bd2d06b1d9423ac6fcf2195cdeb", "ext": "py", "lang": "Python", "content": "def SOIC(A, B, L, T, W, num_pins, pitch=1.27, profile=ipc.LandPatternSize.Nominal):\n    f = fp.Footprint(name='{0}-SOIC'.format(num_pins), description='{0}-pin SOIC'.format(num_pins))\n    f.from_ipc(lib.SOIC(profile, A, B, L, T, W, num_pins, pitch))\n    return f", "fn_id": 2, "class_fn": false, "repo": "TheWylieStCoyote/kidraw", "file": "kidraw/footprint/library.py", "last_update_at": "2021-01-11T20:14:23+00:00", "pred": {"ppl": 7.667397975921631, "ppl_lower": 9.366260528564453, "ppl/lowercase_ppl": -1.0982517649301586, "ppl/zlib": 0.011508346389127512, "Min_5.0% Prob": 10.137309265136718, "Min_10.0% Prob": 9.049896717071533, "Min_20.0% Prob": 7.265616011619568, "Min_30.0% Prob": 5.8985885302225745, "Min_40.0% Prob": 4.749088028582131, "Min_50.0% Prob": 3.9682672982122384, "Min_60.0% Prob": 3.3903571328178783}}
{"hexsha": "4f4f6f8ac9dec0a03002fe61bd6214effc3be501", "ext": "py", "lang": "Python", "content": "def change_request_wrapper(func):\n\n    @functools.wraps(func)\n    def _inner(prep_req, *args, **kwargs):\n        prep_req.url = prep_req.url + '?some=stuff'\n        return func(prep_req, *args, **kwargs)\n    return _inner", "fn_id": 0, "class_fn": false, "repo": "HappyEinara/pytest-vts", "file": "tests/test_request_wrapper.py", "last_update_at": "2021-12-13T23:15:20+00:00", "pred": {"ppl": 3.7810239791870117, "ppl_lower": 3.7810239791870117, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009999961405347136, "Min_5.0% Prob": 9.81249745686849, "Min_10.0% Prob": 7.927798679896763, "Min_20.0% Prob": 5.634421059063503, "Min_30.0% Prob": 4.232237302121662, "Min_40.0% Prob": 3.300076729484967, "Min_50.0% Prob": 2.65762861551983, "Min_60.0% Prob": 2.216451201715418}}
{"hexsha": "5ad02454c22c71588ac4c352b70a914a8fe47bc8", "ext": "py", "lang": "Python", "content": "def test_set_args_settings(mocker):\n    mocker.patch('json.load', new=lambda x: x())\n    args = Namespace()\n    set_args(args)\n    assert args.settings == {}\n    args = Namespace(settings=None)\n    set_args(args)\n    assert args.settings == {}\n    s = list(range(3))\n    mock = MagicMock(return_value=s)\n    args = Namespace(settings=mock)\n    set_args(args)\n    assert args.settings == s\n    mock.close.assert_called_with()", "fn_id": 10, "class_fn": false, "repo": "akx/markovchain", "file": "tests/cli/test_util.py", "last_update_at": "2021-06-05T15:38:34+00:00", "pred": {"ppl": 3.2305660247802734, "ppl_lower": 3.8573520183563232, "ppl/lowercase_ppl": -1.1512151686347951, "ppl/zlib": 0.00610759042579118, "Min_5.0% Prob": 9.755284468332926, "Min_10.0% Prob": 7.576491117477417, "Min_20.0% Prob": 5.109125450253487, "Min_30.0% Prob": 3.703789733551644, "Min_40.0% Prob": 2.9165476165255724, "Min_50.0% Prob": 2.3315806319156, "Min_60.0% Prob": 1.9620691386328355}}
{"hexsha": "714d3dfaa367d1733c257ba0266824ee7c931162", "ext": "py", "lang": "Python", "content": "def getAllClass(p, period):\n    data = {}\n    data['{}'.format(period)] = getRawAssignments(p, period)\n    data['assignments'] = data.pop('{}'.format(period))\n    data['info'] = getRawClass(p)['{}'.format(period)]\n    return data", "fn_id": 5, "class_fn": false, "repo": "Grant2464/powerschool_api", "file": "powerschool.py", "last_update_at": "2021-11-02T17:43:43+00:00", "pred": {"ppl": 7.230748176574707, "ppl_lower": 6.895401954650879, "ppl/lowercase_ppl": -0.9759962156940009, "ppl/zlib": 0.015577500102786784, "Min_5.0% Prob": 10.69636058807373, "Min_10.0% Prob": 9.31511656443278, "Min_20.0% Prob": 7.45074478785197, "Min_30.0% Prob": 6.1377807060877485, "Min_40.0% Prob": 4.824006128311157, "Min_50.0% Prob": 3.9729098254634487, "Min_60.0% Prob": 3.355112784617656}}
{"hexsha": "4bf042cd1a9ebeebeb1cce1bd259939ff32e8532", "ext": "py", "lang": "Python", "content": "def ret_a_dict(existing):\n    \"\"\"\n    Append a key-value to 'existing' (if it exists)\n    \"\"\"\n    existing = existing or {}\n    ret = {'secret': 42}\n    ret.update(existing)\n    return ret", "fn_id": 1, "class_fn": false, "repo": "siriobalmelli/replacement", "file": "tests/demo.py", "last_update_at": "2021-02-07T16:24:31+00:00", "pred": {"ppl": 8.284655570983887, "ppl_lower": 8.507067680358887, "ppl/lowercase_ppl": -1.012529402562018, "ppl/zlib": 0.01664885887725457, "Min_5.0% Prob": 9.66129207611084, "Min_10.0% Prob": 8.90645236968994, "Min_20.0% Prob": 7.578911590576172, "Min_30.0% Prob": 6.2054511706034345, "Min_40.0% Prob": 4.902474045753479, "Min_50.0% Prob": 4.124184895020265, "Min_60.0% Prob": 3.5566870714387586}}
{"hexsha": "0e12d22364ddbf0f90693961db9219ea9d1c3443", "ext": "py", "lang": "Python", "content": "def get_uwsgi_emperor_opts(settings, port):\n    if settings['DATABASES']['default'].get('PASSWORD'):\n        os.environ['DB_PASSWORD'] = settings['DATABASES']['default']['PASSWORD']\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} password=$(DB_PASSWORD) dbname={NAME};{query}'\n    else:\n        pg_str = 'pg://host={HOST} port={PORT} user={USER} dbname={NAME};{query}'\n    return get_uwsgi_regular_opts(settings, port) + ['http = 0.0.0.0:{}'.format(port or settings.get('PORT')), 'http-to = /tmp/fastrouter.sock', 'fastrouter = /tmp/fastrouter.sock', 'fastrouter-use-code-string = 0:{}:get'.format(os.path.join(HERE, 'fastrouter_lookup.py')), 'emperor = {}'.format(pg_str.format(query=VASSALS_SQL_QUERY, **settings['DATABASES']['default']))]", "fn_id": 3, "class_fn": false, "repo": "yakky/django-multisite-plus", "file": "django_multisite_plus/cli.py", "last_update_at": "2021-08-17T20:18:51+00:00", "pred": {"ppl": 4.3335795402526855, "ppl_lower": 4.503994464874268, "ppl/lowercase_ppl": -1.0263031496222874, "ppl/zlib": 0.003973967165747405, "Min_5.0% Prob": 10.76650599638621, "Min_10.0% Prob": 8.671485841274261, "Min_20.0% Prob": 6.246577630440394, "Min_30.0% Prob": 4.730596911576059, "Min_40.0% Prob": 3.6378017476539024, "Min_50.0% Prob": 2.9378808508973475, "Min_60.0% Prob": 2.456125604200723}}
{"hexsha": "d83d43b9c49703cda927b344f9e7b3b7da45f5b3", "ext": "py", "lang": "Python", "content": "def read_kitti_annotations(label_paths, calib_paths):\n    all_labels = []\n    all_calib = []\n    for label_file, calib_file in zip(label_paths, calib_paths):\n        calib = o3d.ml.datasets.KITTI.read_calib(calib_file)\n        labels = o3d.ml.datasets.KITTI.read_label(label_file, calib)\n        all_labels.append(labels)\n        all_calib.append(calib)\n    return (all_labels, all_calib)", "fn_id": 1, "class_fn": false, "repo": "supervisely-ecosystem/Open3D-ML", "file": "supervisely/src_backup/convert_kitty3d_to_sly.py", "last_update_at": "2021-08-31T09:06:08+00:00", "pred": {"ppl": 1.9553805589675903, "ppl_lower": 2.0241470336914062, "ppl/lowercase_ppl": -1.051542412438009, "ppl/zlib": 0.003898749033791412, "Min_5.0% Prob": 7.798142115275065, "Min_10.0% Prob": 5.796695431073506, "Min_20.0% Prob": 3.3145310819149016, "Min_30.0% Prob": 2.2216138108388375, "Min_40.0% Prob": 1.6988080197572708, "Min_50.0% Prob": 1.3508376838225458, "Min_60.0% Prob": 1.1204131663973003}}
{"hexsha": "07fe364d937fe8b983df03d9c0471b986fbd990b", "ext": "py", "lang": "Python", "content": "def _add_workload_inner():\n    OpArgMngr.add_workload('inner', np.zeros(shape=(1, 80), dtype=np.float64), np.zeros(shape=(1, 80), dtype=np.float64))\n    for dt in [np.float32, np.float64]:\n        A = np.array([[1, 2], [3, 4]], dtype=dt)\n        B = np.array([[1, 3], [2, 4]], dtype=dt)\n        C = np.array([1, 1], dtype=dt)\n        OpArgMngr.add_workload('inner', A.T, C)\n        OpArgMngr.add_workload('inner', C, A.T)\n        OpArgMngr.add_workload('inner', B, C)\n        OpArgMngr.add_workload('inner', C, B)\n        OpArgMngr.add_workload('inner', A, B)\n        OpArgMngr.add_workload('inner', A, A)\n        OpArgMngr.add_workload('inner', A, A.copy())\n        a = np.arange(5).astype(dt)\n        b = a[::-1]\n        OpArgMngr.add_workload('inner', b, a)\n        a = np.arange(24).reshape(2, 3, 4).astype(dt)\n        b = np.arange(24, 48).reshape(2, 3, 4).astype(dt)\n        OpArgMngr.add_workload('inner', a, b)\n        OpArgMngr.add_workload('inner', b, a)", "fn_id": 74, "class_fn": false, "repo": "sxjscience/mxnet", "file": "tests/python/unittest/test_numpy_interoperability.py", "last_update_at": "2021-03-23T03:07:38+00:00", "pred": {"ppl": 1.782095193862915, "ppl_lower": 1.9496182203292847, "ppl/lowercase_ppl": -1.1554957007856435, "ppl/zlib": 0.0021803386690490423, "Min_5.0% Prob": 6.2830616103278265, "Min_10.0% Prob": 4.52175598531156, "Min_20.0% Prob": 2.7222468308607737, "Min_30.0% Prob": 1.902535957550364, "Min_40.0% Prob": 1.4387886612862348, "Min_50.0% Prob": 1.1577153060943846, "Min_60.0% Prob": 0.9628876293533378}}
{"hexsha": "0460f6e42c23c688c2c6afb0f673aa2cf4d651bf", "ext": "py", "lang": "Python", "content": "def load_state(network, state_dict):\n    net_state_keys = list(network.state_dict().keys())\n    net_state_keys_copy = net_state_keys.copy()\n    sup_string = ''\n    for key in state_dict.keys():\n        if 'backbone' in key:\n            sup_string = 'backbone.'\n        elif 'module' in key:\n            sup_string = 'module.'\n    for i, _ in enumerate(net_state_keys_copy):\n        name = net_state_keys_copy[i]\n        if name.startswith('classifier') or name.startswith('fc'):\n            continue\n        if not sup_string:\n            name_pretrained = name\n        else:\n            name_pretrained = sup_string + name\n        if name_pretrained in state_dict.keys():\n            dst_param_shape = network.state_dict()[name].shape\n            if state_dict[name_pretrained].shape == dst_param_shape:\n                network.state_dict()[name].copy_(state_dict[name_pretrained].view(dst_param_shape))\n                net_state_keys.remove(name)\n    if net_state_keys:\n        num_batches_list = []\n        for i in range(len(net_state_keys)):\n            if 'num_batches_tracked' in net_state_keys[i]:\n                num_batches_list.append(net_state_keys[i])\n        pruned_additional_states = [x for x in net_state_keys if x not in num_batches_list]\n        if pruned_additional_states:\n            logging.info('There are layers in current network not initialized by pretrained')\n            logging.warning('>> Failed to load: {}'.format(pruned_additional_states))\n        return False\n    return True", "fn_id": 0, "class_fn": false, "repo": "xuyu0010/PATAN", "file": "network/util.py", "last_update_at": "2021-12-27T19:45:45+00:00", "pred": {"ppl": 1.910129189491272, "ppl_lower": 2.022270917892456, "ppl/lowercase_ppl": -1.0881532534950427, "ppl/zlib": 0.001246957376200897, "Min_5.0% Prob": 7.115865707397461, "Min_10.0% Prob": 4.925451107514211, "Min_20.0% Prob": 3.0368437277965055, "Min_30.0% Prob": 2.1294357385645566, "Min_40.0% Prob": 1.6185862075728483, "Min_50.0% Prob": 1.293210707001426, "Min_60.0% Prob": 1.0793972824645683}}
{"hexsha": "f6b4cf055a04d3fdf48e80ef79e23515af8b5c83", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='function')\ndef boto_status():\n    status_mock = Mock()\n    status_mock.get_status.side_effect = ['PENDING', 'INSYNC']\n\n    def update():\n        status_mock.status = status_mock.get_status()\n    status_mock.update.side_effect = update\n    status_mock.status = 'PENDING'\n    return status_mock", "fn_id": 0, "class_fn": false, "repo": "dron22/r53dyndns", "file": "r53dyndns/tests/test_r53updater.py", "last_update_at": "2021-05-13T21:14:44+00:00", "pred": {"ppl": 3.0297694206237793, "ppl_lower": 3.6145691871643066, "ppl/lowercase_ppl": -1.1592136252221399, "ppl/zlib": 0.006677629625431227, "Min_5.0% Prob": 7.909464716911316, "Min_10.0% Prob": 6.167084485292435, "Min_20.0% Prob": 4.447358229581048, "Min_30.0% Prob": 3.437704019821607, "Min_40.0% Prob": 2.773064722033108, "Min_50.0% Prob": 2.230962689012982, "Min_60.0% Prob": 1.852502543407564}}
{"hexsha": "cc8172756946d110aef633b85d99fdb465e813dc", "ext": "py", "lang": "Python", "content": "def used_tracks_set(image, all=False):\n    \"\"\"Determine the set of tracks used by directory and files on the disk\"\"\"\n    bam = Disk.from_image(image).bam()\n    used_tracks = set()\n    for head in range(2):\n        for cyl in range(80):\n            track = head << 7 | cyl\n            offset = (80 * head + cyl - 4) * image.spt\n            if all or track <= 4 or bam[offset:offset + image.spt].any():\n                used_tracks.add(track)\n    return used_tracks", "fn_id": 1, "class_fn": false, "repo": "simonowen/writeusb", "file": "mgtwriteusb/writeusb.py", "last_update_at": "2021-08-03T21:10:03+00:00", "pred": {"ppl": 6.839953899383545, "ppl_lower": 7.835747241973877, "ppl/lowercase_ppl": -1.0706868085278574, "ppl/zlib": 0.007722012015082487, "Min_5.0% Prob": 10.541309356689453, "Min_10.0% Prob": 8.865913831270658, "Min_20.0% Prob": 6.980499947512591, "Min_30.0% Prob": 5.53895822763443, "Min_40.0% Prob": 4.525439423543435, "Min_50.0% Prob": 3.7817776514523067, "Min_60.0% Prob": 3.182703749081235}}
{"hexsha": "0261d48fadbcba94432255ef1726dce932739202", "ext": "py", "lang": "Python", "content": "@deprecated(version='0.2.0', reason='Use AnyLE instead')\ndef any_le(bound: Any) -> Any:\n    \"\"\"\n    Returns a matcher that matches any value less than or equal to ``bound``\n    \"\"\"\n    return AnyLE(bound)", "fn_id": 13, "class_fn": false, "repo": "jwodder/anys", "file": "src/anys/__init__.py", "last_update_at": "2021-12-14T23:07:16+00:00", "pred": {"ppl": 4.205167770385742, "ppl_lower": 7.7346930503845215, "ppl/lowercase_ppl": -1.4242815489917777, "ppl/zlib": 0.009266543164267955, "Min_5.0% Prob": 12.1753511428833, "Min_10.0% Prob": 9.18538236618042, "Min_20.0% Prob": 5.483345920389349, "Min_30.0% Prob": 4.06194489142474, "Min_40.0% Prob": 3.3435410911386665, "Min_50.0% Prob": 2.766464597412518, "Min_60.0% Prob": 2.3491429607657826}}
{"hexsha": "8521926dba5b85612435ecc4000212db9efd4499", "ext": "py", "lang": "Python", "content": "def test_previous_benefit_put_unauthenticated(anonymous_client, previous_benefit):\n    data = PreviousBenefitSerializer(previous_benefit).data\n    data['monthly_amount'] = '1234.56'\n    response = anonymous_client.put(get_previous_benefits_detail_url(previous_benefit), data)\n    assert response.status_code == 403", "fn_id": 7, "class_fn": false, "repo": "City-of-Helsinki/kesaseteli", "file": "backend/benefit/calculator/tests/test_previous_benefits_api.py", "last_update_at": "2021-05-17T12:15:34+00:00", "pred": {"ppl": 3.2714710235595703, "ppl_lower": 4.332432746887207, "ppl/lowercase_ppl": -1.2369895916241196, "ppl/zlib": 0.006512306253047334, "Min_5.0% Prob": 10.952740907669067, "Min_10.0% Prob": 8.08398973941803, "Min_20.0% Prob": 5.372251012746026, "Min_30.0% Prob": 3.9056146430969236, "Min_40.0% Prob": 2.9736367380794357, "Min_50.0% Prob": 2.3664766193129294, "Min_60.0% Prob": 1.9979460720776343}}
{"hexsha": "9c1f3df34d1f27d3dbdd982cd272b1268f3600c6", "ext": "py", "lang": "Python", "content": "def inference(net, data_label, use_aux):\n    if use_aux:\n        img, cls_label, seg_label = data_label\n        img, cls_label, seg_label = (img.cuda(), cls_label.long().cuda(), seg_label.long().cuda())\n        cls_out, seg_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label, 'seg_out': seg_out, 'seg_label': seg_label}\n    else:\n        img, cls_label = data_label\n        img, cls_label = (img.cuda(), cls_label.long().cuda())\n        cls_out = net(img)\n        return {'cls_out': cls_out, 'cls_label': cls_label}", "fn_id": 0, "class_fn": false, "repo": "kjannakh/Ultra-Fast-Lane-Detection", "file": "train.py", "last_update_at": "2021-09-12T20:02:53+00:00", "pred": {"ppl": 1.7196282148361206, "ppl_lower": 1.7196282148361206, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0031335729092233353, "Min_5.0% Prob": 6.981556445360184, "Min_10.0% Prob": 4.828023447709925, "Min_20.0% Prob": 2.695257115789822, "Min_30.0% Prob": 1.8050623775793697, "Min_40.0% Prob": 1.369768526405096, "Min_50.0% Prob": 1.0902044754448896, "Min_60.0% Prob": 0.9051885278450703}}
{"hexsha": "9cf488ea53f16e45eefa82773cf77f48e6b49c9a", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef mock_trained_emulator(mock_emulator):\n    filename = os.path.join(test_base, 'data', 'emu.hdf5')\n    if os.path.exists(filename):\n        yield Emulator.load(filename)\n    else:\n        mock_emulator.train()\n        mock_emulator.save(filename)\n        yield mock_emulator", "fn_id": 6, "class_fn": false, "repo": "spencerhurt/Starfish", "file": "tests/conftest.py", "last_update_at": "2021-05-13T16:23:26+00:00", "pred": {"ppl": 3.016281843185425, "ppl_lower": 3.2452445030212402, "ppl/lowercase_ppl": -1.066271874980493, "ppl/zlib": 0.006943552799444215, "Min_5.0% Prob": 9.603583693504333, "Min_10.0% Prob": 7.290372133255005, "Min_20.0% Prob": 4.878410756587982, "Min_30.0% Prob": 3.5404708286126456, "Min_40.0% Prob": 2.7372088716365397, "Min_50.0% Prob": 2.2011928635649385, "Min_60.0% Prob": 1.838124797757094}}
{"hexsha": "511d2698d35dc4f9fe7517171c56725c07784116", "ext": "py", "lang": "Python", "content": "def make_char_dict():\n    chars = string.ascii_lowercase\n    char_dict = {'<blank>': 0}\n    for idx, c in enumerate(chars):\n        char_dict[c] = idx + 1\n    current_len = len(list(char_dict.keys()))\n    char_dict['<eos>'] = current_len\n    print(char_dict)\n    return char_dict", "fn_id": 0, "class_fn": false, "repo": "duguqiankun/lips_reading", "file": "cnn2d/cnn2d_image_generator.py", "last_update_at": "2021-11-14T13:10:30+00:00", "pred": {"ppl": 2.542328119277954, "ppl_lower": 2.542328119277954, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.005393527419758401, "Min_5.0% Prob": 9.44477891921997, "Min_10.0% Prob": 6.877967149019241, "Min_20.0% Prob": 4.442918567096486, "Min_30.0% Prob": 3.136462638584467, "Min_40.0% Prob": 2.359512163272926, "Min_50.0% Prob": 1.8851861348375678, "Min_60.0% Prob": 1.566654511784502}}
{"hexsha": "67a636a6cf8ea63426b938047e0e18deaa078baf", "ext": "py", "lang": "Python", "content": "def test_project_creation_without_pylint(cookies):\n    with generate_temporary_project(cookies, extra_context=NO_PLINT) as result:\n        assert_successful_creation(result)\n        assert_expected_files_exist(result, files=EXPECTED_PROJECT_FILES_NO_PYLINT)\n        assert_expected_files_do_not_exist(result, files=('pylintrc',))", "fn_id": 4, "class_fn": false, "repo": "mendix/python-project-template", "file": "tests/test_project_creation.py", "last_update_at": "2021-07-31T12:31:00+00:00", "pred": {"ppl": 3.974715232849121, "ppl_lower": 4.171363830566406, "ppl/lowercase_ppl": -1.0349938949471487, "ppl/zlib": 0.0068314510198279645, "Min_5.0% Prob": 9.334850668907166, "Min_10.0% Prob": 7.197546746995714, "Min_20.0% Prob": 5.460465298758613, "Min_30.0% Prob": 4.224628161501001, "Min_40.0% Prob": 3.3877124587694802, "Min_50.0% Prob": 2.766215331024594, "Min_60.0% Prob": 2.320635732608261}}
{"hexsha": "4ab2bfd86a6ca0acdb74024739a1d2b31d9cbebd", "ext": "py", "lang": "Python", "content": "def zero_shot_transform(image, caption, p=0.5, transform_to_apply='solarized'):\n    \"\"\"\n    Output PIL.Image of a two-panel style transfer image with an english word describing the transform included in the caption.\n    See OpenAI DALL-E blog post for more details:\n    The top half of the image is the original image, and the bottom half is a stylized image.\n    \"\"\"\n    if p >= 0.5:\n        friendly_transform = transform_to_apply.replace('_', ' ')\n        style_caption = 'Two panel image of the exact same picture.' + f'On the top {caption} and on the bottom the same image but with {friendly_transform} applied.' + f'The original image is on the top and the {friendly_transform} image on the bottom. The caption is {caption}.'\n        style_image_transform = transform_lookup[transform_to_apply]\n        return (two_panel_style_transfer(image, img_transform=style_image_transform, resize_ratio=1.0), style_caption)\n    return (image, style_caption)", "fn_id": 3, "class_fn": false, "repo": "afiaka87/ZeroShotTransform", "file": "transforms.py", "last_update_at": "2021-07-20T00:07:04+00:00", "pred": {"ppl": 7.089012622833252, "ppl_lower": 7.750818252563477, "ppl/lowercase_ppl": -1.0455707183790024, "ppl/zlib": 0.004342674207303425, "Min_5.0% Prob": 10.986709038416544, "Min_10.0% Prob": 9.347866316636404, "Min_20.0% Prob": 7.031054754646457, "Min_30.0% Prob": 5.626956831919004, "Min_40.0% Prob": 4.565544257358629, "Min_50.0% Prob": 3.8012129863103232, "Min_60.0% Prob": 3.2397373034840538}}
{"hexsha": "b605c74be7fc59d0693eaf81e6720e58b5e14ac4", "ext": "py", "lang": "Python", "content": "def func_645e7dad5f4c4c1db11925e9517ff3b9(infile):\n    n, p, q, r, s = [int(x) for x in infile.readline().split()]\n    dev = [(i * p + q) % r + s for i in range(n)]\n    tot = sum(dev)\n    i = 0\n    return q", "fn_id": 88, "class_fn": false, "repo": "DynamicCodeSearch/CodeSeer", "file": "projects/src/main/python/CodeJam/Y14R5P1/Smithers/generated_py_263a1af396df4e8fa1f96950f5309feb.py", "last_update_at": "2021-04-13T20:34:19+00:00", "pred": {"ppl": 4.757993698120117, "ppl_lower": 4.757993698120117, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00968836079129838, "Min_5.0% Prob": 8.98800539970398, "Min_10.0% Prob": 7.223522822062175, "Min_20.0% Prob": 5.2894496122996015, "Min_30.0% Prob": 4.405205760683332, "Min_40.0% Prob": 3.848943260875908, "Min_50.0% Prob": 3.1024434899396085, "Min_60.0% Prob": 2.617267402121797}}
{"hexsha": "fa024eaa7abd499c2cfb6beea3f81e7389c03dac", "ext": "py", "lang": "Python", "content": "def get_pblog(*args, **kwargs):\n    global pblog\n    if pblog is None:\n        pblog = ProgressBarLog(*args, **kwargs)\n    return pblog", "fn_id": 0, "class_fn": false, "repo": "youngyzzZ/Sonographic_Gallbladder_Diagnose", "file": "src/logger.py", "last_update_at": "2021-07-16T10:20:23+00:00", "pred": {"ppl": 3.7872705459594727, "ppl_lower": 7.336132049560547, "ppl/lowercase_ppl": -1.4965030893704263, "ppl/zlib": 0.014166442415696137, "Min_5.0% Prob": 9.580204010009766, "Min_10.0% Prob": 9.447353998819986, "Min_20.0% Prob": 6.571398496627808, "Min_30.0% Prob": 4.4782638929106975, "Min_40.0% Prob": 3.3375417098402975, "Min_50.0% Prob": 2.6531310293235277, "Min_60.0% Prob": 2.2975809264250775}}
{"hexsha": "1183023f80519f66fa1c64d6437b4cc896c39a21", "ext": "py", "lang": "Python", "content": "def main():\n    args = arguments().parse_args()\n    sys.path.insert(0, os.getcwd())\n    conn = get_connection(args)\n    headers = None\n    editfile = tempfile.NamedTemporaryFile()\n    with open(editfile.name, 'w', newline='') as cfile:\n        headers = write_csv(cfile, conn, args.table)\n    reffile = tempfile.NamedTemporaryFile()\n    shutil.copy(editfile.name, reffile.name)\n    call_vim(editfile.name)\n    while True:\n        try:\n            process_changes(reffile, editfile, conn, args.table, headers)\n            break\n        except Exception as err:\n            print('Failed to save changes: ', err)\n            q = '(C)ancel, (r)etry save, (e)dit the file again?'\n            cmd = query_options(q, ('c', 'r', 'e'))\n            if cmd == 'c':\n                print('Changes cancelled')\n                break\n            elif cmd == 'r':\n                continue\n            elif cmd == 'e':\n                call_vim(editfile.name)\n            else:\n                raise ValueError('Not a command')", "fn_id": 14, "class_fn": false, "repo": "BnMcGn/vibase", "file": "src/vibase.py", "last_update_at": "2021-10-17T07:52:04+00:00", "pred": {"ppl": 3.4626688957214355, "ppl_lower": 4.330296993255615, "ppl/lowercase_ppl": -1.1800236253812675, "ppl/zlib": 0.0028618425089205744, "Min_5.0% Prob": 9.009936014811197, "Min_10.0% Prob": 7.336396503448486, "Min_20.0% Prob": 5.287481317333147, "Min_30.0% Prob": 3.9562607846762003, "Min_40.0% Prob": 3.0650270084540048, "Min_50.0% Prob": 2.472558256064076, "Min_60.0% Prob": 2.0765923912472584}}
{"hexsha": "93702be6e0d4de5b5113d03f1b9b9f088babbad8", "ext": "py", "lang": "Python", "content": "def macro_do_exist_op(macro: str, specs: typ.Dict[str, str]) -> str:\n    macro_no_encloser = macro[1:-1]\n    l, r = macro_no_encloser.split(MACRO_OP_EXIST)\n    if l in specs:\n        return specs[with_encloser(l)]\n    else:\n        return specs[with_encloser(r)]", "fn_id": 2, "class_fn": false, "repo": "Tootooroo/VerManager", "file": "manager/basic/macros.py", "last_update_at": "2021-03-18T12:03:54+00:00", "pred": {"ppl": 5.86437463760376, "ppl_lower": 6.706650733947754, "ppl/lowercase_ppl": -1.0758687011564683, "ppl/zlib": 0.010852121780772696, "Min_5.0% Prob": 13.520331621170044, "Min_10.0% Prob": 10.486986743079292, "Min_20.0% Prob": 7.495920446183947, "Min_30.0% Prob": 5.494641691446304, "Min_40.0% Prob": 4.360492801344073, "Min_50.0% Prob": 3.494009289969789, "Min_60.0% Prob": 2.9575629866282855}}
{"hexsha": "0778557121cb9d3021b5bcd3f81aaa9f8612eb04", "ext": "py", "lang": "Python", "content": "def write_glottal_tier(utterance, tao):\n    return_str = ''\n    glottal_dur = utterance.duration\n    for ii in range(len(utterance.duration)):\n        return_str += f'    <gesture value=\"{utterance.glottal[ii]}\" slope=\"0.000000\" duration_s=\"{utterance.duration[ii]:.6f}\" time_constant_s=\"{tao:.6f}\" neutral=\"0\" />\\n'\n    return return_str", "fn_id": 4, "class_fn": false, "repo": "quantling/create_vtl_corpus", "file": "generate_gestural_score.py", "last_update_at": "2021-11-01T02:35:12+00:00", "pred": {"ppl": 6.0642852783203125, "ppl_lower": 6.0642852783203125, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009486403641112617, "Min_5.0% Prob": 11.317661666870118, "Min_10.0% Prob": 9.41308524391868, "Min_20.0% Prob": 6.866315820942754, "Min_30.0% Prob": 5.323353311594794, "Min_40.0% Prob": 4.262431773154632, "Min_50.0% Prob": 3.5531213921413087, "Min_60.0% Prob": 2.980164928280789}}
{"hexsha": "9ec5c4528bc5fd84b15a1a39d42df73c0372c253", "ext": "py", "lang": "Python", "content": "def make_parser():\n    parser = argparse.ArgumentParser('Extract frames from a video. If `-r` and `-n N` parameters are specified, then dump `N` randomly selected frames. If `-s START -i STRIDE` are specified then dump every `STRIDE`-th frame starting from `START` frame.')\n    parser.add_argument('-f', dest='fname', type=str, help='input filename')\n    parser.add_argument('-s', dest='start', default=0, type=int, help='starting frame')\n    parser.add_argument('-i', dest='stride', default=1, type=int, help='stride, interval between successive frames to save.')\n    parser.add_argument('-c', dest='cmap', default='', type=str, help='colormap to conevrt to, default same as original')\n    parser.add_argument('-x', dest='scale', default=1, type=float, help='factor by which to scale the images')\n    parser.add_argument('-r', dest='random', action='store_true', help='extract random frames')\n    parser.add_argument('-n', dest='num', default=-1, type=int, help='number of frames to extract.')\n    parser.add_argument('-o', dest='outdir', default='.', type=str, help='output directory')\n    return parser", "fn_id": 0, "class_fn": false, "repo": "subhacom/argos", "file": "argos/extract_frames.py", "last_update_at": "2021-05-18T01:07:16+00:00", "pred": {"ppl": 2.927551031112671, "ppl_lower": 3.1583070755004883, "ppl/lowercase_ppl": -1.070631432154988, "ppl/zlib": 0.002419293351291034, "Min_5.0% Prob": 9.224819217409406, "Min_10.0% Prob": 7.060044337963236, "Min_20.0% Prob": 4.870941595784549, "Min_30.0% Prob": 3.5262427573231445, "Min_40.0% Prob": 2.6797762267355227, "Min_50.0% Prob": 2.154305435525738, "Min_60.0% Prob": 1.7982424868017968}}
{"hexsha": "328dbe2b5b1e986ae40f5e053574fec17b83fbb1", "ext": "py", "lang": "Python", "content": "def trio_perf_counter():\n    \"\"\"Trio task-local equivalent of time.perf_counter().\n\n    For the current Trio task, return the value (in fractional seconds) of a\n    performance counter, i.e. a clock with the highest available resolution to\n    measure a short duration.  It includes time elapsed during time.sleep,\n    but not trio.sleep.  The reference point of the returned value is\n    undefined, so that only the difference between the results of consecutive\n    calls is valid.\n\n    Performance note: calling this function installs instrumentation on the\n    Trio scheduler which may affect application performance.  The\n    instrumentation is automatically removed when the corresponding tasks\n    have exited.\n    \"\"\"\n    trio_lowlevel.add_instrument(_instrument)\n    task = trio_lowlevel.current_task()\n    return perf_counter() - _instrument.get_elapsed_descheduled_time(task)", "fn_id": 0, "class_fn": false, "repo": "belm0/perf-timer", "file": "src/perf_timer/_trio.py", "last_update_at": "2021-05-29T02:50:31+00:00", "pred": {"ppl": 5.198683738708496, "ppl_lower": 5.600783824920654, "ppl/lowercase_ppl": -1.0451958524939031, "ppl/zlib": 0.003599138572868666, "Min_5.0% Prob": 11.087800237867567, "Min_10.0% Prob": 8.964925213863975, "Min_20.0% Prob": 6.663564706460024, "Min_30.0% Prob": 5.047812362848702, "Min_40.0% Prob": 4.04597959228051, "Min_50.0% Prob": 3.288460131202425, "Min_60.0% Prob": 2.746534762272643}}
{"hexsha": "1c1c76f7c4bea462b7291fe3d05a036ce7b22f07", "ext": "py", "lang": "Python", "content": "def main():\n    if not os.path.exists('benchmark.py'):\n        logging.warning('Please change current path to %s', PYARMOR_PATH)\n        return\n    output = '.benchtest'\n    name = 'bfoo'\n    filename = os.path.join(output, name + '.py')\n    obname = 'obfoo'\n    obfilename = os.path.join(output, obname + '.py')\n    if len(sys.argv) > 1 and 'bootstrap'.startswith(sys.argv[1]):\n        if len(sys.argv) < 5:\n            sys.argv.extend(['1', '1', '1'])\n        obf_mod, obf_code, wrap_mode = sys.argv[2:5]\n        if not os.path.exists(output):\n            logging.info('Create output path: %s', output)\n            os.makedirs(output)\n        else:\n            logging.info('Output path: %s', output)\n        logging.info('Generate test script %s ...', filename)\n        make_test_script(filename)\n        logging.info('Obffuscate test script ...')\n        shutil.copy(filename, obfilename)\n        obffuscate_scripts(output, os.path.basename(obfilename), obf_mod, obf_code, wrap_mode)\n        if not os.path.exists(obfilename):\n            logging.info('Something is wrong to obsfucate the script')\n            return\n        logging.info('Generate obffuscated script %s', obfilename)\n        logging.info('Copy benchmark.py to %s', output)\n        shutil.copy('benchmark.py', output)\n        logging.info('')\n        logging.info('Now change to \"%s\"', output)\n        logging.info('Run \"%s benchmark.py\".', sys.executable)\n        return\n    filename = os.path.basename(filename)\n    if os.path.exists(filename):\n        logging.info('Test script: %s', filename)\n    else:\n        logging.warning('Test script: %s not found', filename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    obfilename = os.path.basename(obfilename)\n    if os.path.exists(obfilename):\n        logging.info('Obfuscated script: %s', obfilename)\n    else:\n        logging.warning('Obfuscated script: %s not found', obfilename)\n        logging.info('Run \"%s benchmark.py bootstrap\" first.', sys.executable)\n        return\n    logging.info('--------------------------------------')\n    logging.info('')\n    total_extra_init_time()\n    logging.info('')\n    foo = import_no_obfuscated_module(name)\n    obfoo = import_obfuscated_module(obname)\n    logging.info('')\n    foo = re_import_no_obfuscated_module(name)\n    obfoo = re_import_obfuscated_module(obname)\n    logging.info('')\n    run_empty_no_obfuscated_code_object(foo)\n    run_empty_obfuscated_code_object(obfoo)\n    logging.info('')\n    run_one_thousand_no_obfuscated_bytecode(foo)\n    run_one_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    run_ten_thousand_no_obfuscated_bytecode(foo)\n    run_ten_thousand_obfuscated_bytecode(obfoo)\n    logging.info('')\n    logging.info('--------------------------------------')", "fn_id": 6, "class_fn": false, "repo": "HildeTeamTNT/pyarmor", "file": "src/benchmark.py", "last_update_at": "2021-04-23T16:33:54+00:00", "pred": {"ppl": 2.39108943939209, "ppl_lower": 2.3232967853546143, "ppl/lowercase_ppl": -0.9670066886167386, "ppl/zlib": 0.0011925432208823904, "Min_5.0% Prob": 8.239983169656051, "Min_10.0% Prob": 6.192751268287758, "Min_20.0% Prob": 4.007735123172883, "Min_30.0% Prob": 2.8458476312170724, "Min_40.0% Prob": 2.1696926820484195, "Min_50.0% Prob": 1.741568868390852, "Min_60.0% Prob": 1.4550766865323126}}
{"hexsha": "07d1a12410a8c57d20254595d70eb26c45d6f0ba", "ext": "py", "lang": "Python", "content": "@app.route('/robots.txt')\n@app.route('/AI_list.xml')\ndef static_from_root():\n    return send_from_directory(app.static_folder, request.path[1:])", "fn_id": 0, "class_fn": false, "repo": "mattarderne/CommitLearn", "file": "src/app.py", "last_update_at": "2021-12-13T20:29:20+00:00", "pred": {"ppl": 2.573310613632202, "ppl_lower": 2.367673873901367, "ppl/lowercase_ppl": -0.9118854674664797, "ppl/zlib": 0.007811514433307412, "Min_5.0% Prob": 12.296962976455688, "Min_10.0% Prob": 9.34865939617157, "Min_20.0% Prob": 4.883325123124653, "Min_30.0% Prob": 3.225996222347021, "Min_40.0% Prob": 2.38648904043887, "Min_50.0% Prob": 1.890017684660658, "Min_60.0% Prob": 1.620182573695534}}
{"hexsha": "241dc5d98f8878f2c0b9e622971ebdf6ac69b24e", "ext": "py", "lang": "Python", "content": "def dye(image, lw=5, rw=5, sh=3, value=255):\n    h, w = image.shape\n    mask = np.ones([h, w], np.uint8)\n    mask *= value\n    mask[2 * int(h / sh):h, int(w / lw):int(w - w / rw)] = 0\n    dst = cv.add(mask, image)\n    return dst", "fn_id": 5, "class_fn": false, "repo": "shinki-alice/-", "file": "V3.py", "last_update_at": "2021-12-08T10:42:49+00:00", "pred": {"ppl": 4.184811592102051, "ppl_lower": 4.184811592102051, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009002903667419281, "Min_5.0% Prob": 9.773726224899292, "Min_10.0% Prob": 7.8241185612148705, "Min_20.0% Prob": 5.365014515425029, "Min_30.0% Prob": 4.23523439679827, "Min_40.0% Prob": 3.393174121254369, "Min_50.0% Prob": 2.8300226039074836, "Min_60.0% Prob": 2.3691406281370866}}
{"hexsha": "585c8c30c7d2aa1d2bbdf2724d7af40b9b92f226", "ext": "py", "lang": "Python", "content": "def get_straightline_path_to(target, robot_pos):\n    pts = []\n    cur_pos = robot_pos\n    while np.linalg.norm(target[:2] - cur_pos[:2]) > 0.5:\n        t = get_step_target_for_move(cur_pos, [target[0], CAMERA_HEIGHT, target[1]], step_size=0.5)\n        pts.append(t)\n        cur_pos = t\n    return np.asarray(pts)", "fn_id": 7, "class_fn": false, "repo": "Jigyasu/droidlet", "file": "droidlet/lowlevel/robot_mover_utils.py", "last_update_at": "2021-09-13T13:25:16+00:00", "pred": {"ppl": 4.228447914123535, "ppl_lower": 4.132696628570557, "ppl/lowercase_ppl": -0.9841140826026993, "ppl/zlib": 0.007067818638971976, "Min_5.0% Prob": 11.550628852844238, "Min_10.0% Prob": 8.43343921141191, "Min_20.0% Prob": 6.004229643128135, "Min_30.0% Prob": 4.59514619364883, "Min_40.0% Prob": 3.5439993401368457, "Min_50.0% Prob": 2.8842081052384207, "Min_60.0% Prob": 2.4246986514485593}}
{"hexsha": "60f2593114913a3c96f097967b6e4f643d2df767", "ext": "py", "lang": "Python", "content": "def root_sum_squares(arr1, arr2):\n    \"\"\"\n    Function to calculate magnitude of two arrays of vectors.\n    \"\"\"\n    rss_arr = np.sqrt(arr1 ** 2 + arr2 ** 2)\n    v_line = np.median(rss_arr)\n    return (rss_arr, v_line)", "fn_id": 5, "class_fn": false, "repo": "geohackweek/ghw2019_planetpieces", "file": "contributors/matt/data_tools.py", "last_update_at": "2021-08-15T12:01:11+00:00", "pred": {"ppl": 5.531421184539795, "ppl_lower": 5.701730728149414, "ppl/lowercase_ppl": -1.017729299272759, "ppl/zlib": 0.011402965186083787, "Min_5.0% Prob": 12.738710403442383, "Min_10.0% Prob": 9.61237348828997, "Min_20.0% Prob": 7.111341612679618, "Min_30.0% Prob": 5.402888439950489, "Min_40.0% Prob": 4.183652762708993, "Min_50.0% Prob": 3.437759945789973, "Min_60.0% Prob": 2.894507705818775}}
{"hexsha": "70e4742585e29853d1350672ced44f958ac66764", "ext": "py", "lang": "Python", "content": "def _extract_metrics(out_lines) -> Tuple[pd.DataFrame, Dict[str, Optional[Union[str, int, float]]]]:\n    loss_table = {'i': [], 'loss': [], 'since_last': []}\n    metrics = {}\n    try:\n        record = False\n        for line in out_lines:\n            line = line.strip()\n            if record:\n                if line == '':\n                    record = False\n                else:\n                    counter_line = line.split()\n                    try:\n                        count, average_loss, since_last = (counter_line[2], counter_line[0], counter_line[1])\n                        average_loss_f = float(average_loss)\n                        since_last_f = float(since_last)\n                        loss_table['i'].append(count)\n                        loss_table['loss'].append(average_loss_f)\n                        loss_table['since_last'].append(since_last_f)\n                    except (ValueError, TypeError):\n                        ...\n            elif line.startswith('loss'):\n                fields = line.split()\n                if fields[0] == 'loss' and fields[1] == 'last' and (fields[2] == 'counter'):\n                    record = True\n            elif '=' in line:\n                key_value = [p.strip() for p in line.split('=')]\n                if key_value[0] == 'average loss':\n                    metrics[key_value[0]] = _parse_loss(key_value[1])\n                else:\n                    metrics[key_value[0]] = _to(key_value[1], [int, float])\n    finally:\n        return (pd.DataFrame(loss_table).set_index('i'), metrics)", "fn_id": 3, "class_fn": false, "repo": "ataymano/data-science", "file": "from_mwt_ds/DataScience/vw_executor/artifacts.py", "last_update_at": "2021-12-15T21:45:13+00:00", "pred": {"ppl": 2.7398416996002197, "ppl_lower": 3.2552192211151123, "ppl/lowercase_ppl": -1.1710084857569256, "ppl/zlib": 0.0019958418710147954, "Min_5.0% Prob": 8.305533700519138, "Min_10.0% Prob": 6.841519329282972, "Min_20.0% Prob": 4.616344298401924, "Min_30.0% Prob": 3.2783313220197505, "Min_40.0% Prob": 2.5085934929194904, "Min_50.0% Prob": 2.01765103591606, "Min_60.0% Prob": 1.6823967182250246}}
{"hexsha": "ee05a0d4fc4e0216722d78972336a384e87d7578", "ext": "py", "lang": "Python", "content": "def show_video():\n    mp4list = glob.glob('video/*.mp4')\n    if len(mp4list) > 0:\n        mp4 = mp4list[0]\n        video = io.open(mp4, 'r+b').read()\n        encoded = base64.b64encode(video)\n        ipythondisplay.display(HTML(data='<video alt=\"test\" autoplay\\n                 controls style=\"height: 400px;\">\\n                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\\n             </video>'.format(encoded.decode('ascii'))))\n    else:\n        print('Could not find video')", "fn_id": 6, "class_fn": false, "repo": "perceptualrobots/pct", "file": "pct/putils.py", "last_update_at": "2021-11-17T14:33:13+00:00", "pred": {"ppl": 1.6789171695709229, "ppl_lower": 1.862888216972351, "ppl/lowercase_ppl": -1.200674006397202, "ppl/zlib": 0.0017867208402988105, "Min_5.0% Prob": 7.523684092930385, "Min_10.0% Prob": 4.78177744547526, "Min_20.0% Prob": 2.5510410229044576, "Min_30.0% Prob": 1.7411396635453338, "Min_40.0% Prob": 1.2944326343375347, "Min_50.0% Prob": 1.0428641258660316, "Min_60.0% Prob": 0.8635605647951873}}
{"hexsha": "e2638a4bcd52d33f3d9e3b6ccc08e027bf129a22", "ext": "py", "lang": "Python", "content": "def build_random_ts(num_samples, length_of_ts):\n    data = {}\n    labels = []\n    for s in range(0, num_samples):\n        labels.append(np.random.choice([1, 2]))\n    data['y'] = labels\n    for col in range(0, length_of_ts):\n        key = 'feature_' + str(col + 1)\n        values = []\n        for s in range(0, num_samples):\n            values.append(np.random.normal())\n        data[key] = values\n    df = pd.DataFrame.from_dict(data)\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, :1]\n    return (X, y)", "fn_id": 19, "class_fn": false, "repo": "AkashPushkar/dsitributed-time-series", "file": "src/full.py", "last_update_at": "2021-06-18T20:51:28+00:00", "pred": {"ppl": 2.534036636352539, "ppl_lower": 2.9225351810455322, "ppl/lowercase_ppl": -1.1534048564461488, "ppl/zlib": 0.00368973626868185, "Min_5.0% Prob": 7.078201413154602, "Min_10.0% Prob": 5.98379348218441, "Min_20.0% Prob": 4.1909858994185925, "Min_30.0% Prob": 3.049284025405844, "Min_40.0% Prob": 2.329215627280064, "Min_50.0% Prob": 1.8696149345487356, "Min_60.0% Prob": 1.5590464150736807}}
{"hexsha": "a2ffeaa240b71382db18bba9227270f5573e50fb", "ext": "py", "lang": "Python", "content": "@Transform_Wrapper()\ndef Annotate_Script_Names(empty_diffs=0):\n    \"\"\"\n    For every ai script, annotate the pilot entity with the name\n    of the script running.\n    \"\"\"\n    aiscript_files = Load_Files('aiscripts/*.xml')\n    for game_file in aiscript_files:\n        xml_root = game_file.Get_Root()\n        changed = False\n        for tag in ['dock_masstraffic_drone', 'execute_custom_trade', 'execute_trade', 'move_approach_path', 'move_docking', 'move_undocking', 'move_gate', 'move_navmesh', 'move_strafe', 'move_target_points', 'move_waypoints', 'move_to', 'detach_from_masstraffic', 'wait_for_prev_script', 'wait']:\n            nodes = xml_root.xpath('.//{}'.format(tag))\n            if not nodes:\n                continue\n            changed = True\n            if empty_diffs:\n                continue\n            for node in nodes:\n                script_name = etree.Element('set_value', name='this.$script_name', exact=\"'{}'\".format(game_file.name.replace('.xml', '')))\n                node.addprevious(script_name)\n                element_name = etree.Element('set_value', name='this.$element_name', exact=\"'{}'\".format(tag))\n                node.addprevious(element_name)\n                if node.sourceline:\n                    name_line = \"'${} {}'\".format(game_file.name.replace('.xml', ''), node.sourceline)\n                    script_line_node = etree.Element('set_value', name='this.$script_line_name', exact=name_line)\n                    node.addprevious(script_line_node)\n                    record_group = [etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts?\">\\n                              <set_value name=\"this.$script_line_counts\" exact=\"table[]\"/>\\n                            </do_if>'), etree.fromstring('\\n                            <do_if value=\"not this.$script_line_counts.{FIELD}?\">\\n                              <set_value name=\"this.$script_line_counts.{FIELD}\" exact=\"0.0\"/>\\n                            </do_if>'.replace('FIELD', name_line)), etree.fromstring('\\n                            <set_value name=\"this.$script_line_counts.{FIELD}\" operation=\"add\"/>'.replace('FIELD', name_line))]\n                    for record_node in record_group:\n                        node.addprevious(record_node)\n        if changed:\n            game_file.Update_Root(xml_root)\n    return", "fn_id": 1, "class_fn": false, "repo": "abouquet/x4-projects", "file": "extensions/sn_measure_perf/Customizer_Script.py", "last_update_at": "2021-03-17T13:54:15+00:00", "pred": {"ppl": 3.4488258361816406, "ppl_lower": 3.608166217803955, "ppl/lowercase_ppl": -1.0364819064660686, "ppl/zlib": 0.0016662635743966592, "Min_5.0% Prob": 10.403436676661174, "Min_10.0% Prob": 8.209993612570841, "Min_20.0% Prob": 5.522737582198909, "Min_30.0% Prob": 4.006886242517357, "Min_40.0% Prob": 3.0684673291493634, "Min_50.0% Prob": 2.4706134973857248, "Min_60.0% Prob": 2.062268726034039}}
{"hexsha": "b2384578a7677f29cd7e0fe11a8a0c2097dd4658", "ext": "py", "lang": "Python", "content": "def export_result(request, uid):\n    if request.method == 'GET':\n        data = request.GET.get('data')\n        img = request.GET.get('image')\n        gif = request.GET.get('gif')\n        if data == '1':\n            data = True\n        else:\n            data = False\n        if img == '1':\n            img = True\n        else:\n            img = False\n        if gif == '1':\n            gif = True\n        else:\n            gif = False\n        work = Work(uid)\n        zip_path, file_name = work.export(data, img, gif)\n        response = StreamingHttpResponse(Tools.file_iterator(zip_path))\n        response['Content-Type'] = 'application/octet-stream'\n        response['Content-Disposition'] = 'attachment; filename={0}'.format(file_name)\n        response['Access-Control-Expose-Headers'] = 'Content-Disposition'\n        return response", "fn_id": 3, "class_fn": false, "repo": "Mr-Gump/Bamboo-Web", "file": "src/BambooReConstruct/BackEnd/views.py", "last_update_at": "2021-07-03T09:36:27+00:00", "pred": {"ppl": 2.1261465549468994, "ppl_lower": 2.881788730621338, "ppl/lowercase_ppl": -1.4031492192388821, "ppl/zlib": 0.0022185623886408893, "Min_5.0% Prob": 8.067211532592774, "Min_10.0% Prob": 5.770895993709564, "Min_20.0% Prob": 3.5636028453707693, "Min_30.0% Prob": 2.4977454719444117, "Min_40.0% Prob": 1.897234958736226, "Min_50.0% Prob": 1.5072836736217141, "Min_60.0% Prob": 1.2589948741172647}}
{"hexsha": "521ca7e8f2b91498b1cecc645438b8f39926f276", "ext": "py", "lang": "Python", "content": "def test_haversine():\n    \"\"\"\n    TODO...\n    \"\"\"\n    pass", "fn_id": 1, "class_fn": false, "repo": "peterprescott/optimize-nn", "file": "tests/test_given.py", "last_update_at": "2021-10-12T04:46:20+00:00", "pred": {"ppl": 11.913089752197266, "ppl_lower": 13.952564239501953, "ppl/lowercase_ppl": -1.0637807248004043, "ppl/zlib": 0.04955275549519812, "Min_5.0% Prob": NaN, "Min_10.0% Prob": 10.022266387939453, "Min_20.0% Prob": 9.210166931152344, "Min_30.0% Prob": 7.73785001039505, "Min_40.0% Prob": 5.723069071769714, "Min_50.0% Prob": 5.045548856258392, "Min_60.0% Prob": 4.075068089697096}}
{"hexsha": "aa06ab4636c128273f66fb5d6c82aabd460f2220", "ext": "py", "lang": "Python", "content": "@mock.patch('six.moves.builtins.super')\ndef test_algosec_servers_http_adapter(mock_super, mocker):\n    adapter = AlgoSecServersHTTPAdapter()\n    adapter.send()\n    assert super.return_value.send.call_args == mocker.call(timeout=(AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_CONNECT_TIMEOUT, AlgoSecServersHTTPAdapter.ALGOSEC_SERVER_READ_TIMEOUT))\n    assert mock_super(AlgoSecServersHTTPAdapter, adapter).calls[0]", "fn_id": 0, "class_fn": false, "repo": "chanilurya/algosec-python", "file": "tests/test_helpers.py", "last_update_at": "2021-09-25T13:15:19+00:00", "pred": {"ppl": 4.306925296783447, "ppl_lower": 5.793508529663086, "ppl/lowercase_ppl": -1.203060460146256, "ppl/zlib": 0.006376525158584716, "Min_5.0% Prob": 10.43076820373535, "Min_10.0% Prob": 8.415370854464443, "Min_20.0% Prob": 6.232701343038808, "Min_30.0% Prob": 4.6514579227992465, "Min_40.0% Prob": 3.6596134836259098, "Min_50.0% Prob": 2.938074340786913, "Min_60.0% Prob": 2.4395214210530476}}
{"hexsha": "1ac41f241705a181f54bcd99f611ca86824ed455", "ext": "py", "lang": "Python", "content": "def Hosts_Ping(context, nameSpace, className, methodName, instanceName, parameters):\n    be = BookEnd('Hosts_Ping')\n    outParams = context.NewParameters('Hosts', 'Ping')\n    outParams.SetValue('MIReturn', MI_Uint64(123))\n    context.PostInstance(outParams)\n    context.PostResult(MI_RESULT_OK)", "fn_id": 5, "class_fn": false, "repo": "Bhaskers-Blu-Org2/omi-script-provider", "file": "samples/hosts/_mi_main.py", "last_update_at": "2021-04-20T16:09:19+00:00", "pred": {"ppl": 7.51743745803833, "ppl_lower": 14.0121431350708, "ppl/lowercase_ppl": -1.3086908532676094, "ppl/zlib": 0.010561389090732572, "Min_5.0% Prob": 11.97620153427124, "Min_10.0% Prob": 9.927270531654358, "Min_20.0% Prob": 7.735233813524246, "Min_30.0% Prob": 6.245752289891243, "Min_40.0% Prob": 4.883818478295297, "Min_50.0% Prob": 4.036596354187989, "Min_60.0% Prob": 3.4063980474459883}}
{"hexsha": "73401fdbf7f3329cc097f204980f1eaf451bd20d", "ext": "py", "lang": "Python", "content": "def updateStateByKey(ssc):\n\n    def processStateUpdateByKey(input_stream, state):\n        print('i', input_stream)\n        print('s', state)\n        return state if not input_stream else input_stream[-1]\n    ssc.checkpoint('checkpoints/')\n    ssc.queueStream([[('a', 1), ('b', 3)], [('a', 2), ('a', 5), ('c', 4)]]).updateStateByKey(processStateUpdateByKey).pprint()", "fn_id": 0, "class_fn": false, "repo": "svaningelgem/pyspark_fast_tester", "file": "src/main/scripts/pyspark_streaming.py", "last_update_at": "2021-08-02T13:59:46+00:00", "pred": {"ppl": 5.203319072723389, "ppl_lower": 6.2698974609375, "ppl/lowercase_ppl": -1.1130562468353054, "ppl/zlib": 0.008590087006183982, "Min_5.0% Prob": 8.937380409240722, "Min_10.0% Prob": 7.255931204015559, "Min_20.0% Prob": 5.829567085612904, "Min_30.0% Prob": 4.8451283339298135, "Min_40.0% Prob": 3.941079728982665, "Min_50.0% Prob": 3.255212114615874, "Min_60.0% Prob": 2.7388969364039824}}
{"hexsha": "00cef5ab0b6c71719e9da7da7a1b9a6407ebc5d7", "ext": "py", "lang": "Python", "content": "def main():\n    N = 7\n    M = 10\n    key = gfdb.Management.retrieval.Retrieve.create_key(N, M)\n    print('key: ' + key)\n    r_configuration = 'rectangle'\n    r = gfdb.Management.retrieval.Retrieve(r_configuration)\n    library_boundaries = r.query_database()\n    r_data = r.retrieve(N, M)\n    print(r_data)\n    r_level = r.levels[r_configuration]\n    L_configuration = 'L'\n    L = gfdb.Management.retrieval.Retrieve(L_configuration)\n    library_boundaries = L.query_database()\n    L_data = L.retrieve(N, M)\n    print(L_data)\n    LopU_configuration = 'LopU'\n    LopU = gfdb.Management.retrieval.Retrieve(LopU_configuration)\n    LopU_data = LopU.retrieve(N, M)\n    print(LopU_data)\n    U_configuration = 'U'\n    U = gfdb.Management.retrieval.Retrieve(U_configuration)\n    U_data = U.retrieve(N, M)\n    print(U_data)\n    c_configuration = 'C'\n    c = gfdb.Management.retrieval.Retrieve(c_configuration)\n    library_boundaries = c.query_database()\n    c_data = c.retrieve(N, M)\n    print(c_data)\n    Open_configuration = 'Open'\n    Open = gfdb.Management.retrieval.Retrieve(Open_configuration)\n    Open_data = Open.retrieve(N, M)\n    print(Open_data)\n    zoned_configuration = 'zoned'\n    zoned = gfdb.Management.retrieval.Retrieve(zoned_configuration)\n    zoned_data = zoned.retrieve(N, M)\n    print(zoned_data)", "fn_id": 0, "class_fn": false, "repo": "j-c-cook/gFunctionDatabase", "file": "gFunctionDatabase/Management/examples/retreive.py", "last_update_at": "2021-03-13T11:23:49+00:00", "pred": {"ppl": 2.299975872039795, "ppl_lower": 2.288217544555664, "ppl/lowercase_ppl": -0.993846210567867, "ppl/zlib": 0.002539325098971338, "Min_5.0% Prob": 9.836521761757988, "Min_10.0% Prob": 6.8594585202989125, "Min_20.0% Prob": 4.075221725421794, "Min_30.0% Prob": 2.7747382174711674, "Min_40.0% Prob": 2.083417869102188, "Min_50.0% Prob": 1.6654926972468078, "Min_60.0% Prob": 1.3924149043866691}}
{"hexsha": "e357f5174eb4389ae8c75eadb4fb65ed5718efd2", "ext": "py", "lang": "Python", "content": "def initialize_routes(api, limiter):\n    RegisterApi.decorators = [limiter.limit('10/hour', methods=['POST'])]\n    LoginApi.decorators = [limiter.limit('30/minute', methods=['POST'])]\n    PasswordChangeApi.decorators = [limiter.limit('5/day', methods=['POST'])]\n    CaffSearchApi.decorators = [limiter.limit('1/second', methods=['GET'])]\n    CaffDownloadApi.decorators = [limiter.limit('10/minute', methods=['GET'])]\n    CaffUploadApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    CommentApi.decorators = [limiter.limit('10/minute', methods=['POST'])]\n    UserDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    CaffDataApi.decorators = [limiter.limit('60/second', methods=['GET', 'DELETE'])]\n    api.add_resource(RegisterApi, '/user/register')\n    api.add_resource(LoginApi, '/user/login')\n    api.add_resource(LogoutApi, '/user/logout')\n    api.add_resource(PasswordChangeApi, '/user/password')\n    api.add_resource(UsersListApi, '/user/')\n    api.add_resource(UserDataApi, '/user/<username>')\n    api.add_resource(CaffDataApi, '/caff/<caff_id>')\n    api.add_resource(CaffSearchApi, '/caff/search')\n    api.add_resource(CaffUploadApi, '/caff/upload')\n    api.add_resource(CaffDownloadApi, '/caff/download/<caff_id>')\n    api.add_resource(CommentApi, '/comment')", "fn_id": 0, "class_fn": false, "repo": "nemkrisz11/Computer-Security-Homework-2021-SHAjt", "file": "Backend/flaskapp/resources/routes.py", "last_update_at": "2021-12-03T09:58:04+00:00", "pred": {"ppl": 1.7951966524124146, "ppl_lower": 1.9178744554519653, "ppl/lowercase_ppl": -1.1129743642656782, "ppl/zlib": 0.0016813637114970437, "Min_5.0% Prob": 7.212762682061446, "Min_10.0% Prob": 5.062622968967144, "Min_20.0% Prob": 2.8680460560548156, "Min_30.0% Prob": 1.9518395473833305, "Min_40.0% Prob": 1.4621015656179501, "Min_50.0% Prob": 1.1730907254091223, "Min_60.0% Prob": 0.9751687527604486}}
{"hexsha": "fe661c2264845a793c67f4141a080dbf2325c8ac", "ext": "py", "lang": "Python", "content": "def get_significance_matrix(df):\n    \"\"\"\n    returns matrix in which item[y,x] is test of whether y-x is center around zero\n    \"\"\"\n    return df.apply(lambda x: df.apply(lambda y: wilcox_test(x, y)))", "fn_id": 4, "class_fn": false, "repo": "nweir127/COD3S", "file": "src/utils/metrics.py", "last_update_at": "2021-12-10T16:33:52+00:00", "pred": {"ppl": 9.898029327392578, "ppl_lower": 9.898029327392578, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.016030319436970416, "Min_5.0% Prob": 11.364967028299967, "Min_10.0% Prob": 9.644011418024698, "Min_20.0% Prob": 7.755453149477641, "Min_30.0% Prob": 6.4974795712365045, "Min_40.0% Prob": 5.321186909675598, "Min_50.0% Prob": 4.507623057211599, "Min_60.0% Prob": 3.857000979217323}}
{"hexsha": "4aa6ab3efd6286da2d8af7db8b33a3b6c6534a0f", "ext": "py", "lang": "Python", "content": "def test_object_beside_object():\n    ball = situation_object(BALL)\n    table = situation_object(TABLE)\n    situation = HighLevelSemanticsSituation(ontology=GAILA_PHASE_1_ONTOLOGY, salient_objects=[ball, table], always_relations=[Relation(IN_REGION, ball, Region(table, distance=PROXIMAL, direction=Direction(positive=True, relative_to_axis=HorizontalAxisOfObject(table, index=0))))])\n    assert generated_tokens(situation) == ('a', 'ball', 'beside', 'a', 'table')", "fn_id": 37, "class_fn": false, "repo": "Tubbz-alt/adam", "file": "tests/language_specific/english/test_english_language_generator.py", "last_update_at": "2021-04-26T23:59:57+00:00", "pred": {"ppl": 2.91123366355896, "ppl_lower": 6.663331508636475, "ppl/lowercase_ppl": -1.7749022381904884, "ppl/zlib": 0.0036222946803858885, "Min_5.0% Prob": 9.816425959269205, "Min_10.0% Prob": 7.408444294562707, "Min_20.0% Prob": 4.81969756550259, "Min_30.0% Prob": 3.498957047611475, "Min_40.0% Prob": 2.647182027498881, "Min_50.0% Prob": 2.1463186772568013, "Min_60.0% Prob": 1.7790405896641774}}
{"hexsha": "4fc83d3fdc1d39e0640dd521e048db83a30a09cb", "ext": "py", "lang": "Python", "content": "@task\ndef prepare_python_packages():\n    local('mkdir -p {local_python_packages_dir}'.format(**env))\n    local('cp {local_project_root}/requirements.txt {local_python_packages_dir}/'.format(**env))\n    existing_files = set((filenameToRequirement(filename) for filename in os.listdir(env.local_python_packages_dir)))\n    missing_requirements = tempfile.NamedTemporaryFile()\n    for raw_line in open(os.path.join(env.local_project_root, 'requirements.txt')):\n        line = raw_line.strip()\n        if not line or line.startswith('#') or line not in existing_files:\n            missing_requirements.write(raw_line)\n    missing_requirements.flush()\n    local('pip install --no-use-wheel -d {env.local_python_packages_dir} --exists-action=i -r {missing_requirements_file}'.format(env=env, missing_requirements_file=missing_requirements.name))\n    missing_requirements.close()", "fn_id": 8, "class_fn": false, "repo": "jsavikko/futurice-ldap-user-manager", "file": "fabfile.py", "last_update_at": "2021-05-06T07:57:56+00:00", "pred": {"ppl": 2.57584810256958, "ppl_lower": 2.8350608348846436, "ppl/lowercase_ppl": -1.101338722964617, "ppl/zlib": 0.0025993924178838584, "Min_5.0% Prob": 10.22149116342718, "Min_10.0% Prob": 7.045042939808058, "Min_20.0% Prob": 4.4244580126327016, "Min_30.0% Prob": 3.1323377470607343, "Min_40.0% Prob": 2.3607006354197377, "Min_50.0% Prob": 1.8988786335022927, "Min_60.0% Prob": 1.585699940338168}}
{"hexsha": "073a2f50e72052b77841f9cbe00704769b1c08c3", "ext": "py", "lang": "Python", "content": "def predict(pdb_file: Path) -> float:\n    \"\"\"\n    The function that puts it all together: parsing the PDB file, generating\n    features from it and performing inference with the ML model.\n    \"\"\"\n    parser = PDBParser()\n    structure = parser.get_structure(pdb_file.stem, pdb_file)\n    features = featurize(structure)\n    predicted_solubility = ml_inference(features)\n    return predicted_solubility", "fn_id": 0, "class_fn": false, "repo": "krmstrong322/cbh21-protein-solubility-challenge", "file": "predict.py", "last_update_at": "2021-05-03T20:23:32+00:00", "pred": {"ppl": 3.416494131088257, "ppl_lower": 4.874329090118408, "ppl/lowercase_ppl": -1.2892424224844343, "ppl/zlib": 0.005318679296204149, "Min_5.0% Prob": 8.855432271957397, "Min_10.0% Prob": 6.468811723921034, "Min_20.0% Prob": 4.660287831958971, "Min_30.0% Prob": 3.6998727650477967, "Min_40.0% Prob": 3.0025301537452598, "Min_50.0% Prob": 2.4347884715819847, "Min_60.0% Prob": 2.070352107736057}}
{"hexsha": "6a51a788efc3cd04bcda0ebddae5641c0b5fd64a", "ext": "py", "lang": "Python", "content": "def AdvSrch_Type_f(AdvSrch_Type):\n    if AdvSrch_Type == 'Computer':\n        return ('advancedcomputersearches', 'advanced_computer_search', 'computers')\n    if AdvSrch_Type == 'Mobile':\n        return ('advancedmobiledevicesearches', 'advanced_mobile_device_search', 'mobile_devices')\n    else:\n        print('Failed to set AdvSrch_Type properly.\\rPlease uncomment AdvSrch_Type = \"Computer\" or AdvSrch_Type = \"Mobile\"')", "fn_id": 0, "class_fn": false, "repo": "distorted-fields/jamf-to-google-reporting", "file": "jamf-to-google.py", "last_update_at": "2021-11-29T16:15:17+00:00", "pred": {"ppl": 5.993008136749268, "ppl_lower": 5.247592449188232, "ppl/lowercase_ppl": -0.9258211925755074, "ppl/zlib": 0.009474039572402107, "Min_5.0% Prob": 11.30534610748291, "Min_10.0% Prob": 9.194175330075351, "Min_20.0% Prob": 6.992117052492888, "Min_30.0% Prob": 5.650753034864153, "Min_40.0% Prob": 4.449619017382886, "Min_50.0% Prob": 3.57344977904932, "Min_60.0% Prob": 3.016602486744523}}
{"hexsha": "35daad5aecd0ac3a78c0c2339cbf51e0014f3f74", "ext": "py", "lang": "Python", "content": "def Predict(Phi, b, mu, s, t, r, outd):\n    print(t, '--t')\n    dt = t[1] - t[0]\n    tmin = min(t)\n    tmax = max(t)\n    t2 = np.linspace(tmin, tmax, num_pred)\n    Psi = np.zeros([r, len(t2)], dtype='complex')\n    for i, _x in enumerate(t2):\n        print(_x, '_x')\n        print(b, 'b')\n        print(i)\n        print(shape(Psi))\n        Psi[:, i] = multiply(power(mu, _x / dt), b)\n    D2 = dot(Phi, Psi)\n    sigmaps = []\n    tps = []\n    for i in range(len(D2[0, :])):\n        print(str(i) + '--predicted...' + str(t2[i]))\n        F = D2[:, i]\n        if i == 0:\n            F0 = average(F)\n        eps = t2[i]\n        sigma = MakeImagePred(F - F0, i, s, eps, outd)\n        tps.append(t2[i])\n        sigmaps.append(sigma + eps)\n    return (tps, sigmaps)", "fn_id": 10, "class_fn": false, "repo": "PapStatMechMat/SeaPy", "file": "RunSEAmodes.py", "last_update_at": "2021-05-26T05:16:05+00:00", "pred": {"ppl": 5.111576080322266, "ppl_lower": 5.171178340911865, "ppl/lowercase_ppl": -1.0071055708882857, "ppl/zlib": 0.004237682564291214, "Min_5.0% Prob": 10.028429235730853, "Min_10.0% Prob": 8.32949069568089, "Min_20.0% Prob": 6.375299845423017, "Min_30.0% Prob": 4.975465913379893, "Min_40.0% Prob": 3.9667574586594, "Min_50.0% Prob": 3.2247834384021625, "Min_60.0% Prob": 2.7153308549348045}}
{"hexsha": "70f2b74641e7867f742d38f95ce15e96044fc424", "ext": "py", "lang": "Python", "content": "def _predict(X_, theta_, model_):\n    n = X_.shape[0]\n    t_init = time()\n    Z_hat_ = _predict_proba(X_, model_)\n    W_hat_ = _classify(Z_hat_, prob=theta_[0], invert_label=model_[-1])\n    tm = time() - t_init\n    return (W_hat_, tm)", "fn_id": 2, "class_fn": false, "repo": "gterren/cloud_segmentation", "file": "GDA_segm.py", "last_update_at": "2021-11-18T07:50:33+00:00", "pred": {"ppl": 5.377718925476074, "ppl_lower": 5.255777359008789, "ppl/lowercase_ppl": -0.9863657738394901, "ppl/zlib": 0.010853318017526864, "Min_5.0% Prob": 8.378891706466675, "Min_10.0% Prob": 7.202995657920837, "Min_20.0% Prob": 5.8789277637706085, "Min_30.0% Prob": 4.698964577454787, "Min_40.0% Prob": 3.957108876284431, "Min_50.0% Prob": 3.322471441224564, "Min_60.0% Prob": 2.7969408833350125}}
{"hexsha": "0e47d06b09a13065c0203d222fb5c4959d610194", "ext": "py", "lang": "Python", "content": "def checkIfRange(request, response):\n    \"\"\"Checks for the If-Range header, and if it exists, checks if the\n    test passes. Returns true if the server should return partial data.\"\"\"\n    ifrange = request.headers.getHeader('if-range')\n    if ifrange is None:\n        return True\n    if isinstance(ifrange, http_headers.ETag):\n        return ifrange.match(response.headers.getHeader('etag'), strongCompare=True)\n    else:\n        return ifrange == response.headers.getHeader('last-modified')", "fn_id": 4, "class_fn": false, "repo": "twonds/twisted", "file": "twisted/web2/http.py", "last_update_at": "2021-01-27T19:11:21+00:00", "pred": {"ppl": 3.9655067920684814, "ppl_lower": 5.123124599456787, "ppl/lowercase_ppl": -1.185920879933358, "ppl/zlib": 0.005298591012806554, "Min_5.0% Prob": 9.353083992004395, "Min_10.0% Prob": 7.608048092235219, "Min_20.0% Prob": 5.357616704443227, "Min_30.0% Prob": 4.150017075678882, "Min_40.0% Prob": 3.290973918593448, "Min_50.0% Prob": 2.6948449241703956, "Min_60.0% Prob": 2.2974871496359506}}
{"hexsha": "68c4a5c1dfedd1f00d406e741e54edfced34cff1", "ext": "py", "lang": "Python", "content": "def user_info_strlist(user: telegram.User) -> list[str]:\n    keys = ['User ID', 'First Name', 'Last Name', 'User Name', 'Language Code']\n    values = [user.id, user.first_name, user.last_name, user.username, user.language_code]\n    return combine_no_none(keys, values)", "fn_id": 5, "class_fn": false, "repo": "punch-dango/telegram-bot", "file": "dango_bot.py", "last_update_at": "2021-06-15T11:47:09+00:00", "pred": {"ppl": 2.9626376628875732, "ppl_lower": 3.4260754585266113, "ppl/lowercase_ppl": -1.133816527829819, "ppl/zlib": 0.00627791892408601, "Min_5.0% Prob": 10.343344807624817, "Min_10.0% Prob": 8.179668724536896, "Min_20.0% Prob": 5.31495463848114, "Min_30.0% Prob": 3.579864047765732, "Min_40.0% Prob": 2.751277733932842, "Min_50.0% Prob": 2.1686536857769605, "Min_60.0% Prob": 1.8237289243936539}}
{"hexsha": "039644328490858f1aa80d268898976f6bf2523f", "ext": "py", "lang": "Python", "content": "def deploy():\n    execute(checkout)\n    execute(dependencies)\n    execute(make_current)\n    execute(restart)\n    execute(cleanup)", "fn_id": 1, "class_fn": false, "repo": "anupam123148/shaaaaaaaaaaaaa", "file": "fabfile.py", "last_update_at": "2021-04-24T16:37:31+00:00", "pred": {"ppl": 6.472507953643799, "ppl_lower": 6.472507953643799, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.022775166603405263, "Min_5.0% Prob": 8.830324172973633, "Min_10.0% Prob": 8.147903680801392, "Min_20.0% Prob": 6.886229991912842, "Min_30.0% Prob": 5.9412020444869995, "Min_40.0% Prob": 4.720438122749329, "Min_50.0% Prob": 3.813125708273479, "Min_60.0% Prob": 3.169732352390009}}
{"hexsha": "d7d328944b6c85472fc3b3a7461b51d1e20de3b9", "ext": "py", "lang": "Python", "content": "def punctuation_count(documents: list) -> int:\n    \"\"\"Count number of punctuation characters in a list of textual documents\n\n    Keyword arguments:\n    documents -- the list of textual documents.\n    \"\"\"\n    __check_documents_param(documents)\n    char_cnt = char_count(documents, ignore_spaces=True)\n    char_wo_punctuation = letter_count(documents, ignore_spaces=True, ignore_digits=False)\n    return char_cnt - char_wo_punctuation", "fn_id": 4, "class_fn": false, "repo": "Perevalov/language_features", "file": "linguaf/descriptive_statistics.py", "last_update_at": "2021-09-21T00:47:55+00:00", "pred": {"ppl": 5.420116424560547, "ppl_lower": 6.639168739318848, "ppl/lowercase_ppl": -1.1200327755539985, "ppl/zlib": 0.008125563921957103, "Min_5.0% Prob": 11.398225784301758, "Min_10.0% Prob": 9.780597400665282, "Min_20.0% Prob": 7.049611523037865, "Min_30.0% Prob": 5.5250306917775065, "Min_40.0% Prob": 4.202431599299113, "Min_50.0% Prob": 3.368072540411409, "Min_60.0% Prob": 2.8405028793310363}}
{"hexsha": "8e9b1c035fd0fe23e9e05c70dd0f5fd3d8067103", "ext": "py", "lang": "Python", "content": "def _read_version_file():\n    \"\"\"\n    Attempt to read the `version.py` file from the top level package.\n    \"\"\"\n    version_file = configuration.version_path()\n    logging.info(\"Attempting to open '%s' and read the current version.\", version_file)\n    loader = importlib.machinery.SourceFileLoader('version_module', version_file)\n    spec = importlib.util.spec_from_loader('version_module', loader)\n    version_module = importlib.util.module_from_spec(spec)\n    try:\n        loader.exec_module(version_module)\n        logging.info(\"Version file found. Using version '%s' found within.\", version_module.__version__)\n        return version_module.__version__\n    except FileNotFoundError:\n        logging.warning(\"Version file was not found at '%s'. Attempting to determine version another way.\", version_file)\n    except AttributeError as err:\n        logging.error(err)\n        logging.warning(\"Version file was found at '%s', however it did not contain the variable __version__. Attempting to determine version another way.\", version_file)\n    return None", "fn_id": 3, "class_fn": false, "repo": "timepieces141/dynamic-versioning", "file": "src/dynamic_versioning/utils.py", "last_update_at": "2021-10-20T21:33:32+00:00", "pred": {"ppl": 2.7336676120758057, "ppl_lower": 3.4930477142333984, "ppl/lowercase_ppl": -1.243754681206479, "ppl/zlib": 0.0024174138346762537, "Min_5.0% Prob": 7.971235950787862, "Min_10.0% Prob": 6.230920374393463, "Min_20.0% Prob": 4.360452334086101, "Min_30.0% Prob": 3.2329069218701787, "Min_40.0% Prob": 2.493205194006261, "Min_50.0% Prob": 2.016398830570219, "Min_60.0% Prob": 1.6849753010439976}}
{"hexsha": "ac9620fc76910d66d5eadf9c78f39e41ea6edc77", "ext": "py", "lang": "Python", "content": "def plot_14(id, query):\n    if 'category__in' in query:\n        del query['category__in']\n    query['category'] = 'B'\n    data = data_plot_groupby_category(query, values=['category', 'cloud'], sum_param='jobdefcount', label_cols=['cloud'], label_translation=False)\n    colors = prepare_colors_for_piechart(data)\n    title = PLOT_TITLES['title' + id]\n    unit = PLOT_UNITS[id]\n    return (data, colors, title, unit)", "fn_id": 16, "class_fn": false, "repo": "PanDAWMS/panda-bigmon-core-new", "file": "core/pbm/utils.py", "last_update_at": "2021-11-18T04:57:18+00:00", "pred": {"ppl": 10.011687278747559, "ppl_lower": 11.733443260192871, "ppl/lowercase_ppl": -1.0688832590492057, "ppl/zlib": 0.009215012553752178, "Min_5.0% Prob": 10.138407707214355, "Min_10.0% Prob": 9.066681027412415, "Min_20.0% Prob": 7.5193868827819825, "Min_30.0% Prob": 6.412112790185052, "Min_40.0% Prob": 5.297370116710663, "Min_50.0% Prob": 4.490486451695042, "Min_60.0% Prob": 3.8028043540318808}}
{"hexsha": "8502057a4b3bf916aba610da48747e7b8d5604e4", "ext": "py", "lang": "Python", "content": "def load_data():\n    moon_data = np.load('moon_data.npz')\n    x_s = moon_data['x_s']\n    y_s = moon_data['y_s']\n    x_t = moon_data['x_t']\n    return (torch.from_numpy(x_s).float(), torch.from_numpy(y_s).float(), torch.from_numpy(x_t).float())", "fn_id": 2, "class_fn": false, "repo": "krumo/swd_pytorch", "file": "swd_pytorch.py", "last_update_at": "2021-11-09T07:08:23+00:00", "pred": {"ppl": 1.9615706205368042, "ppl_lower": 1.9615706205368042, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0053899639148153565, "Min_5.0% Prob": 9.396226644515991, "Min_10.0% Prob": 5.91492313808865, "Min_20.0% Prob": 3.2719308482973197, "Min_30.0% Prob": 2.231713176801287, "Min_40.0% Prob": 1.7151807128010612, "Min_50.0% Prob": 1.3610656730112776, "Min_60.0% Prob": 1.1267488502038256}}
{"hexsha": "85d7907789cbbb8ce6e2019eb09711694ee29577", "ext": "py", "lang": "Python", "content": "def test_main():\n\n    def cmd(*args, **kwargs):\n        try:\n            main.callback(*args, **kwargs)\n            return 0\n        except SystemExit as e:\n            return e.code\n    inpath = 'examples/test.py'\n    outpath = 'examples/test.xml'\n    assert cmd(inpath, outpath, verbose=True, string=True) == 0\n    assert cmd(inpath, outpath, help=True) == 0\n    assert cmd(inpath, outpath, reload=True) == 0\n    assert cmd(inpath, outpath, version=True) == 0\n    assert cmd(inpath, outpath, list_peripherals=True) == 0", "fn_id": 0, "class_fn": false, "repo": "loggerhead/Easy-Karabiner", "file": "tests/test_main.py", "last_update_at": "2021-05-26T00:28:59+00:00", "pred": {"ppl": 2.760467052459717, "ppl_lower": 3.255014181137085, "ppl/lowercase_ppl": -1.1622973836367756, "ppl/zlib": 0.004767135621212871, "Min_5.0% Prob": 9.654276166643415, "Min_10.0% Prob": 6.891113980611165, "Min_20.0% Prob": 4.644555191839895, "Min_30.0% Prob": 3.289849766391389, "Min_40.0% Prob": 2.5352087987046086, "Min_50.0% Prob": 2.031948837523277, "Min_60.0% Prob": 1.6922623476885417}}
{"hexsha": "dbdac17e96cf66994ed82d897eac1d43424c6c6f", "ext": "py", "lang": "Python", "content": "def collect_bstock(pop, sp_idcs, farm_idx):\n    \"\"\"Migrate marked broodstock from source subpopulation\n    to farm subpopulation.\"\"\"\n    for sp_idx in sp_idcs:\n        for ind in pop.individuals([sp_idx]):\n            if ind.broodstock == 1:\n                ind.migrate_to = farm_idx\n            else:\n                ind.migrate_to = sp_idx\n    sim.migrate(pop, mode=sim.BY_IND_INFO)", "fn_id": 12, "class_fn": false, "repo": "nwfsc-cb/shellfish-genetic-risks", "file": "inst/GRs.py", "last_update_at": "2021-09-14T05:30:49+00:00", "pred": {"ppl": 8.61408805847168, "ppl_lower": 10.115446090698242, "ppl/lowercase_ppl": -1.074609750239748, "ppl/zlib": 0.010607876893079848, "Min_5.0% Prob": 12.152306747436523, "Min_10.0% Prob": 11.18305778503418, "Min_20.0% Prob": 8.221969263894218, "Min_30.0% Prob": 6.36923997476697, "Min_40.0% Prob": 5.131789068843043, "Min_50.0% Prob": 4.231528741893945, "Min_60.0% Prob": 3.6146414801478386}}
{"hexsha": "b85923ab8b9e16da8df9357a1215d9b3530c1988", "ext": "py", "lang": "Python", "content": "def detect(image):\n    detector = dlib.get_frontal_face_detector()\n    img_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    rects = detector(img_gray, 0)\n    return rects", "fn_id": 1, "class_fn": false, "repo": "ForrestPi/FaceProjects", "file": "facialLandmarker/pfld/algin_dlib.py", "last_update_at": "2021-06-22T06:21:29+00:00", "pred": {"ppl": 1.8891278505325317, "ppl_lower": 3.2653160095214844, "ppl/lowercase_ppl": -1.8602863425725154, "ppl/zlib": 0.004969650529873849, "Min_5.0% Prob": 6.598013401031494, "Min_10.0% Prob": 4.554192447662354, "Min_20.0% Prob": 3.064384330402721, "Min_30.0% Prob": 2.1560895039754757, "Min_40.0% Prob": 1.6029878323492797, "Min_50.0% Prob": 1.2720604610854183, "Min_60.0% Prob": 1.085102932433502}}
{"hexsha": "b36f29adbca75035b8a5747f2e0405b7dd6b8caf", "ext": "py", "lang": "Python", "content": "def roll20(querry=None):\n    \"\"\"\n    Searches roll20.net for a querry and opens the search in a webbrowser.\n    :param querry: String to search for.  If none is provided, asks the user.\n    :return: None\n    \"\"\"\n    if querry is None:\n        querry = simpledialog.askstring('Search Roll20', 'Search Roll20.net for:')\n    if querry is not None:\n        url = 'https://roll20.net/compendium/dnd5e/searchbook/?terms=' + querry\n        webbrowser.open(url)", "fn_id": 1, "class_fn": false, "repo": "spudhunter/DnD-Combat-Manager", "file": "CombatManager.py", "last_update_at": "2021-01-20T05:11:23+00:00", "pred": {"ppl": 3.313819408416748, "ppl_lower": 3.9498326778411865, "ppl/lowercase_ppl": -1.1465416787587357, "ppl/zlib": 0.004735578750917199, "Min_5.0% Prob": 10.669785499572754, "Min_10.0% Prob": 7.556935016925518, "Min_20.0% Prob": 5.057640786524172, "Min_30.0% Prob": 3.726880865853007, "Min_40.0% Prob": 2.911763643134724, "Min_50.0% Prob": 2.3725925869699838, "Min_60.0% Prob": 2.0121040849878296}}
{"hexsha": "31a0f40f5b3b73886fe6be3847e4043e0c0b0471", "ext": "py", "lang": "Python", "content": "def checkEntries(DataSetFile, preprocess=lambda x: x, dataType='jpg'):\n    dataset = wds.WebDataset(DataSetFile)\n    itemsTouched = 0\n    for element in dataset:\n        print(element['__key__'])\n        preprocess(element[dataType])\n        tmp = element[0]\n        if not tmp == None:\n            itemsTouched += 1\n    return itemsTouched", "fn_id": 8, "class_fn": false, "repo": "AaltoRSE/ImageNetTools", "file": "ImageNetTools/IOTesters.py", "last_update_at": "2021-11-15T11:21:55+00:00", "pred": {"ppl": 9.092192649841309, "ppl_lower": 10.036006927490234, "ppl/lowercase_ppl": -1.0447415529402004, "ppl/zlib": 0.011437389091739303, "Min_5.0% Prob": 14.453869342803955, "Min_10.0% Prob": 12.475013256072998, "Min_20.0% Prob": 9.299320429563522, "Min_30.0% Prob": 6.836405429840088, "Min_40.0% Prob": 5.4228096586285215, "Min_50.0% Prob": 4.358777281783876, "Min_60.0% Prob": 3.691123663187027}}
{"hexsha": "db491fb88dce762693e7f13205150b53101924e2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize(['augmentation_cls', 'params'], get_dual_transforms(custom_arguments={A.Crop: {'y_min': 0, 'y_max': 10, 'x_min': 0, 'x_max': 10}, A.CenterCrop: {'height': 10, 'width': 10}, A.CropNonEmptyMaskIfExists: {'height': 10, 'width': 10}, A.RandomCrop: {'height': 10, 'width': 10}, A.RandomResizedCrop: {'height': 10, 'width': 10}, A.RandomSizedCrop: {'min_max_height': (4, 8), 'height': 10, 'width': 10}, A.CropAndPad: {'px': 10}, A.Resize: {'height': 10, 'width': 10}}, except_augmentations={A.RandomCropNearBBox, A.RandomSizedBBoxSafeCrop}))\ndef test_dual_augmentations(augmentation_cls, params, image, mask):\n    aug = augmentation_cls(p=1, **params)\n    data = aug(image=image, mask=mask)\n    assert data['image'].dtype == np.uint8\n    assert data['mask'].dtype == np.uint8", "fn_id": 2, "class_fn": false, "repo": "rayxke/albumentations", "file": "tests/test_augmentations.py", "last_update_at": "2021-08-25T08:41:00+00:00", "pred": {"ppl": 1.767276644706726, "ppl_lower": 2.3979430198669434, "ppl/lowercase_ppl": -1.5359154427230655, "ppl/zlib": 0.0016505499793811771, "Min_5.0% Prob": 6.510223865509033, "Min_10.0% Prob": 4.510398467381795, "Min_20.0% Prob": 2.691405685742696, "Min_30.0% Prob": 1.8795096130006843, "Min_40.0% Prob": 1.4235189788043499, "Min_50.0% Prob": 1.1416670988469073, "Min_60.0% Prob": 0.9520275616610888}}
{"hexsha": "1b67a7d9d4167a9df6ed58c7d637b09510718d46", "ext": "py", "lang": "Python", "content": "def spider(headers, conferences_url):\n    for conference_url in conferences_url:\n        html_level1 = requests.get(conference_url, headers=headers).content\n        tree_level1 = etree.HTML(html_level1)\n        conferences = tree_level1.xpath(\"//a[contains(@href, 'dblp.uni-trier.de/db/conf/') and contains(@href, 'html')]/@href\")\n        conferences = list(set(conferences))\n        fp_dir = os.path.split(os.path.realpath(sys.argv[0]))[0] + os.sep + 'source' + os.sep + 'conf' + os.sep + conference_url.split('/')[-2]\n        if not os.path.exists(fp_dir):\n            os.makedirs(fp_dir)\n        for conference in conferences:\n            fp_name = fp_dir + os.sep + conference.split('/')[-1].split('.')[0] + '.csv'\n            if os.path.exists(fp_name):\n                print('History: ', fp_name.encode('utf-8'))\n                continue\n            html_level2 = requests.get(conference, headers=headers).content\n            tree_level2 = etree.HTML(html_level2)\n            if tree_level2.xpath(\"//li[@class='entry inproceedings']\"):\n                extractor(tree_level2, fp_name)\n            else:\n                volumes = tree_level2.xpath(\"//*[@id='main']/ul/li/a/@href\")\n                for volume in volumes:\n                    fp_name = fp_dir + os.sep + volume.split('/')[-1].split('.')[0] + '.csv'\n                    if os.path.exists(fp_name):\n                        print('History: ', fp_name.encode('utf-8'))\n                        continue\n                    html_level3 = requests.get(volume, headers=headers).content\n                    tree_level3 = etree.HTML(html_level3)\n                    extractor(tree_level3, fp_name)", "fn_id": 1, "class_fn": false, "repo": "Aticode/spider_dblp", "file": "conferences.py", "last_update_at": "2021-01-18T09:00:14+00:00", "pred": {"ppl": 1.872786045074463, "ppl_lower": 1.93060302734375, "ppl/lowercase_ppl": -1.0484601534758573, "ppl/zlib": 0.0011973801255666194, "Min_5.0% Prob": 7.452825898709505, "Min_10.0% Prob": 5.040331399959067, "Min_20.0% Prob": 2.992656125970509, "Min_30.0% Prob": 2.071149131256169, "Min_40.0% Prob": 1.5653543426230063, "Min_50.0% Prob": 1.2542358487014376, "Min_60.0% Prob": 1.0455952787820748}}
{"hexsha": "86b7411d0f37a9a1b85f3b8b0f899c31c9cc6336", "ext": "py", "lang": "Python", "content": "@pytest.mark.filterwarnings('ignore:This function is not safe at the moment')\n@pytest.mark.parametrize('input_type', [tuple, list])\n@requires_tables\ndef test_complete_irradiance_arrays(sapm_dc_snl_ac_system_same_arrays, location, input_type):\n    \"\"\"ModelChain.complete_irradiance can accept a tuple of weather\n    DataFrames.\"\"\"\n    times = pd.date_range(start='2020-01-01 0700-0700', periods=2, freq='H')\n    weather = pd.DataFrame({'dni': [2, 3], 'dhi': [4, 6], 'ghi': [9, 5]}, index=times)\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    with pytest.raises(ValueError, match='Input DataFrames must have same index\\\\.'):\n        mc.complete_irradiance(input_type((weather, weather[1:])))\n    mc.complete_irradiance(input_type((weather, weather)))\n    for mc_weather in mc.results.weather:\n        assert_series_equal(mc_weather['dni'], pd.Series([2, 3], index=times, name='dni'))\n        assert_series_equal(mc_weather['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n        assert_series_equal(mc_weather['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    mc = ModelChain(sapm_dc_snl_ac_system_same_arrays, location)\n    mc.complete_irradiance(input_type((weather[['ghi', 'dhi']], weather[['dhi', 'dni']])))\n    assert 'dni' in mc.results.weather[0].columns\n    assert 'ghi' in mc.results.weather[1].columns\n    mc.complete_irradiance(input_type((weather, weather[['ghi', 'dni']])))\n    assert_series_equal(mc.results.weather[0]['dhi'], pd.Series([4, 6], index=times, name='dhi'))\n    assert_series_equal(mc.results.weather[0]['ghi'], pd.Series([9, 5], index=times, name='ghi'))\n    assert_series_equal(mc.results.weather[0]['dni'], pd.Series([2, 3], index=times, name='dni'))\n    assert 'dhi' in mc.results.weather[1].columns", "fn_id": 104, "class_fn": false, "repo": "Kaustubh1598/pvlib-python", "file": "pvlib/tests/test_modelchain.py", "last_update_at": "2021-08-16T06:47:01+00:00", "pred": {"ppl": 1.9515252113342285, "ppl_lower": 2.150336980819702, "ppl/lowercase_ppl": -1.1450967838559034, "ppl/zlib": 0.001166860779243938, "Min_5.0% Prob": 6.953695494553139, "Min_10.0% Prob": 5.048289569757753, "Min_20.0% Prob": 3.1324260563163433, "Min_30.0% Prob": 2.195484244048932, "Min_40.0% Prob": 1.6679548917780236, "Min_50.0% Prob": 1.3386048460568665, "Min_60.0% Prob": 1.1161342257835065}}
{"hexsha": "3ad888b6411bf731d2ffa031e8ac7e352cb37d45", "ext": "py", "lang": "Python", "content": "@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        name = request.form['name']\n        description = request.form['description']\n        error = None\n        if not name:\n            error = 'Name is required.'\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute('INSERT INTO dens (name, description, author_id) VALUES (?, ?, ?)', (name, description, g.user['id']))\n            db.commit()\n            return redirect(url_for('dens.index'))\n    return render_template('dens/create.html')", "fn_id": 1, "class_fn": false, "repo": "tsainez/bobchat", "file": "bobchat/dens.py", "last_update_at": "2021-12-14T19:16:11+00:00", "pred": {"ppl": 1.4760819673538208, "ppl_lower": 2.03951358795166, "ppl/lowercase_ppl": -1.8303218867116189, "ppl/zlib": 0.0012361627240441411, "Min_5.0% Prob": 5.640192065920148, "Min_10.0% Prob": 3.4534095605214437, "Min_20.0% Prob": 1.9222522482275963, "Min_30.0% Prob": 1.3087773477037747, "Min_40.0% Prob": 0.9849451048687722, "Min_50.0% Prob": 0.7783750415715316, "Min_60.0% Prob": 0.6502886978745624}}
{"hexsha": "1e6e4ef45a8b40afebac91fb3f7bf135a4a6341f", "ext": "py", "lang": "Python", "content": "def get_tags(pipeline):\n    nodes = pipeline.nodes\n    tags = {node.name: node.tags for node in nodes}\n    return tags", "fn_id": 3, "class_fn": false, "repo": "gcalmettes/kedro-argo", "file": "src/kedro_argo/cli.py", "last_update_at": "2021-01-20T04:23:56+00:00", "pred": {"ppl": 3.8623337745666504, "ppl_lower": 3.8623337745666504, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.015531857535481626, "Min_5.0% Prob": 10.259592056274414, "Min_10.0% Prob": 8.273839314778646, "Min_20.0% Prob": 5.8377759257952375, "Min_30.0% Prob": 4.181515157222748, "Min_40.0% Prob": 3.2981304079294205, "Min_50.0% Prob": 2.7211693386236826, "Min_60.0% Prob": 2.2988291258613267}}
{"hexsha": "c0e6fb6fdeb419f4456ff38cda990830605dba2c", "ext": "py", "lang": "Python", "content": "def calculate_bead_lims(bead_size, region_revs, region_fors):\n    \"\"\"\n    Divides a region on a chromosome (or rather, the part of it covered by complete\n    restriction fragments) into segments of equal, given length and one last\n    segment which is smaller than the others such that the segments completely\n    cover the region. These segments will be represented by spherical beads later.\n    Returns the limits of the segments\n    \"\"\"\n    region_length = np.max((region_fors[-1, 1], region_revs[1, -1])) - np.min((region_fors[0, 0], region_revs[0, 0]))\n    n_beads = int(round(region_length / bead_size)) + 1\n    bead_lims = [np.min((region_fors[0, 0], region_revs[0, 0])) + i * bead_size for i in range(n_beads)]\n    bead_lims[-1] = np.max((region_fors[-1, 1], region_revs[1, -1]))\n    return np.array(bead_lims)", "fn_id": 2, "class_fn": false, "repo": "simeoncarstens/ensemble_hic", "file": "data/nora2012/make_processed_files.py", "last_update_at": "2021-03-16T04:38:07+00:00", "pred": {"ppl": 3.9475438594818115, "ppl_lower": 3.9597411155700684, "ppl/lowercase_ppl": -1.0022468027954725, "ppl/zlib": 0.0036039201516648444, "Min_5.0% Prob": 9.648984322181114, "Min_10.0% Prob": 7.977218426190889, "Min_20.0% Prob": 5.807677259985006, "Min_30.0% Prob": 4.365958534181118, "Min_40.0% Prob": 3.3852009316471134, "Min_50.0% Prob": 2.733980619028878, "Min_60.0% Prob": 2.297772371745668}}
{"hexsha": "8086f65407ad32c804e1c9c38b95a0d946baf627", "ext": "py", "lang": "Python", "content": "def _spec_from_colon_separated_text_list(spec_name: str):\n    \"\"\"\n    Get a specification value from a list of colon separated values in\n\n    `_general_specs(...)` returns a list of strings of with the format\n    `Spec Name: Spec Value`.\n    TODO: Implement and use this. Refactor `ttaf(...)`\n    \"\"\"", "fn_id": 14, "class_fn": false, "repo": "jwalleser/plane-finder-app", "file": "planefinder/trade_a_plane.py", "last_update_at": "2021-12-31T02:54:08+00:00", "pred": {"ppl": 26.10507583618164, "ppl_lower": 27.425073623657227, "ppl/lowercase_ppl": -1.0151213845707014, "ppl/zlib": 0.01622950135274927, "Min_5.0% Prob": 12.556502024332682, "Min_10.0% Prob": 11.30498995099749, "Min_20.0% Prob": 9.406788635253907, "Min_30.0% Prob": 8.132374330000443, "Min_40.0% Prob": 7.012398433685303, "Min_50.0% Prob": 6.127027089531357, "Min_60.0% Prob": 5.27020771238539}}
{"hexsha": "623568b4c78cf9a439d74b2c528e6cff22e0cadb", "ext": "py", "lang": "Python", "content": "def detect_text(content):\n    \"\"\"Detects text in the file.\"\"\"\n    from google.cloud import vision\n    import io\n    client = vision.ImageAnnotatorClient()\n    content_base64 = base64.b64decode(content)\n    image = vision.Image(content=content_base64)\n    response = client.text_detection(image=image)\n    text = response.text_annotations[0].description\n    return text", "fn_id": 0, "class_fn": false, "repo": "OmkarMehta/anuvad", "file": "anuvad/callbacks.py", "last_update_at": "2021-08-18T00:50:53+00:00", "pred": {"ppl": 1.9137730598449707, "ppl_lower": 3.2137954235076904, "ppl/lowercase_ppl": -1.7986357886165276, "ppl/zlib": 0.0031205611417159168, "Min_5.0% Prob": 7.309766173362732, "Min_10.0% Prob": 5.3231838544209795, "Min_20.0% Prob": 3.0528198198268286, "Min_30.0% Prob": 2.1834864956992015, "Min_40.0% Prob": 1.6313624569263898, "Min_50.0% Prob": 1.2965912963069666, "Min_60.0% Prob": 1.0927670596845513}}
{"hexsha": "811ab0d25f1780d5e5c2deb38dcaf25cb83fa07a", "ext": "py", "lang": "Python", "content": "def deletecall(bam_url, api_call, call_parameters, delete_entity, header):\n    \"\"\"API request to delete and return values\"\"\"\n    call_url = 'http://' + bam_url + '/Services/REST/v1/' + api_call + '?'\n    print('You are requesting to delete:')\n    print(delete_entity)\n    answer = input('Do you want to proceed (y (yes) or n (no))? ')\n    try:\n        if answer.lower() == 'y':\n            response = requests.delete(call_url, params=call_parameters, headers=header)\n            return response.json()\n        elif answer.lower() == 'n':\n            return 'You aborted deletion'\n        else:\n            return 'You entered an invalid character'\n    except requests.exceptions.RequestException as e:\n        print(e)", "fn_id": 1, "class_fn": false, "repo": "bluecatlabs/making-apis-work-for-you", "file": "Episodes/Episode6/2-getServers-REST.py", "last_update_at": "2021-02-16T12:51:20+00:00", "pred": {"ppl": 3.9393815994262695, "ppl_lower": 4.443354606628418, "ppl/lowercase_ppl": -1.0878072871422109, "ppl/zlib": 0.003872948464776453, "Min_5.0% Prob": 10.096540609995523, "Min_10.0% Prob": 8.19775398572286, "Min_20.0% Prob": 5.970446437597275, "Min_30.0% Prob": 4.3972198874862105, "Min_40.0% Prob": 3.3690382421833194, "Min_50.0% Prob": 2.74021235787934, "Min_60.0% Prob": 2.297077589967382}}
{"hexsha": "f6667e4bee5b954c1e12aaebccf65cda7aa78ce7", "ext": "py", "lang": "Python", "content": "def generate_sub_id():\n    timestamp = floor(time() * 1000)\n    random_id = randint(0, 999)\n    return f'sub-{timestamp}-{random_id:03}'", "fn_id": 0, "class_fn": false, "repo": "ChessTerm/jiuqi-runner", "file": "run.py", "last_update_at": "2021-06-13T03:48:20+00:00", "pred": {"ppl": 3.2708444595336914, "ppl_lower": 3.2708444595336914, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010676109874554102, "Min_5.0% Prob": 8.348186016082764, "Min_10.0% Prob": 6.888280582427979, "Min_20.0% Prob": 4.8098907470703125, "Min_30.0% Prob": 3.6621965885162355, "Min_40.0% Prob": 2.9052331700921057, "Min_50.0% Prob": 2.355561629831791, "Min_60.0% Prob": 1.9701219107334813}}
{"hexsha": "793c76b7aef3c3464b9f0b5785241de95f0cc1ed", "ext": "py", "lang": "Python", "content": "def draw_flow(img, flow, step=16):\n    h, w = img.shape[:2]\n    y, x = np.mgrid[step / 2:h:step, step / 2:w:step].reshape(2, -1).astype(int)\n    fx, fy = flow[y, x].T\n    lines = np.vstack([x, y, x + fx, y + fy]).T.reshape(-1, 2, 2)\n    lines = np.int32(lines + 0.5)\n    vis = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n    cv2.polylines(vis, lines, 0, (0, 255, 0))\n    for (x1, y1), (_x2, _y2) in lines:\n        cv2.circle(vis, (x1, y1), 1, (0, 255, 0), -1)\n    return vis", "fn_id": 4, "class_fn": false, "repo": "mcv-m6-video/mcv-m6-2021-team6", "file": "W4/display.py", "last_update_at": "2021-03-23T18:54:28+00:00", "pred": {"ppl": 1.1208176612854004, "ppl_lower": 1.5929443836212158, "ppl/lowercase_ppl": -4.081977448704296, "ppl/zlib": 0.0003988058519783033, "Min_5.0% Prob": 2.2189318632537667, "Min_10.0% Prob": 1.147404024716128, "Min_20.0% Prob": 0.5769269055295312, "Min_30.0% Prob": 0.38514622104103735, "Min_40.0% Prob": 0.2857284518825335, "Min_50.0% Prob": 0.22913079762597713, "Min_60.0% Prob": 0.191236874086826}}
{"hexsha": "ff326af30a0e940467d42ebccf60e036d6b028f5", "ext": "py", "lang": "Python", "content": "@bot.command()\nasync def listening(ctx, *, message=None):\n    await ctx.message.delete()\n    if message is None:\n        commandprint(\"Command 'listening' has been used by \" + bot.user.name + ' with no message')\n        embed = discord.Embed(title=f'**Invalid syntax**', description='You have not specified a listening \\nExample: ' + prefix + 'listening flairings piss', color=errorcolor)\n        embed.set_footer(text=footer)\n        await ctx.send(embed=embed, delete_after=deletetimer)\n    else:\n        try:\n            commandprint(\"Command 'listening' has been used by \" + bot.user.name + \" with a message of '\" + message + \"'\")\n            await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=message))\n            em = discord.Embed(title=f'**STATUS CHANGED**', description=\"Your listening status has been set to **'\" + message + \"'**\", color=color)\n            em.set_footer(text=footer)\n            await ctx.send(embed=em, delete_after=deletetimer)\n        except Exception as error:\n            errorprint(\"Exception ' {0} ', expected error message sent to users chat\".format(error))\n            em = discord.Embed(title='Exception Error:', description='Expected Exception: You already have a custom status. \\n Console Exception {0}'.format(error), color=errorcolor)\n            await ctx.send(embed=em, delete_after=deletetimer)", "fn_id": 78, "class_fn": false, "repo": "Flairings/Project-Mars", "file": "Mars.py", "last_update_at": "2021-09-18T03:13:13+00:00", "pred": {"ppl": 4.126908302307129, "ppl_lower": 4.650400638580322, "ppl/lowercase_ppl": -1.084248634515146, "ppl/zlib": 0.0025914598383047676, "Min_5.0% Prob": 11.200555072111243, "Min_10.0% Prob": 8.89472292491368, "Min_20.0% Prob": 6.252027950968061, "Min_30.0% Prob": 4.612001136788782, "Min_40.0% Prob": 3.5391357603436666, "Min_50.0% Prob": 2.8312212422195464, "Min_60.0% Prob": 2.366340135013298}}
{"hexsha": "d7d3d58fe31aa429507c3843cdedb9be62480884", "ext": "py", "lang": "Python", "content": "def outgoing_message(message):\n    message_label = tk.Label(messages_frame, bg='gray20', fg='snow', text=message, font=('Helvetica', 15))\n    message_label.pack(side=tk.TOP, anchor=tk.E, padx=20, pady=10)\n    message_labels.append(message_label)", "fn_id": 3, "class_fn": false, "repo": "Jothin-kumar/chat-app", "file": "scripts/client/gui.py", "last_update_at": "2021-12-10T13:33:11+00:00", "pred": {"ppl": 2.67629075050354, "ppl_lower": 3.640918493270874, "ppl/lowercase_ppl": -1.3126719387889478, "ppl/zlib": 0.0059303119730339795, "Min_5.0% Prob": 7.30855917930603, "Min_10.0% Prob": 5.645079702138901, "Min_20.0% Prob": 3.9952141493558884, "Min_30.0% Prob": 3.0206868276000023, "Min_40.0% Prob": 2.3609728479024135, "Min_50.0% Prob": 1.9622117353648674, "Min_60.0% Prob": 1.658567155882412}}
{"hexsha": "82966286972b9d3c71d206d1668d569e596aeedd", "ext": "py", "lang": "Python", "content": "@require_context\ndef quota_class_get_all_by_name(context, class_name):\n    authorize_quota_class_context(context, class_name)\n    rows = model_query(context, models.QuotaClass, read_deleted='no').filter_by(class_name=class_name).all()\n    result = {'class_name': class_name}\n    for row in rows:\n        result[row.resource] = row.hard_limit\n    return result", "fn_id": 105, "class_fn": false, "repo": "scottwedge/OpenStack-Stein", "file": "karbor-1.3.0/karbor/db/sqlalchemy/api.py", "last_update_at": "2021-12-13T20:01:25+00:00", "pred": {"ppl": 1.729792594909668, "ppl_lower": 2.0102744102478027, "ppl/lowercase_ppl": -1.2742140622631954, "ppl/zlib": 0.0027128787821147256, "Min_5.0% Prob": 6.658006191253662, "Min_10.0% Prob": 4.532051944732666, "Min_20.0% Prob": 2.5923653429462794, "Min_30.0% Prob": 1.832938408178668, "Min_40.0% Prob": 1.374564146534318, "Min_50.0% Prob": 1.0938156281931783, "Min_60.0% Prob": 0.9215043337409576}}
{"hexsha": "8c0c41d89d485b342b3470a122b1a94215a4cc9f", "ext": "py", "lang": "Python", "content": "def main():\n    import glob\n    parent = sys.argv[1]\n    folders = glob.glob('{}/*_output'.format(parent))\n    submit_qsub(parent, folders)", "fn_id": 1, "class_fn": false, "repo": "ckrivacic/helix_matcher", "file": "helix/rifdock/submit_align.py", "last_update_at": "2021-06-07T10:56:37+00:00", "pred": {"ppl": 6.843579292297363, "ppl_lower": 6.843579292297363, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.016871148097494956, "Min_5.0% Prob": 11.209115982055664, "Min_10.0% Prob": 9.55170234044393, "Min_20.0% Prob": 6.969851016998291, "Min_30.0% Prob": 5.825028397820213, "Min_40.0% Prob": 4.82191872994105, "Min_50.0% Prob": 3.893125247014196, "Min_60.0% Prob": 3.24302391740291}}
{"hexsha": "f32dd5e74bf9879ee46da2157293834813f6746b", "ext": "py", "lang": "Python", "content": "def _get_package_bin_dir_app_paths(venv: Venv, package_info: PackageInfo, local_bin_dir: Path) -> Set[Path]:\n    suffix = package_info.suffix\n    apps = []\n    if package_info.include_apps:\n        apps += package_info.apps\n    if package_info.include_dependencies:\n        apps += package_info.apps_of_dependencies\n    return get_exposed_app_paths_for_package(venv.bin_path, local_bin_dir, [add_suffix(app, suffix) for app in apps])", "fn_id": 1, "class_fn": false, "repo": "KenMacD/pipx", "file": "src/pipx/commands/uninstall.py", "last_update_at": "2021-05-27T02:34:20+00:00", "pred": {"ppl": 4.413491249084473, "ppl_lower": 5.566275596618652, "ppl/lowercase_ppl": -1.156304601028493, "ppl/zlib": 0.0070698382986438945, "Min_5.0% Prob": 9.265732765197754, "Min_10.0% Prob": 7.662400832543006, "Min_20.0% Prob": 5.759552001953125, "Min_30.0% Prob": 4.5025109480588865, "Min_40.0% Prob": 3.6186263217375827, "Min_50.0% Prob": 2.9607427764397403, "Min_60.0% Prob": 2.488468575554016}}
{"hexsha": "c039023785903aca6301e71b8b73beaa059d6ec4", "ext": "py", "lang": "Python", "content": "def duplicateGroup(id):\n    group = CreatureGroup.objects.get(id=id)\n    newGroup = CreatureGroup(name='%s_duplicate' % group.name, Augmented=group.Augmented)\n    newGroup.Grouping = group.Grouping\n    newGroup.save()\n    for item in group.AllowedExtraType.all():\n        newGroup.AllowedExtraType.add(item)\n    for item in group.DefaultExtraType.all():\n        newGroup.DefaultExtraType.add(item)\n    for item in group.groupentry_set.all():\n        GroupEntry(Group=newGroup, creature=item.creature).save()", "fn_id": 1, "class_fn": false, "repo": "mkarasch/pfss", "file": "pfss/models.py", "last_update_at": "2021-09-14T09:55:03+00:00", "pred": {"ppl": 3.6763384342193604, "ppl_lower": 3.2363359928131104, "ppl/lowercase_ppl": -0.9020863721637998, "ppl/zlib": 0.006083725542746434, "Min_5.0% Prob": 13.178264345441546, "Min_10.0% Prob": 9.974577971867152, "Min_20.0% Prob": 6.321047723293304, "Min_30.0% Prob": 4.35272424348763, "Min_40.0% Prob": 3.292267673648894, "Min_50.0% Prob": 2.602391232093665, "Min_60.0% Prob": 2.17463669389322}}
{"hexsha": "21093aba0c887e3f2abc8c2d98ef2ec29048b249", "ext": "py", "lang": "Python", "content": "def time_stamps(seconds, sample_rate, sample_length, sample_duration):\n    \"\"\"Process to calculate the intervals based on the window size or time intervals.\n    Parameters\n    ----------\n    seconds : int or list\n        Can be of two types. int; a single value that determines the window size (seconds). list; a set of intervals, where each value is in (seconds).\n    sample_rate : float\n        Sample frequency used in the EEG (Hz).\n    sample_length : float\n        Sample length in data points (seconds x sample frequency).\n    sample_duration : float\n        Duration of the EEG (seconds).\n    \n    Returns\n    -------\n    intervals : list\n        List with the intervals, pairs of (Start, End) values in data points (seconds x sample frequency).\n    \"\"\"\n    intervals, i, flag = ([], 0, 0)\n    if type(seconds) == list:\n        if len(seconds) == 1:\n            seconds = seconds[0]\n        else:\n            if seconds[-1] > sample_duration.round():\n                raise Exception('Error in Window size. Intervals exceeds sample length.')\n            if seconds[0] != 0:\n                raise Exception('Error in Window size. First interval must be 0.')\n            else:\n                diff = np.diff(seconds)\n                for j, value in enumerate(diff):\n                    samples_per_frame = value * sample_rate\n                    intervals.append((i, i + samples_per_frame))\n                    i += samples_per_frame\n    if type(seconds) == int or type(seconds) == float:\n        samples_per_frame = seconds * sample_rate\n        while i + samples_per_frame <= sample_length:\n            intervals.append((i, i + samples_per_frame))\n            i = i + samples_per_frame\n        if i + samples_per_frame > sample_length:\n            intervals.append((i, sample_length))\n    intervals_rounded = [(round(steps[0], 2), round(steps[1], 2)) for steps in intervals]\n    print('Intervals: ', intervals_rounded)\n    if len(intervals) == 1:\n        intervals.append((0, sample_rate))\n        flag = 1\n    return (intervals, flag)", "fn_id": 5, "class_fn": false, "repo": "danive97/EEGRAPH", "file": "eegraph/tools.py", "last_update_at": "2021-03-26T09:28:21+00:00", "pred": {"ppl": 3.603133201599121, "ppl_lower": 3.7194695472717285, "ppl/lowercase_ppl": -1.0247910503631168, "ppl/zlib": 0.0018767259161328934, "Min_5.0% Prob": 8.828194995721182, "Min_10.0% Prob": 6.95752336581548, "Min_20.0% Prob": 5.100772346059482, "Min_30.0% Prob": 3.9795646924111576, "Min_40.0% Prob": 3.1476137364904084, "Min_50.0% Prob": 2.548600122672641, "Min_60.0% Prob": 2.1347005768875658}}
{"hexsha": "df37bb46962a858756a40ea08c445056a8eba2a4", "ext": "py", "lang": "Python", "content": "def config_to_functions(config):\n    \"\"\"\n    Takes in the data for a config and returns a list of functions to call the meet it's criteria.\n    list of str -> list of (none -> (str, any))\n    \"\"\"\n    functions = []\n    in_multiline_comment = False\n    for line in config:\n        line = remove_new_lines(line)\n        in_multiline_comment = in_multiline_comment or line_starts_multiline_comment_start(line)\n        multiline_comment_end = line_starts_multiline_comment_end(line)\n        if not in_multiline_comment and multiline_comment_end:\n            message = 'Multiline comment end: ' + constants.MULTILINE_COMMENT_END\n            message += ' must inclose a comment.'\n            raise Exception(message)\n        if multiline_comment_end:\n            in_multiline_comment = False\n        if is_line_commented(line) or is_empty_line(line) or in_multiline_comment or multiline_comment_end:\n            continue\n        check_config_line(line)\n        command_type = get_command_type(line)\n        if not is_type(command_type) and (not is_complex_type(command_type)):\n            on_not_valid_type(command_type)\n        definition = get_command_definition(line)\n        functions.append(build_input_func(any_type_to_input_functions(command_type, definition), command_type))\n    if in_multiline_comment:\n        message = 'Multiline comment start: ' + constants.MULTILINE_COMMENT_START\n        message += ' must be inclosed with: ' + constants.MULTILINE_COMMENT_END\n        raise Exception(message)\n    return functions", "fn_id": 1, "class_fn": false, "repo": "FroshTheFrog/life_logger", "file": "config_utils.py", "last_update_at": "2021-03-19T03:40:42+00:00", "pred": {"ppl": 3.9102888107299805, "ppl_lower": 4.216100692749023, "ppl/lowercase_ppl": -1.055220620470278, "ppl/zlib": 0.002663303195129375, "Min_5.0% Prob": 11.418994652597528, "Min_10.0% Prob": 8.721326607924242, "Min_20.0% Prob": 5.931867513901148, "Min_30.0% Prob": 4.360590082967383, "Min_40.0% Prob": 3.3829839328924813, "Min_50.0% Prob": 2.7193089910611814, "Min_60.0% Prob": 2.273741244378084}}
{"hexsha": "4fbd04e883334dd6fb994cd9cbab874f5c4a5931", "ext": "py", "lang": "Python", "content": "def load_spectrum(filename, grid):\n    \"\"\"\n    Load a single spectrum\n    \"\"\"\n    file_in = pyfits.open(filename)\n    wl = np.array(file_in[0].data[2])\n    flux = np.array(file_in[0].data[0])\n    ivar = np.array(file_in[0].data[1])\n    redshift = file_in[0].header['Z']\n    wl_shifted = wl - redshift * wl\n    flux_rs = interpolate.interp1d(wl_shifted, flux)(grid)\n    ivar_rs = interpolate.interp1d(wl_shifted, ivar)(grid)\n    ivar_rs[ivar_rs < 0] = 0.0\n    return (flux_rs, ivar_rs)", "fn_id": 1, "class_fn": false, "repo": "HaifengWangNAOC/Cannon", "file": "TheCannon/lamost.py", "last_update_at": "2021-07-22T12:57:40+00:00", "pred": {"ppl": 2.2278692722320557, "ppl_lower": 2.271385669708252, "ppl/lowercase_ppl": -1.0241489697257873, "ppl/zlib": 0.0035760966312627985, "Min_5.0% Prob": 7.21102511882782, "Min_10.0% Prob": 5.79421786700978, "Min_20.0% Prob": 3.710015044893537, "Min_30.0% Prob": 2.6207190619887046, "Min_40.0% Prob": 2.0008190190288384, "Min_50.0% Prob": 1.6080335401040449, "Min_60.0% Prob": 1.3396206811401192}}
{"hexsha": "60a398f13b9ba05c02fed5b550c7fed93451f969", "ext": "py", "lang": "Python", "content": "def serializedATN():\n    with StringIO() as buf:\n        buf.write('\\x03\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\\x03\\x1a')\n        buf.write('\\x82\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07')\n        buf.write('\\x04\\x08\\t\\x08\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0b\\t\\x0b\\x04\\x0c\\t\\x0c\\x04\\r\\t\\r\\x04\\x0e')\n        buf.write('\\t\\x0e\\x04\\x0f\\t\\x0f\\x03\\x02\\x05\\x02 \\n\\x02\\x03\\x02\\x03\\x02\\x05\\x02$\\n\\x02\\x03\\x02\\x03\\x02')\n        buf.write('\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x05\\x03,\\n\\x03\\x07\\x03.\\n\\x03\\x0c\\x03\\x0e\\x031\\x0b\\x03\\x03')\n        buf.write('\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x04;\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03')\n        buf.write('\\x06\\x03\\x06\\x05\\x06B\\n\\x06\\x03\\x06\\x06\\x06E\\n\\x06\\r\\x06\\x0e\\x06F\\x03\\x07\\x03\\x07\\x03\\x07\\x05\\x07')\n        buf.write('L\\n\\x07\\x03\\x07\\x05\\x07O\\n\\x07\\x06\\x07Q\\n\\x07\\r\\x07\\x0e\\x07R\\x03\\x08\\x03\\x08\\x05\\x08W\\n\\x08')\n        buf.write('\\x03\\x08\\x03\\x08\\x05\\x08[\\n\\x08\\x03\\t\\x03\\t\\x03\\t\\x05\\t`\\n\\t\\x06\\tb\\n\\t\\r\\t\\x0e')\n        buf.write('\\tc\\x03\\n\\x03\\n\\x03\\x0b\\x03\\x0b\\x05\\x0bj\\n\\x0b\\x03\\x0c\\x03\\x0c\\x05\\x0cn\\n\\x0c\\x03\\r')\n        buf.write('\\x03\\r\\x03\\r\\x03\\r\\x05\\rt\\n\\r\\x03\\x0e\\x03\\x0e\\x05\\x0ex\\n\\x0e\\x05\\x0ez\\n\\x0e')\n        buf.write('\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0e\\x03\\x0f\\x03\\x0f\\x03\\x0f\\x02\\x02\\x10\\x02\\x04\\x06\\x08\\n\\x0c')\n        buf.write('\\x0e\\x10\\x12\\x14\\x16\\x18\\x1a\\x1c\\x02\\x06\\x03\\x02\\x0e\\x0f\\x04\\x02\\x0e\\x0e\\x10\\x11')\n        buf.write('\\x03\\x02\\n\\x0b\\x03\\x02\\x13\\x16\\x02\\x89\\x02\\x1f\\x03\\x02\\x02\\x02\\x04/\\x03\\x02\\x02\\x02\\x06')\n        buf.write(':\\x03\\x02\\x02\\x02\\x08<\\x03\\x02\\x02\\x02\\nD\\x03\\x02\\x02\\x02\\x0cP\\x03\\x02\\x02\\x02\\x0eV\\x03\\x02\\x02\\x02')\n        buf.write('\\x10a\\x03\\x02\\x02\\x02\\x12e\\x03\\x02\\x02\\x02\\x14g\\x03\\x02\\x02\\x02\\x16k\\x03\\x02\\x02\\x02\\x18o\\x03')\n        buf.write('\\x02\\x02\\x02\\x1ay\\x03\\x02\\x02\\x02\\x1c\\x7f\\x03\\x02\\x02\\x02\\x1e \\x07\\r\\x02\\x02\\x1f\\x1e\\x03')\n        buf.write('\\x02\\x02\\x02\\x1f \\x03\\x02\\x02\\x02 !\\x03\\x02\\x02\\x02!#\\t\\x02\\x02\\x02\"$\\x05\\x1c\\x0f\\x02#\"')\n        buf.write(\"\\x03\\x02\\x02\\x02#$\\x03\\x02\\x02\\x02$%\\x03\\x02\\x02\\x02%&\\x07\\x03\\x02\\x02&'\\x05\\x04\\x03\\x02'(\\x07\")\n        buf.write('\\x04\\x02\\x02(\\x03\\x03\\x02\\x02\\x02)+\\x05\\x06\\x04\\x02*,\\x07\\x05\\x02\\x02+*\\x03\\x02\\x02\\x02+,\\x03\\x02')\n        buf.write('\\x02\\x02,.\\x03\\x02\\x02\\x02-)\\x03\\x02\\x02\\x02.1\\x03\\x02\\x02\\x02/-\\x03\\x02\\x02\\x02/0\\x03\\x02')\n        buf.write('\\x02\\x020\\x05\\x03\\x02\\x02\\x021/\\x03\\x02\\x02\\x022;\\x05\\x14\\x0b\\x023;\\x05\\x0e\\x08')\n        buf.write('\\x024;\\x05\\x08\\x05\\x0256\\x05\\x1c\\x0f\\x0267\\x07\\x06\\x02\\x0278\\x05\\x1c')\n        buf.write('\\x0f\\x028;\\x03\\x02\\x02\\x029;\\x05\\x1a\\x0e\\x02:2\\x03\\x02\\x02\\x02:3\\x03\\x02\\x02\\x02:4')\n        buf.write('\\x03\\x02\\x02\\x02:5\\x03\\x02\\x02\\x02:9\\x03\\x02\\x02\\x02;\\x07\\x03\\x02\\x02\\x02<=\\t\\x03\\x02\\x02=>')\n        buf.write('\\x05\\n\\x06\\x02>\\t\\x03\\x02\\x02\\x02?A\\x07\\x07\\x02\\x02@B\\x05\\x0c\\x07\\x02A@\\x03\\x02\\x02\\x02AB\\x03')\n        buf.write('\\x02\\x02\\x02BC\\x03\\x02\\x02\\x02CE\\x07\\x08\\x02\\x02D?\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02FD\\x03\\x02\\x02')\n        buf.write('\\x02FG\\x03\\x02\\x02\\x02G\\x0b\\x03\\x02\\x02\\x02HK\\x05\\x1c\\x0f\\x02IJ\\x07\\x06\\x02\\x02JL\\x05\\x1c')\n        buf.write('\\x0f\\x02KI\\x03\\x02\\x02\\x02KL\\x03\\x02\\x02\\x02LN\\x03\\x02\\x02\\x02MO\\x07\\t\\x02\\x02NM\\x03\\x02\\x02')\n        buf.write('\\x02NO\\x03\\x02\\x02\\x02OQ\\x03\\x02\\x02\\x02PH\\x03\\x02\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02R')\n        buf.write('S\\x03\\x02\\x02\\x02S\\r\\x03\\x02\\x02\\x02TW\\x05\\x16\\x0c\\x02UW\\x05\\x1a\\x0e\\x02VT\\x03\\x02\\x02\\x02')\n        buf.write('VU\\x03\\x02\\x02\\x02WX\\x03\\x02\\x02\\x02XZ\\x05\\x10\\t\\x02Y[\\x05\\n\\x06\\x02ZY\\x03\\x02\\x02\\x02Z[')\n        buf.write('\\x03\\x02\\x02\\x02[\\x0f\\x03\\x02\\x02\\x02\\\\_\\x05\\x12\\n\\x02]`\\x05\\x16\\x0c\\x02^`\\x05\\x1a\\x0e')\n        buf.write('\\x02_]\\x03\\x02\\x02\\x02_^\\x03\\x02\\x02\\x02`b\\x03\\x02\\x02\\x02a\\\\\\x03\\x02\\x02\\x02bc\\x03\\x02\\x02\\x02')\n        buf.write('ca\\x03\\x02\\x02\\x02cd\\x03\\x02\\x02\\x02d\\x11\\x03\\x02\\x02\\x02ef\\t\\x04\\x02\\x02f\\x13\\x03\\x02\\x02\\x02')\n        buf.write('gi\\x05\\x16\\x0c\\x02hj\\x05\\n\\x06\\x02ih\\x03\\x02\\x02\\x02ij\\x03\\x02\\x02\\x02j\\x15\\x03\\x02\\x02\\x02')\n        buf.write('km\\x05\\x1c\\x0f\\x02ln\\x05\\x18\\r\\x02ml\\x03\\x02\\x02\\x02mn\\x03\\x02\\x02\\x02n\\x17\\x03\\x02\\x02')\n        buf.write('\\x02op\\x07\\x0c\\x02\\x02ps\\x05\\x1c\\x0f\\x02qr\\x07\\x0c\\x02\\x02rt\\x05\\x1c\\x0f\\x02sq\\x03\\x02\\x02')\n        buf.write('\\x02st\\x03\\x02\\x02\\x02t\\x19\\x03\\x02\\x02\\x02uw\\x07\\x12\\x02\\x02vx\\x05\\x1c\\x0f\\x02wv\\x03\\x02')\n        buf.write('\\x02\\x02wx\\x03\\x02\\x02\\x02xz\\x03\\x02\\x02\\x02yu\\x03\\x02\\x02\\x02yz\\x03\\x02\\x02\\x02z{\\x03\\x02\\x02\\x02')\n        buf.write('{|\\x07\\x03\\x02\\x02|}\\x05\\x04\\x03\\x02}~\\x07\\x04\\x02\\x02~\\x1b\\x03\\x02\\x02\\x02\\x7f\\x80\\t')\n        buf.write('\\x05\\x02\\x02\\x80\\x1d\\x03\\x02\\x02\\x02\\x15\\x1f#+/:AFKNRVZ_cimswy')\n        return buf.getvalue()", "fn_id": 0, "class_fn": false, "repo": "qwang70/GraphVizDotToDatabaseParsing", "file": "script/DOTParser.py", "last_update_at": "2021-08-13T04:55:13+00:00", "pred": {"ppl": 1.486249566078186, "ppl_lower": 1.5323021411895752, "ppl/lowercase_ppl": -1.077009318149117, "ppl/zlib": 0.000334958475963927, "Min_5.0% Prob": 5.563689521714752, "Min_10.0% Prob": 3.639407542406344, "Min_20.0% Prob": 1.9750959314405918, "Min_30.0% Prob": 1.3243626698827238, "Min_40.0% Prob": 0.9910781231232347, "Min_50.0% Prob": 0.7932762508132493, "Min_60.0% Prob": 0.6612853060345408}}
{"hexsha": "79b07cf6f3f380f296c7ce80ec1c84c5aa0ae81e", "ext": "py", "lang": "Python", "content": "def deep_seq_design():\n    root_dir = f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep'\n    mut_matrix_anneal = np.zeros((20, 20))\n    native_aa_all = []\n    design_aa_all = []\n    seq_len = []\n    recovery = []\n    pdb_id_all = []\n    recovery_res = np.zeros(20)\n    count_res = np.zeros(20)\n    num = 100\n    for pdb_id in pdb_selected:\n        seq_best_all = []\n        for j in range(num):\n            data_anneal = h5py.File(f'{root_dir}/{pdb_id}_profile_{j}.h5', 'r')\n            designed_seq = data_anneal['profile'][()]\n            seq_best = designed_seq[1]\n            seq_best_all.append(seq_best)\n            seq_native = designed_seq[0]\n            recovery_fraction = np.sum(seq_best == seq_native) / float(len(seq_native))\n            recovery.append(recovery_fraction)\n            seq_len.append(len(seq_native))\n            pdb_id_all.append(pdb_id)\n            for i in range(seq_native.shape[0]):\n                mut_matrix_anneal[map_aa[seq_native[i]], map_aa[seq_best[i]]] += 1\n                native_aa_all.append(map_aa[seq_native[i]])\n                design_aa_all.append(map_aa[seq_best[i]])\n            for i in range(20):\n                idx = seq_native == i\n                recovery_res[i] += np.sum(seq_best[idx] == seq_native[idx])\n                count_res[i] += len(seq_native[idx])\n        with open(f'{root_dir}/{pdb_id}_seq_best.fasta', 'w') as mf:\n            s = ''.join([idx2aa[x] for x in seq_native])\n            mf.write(f'>0\\n{s}\\n')\n            for j in range(len(seq_best_all)):\n                s = ''.join([idx2aa[x] for x in seq_best_all[j]])\n                mf.write(f'>{j + 1}\\n')\n                mf.write(f'{s}\\n')\n    df = pd.DataFrame({'pdb': pdb_id_all, 'seq_len': seq_len, 'recovery': recovery})\n    df.to_csv(f'{root_dir}/recovery.csv', index=False)\n    np.save(f'data/design/cullpdb_val_deep/{exp_flag}anneal_val_deep/mut_matrix_anneal.npy', mut_matrix_anneal)\n    df = pd.DataFrame({'native_aa': native_aa_all, 'design_aa': design_aa_all})\n    df.to_csv(f'{root_dir}/native_design_aa.csv', index=False)\n    fig = pl.figure()\n    pl.plot(df['seq_len'], df['recovery'], 'bo')\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_seqlen_recovery.pdf')\n    fig = pl.figure()\n    pl.hist(df['recovery'], bins=np.arange(10) * 0.05 + 0.05)\n    pl.xlabel('native sequence recovery fraction')\n    pl.ylabel('N')\n    pl.savefig(f'{root_dir}/full_seq_design_recovery_hist.pdf')\n    fig = pl.figure()\n    pl.plot(np.arange(20), recovery_res / count_res)\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue recovery fraction in full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_recovery.pdf')\n    fig = pl.figure()\n    mut_matrix_anneal_freq = mut_matrix_anneal / mut_matrix_anneal.sum(axis=1)[:, None]\n    pl.imshow(mut_matrix_anneal_freq, cmap='jet')\n    pl.xlabel('mutated residue')\n    pl.ylabel('native residue')\n    pl.xticks(np.arange(20), labels=ordered_aa)\n    pl.yticks(np.arange(20), labels=ordered_aa)\n    pl.colorbar()\n    pl.title('full seq redesign')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use.pdf')\n    fig = pl.figure()\n    res_all = np.concatenate(seq_best_all).flatten()\n    aa_bins = np.arange(21) - 0.5\n    pl.hist(res_all, bins=aa_bins, histtype='step')\n    pl.xticks(np.arange(20), labels=aa)\n    pl.title('residue use frequency')\n    pl.savefig(f'{root_dir}/full_seq_design_residue_use_frequency.pdf')", "fn_id": 2, "class_fn": false, "repo": "lahplover/nnef", "file": "nnef/scripts/designed_seq.py", "last_update_at": "2021-06-30T06:47:00+00:00", "pred": {"ppl": 2.17604660987854, "ppl_lower": 2.2867207527160645, "ppl/lowercase_ppl": -1.0638050608575198, "ppl/zlib": 0.0007660194568918604, "Min_5.0% Prob": 8.137670619815003, "Min_10.0% Prob": 5.881923278172811, "Min_20.0% Prob": 3.6522059557484647, "Min_30.0% Prob": 2.558504180093996, "Min_40.0% Prob": 1.937218170695025, "Min_50.0% Prob": 1.555236072283158, "Min_60.0% Prob": 1.2973285724612509}}
{"hexsha": "1d58be5f8c298cf630d37e7dc4f29b9760416dc5", "ext": "py", "lang": "Python", "content": "def parse_net_xml(doc):\n    total = len(list(doc.getiterator('wireless-network')))\n    tenth = total / 10\n    count = 0\n    clients = list()\n    parsed_list = []\n    for network in doc.getiterator('wireless-network'):\n        count += 1\n        try:\n            if count % tenth == 0:\n                continue\n        except ZeroDivisionError:\n            print('Division by zero error')\n        type = network.attrib['type']\n        channel = network.find('channel').text\n        bssid = network.find('BSSID').text\n        if type == 'probe' or channel == '0':\n            continue\n        encryption = network.getiterator('encryption')\n        privacy = ''\n        cipher = ''\n        auth = ''\n        if encryption is not None:\n            for item in encryption:\n                if item.text.startswith('WEP'):\n                    privacy = 'WEP'\n                    cipher = 'WEP'\n                    auth = ''\n                    break\n                elif item.text.startswith('WPA'):\n                    if item.text.endswith('PSK'):\n                        auth = 'PSK'\n                    elif item.text.endswith('AES-CCM'):\n                        cipher = 'CCMP ' + cipher\n                    elif item.text.endswith('TKIP'):\n                        cipher += 'TKIP '\n                elif item.text == 'None':\n                    privacy = 'OPN'\n        cipher = cipher.strip()\n        if cipher.find('CCMP') > -1:\n            privacy = 'WPA2'\n        if cipher.find('TKIP') > -1:\n            privacy += 'WPA'\n        power = network.find('snr-info')\n        dbm = ''\n        if power is not None:\n            dbm = power.find('max_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('last_signal_dbm').text\n        if int(dbm) > 1:\n            dbm = power.find('min_signal_dbm').text\n        ssid = network.find('SSID')\n        essid_text = ''\n        if ssid is not None:\n            essid_text = network.find('SSID').find('essid').text\n        gps = network.find('gps-info')\n        lat, lon = ('', '')\n        if gps is not None:\n            lat = network.find('gps-info').find('min-lat').text\n            lon = network.find('gps-info').find('min-lon').text\n        data = dict(ESSID=essid_text, BSSID=bssid, Channel=channel, Privacy=privacy, Cipher=cipher, Authenticaiton=auth, DBM=dbm)\n        if lat and lon is not None:\n            google_map = 'https://maps.google.com/maps?q=' + lat + ',' + lon + '&ll=' + lat + ',' + lon + '&z=17'\n            google_map_link = '<a href=\"' + google_map + '\" target=\"_blank\"> Google map link</a>'\n            location = dict(Latitude=lat, Longitude=lon, Googlemap=google_map_link)\n        else:\n            not_found = 'Not coordinates available'\n            location = dict(Latitude=not_found, Longitude=not_found)\n        client_list = associatedClients(network, bssid, essid_text)\n        if client_list is not None:\n            data['client'] = client_list\n        else:\n            not_found = 'No clients found'\n            data['client'] = not_found\n        data['location'] = location\n        parsed_list.append(data)\n    return parsed_list", "fn_id": 1, "class_fn": false, "repo": "binkybear/kismet_web_viewer", "file": "app/netxml_to_csv.py", "last_update_at": "2021-05-22T03:59:05+00:00", "pred": {"ppl": 2.5388665199279785, "ppl_lower": 2.675916910171509, "ppl/lowercase_ppl": -1.0564273499139123, "ppl/zlib": 0.0009536517189698381, "Min_5.0% Prob": 8.337825872959234, "Min_10.0% Prob": 6.358749027493634, "Min_20.0% Prob": 4.223727940763317, "Min_30.0% Prob": 3.0306028946608055, "Min_40.0% Prob": 2.3145018019859895, "Min_50.0% Prob": 1.860058777839245, "Min_60.0% Prob": 1.5540550902536612}}
{"hexsha": "bc9332449ba47eee635aabdc3d23964f3b29f165", "ext": "py", "lang": "Python", "content": "def get_ratings(path, users_file_name, books_file_name):\n    df_users = pd.read_csv(path + users_file_name, encoding='UTF8')\n    df_books = pd.read_csv(path + books_file_name, encoding='UTF8')\n    df_users_books = pd.DataFrame(df_users, columns=['user_id', 'like'])\n    sr_users = []\n    sr_books = []\n    sr_ratings = []\n    str_like = list(np.array(df_users_books['like'].tolist()))\n    list_like = []\n    for i in str_like:\n        i = i.lstrip('[').rstrip(']')\n        i = i.split(', ')\n        list_like.append(i)\n    for user_idx in df_users_books['user_id']:\n        for book_idx in list_like[user_idx]:\n            if book_idx == '':\n                break\n            sr_users.append(user_idx)\n            sr_books.append(book_idx)\n            sr_ratings.append(1)\n    for book_idx in range(len(df_books)):\n        if sr_users[0]:\n            sr_users.append(sr_users[0])\n        if sr_books[0]:\n            sr_books.append(book_idx)\n        if sr_ratings[0]:\n            sr_ratings.append(0)\n    R = pd.DataFrame({'user_idx': sr_users, 'book_idx': sr_books, 'ratings': sr_ratings})\n    R = R.pivot_table('ratings', index='user_idx', columns='book_idx').fillna(0)\n    R.rename(columns=lambda x: int(x), inplace=True)\n    R = R.sort_index(axis=1)\n    return R", "fn_id": 0, "class_fn": false, "repo": "osamhack2021/AI_APP_handylib_devlib", "file": "AI/recommendation/ALS.py", "last_update_at": "2021-12-16T10:41:16+00:00", "pred": {"ppl": 2.08198881149292, "ppl_lower": 2.1638600826263428, "ppl/lowercase_ppl": -1.052596297198386, "ppl/zlib": 0.001594181730990497, "Min_5.0% Prob": 7.127798414230346, "Min_10.0% Prob": 5.244504761695862, "Min_20.0% Prob": 3.3242658450279707, "Min_30.0% Prob": 2.392301136058224, "Min_40.0% Prob": 1.8241725190094225, "Min_50.0% Prob": 1.4639596175677672, "Min_60.0% Prob": 1.224758334132103}}
{"hexsha": "876c7c08adc0ef2ebe9987da8f1125f3cf04b813", "ext": "py", "lang": "Python", "content": "def word_bag_list(org_text):\n    \"\"\"Take text and do sum, return sumed sentence list.\"\"\"\n    nlp = spacy.load('en_core_web_sm')\n    tr = pytextrank.TextRank(logger=None)\n    nlp.add_pipe(tr.PipelineComponent, name='textrank', last=True)\n    doc = nlp(org_text)\n    whole_sent = ''\n    for sent in doc._.textrank.summary(limit_phrases=15, limit_sentences=5):\n        whole_sent = whole_sent + repr(sent).rstrip() + ' '\n    return [whole_sent]", "fn_id": 0, "class_fn": false, "repo": "liux2/Allegheny-College-CMPSC-COMP-liux2", "file": "music_sug/music_main/text_proc.py", "last_update_at": "2021-05-21T01:37:44+00:00", "pred": {"ppl": 3.8076841831207275, "ppl_lower": 5.438253879547119, "ppl/lowercase_ppl": -1.2665902819613855, "ppl/zlib": 0.004915519038180007, "Min_5.0% Prob": 11.013350078037806, "Min_10.0% Prob": 9.095772436686925, "Min_20.0% Prob": 6.043705751155985, "Min_30.0% Prob": 4.32548314197497, "Min_40.0% Prob": 3.363117677641326, "Min_50.0% Prob": 2.6876667078635466, "Min_60.0% Prob": 2.2326282667821613}}
{"hexsha": "6e58f05000ac2f4b1655ab9325ef2cbb23caea8b", "ext": "py", "lang": "Python", "content": "def remapchunk(seg, chunk, chunkindex, scratchpath, layer=1, bits_per_dim=10, maxmip=11, correctvers=True):\n    x, y, z = chunkindex\n    pcgchunkid = io.pcg.get_chunk_id(layer=layer, x=x, y=y, z=z, bits_per_dim=bits_per_dim)\n    data = seg[chunk.index()]\n    try:\n        if correctvers:\n            mappings = readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n        else:\n            mappings = _readremapfiles(scratchpath, chunkindex, pcgchunkid, maxmip=maxmip)\n    except subprocess.CalledProcessError as e:\n        if data.max() == 0:\n            return data\n        else:\n            raise e\n    for mapping in mappings:\n        data = fastremap.remap(data, mapping, in_place=False, preserve_missing_labels=True)\n    seg[chunk.index()] = data\n    return seg", "fn_id": 2, "class_fn": false, "repo": "ZettaAI/Synaptor", "file": "synaptor/proc/io/agglomeration.py", "last_update_at": "2021-09-13T07:02:16+00:00", "pred": {"ppl": 4.578592300415039, "ppl_lower": 5.376470565795898, "ppl/lowercase_ppl": -1.105587896033215, "ppl/zlib": 0.004474681155570481, "Min_5.0% Prob": 11.27695369720459, "Min_10.0% Prob": 8.951866357222848, "Min_20.0% Prob": 6.244986306066099, "Min_30.0% Prob": 4.738117713859116, "Min_40.0% Prob": 3.7014011772730018, "Min_50.0% Prob": 3.02448851653728, "Min_60.0% Prob": 2.5447728004333356}}
{"hexsha": "639b37fb1f2788f702b824b85cd19c165e09f9f6", "ext": "py", "lang": "Python", "content": "def test_cached_property():\n    \"\"\"Test the cached_property decorator\"\"\"\n    new_value = '99999'\n\n    class DummyClass:\n\n        def __init__(self):\n            self.value = '11111'\n\n        def change_value_in_instance(self, value):\n            self.value = value\n\n        @cached_property\n        def test_property(self):\n            return self.value\n\n        @property\n        def test_uncached_property(self):\n            return self.value\n    testClass = DummyClass()\n    first_cached_test_property = testClass.test_property\n    first_uncached_test_property = testClass.test_uncached_property\n    testClass.change_value_in_instance(new_value)\n    second_cached_test_property = testClass.test_property\n    second_uncached_test_property = testClass.test_uncached_property\n    assert first_cached_test_property == second_cached_test_property\n    assert first_cached_test_property == '11111'\n    assert first_uncached_test_property != second_uncached_test_property\n    assert first_uncached_test_property == '11111'\n    assert second_uncached_test_property == '99999'", "fn_id": 0, "class_fn": false, "repo": "musa-atlihan/jina", "file": "tests/unit/test_helper.py", "last_update_at": "2021-04-22T17:14:32+00:00", "pred": {"ppl": 1.7119272947311401, "ppl_lower": 1.7435858249664307, "ppl/lowercase_ppl": -1.0340835707908098, "ppl/zlib": 0.001947897857923485, "Min_5.0% Prob": 6.812450613294329, "Min_10.0% Prob": 4.637800506183079, "Min_20.0% Prob": 2.6227233692219385, "Min_30.0% Prob": 1.7876068741776223, "Min_40.0% Prob": 1.3446331781132714, "Min_50.0% Prob": 1.0750848707781795, "Min_60.0% Prob": 0.9001943376847203}}
{"hexsha": "b93ceb63b6b34d7c97ec44530d47645b54199e3e", "ext": "py", "lang": "Python", "content": "def ndcg_at_ks(r, k_list, method=1, include_dcg=False):\n    \"\"\"\n\n    :param r: \u5339\u914darray \u957f\u5ea6\u4e3a\u6bcf\u4e2a\u9884\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u7ed3\u679c\n    :param k_list:\n    :param method:\n    :param include_dcg:\n    :return:\n    \"\"\"\n    if r.shape[0] == 0:\n        ndcg_array = [0.0] * len(k_list)\n        dcg_array = [0.0] * len(k_list)\n    else:\n        dcg_array = dcg_at_ks(r, k_list, method)\n        ideal_r = np.array(sorted(r, reverse=True))\n        dcg_max_array = dcg_at_ks(ideal_r, k_list, method)\n        ndcg_array = dcg_array / dcg_max_array\n        ndcg_array = np.nan_to_num(ndcg_array)\n    if include_dcg:\n        return (ndcg_array, dcg_array)\n    else:\n        return ndcg_array", "fn_id": 18, "class_fn": false, "repo": "qtli/AOT", "file": "utils/common.py", "last_update_at": "2021-09-07T14:49:29+00:00", "pred": {"ppl": 2.131131887435913, "ppl_lower": 2.3232381343841553, "ppl/lowercase_ppl": -1.114066410195367, "ppl/zlib": 0.0024727230102257196, "Min_5.0% Prob": 7.78727928797404, "Min_10.0% Prob": 5.656832218170166, "Min_20.0% Prob": 3.5444239728591023, "Min_30.0% Prob": 2.500315657963878, "Min_40.0% Prob": 1.8849759198652178, "Min_50.0% Prob": 1.5183226215895118, "Min_60.0% Prob": 1.260956067174941}}
{"hexsha": "7d0de049fa37b3a2b53aa13e4a8de6bd43d360ad", "ext": "py", "lang": "Python", "content": "def update_progress(value):\n    global PROGRESS\n    PROGRESS['value'] = value\n    return PROGRESS['value']", "fn_id": 0, "class_fn": false, "repo": "scyv/Smiley", "file": "smiley/utils.py", "last_update_at": "2021-12-10T23:49:05+00:00", "pred": {"ppl": 4.907145023345947, "ppl_lower": 4.62897253036499, "ppl/lowercase_ppl": -0.9633132172306633, "ppl/zlib": 0.020393491167329667, "Min_5.0% Prob": 6.636556148529053, "Min_10.0% Prob": 6.23768162727356, "Min_20.0% Prob": 5.559873580932617, "Min_30.0% Prob": 4.900037867682321, "Min_40.0% Prob": 3.7078894078731537, "Min_50.0% Prob": 3.2045462876558304, "Min_60.0% Prob": 2.6352334121863046}}
{"hexsha": "6494d7e235268c91bde539243623f44dd265dd50", "ext": "py", "lang": "Python", "content": "def create_fake_server(messages=[]):\n    all_messages = _standard_join_messages() + messages\n\n    async def _fake_server(websocket, _path):\n        _join_message = await websocket.recv()\n        for message in all_messages:\n            await websocket.send(json.dumps(message))\n    return _fake_server", "fn_id": 1, "class_fn": false, "repo": "UrbanOS-Examples/PredictiveParking", "file": "tests/fake_websocket_server.py", "last_update_at": "2021-07-01T16:51:18+00:00", "pred": {"ppl": 4.6671881675720215, "ppl_lower": 4.6671881675720215, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009568675682593576, "Min_5.0% Prob": 10.451591491699219, "Min_10.0% Prob": 8.528250353676933, "Min_20.0% Prob": 6.5388336181640625, "Min_30.0% Prob": 5.064191165424528, "Min_40.0% Prob": 3.817945144299803, "Min_50.0% Prob": 3.1079722524931035, "Min_60.0% Prob": 2.611111491831929}}
{"hexsha": "be45de239f2a958420b5ae5de4b313cf3431599f", "ext": "py", "lang": "Python", "content": "def get_playlist_tracks(args):\n    playlists = []\n    current_user_id = args.get('current_user_id')\n    limit = args.get('limit')\n    offset = args.get('offset')\n    db = get_db_read_replica()\n    with db.scoped_session() as session:\n        try:\n            playlist_id = args.get('playlist_id')\n            playlist = session.query(Playlist).filter(Playlist.is_current == True, Playlist.playlist_id == playlist_id).first()\n            if playlist is None:\n                return None\n            playlist_track_ids = [track_id['track'] for track_id in playlist.playlist_contents['track_ids']]\n            if limit and offset:\n                playlist_track_ids = playlist_track_ids[offset:offset + limit]\n            playlist_tracks = session.query(Track).filter(Track.is_current == True, Track.track_id.in_(playlist_track_ids)).all()\n            tracks = helpers.query_result_to_list(playlist_tracks)\n            tracks = populate_track_metadata(session, playlist_track_ids, tracks, current_user_id)\n            if args.get('with_users', False):\n                add_users_to_tracks(session, tracks)\n            tracks_dict = {track['track_id']: track for track in tracks}\n            playlist_tracks = []\n            for track_id in playlist_track_ids:\n                playlist_tracks.append(tracks_dict[track_id])\n            return playlist_tracks\n        except sqlalchemy.orm.exc.NoResultFound:\n            pass\n    return playlists", "fn_id": 0, "class_fn": false, "repo": "raymondjacobson/audius-protocol", "file": "discovery-provider/src/queries/get_playlist_tracks.py", "last_update_at": "2021-05-29T04:25:03+00:00", "pred": {"ppl": 1.757021427154541, "ppl_lower": 2.072338342666626, "ppl/lowercase_ppl": -1.2928526278732624, "ppl/zlib": 0.0011669151230593764, "Min_5.0% Prob": 5.944797067081227, "Min_10.0% Prob": 4.263827088900975, "Min_20.0% Prob": 2.625449814007316, "Min_30.0% Prob": 1.8362908490071788, "Min_40.0% Prob": 1.3993024538707484, "Min_50.0% Prob": 1.1250350950649997, "Min_60.0% Prob": 0.9425026237383641}}
{"hexsha": "e739faa956bee4ffde5b12e2607b0430bc975de6", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef archive_repositories(archive_repositories_raw: bytes) -> ArchiveRepositories:\n    \"\"\"Provides an ArchiveRepositories instance for the sample archive manifest.\"\"\"\n    return ArchiveRepositories(archive_repositories_raw)", "fn_id": 0, "class_fn": false, "repo": "crashvb/docker-sign-verify", "file": "tests/test_archiverepositories.py", "last_update_at": "2021-09-16T18:44:39+00:00", "pred": {"ppl": 5.742301940917969, "ppl_lower": 9.399581909179688, "ppl/lowercase_ppl": -1.281947638308278, "ppl/zlib": 0.012947112332900456, "Min_5.0% Prob": 9.029661178588867, "Min_10.0% Prob": 8.176450252532959, "Min_20.0% Prob": 6.019344753689236, "Min_30.0% Prob": 5.024131756562453, "Min_40.0% Prob": 4.027463267246882, "Min_50.0% Prob": 3.448403851552443, "Min_60.0% Prob": 2.8945667147636414}}
{"hexsha": "f2e5aa3454e20bde6dfc287c3f2e7fede42c0287", "ext": "py", "lang": "Python", "content": "@overload\ndef assert_equal(actual: scipy.special.orthogonal.orthopoly1d, desired: numpy.poly1d):\n    \"\"\"\n    usage.scipy: 2\n    \"\"\"\n    ...", "fn_id": 2892, "class_fn": false, "repo": "pydata-apis/python-api-record", "file": "data/typing/numpy.testing._private.utils.py", "last_update_at": "2021-11-08T20:16:06+00:00", "pred": {"ppl": 5.329451084136963, "ppl_lower": 5.329451084136963, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.01467761619985698, "Min_5.0% Prob": 12.309774398803711, "Min_10.0% Prob": 9.713799715042114, "Min_20.0% Prob": 7.095149457454681, "Min_30.0% Prob": 5.416092435518901, "Min_40.0% Prob": 4.13921738021514, "Min_50.0% Prob": 3.392746953737168, "Min_60.0% Prob": 2.8651137115061283}}
{"hexsha": "bcc284a877dbebcbe1f579fbdd8c29590594f15e", "ext": "py", "lang": "Python", "content": "@unittest.skipIf(sys.platform == 'win32', 'Fail to create temp dir.')\n@pytest.mark.parametrize('client_mode', [True, False])\ndef test_two_node(two_node_cluster, working_dir, client_mode):\n    cluster, _ = two_node_cluster\n    address, env, PKG_DIR = start_client_server(cluster, client_mode)\n    runtime_env = f'{{  \"working_dir\": \"{working_dir}\" }}'\n    execute_statement = 'print(sum(ray.get([run_test.remote()] * 1000)))'\n    script = driver_script.format(**locals())\n    out = run_string_as_driver(script, env)\n    assert out.strip().split()[-1] == '1000'\n    assert len(list(Path(PKG_DIR).iterdir())) == 1", "fn_id": 7, "class_fn": false, "repo": "jenhaoyang/ray", "file": "python/ray/tests/test_runtime_env.py", "last_update_at": "2021-04-30T05:22:12+00:00", "pred": {"ppl": 3.4770686626434326, "ppl_lower": 4.109345436096191, "ppl/lowercase_ppl": -1.1340680053565362, "ppl/zlib": 0.003332057755345611, "Min_5.0% Prob": 9.115281438827514, "Min_10.0% Prob": 7.082786881923676, "Min_20.0% Prob": 4.948501491546631, "Min_30.0% Prob": 3.8433801849683125, "Min_40.0% Prob": 2.995962929210545, "Min_50.0% Prob": 2.4654775195487657, "Min_60.0% Prob": 2.0810799450297988}}
{"hexsha": "a318f13cb13b18c46060393025e55c03c4986095", "ext": "py", "lang": "Python", "content": "@MSC.route('/candidates')\ndef candidates():\n    text = request.args.get('text', default='', type=str)\n    limit = request.args.get('limit', default=5, type=int)\n    htmlflag = request.args.get('html', default=0, type=int)\n    rval = {}\n    rval['input'] = text\n    runningOffset = 0\n    if text == '':\n        return 'No text received. Usage: url/candidates?html=0&limit=2&text=texttomedicalspellcheck'\n    respJSONstring = corrector.GetALLCandidatesScoredJSON(text)\n    print(respJSONstring)\n    rval = json.loads(respJSONstring)\n    for result in rval['results']:\n        result['candidates'] = result['candidates'][:limit]\n    if 'results' not in rval.keys() or len(rval['results']) == 0:\n        rval['results'] = 'CORRECT'\n    if bool(htmlflag):\n        return json2html.convert(json.dumps(rval)) + '<br><br><br>Try me out: <br><br>' + formcode\n    else:\n        return json.dumps(rval, indent=2)", "fn_id": 2, "class_fn": false, "repo": "jackneil/medSpellCheck", "file": "webserver.py", "last_update_at": "2021-07-07T02:07:24+00:00", "pred": {"ppl": 4.967206001281738, "ppl_lower": 4.704301834106445, "ppl/lowercase_ppl": -0.9660730071235779, "ppl/zlib": 0.003684729906321466, "Min_5.0% Prob": 12.096817383399376, "Min_10.0% Prob": 9.67919450539809, "Min_20.0% Prob": 6.8035970274007544, "Min_30.0% Prob": 5.093879891347282, "Min_40.0% Prob": 3.9560393210289613, "Min_50.0% Prob": 3.191715803809632, "Min_60.0% Prob": 2.6785776475620158}}
{"hexsha": "c908d4e2fcbe9433c55ec3ffa39b22b2f66872dd", "ext": "py", "lang": "Python", "content": "def calc_data_maxima(data, order):\n    \"\"\"Calculate the local maxima using an exclusion of order to avoid multiple close maxima.\n\n    :param data: 3D numpy array (axis 0: time)\n    :param order: number of points to consider for maxima\n    :return: 3D numpy bool array with same shape as data, True if maximum\n    \"\"\"\n    argrelmax = signal.argrelmax(data, order=order, mode='wrap')\n    dmean = data.mean(axis=0)\n    data_maxima = np.zeros(data.shape, dtype=bool)\n    for i, j, k in zip(*argrelmax):\n        if data[i, j, k] > dmean[j, k]:\n            data_maxima[i, j, k] = True\n    return data_maxima", "fn_id": 0, "class_fn": false, "repo": "markmuetz/cosmic", "file": "cosmic/WP2/multipeak.py", "last_update_at": "2021-01-26T02:25:48+00:00", "pred": {"ppl": 3.1741602420806885, "ppl_lower": 3.58956241607666, "ppl/lowercase_ppl": -1.1064784491680029, "ppl/zlib": 0.00360950970836743, "Min_5.0% Prob": 8.678147262997097, "Min_10.0% Prob": 7.181955337524414, "Min_20.0% Prob": 4.880832304825654, "Min_30.0% Prob": 3.6531072573228314, "Min_40.0% Prob": 2.8203976863139384, "Min_50.0% Prob": 2.301474641279682, "Min_60.0% Prob": 1.9197717787580446}}
{"hexsha": "6fb0abbb3b81f5bf6e666d791414fa75ce85b499", "ext": "py", "lang": "Python", "content": "def _read_checkpoint_file(checkpoint_file: Optional[str]) -> Tuple[Set[str], Set[str]]:\n    colls, users = (set(), set())\n    if checkpoint_file:\n        with open(checkpoint_file) as fd:\n            for line in fd.readlines():\n                if line.startswith('CHECKPOINT'):\n                    _, type_, oid = line.split()\n                    if type_ == 'collection':\n                        colls.add(oid)\n                    elif type_ == 'user':\n                        users.add(oid)\n    return (colls, users)", "fn_id": 6, "class_fn": false, "repo": "girder/dkc-next", "file": "dkc/core/management/commands/migrate_dkc_db.py", "last_update_at": "2021-02-17T20:34:11+00:00", "pred": {"ppl": 2.8940796852111816, "ppl_lower": 3.0052905082702637, "ppl/lowercase_ppl": -1.0354834299527536, "ppl/zlib": 0.004427779843572681, "Min_5.0% Prob": 8.75108289718628, "Min_10.0% Prob": 7.223206043243408, "Min_20.0% Prob": 4.862400720516841, "Min_30.0% Prob": 3.48591496464279, "Min_40.0% Prob": 2.6485472800365337, "Min_50.0% Prob": 2.123831867224847, "Min_60.0% Prob": 1.7708148174117215}}
{"hexsha": "567e27ecd176008a4a9c4c66d72d8200e72ba772", "ext": "py", "lang": "Python", "content": "@pytest.fixture(scope='session', autouse=True)\ndef cleanup(request):\n\n    def remove_test_dir():\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scistree.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.scite.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.huntress.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.booster.log'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/consensus.CFMatrix'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.info2'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.newick'))\n        tsc.ul.remove(tsc.ul.get_file('trisicell.datasets/test/test.phiscsb.png'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_map'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/_tmp'))\n        tsc.ul.cleanup(tsc.ul.get_file('trisicell.datasets/test/test'))\n    request.addfinalizer(remove_test_dir)", "fn_id": 0, "class_fn": false, "repo": "faridrashidi/trisicell", "file": "tests/test_commands.py", "last_update_at": "2021-11-16T03:14:36+00:00", "pred": {"ppl": 1.6340429782867432, "ppl_lower": 1.668925166130066, "ppl/lowercase_ppl": -1.0430143439322108, "ppl/zlib": 0.0018959741258415955, "Min_5.0% Prob": 7.2220810907227655, "Min_10.0% Prob": 4.619273197232631, "Min_20.0% Prob": 2.44232093206231, "Min_30.0% Prob": 1.636888843334732, "Min_40.0% Prob": 1.2292932810848007, "Min_50.0% Prob": 0.9837487608229072, "Min_60.0% Prob": 0.8198499200325333}}
{"hexsha": "454c918ee83d8f3c85828d2e941785840208d81e", "ext": "py", "lang": "Python", "content": "def text_error(code: int, error: Exception, url: str, usage: str='') -> Response:\n    \"\"\"Format error message as plain text\n\n    Returns\n    -------\n    error message formatted as plain text.\n    \"\"\"\n    return PlainTextResponse(content=f'Error {code}: {ERROR_CODE_MESSAGES[code]}\\n\\n{error}\\n\\nUsage details are available from {usage}\\n\\nRequest:\\n{url}\\n\\nRequest Submitted:\\n{UTCDateTime().isoformat()}Z\\n\\nService Version:\\n{VERSION}\\n', status_code=code)", "fn_id": 5, "class_fn": false, "repo": "alejandrodelcampillo/geomag-algorithms", "file": "geomagio/api/ws/app.py", "last_update_at": "2021-02-22T23:45:22+00:00", "pred": {"ppl": 6.699857711791992, "ppl_lower": 9.584592819213867, "ppl/lowercase_ppl": -1.1882515044007864, "ppl/zlib": 0.006491762078926416, "Min_5.0% Prob": 10.602505842844645, "Min_10.0% Prob": 8.446625342735878, "Min_20.0% Prob": 6.42908854667957, "Min_30.0% Prob": 5.274055065252842, "Min_40.0% Prob": 4.404956728219986, "Min_50.0% Prob": 3.6933972707161535, "Min_60.0% Prob": 3.1482054728728075}}
{"hexsha": "8c985af6b5bde8b51d64a34a81f930b1cbbde109", "ext": "py", "lang": "Python", "content": "def decode_UHFRFModeTable(data):\n    logger.debug(func())\n    par = {}\n    if len(data) == 0:\n        return (None, data)\n    header = data[0:par_header_len]\n    msgtype, length = struct.unpack(par_header, header)\n    msgtype = msgtype & BITMASK(10)\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    if msgtype != Message_struct['UHFRFModeTable']['type']:\n        return (None, data)\n    body = data[par_header_len:length]\n    logger.debug('%s (type=%d len=%d)' % (func(), msgtype, length))\n    i = 0\n    ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n    while ret:\n        par['UHFC1G2RFModeTableEntry' + str(i)] = ret\n        ret, body = decode('UHFC1G2RFModeTableEntry')(body)\n        i += 1\n    return (par, data[length:])", "fn_id": 18, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/llrp_proto.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 3.724483013153076, "ppl_lower": 4.01576042175293, "ppl/lowercase_ppl": -1.0572644797340705, "ppl/zlib": 0.004070984686638508, "Min_5.0% Prob": 9.964516639709473, "Min_10.0% Prob": 8.057453513145447, "Min_20.0% Prob": 5.607288971543312, "Min_30.0% Prob": 4.166695177555084, "Min_40.0% Prob": 3.2494205528249345, "Min_50.0% Prob": 2.6298208565761647, "Min_60.0% Prob": 2.198311950170642}}
{"hexsha": "b0b49ffed87028f7676ecd3a3526e65ea082c9a2", "ext": "py", "lang": "Python", "content": "def obtain_pcaplot(model):\n    for idx, layer in enumerate(model.layers):\n        if layer.__class__.__name__ == 'Dense':\n            all_weights = layer.get_weights()\n            weights = all_weights[0]\n            pca = applyPCA(weights, np.array(weights).shape[1], drawPlot=True, isReshape=False)\n            break", "fn_id": 10, "class_fn": false, "repo": "kilinco/spec-img-finesse", "file": "CNN_version/final.py", "last_update_at": "2021-06-03T16:52:44+00:00", "pred": {"ppl": 5.817091941833496, "ppl_lower": 8.718056678771973, "ppl/lowercase_ppl": -1.2297795186922693, "ppl/zlib": 0.0091708357839421, "Min_5.0% Prob": 11.85766077041626, "Min_10.0% Prob": 10.200221836566925, "Min_20.0% Prob": 7.633204862475395, "Min_30.0% Prob": 5.687292327483495, "Min_40.0% Prob": 4.336881787487955, "Min_50.0% Prob": 3.5325419066882713, "Min_60.0% Prob": 2.9732883637961076}}
{"hexsha": "af3e93794d127b40b4269b409917fdaa6143f215", "ext": "py", "lang": "Python", "content": "def parse_function_args(query_param_definition, is_strict=False):\n\n    def inner_get_fu(fu):\n        return FuncArgParser(query_param_definition, is_strict=is_strict)(fu)\n    return inner_get_fu", "fn_id": 0, "class_fn": false, "repo": "sabariramc/funcargparser", "file": "testimplementation.py", "last_update_at": "2021-05-05T09:56:14+00:00", "pred": {"ppl": 8.35025691986084, "ppl_lower": 11.083637237548828, "ppl/lowercase_ppl": -1.1334300604052794, "ppl/zlib": 0.017539605844917542, "Min_5.0% Prob": 10.955499172210693, "Min_10.0% Prob": 8.798283004760743, "Min_20.0% Prob": 7.331039818850431, "Min_30.0% Prob": 6.036454116596895, "Min_40.0% Prob": 5.088194841688329, "Min_50.0% Prob": 4.236803499715669, "Min_60.0% Prob": 3.5488915487247357}}
{"hexsha": "80c466f827f74902bd68bfb5f88abcaf94f6d86e", "ext": "py", "lang": "Python", "content": "def test_handle_xevent_atom_ok(monkeypatch):\n    \"\"\"Return false when event type is invalid\"\"\"\n    event = MagicMock(spec=Xlib.protocol.event.PropertyNotify)\n    event.type = xwindow.Xlib.X.PropertyNotify\n    event.atom = xwindow.NET_ACTIVE_WINDOW\n    monkeypatch.setattr(xwindow, 'ROOT', MagicMock())\n    monkeypatch.setattr(xwindow, 'DISP', MagicMock())\n    result = xwindow.handle_xevent(event, callback=lambda *args, **kwargs: 'callback')\n    assert result is True", "fn_id": 6, "class_fn": false, "repo": "eddie-dunn/swytcher", "file": "tests/test_xwindow.py", "last_update_at": "2021-07-07T08:52:49+00:00", "pred": {"ppl": 3.909630060195923, "ppl_lower": 7.3670244216918945, "ppl/lowercase_ppl": -1.4646848019615744, "ppl/zlib": 0.005106527175132871, "Min_5.0% Prob": 8.407469193140665, "Min_10.0% Prob": 7.269805761483999, "Min_20.0% Prob": 5.436645333583538, "Min_30.0% Prob": 4.181840269993513, "Min_40.0% Prob": 3.316632887491813, "Min_50.0% Prob": 2.7018083964402857, "Min_60.0% Prob": 2.2663882674219518}}
{"hexsha": "a6247751a993a8d45edcb88a38537df9fdda2f2e", "ext": "py", "lang": "Python", "content": "def decode_vector_type(contract_address, abi):\n    wasm_contract_obj = platon.wasmcontract(address=contract_address, abi=abi, vmtype=1)\n    tx_hash = wasm_contract_obj.functions.clearElement().transact({'from': from_address, 'gas': gas})\n    tx_receipt = platon.waitForTransactionReceipt(tx_hash)\n    topic_param = wasm_contract_obj.events.clear().processReceipt(tx_receipt)\n    print(topic_param)", "fn_id": 4, "class_fn": false, "repo": "AlayaNetwork/client-sdk-python", "file": "tests/wasm_unit_test.py", "last_update_at": "2021-05-06T07:41:02+00:00", "pred": {"ppl": 4.648993015289307, "ppl_lower": 5.3793206214904785, "ppl/lowercase_ppl": -1.094954209853792, "ppl/zlib": 0.007180610468672423, "Min_5.0% Prob": 10.34053020477295, "Min_10.0% Prob": 8.863470597700639, "Min_20.0% Prob": 6.32834483276714, "Min_30.0% Prob": 4.720384089385762, "Min_40.0% Prob": 3.7848011480437385, "Min_50.0% Prob": 3.0530072633634533, "Min_60.0% Prob": 2.571223930017475}}
{"hexsha": "3931e032c422dda461181a2d4fc71a72aab1d761", "ext": "py", "lang": "Python", "content": "def main():\n    \"\"\"Main function.\"\"\"\n    try:\n        tickers = os.listdir('data')\n        tickers = (os.path.basename(t) for t in tickers if t.endswith('.csv.gz'))\n        tickers = [t.split('.')[0] for t in tickers]\n        epilog = '\\nValid values for ticker are: %s' % tickers\n        epilog += '\\n\\nSample usage: ./predict.py IBM 2010-01-01 2011-01-01 21'\n    except OSError:\n        tickers = []\n        epilog = ''\n    parser = argparse.ArgumentParser(description='Predicts stock prices.', epilog=epilog, add_help=True)\n    parser.add_argument('ticker', metavar='TICKER', help='The stock item to predict')\n    parser.add_argument('start_date', metavar='START_DATE', help='The initial date to start looking into history.')\n    parser.add_argument('end_date', metavar='END_DATE', help='The final date to stop looking into history.')\n    parser.add_argument('shift', metavar='SHIFT', type=int, help='How many days in advance to predict.')\n    options = parser.parse_args()\n    if not tickers:\n        print('\"No tickers available. Unable to predict.')\n        raise SystemExit\n    ticker = options.ticker\n    if ticker not in tickers:\n        print('\"ticker\" must be one of %s' % tickers)\n        raise SystemExit\n    try:\n        start_date = pd.to_datetime(options.start_date)\n    except ValueError:\n        print('\"start_date\" must be a valid date. Not %s' % start_date)\n        raise SystemExit\n    try:\n        end_date = pd.to_datetime(options.end_date)\n    except ValueError:\n        print('\"end_date\" must be a valid date. Not %s' % end_date)\n        raise SystemExit\n    shift = options.shift\n    if shift <= 0:\n        print('\"shift\" must be a positive integer')\n        raise SystemExit\n    print('Loading data...')\n    X, y, tX, _, scaler = models.get_processed_dataset(ticker, 0.9999999999, shift, 0, False, start_date, end_date)\n    print('Training model...')\n    _, _, model = models.cross_validate_model('huber', X, y)\n    print('Predicting...')\n    yhat = model.predict(tX)\n    prediction = scaler.inverse_transform(np.array([[yhat[0]] + [0] * (X.shape[1] - 1)]))\n    print('Predicted value:', prediction[0, 0])", "fn_id": 0, "class_fn": false, "repo": "renatolfc/stock-prediction", "file": "predict.py", "last_update_at": "2021-07-01T12:17:06+00:00", "pred": {"ppl": 2.517831802368164, "ppl_lower": 2.734654188156128, "ppl/lowercase_ppl": -1.0894596274429462, "ppl/zlib": 0.0010914871575469197, "Min_5.0% Prob": 7.878133726119995, "Min_10.0% Prob": 6.032532621602543, "Min_20.0% Prob": 4.111045564093241, "Min_30.0% Prob": 2.9871826935458827, "Min_40.0% Prob": 2.3008754626825088, "Min_50.0% Prob": 1.8478034044216787, "Min_60.0% Prob": 1.5395841188407882}}
{"hexsha": "73ef8d1f69375bfcaedacdc382f9d2e3fbedc2b8", "ext": "py", "lang": "Python", "content": "def sig_gen_multi(public_as, private_as, public_ams, private_ams, body, amsh, arsh, fold=False, verbose=False, as_tmp=None, ams_tmp=None):\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h.update(body)\n    bh = base64.b64encode(h.digest())\n    print('ams bh= ')\n    print(bh)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in amsh(bh)]))\n    if verbose:\n        print('\\nsign ams hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_ams)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    msb = base64.b64encode(bytes(sig2))\n    if fold:\n        msb = msb[:70] + b' ' + msb[70:142] + b' ' + msb[142:214]\n    print('ams b= ')\n    print(msb)\n    pk_ams = parse_public_key(base64.b64decode(public_ams))\n    signature = base64.b64decode(msb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_ams)\n    print('ams sig valid: %r' % ams_valid)\n    hasher = HASH_ALGORITHMS[b'rsa-sha256']\n    h = hasher()\n    h = HashThrough(hasher())\n    h.update(b'\\r\\n'.join([x + b':' + y for x, y in arsh(msb, bh)]))\n    if verbose:\n        print('\\nsign ars hashed: %r' % h.hashed())\n    pk = parse_pem_private_key(private_as)\n    sig2 = RSASSA_PKCS1_v1_5_sign(h, pk)\n    sb = base64.b64encode(bytes(sig2))\n    print('arsh b=')\n    print(sb)\n    pk_as = parse_public_key(base64.b64decode(public_as))\n    signature = base64.b64decode(sb)\n    ams_valid = RSASSA_PKCS1_v1_5_verify(h, signature, pk_as)\n    print('arsh sig valid: %r' % ams_valid)\n    spc = fold and b'' or b'  '\n    accum = ''\n    if as_tmp:\n        sb = sb[:70] + b'\\n    ' + spc + sb[70:142] + b'\\n    ' + spc + sb[142:214]\n        res = as_tmp.replace(b'%b', sb)\n        accum = res\n        print(res.decode('utf-8'))\n    if ams_tmp:\n        msb = msb.replace(b' ', b'')\n        msb = msb[:70] + b'\\n    ' + spc + msb[70:142] + b'\\n    ' + spc + msb[142:214]\n        res = ams_tmp.replace(b'%bh', bh)\n        res = res.replace(b'%b', msb)\n        accum += b'\\n' + res\n        print(res.decode('utf-8'))\n    os.system(b'echo \"' + accum + b'\" | pbcopy')", "fn_id": 1, "class_fn": false, "repo": "ValiMail/arc_test_suite", "file": "sig_gen/sig_gen.py", "last_update_at": "2021-02-25T00:59:54+00:00", "pred": {"ppl": 2.4135193824768066, "ppl_lower": 2.5066335201263428, "ppl/lowercase_ppl": -1.0429635910789694, "ppl/zlib": 0.0013309456298256609, "Min_5.0% Prob": 8.59362922712814, "Min_10.0% Prob": 6.535025945929593, "Min_20.0% Prob": 4.163778353288683, "Min_30.0% Prob": 2.9028668977320193, "Min_40.0% Prob": 2.201835739033329, "Min_50.0% Prob": 1.7631000877104217, "Min_60.0% Prob": 1.4688386975720418}}
{"hexsha": "8e27225db54d8f1ce0cedbcc4f4b9dfe2b6fdaf9", "ext": "py", "lang": "Python", "content": "def draw_iterations(g, eval_map_function, x0, n):\n\n    def draw_mid_point_arrows(x, x_next, both=True):\n        if x_next > x:\n            arrow_direction_angles = (0.5 * math.pi, 0)\n        else:\n            arrow_direction_angles = (-0.5 * math.pi, math.pi)\n        g.draw_arrow_tip((x, mid_value), arrow_direction_angles[0])\n        if both:\n            g.draw_arrow_tip((mid_value, x_next), arrow_direction_angles[1])\n    xs = [x0]\n    for i in range(n):\n        xs.append(eval_map_function(xs[-1]))\n    g.set_dash_dash_structure(12, 4, units='svg')\n    g.set_dash_mode('dash')\n    g.set_svg_options(stroke_width=iterations_stroke_w, units='svg')\n    g.set_arrow_options(width=iteration_arrow_rel_size * arrow_size, curvature=0, units='svg')\n    g.set_point_size(0.01)\n    g.draw_line_segment((x0, 0), (x0, x0))\n    for i, x in enumerate(xs[:-2]):\n        x_next = xs[i + 1]\n        g.draw_polyline([(x, x), (x, x_next), (x_next, x_next)])\n        mid_value = 0.5 * (x + x_next)\n        draw_mid_point_arrows(x, x_next)\n    g.draw_polyline([(xs[-2], xs[-2]), (xs[-2], xs[-1])])\n    g.draw_point((xs[-2], xs[-1]))\n    draw_mid_point_arrows(xs[-2], xs[-1], both=False)\n    g.reset_dash_and_dot_structures()", "fn_id": 2, "class_fn": false, "repo": "alexn11/mathsvg", "file": "more-examples/iteration-graph.py", "last_update_at": "2021-11-27T08:46:20+00:00", "pred": {"ppl": 3.123656988143921, "ppl_lower": 3.210588216781616, "ppl/lowercase_ppl": -1.0240997644848802, "ppl/zlib": 0.0023979040568831433, "Min_5.0% Prob": 10.051296039061112, "Min_10.0% Prob": 7.402785831027561, "Min_20.0% Prob": 4.878357470035553, "Min_30.0% Prob": 3.617540422633842, "Min_40.0% Prob": 2.8222402178578907, "Min_50.0% Prob": 2.2710208661722397, "Min_60.0% Prob": 1.898418956817681}}
{"hexsha": "47fe8ba25f624d3f52e3accc1fc3872135959f05", "ext": "py", "lang": "Python", "content": "def main(args):\n    \"\"\"\n    The starting point of the program.\n    \"\"\"\n    while True:\n        num_items = 1\n        read_data = ReadData() if len(args) == 1 else ReadData(args)\n        data_log_df = get_file_df(read_data.get_data_log())\n        exe_table_df = get_file_df(read_data.get_exe_table())\n        doses_delta_df = get_file_df(read_data.get_doses_delta())\n        summary = get_summary(read_data.get_summary())\n        dfs = [('data_log', data_log_df[-num_items:]), ('exe_table', exe_table_df[-num_items:]), ('doses_delta', doses_delta_df[-num_items:])]\n        data_json = get_json(dfs, summary, read_data.json_name)\n        read_data.json = data_json\n        time.sleep(5)", "fn_id": 3, "class_fn": false, "repo": "cs481-ekh/s21-team-jat", "file": "python/read_data.py", "last_update_at": "2021-04-06T17:16:24+00:00", "pred": {"ppl": 3.555967092514038, "ppl_lower": 3.9875991344451904, "ppl/lowercase_ppl": -1.090304131815053, "ppl/zlib": 0.004547050406936098, "Min_5.0% Prob": 9.6871131550182, "Min_10.0% Prob": 8.034898194399746, "Min_20.0% Prob": 5.637370994355943, "Min_30.0% Prob": 4.134819178438899, "Min_40.0% Prob": 3.153373491101795, "Min_50.0% Prob": 2.529464689932302, "Min_60.0% Prob": 2.122549979995798}}
{"hexsha": "7848c02f06f57265c259b7cf28bbf7fbc43f4a4a", "ext": "py", "lang": "Python", "content": "def fecha_caixa():\n    global aberto\n    tot = 0\n    for elemento in transacoes_finalizadas:\n        tot += elemento[1]\n    print(f'TOTAL DE VENDAS R${tot:.2f}')\n    print()\n    while len(transacoes_finalizadas) != 0:\n        print('ELIMINE AS TRANSA\u00c7\u00d5ES FINALIZADAS:')\n        for i, elemento in enumerate(transacoes_finalizadas):\n            print(f'{i:<1}', end='|    ')\n            print(f'{elemento[0]:<17}', end='|')\n            print(f'{elemento[1]:>5.2f}')\n        try:\n            aux = int(input(''))\n            tot -= transacoes_finalizadas[aux][1]\n            tot = round(tot, 2)\n            transacoes_finalizadas.pop(aux)\n        except ValueError:\n            print('[ERRO]: Digite valores v\u00e1lidos')\n            return fecha_caixa()\n        except IndexError:\n            print(f' Indice <= {len(transacoes_finalizadas)}')\n    print(f'TRANSA\u00c7\u00d5ES ELIMINADAS TOTAL: R${tot}')\n    print('CAIXA FECHADO COM SUCESSO!')\n    aberto = False", "fn_id": 17, "class_fn": false, "repo": "FelipeECarvalho/Projetos", "file": "Sistema Caixa Supermercados/principal.py", "last_update_at": "2021-08-22T17:10:08+00:00", "pred": {"ppl": 3.2680184841156006, "ppl_lower": 4.169929504394531, "ppl/lowercase_ppl": -1.2058086678467026, "ppl/zlib": 0.0026974574785327697, "Min_5.0% Prob": 9.480370249067034, "Min_10.0% Prob": 7.663322005953107, "Min_20.0% Prob": 5.188906464660377, "Min_30.0% Prob": 3.807337266557357, "Min_40.0% Prob": 2.9310615555497637, "Min_50.0% Prob": 2.3711647968476925, "Min_60.0% Prob": 1.9725650370948844}}
{"hexsha": "c370b87e8143a97ff5064d02515dc7a0a2cf09a6", "ext": "py", "lang": "Python", "content": "def patch():\n    global _patched\n    if not _patched:\n        conf.Settings = Settings\n        conf.LazySettings = LazySettings\n        conf.settings = settings\n        _patched = True", "fn_id": 0, "class_fn": false, "repo": "jayvdb/django-service-urls", "file": "service_urls/patch.py", "last_update_at": "2021-01-13T02:41:26+00:00", "pred": {"ppl": 5.642640113830566, "ppl_lower": 10.606685638427734, "ppl/lowercase_ppl": -1.3647422254450636, "ppl/zlib": 0.018808174579043185, "Min_5.0% Prob": 10.670470237731934, "Min_10.0% Prob": 9.558311303456625, "Min_20.0% Prob": 6.843617643628802, "Min_30.0% Prob": 5.173131054097956, "Min_40.0% Prob": 4.318406539303916, "Min_50.0% Prob": 3.4933639797899456, "Min_60.0% Prob": 2.8955692906271326}}
{"hexsha": "a9d142291ba38842e31d3177869d6447f084d025", "ext": "py", "lang": "Python", "content": "def time_model(model: nn.Module, test_set: Type[LightFieldDataset], device) -> np.ndarray:\n    model.eval()\n    custom = CustomProgressBar('N/A')\n    loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=1, sampler=SequentialSampler(test_set), num_workers=1, pin_memory=True)\n    test_set.set_only_x_dataset()\n    model.eval()\n    torch.set_grad_enabled(False)\n    print('Timing')\n    all_times = []\n    for input_data in custom.bar(loader):\n        tick = time.time()\n        input_var = input_data.to(device).float().div_(255.0)\n        _ = model(input_var)\n        tock = time.time()\n        time_taken = tock - tick\n        all_times.append(time_taken)\n    test_set.revert_only_x_dataset()\n    return np.array(all_times)", "fn_id": 0, "class_fn": false, "repo": "leaveitout/deep_light_field_interp", "file": "deeplfinterp/util/train_tools.py", "last_update_at": "2021-08-06T13:39:19+00:00", "pred": {"ppl": 3.2713372707366943, "ppl_lower": 4.371036529541016, "ppl/lowercase_ppl": -1.244517044420093, "ppl/zlib": 0.0030005034243215114, "Min_5.0% Prob": 9.22833303971724, "Min_10.0% Prob": 7.343355005437678, "Min_20.0% Prob": 5.327825906541612, "Min_30.0% Prob": 3.85001599613358, "Min_40.0% Prob": 2.9444768207741308, "Min_50.0% Prob": 2.3669171969063187, "Min_60.0% Prob": 1.9864043085014118}}
{"hexsha": "e8bc0e0cfb812d7c32521e012f61a1e17efddd71", "ext": "py", "lang": "Python", "content": "def save_mel_dataset(out_path, *paths, in_db=True, root_path=None):\n    \"\"\"\n    \"\"\"\n    ds_len = len(paths)\n    with IncrementalHDF5(out_path, CONF.NUM_MELS, np.float32) as ihdf5:\n        LOGGER.info(f'Writing to {out_path}')\n        for i, abspath in enumerate(paths, 1):\n            if root_path is not None:\n                metadata_str = str(abspath.relative_to(root_path))\n            else:\n                metadata_str = str(abspath)\n            if i % 100 == 0:\n                LOGGER.info(f'[{i}/{ds_len}] save_mel_dataset: {metadata_str}')\n            arr = wavpath_to_mel(str(abspath), CONF.WAV_SR, wav_norm=CONF.WAV_NORM, n_mels=CONF.NUM_MELS, hop_length=CONF.STFT_HOPSIZE, pad_mode='constant', in_decibels=in_db, logger=LOGGER)\n            if arr is None:\n                continue\n            ihdf5.append(arr, metadata_str)\n            _, arr_w = arr.shape\n            assert (arr == ihdf5.data_ds[:, -arr_w:]).all(), 'Should never happen'\n        LOGGER.info(f'Finished writing to {out_path}')", "fn_id": 1, "class_fn": false, "repo": "andres-fr/dcase2021_umaps", "file": "00c_precompute_fraunhofer_fixed.py", "last_update_at": "2021-11-30T09:28:21+00:00", "pred": {"ppl": 3.4351351261138916, "ppl_lower": 3.95511531829834, "ppl/lowercase_ppl": -1.1142196670458042, "ppl/zlib": 0.002539210417541184, "Min_5.0% Prob": 9.772721227010091, "Min_10.0% Prob": 7.83551848319269, "Min_20.0% Prob": 5.42815725765531, "Min_30.0% Prob": 3.926144277422052, "Min_40.0% Prob": 3.0348517417203724, "Min_50.0% Prob": 2.454039563407313, "Min_60.0% Prob": 2.0625657212087196}}
{"hexsha": "5a93cf64a2f1ac340c8208f986a4fd8f35d03148", "ext": "py", "lang": "Python", "content": "def view(location, browser=None, new='same', autoraise=True):\n    \"\"\" Opens a browser to view the specified location.\n\n        Args:\n            location (str) : location to open\n                If location does not begin with \"http:\" it is assumed\n                to be a file path on the local filesystem.\n            browser (str) : what browser to use\n            new (str) : how to open the location\n                Valid values are:\n                    * \"same\" - open in the current tab\n                    * \"tab\" - open a new tab in the current window\n                    * \"window\" - open in a new window\n            autoraise (bool) : whether to raise the new location\n\n        Returns:\n            None\n\n        \"\"\"\n    new_map = {'same': 0, 'window': 1, 'tab': 2}\n    if location.startswith('http'):\n        url = location\n    else:\n        url = 'file://' + abspath(location)\n    try:\n        controller = get_browser_controller(browser)\n        controller.open(url, new=new_map[new], autoraise=autoraise)\n    except (SystemExit, KeyboardInterrupt):\n        raise\n    except:\n        pass", "fn_id": 1, "class_fn": false, "repo": "tswicegood/bokeh", "file": "bokeh/browserlib.py", "last_update_at": "2021-11-17T10:48:36+00:00", "pred": {"ppl": 2.7664403915405273, "ppl_lower": 3.1980791091918945, "ppl/lowercase_ppl": -1.14248664441713, "ppl/zlib": 0.0021287896163171525, "Min_5.0% Prob": 7.77034870783488, "Min_10.0% Prob": 6.306638379891713, "Min_20.0% Prob": 4.353143935300866, "Min_30.0% Prob": 3.2099252753966563, "Min_40.0% Prob": 2.5046119506310935, "Min_50.0% Prob": 2.032768111435636, "Min_60.0% Prob": 1.697957521854531}}
{"hexsha": "ad091436c7271a654fb820601c6d942f23f49ff5", "ext": "py", "lang": "Python", "content": "def get_rna(fq_dict):\n    \"\"\"\n    Obtain a numpy array with all detected spots in the image. Detection results\n    are saved in a dictionary (see read_FQ_results_matlab for more details).\n    \"\"\"\n    RNAall = nested_lookup('spots', fq_dict)\n    for idx, val in enumerate(RNAall):\n        if idx == 0:\n            spots_all = np.copy(val)\n        else:\n            spots_all = np.append(spots_all, val, axis=0)\n    return spots_all", "fn_id": 3, "class_fn": false, "repo": "muellerflorian/parker-rna-loc-elegans", "file": "rnaloc/FQtoolbox.py", "last_update_at": "2021-01-12T16:51:38+00:00", "pred": {"ppl": 5.803670883178711, "ppl_lower": 5.711428642272949, "ppl/lowercase_ppl": -0.9908890979778853, "ppl/zlib": 0.0070059387579347624, "Min_5.0% Prob": 10.53897794087728, "Min_10.0% Prob": 8.830944975217184, "Min_20.0% Prob": 6.7377398908138275, "Min_30.0% Prob": 5.4162218272686005, "Min_40.0% Prob": 4.265285603854121, "Min_50.0% Prob": 3.5157244332501145, "Min_60.0% Prob": 2.958600970725082}}
{"hexsha": "8b2fa9137563469049632eeb151af101a87de1b0", "ext": "py", "lang": "Python", "content": "@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        if message.content == 'Authentication invalid':\n            await renew_auth(message)\n        return\n    if message.content.startswith('>'):\n        return\n        await parse(message)\n    if isinstance(message.channel, discord.channel.DMChannel):\n        if message.content == 'quit':\n            await do_quit(message)\n        if message.content == 'test':\n            return\n            await do_tests(message)\n        if message.content == 'renew' or message.content == 'reset':\n            await renew_auth(message)\n    if message.content.startswith('/'):\n        await client.process_commands(message)", "fn_id": 5, "class_fn": false, "repo": "joshmiller17/venntbot", "file": "venntbot.py", "last_update_at": "2021-09-11T23:15:38+00:00", "pred": {"ppl": 3.2668585777282715, "ppl_lower": 3.6122748851776123, "ppl/lowercase_ppl": -1.0849015404163325, "ppl/zlib": 0.004735315374267873, "Min_5.0% Prob": 9.64695998600551, "Min_10.0% Prob": 7.755305989583333, "Min_20.0% Prob": 5.199746516443068, "Min_30.0% Prob": 3.789000971161801, "Min_40.0% Prob": 2.894162262639692, "Min_50.0% Prob": 2.365923421723502, "Min_60.0% Prob": 1.969774471395599}}
{"hexsha": "385dabe838e94b3bc682d337123e8384c47a3724", "ext": "py", "lang": "Python", "content": "def parse_patterns(query, graph=False):\n    \"\"\"\n    if query['patterns'] looks like so:\n    ['target_type=', 'what=', '!tag_k=not_equals_thistag_v', 'tag_k:match_this_val', 'arbitrary', 'words']\n\n    then the patterns will look like so:\n    {\n    'tag_k=not_equals_thistag_v': {'negate': True, 'match_tag_equality': ['tag_k', 'not_equals_thistag_v']},\n    'target_type=':               {'negate': False, 'match_tag_equality': ['target_type', '']},\n    'what=':                      {'negate': False, 'match_tag_equality': ['what', '']},\n    'tag_k:match_this_val':       {'negate': False, 'match_tag_regex': ['tag_k', 'match_this_val']},\n    'words':                      {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x2612cb0>},\n    'arbitrary':                  {'negate': False, 'match_id_regex': <_sre.SRE_Pattern object at 0x7f6cc000bd90>}\n    }\n    \"\"\"\n    patterns = {}\n    for pattern in query['patterns']:\n        negate = False\n        if pattern.startswith('!'):\n            negate = True\n            pattern = pattern[1:]\n        patterns[pattern] = {'negate': negate}\n        if '=' in pattern:\n            if not graph or pattern not in ('target_type=', 'what='):\n                patterns[pattern]['match_tag_equality'] = pattern.split('=')\n            else:\n                del patterns[pattern]\n        elif ':' in pattern:\n            if not graph or pattern not in ('target_type:', 'what:'):\n                patterns[pattern]['match_tag_regex'] = pattern.split(':')\n            else:\n                del patterns[pattern]\n        else:\n            patterns[pattern]['match_id_regex'] = re.compile(pattern)\n    return patterns", "fn_id": 2, "class_fn": false, "repo": "bittorrent/graph-explorer", "file": "query.py", "last_update_at": "2021-03-14T19:37:11+00:00", "pred": {"ppl": 2.60481858253479, "ppl_lower": 2.7491424083709717, "ppl/lowercase_ppl": -1.056327619773924, "ppl/zlib": 0.0019224157244156993, "Min_5.0% Prob": 9.003713773644488, "Min_10.0% Prob": 7.09175482709357, "Min_20.0% Prob": 4.555898412110958, "Min_30.0% Prob": 3.150250910558331, "Min_40.0% Prob": 2.3925369549838322, "Min_50.0% Prob": 1.9130069019139315, "Min_60.0% Prob": 1.597518410178682}}
{"hexsha": "c465816e2eca187bfd4fc478284eec3b6c703e51", "ext": "py", "lang": "Python", "content": "def generalInquiry(choiceList, message):\n    choiceList.append(colored('Return', 'red'))\n    options = [inquirer.List('inputVal', message=message, choices=choiceList)]\n    print(colored('Use arrow keys to navigate\\n', 'blue'))\n    print(colored('Proceed --> Enter / Return key\\n', 'green'))\n    return inquirer.prompt(options)['inputVal']", "fn_id": 15, "class_fn": false, "repo": "HiLabTufts/GailBot-3", "file": "gailbot-3.py", "last_update_at": "2021-06-28T10:26:20+00:00", "pred": {"ppl": 6.422755241394043, "ppl_lower": 8.776815414428711, "ppl/lowercase_ppl": -1.1678989775846962, "ppl/zlib": 0.009072425321770468, "Min_5.0% Prob": 10.11574101448059, "Min_10.0% Prob": 9.345638751983643, "Min_20.0% Prob": 7.311683486489689, "Min_30.0% Prob": 5.633859405150781, "Min_40.0% Prob": 4.492667458738599, "Min_50.0% Prob": 3.688000160862099, "Min_60.0% Prob": 3.1089913861931495}}
{"hexsha": "3b7d7e72a7f0b786dd6d72495ed17a1c7b0e1e9f", "ext": "py", "lang": "Python", "content": "@card('Rolling Spoil')\ndef rolling_spoil(card, abilities):\n\n    def rolling_spoil():\n        return AbilityNotImplemented\n    return (rolling_spoil,)", "fn_id": 155, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/ravnica_city_of_guilds.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 9.58848762512207, "ppl_lower": 27.88408660888672, "ppl/lowercase_ppl": -1.47222435241508, "ppl/zlib": 0.02216238405034108, "Min_5.0% Prob": 15.441317558288574, "Min_10.0% Prob": 12.966278711954752, "Min_20.0% Prob": 10.009341716766357, "Min_30.0% Prob": 7.70000346140428, "Min_40.0% Prob": 5.708960152665774, "Min_50.0% Prob": 4.519191573717092, "Min_60.0% Prob": 3.9042189641093668}}
{"hexsha": "d090023df2a9fa2d3a531ad91449ef05aefa4e12", "ext": "py", "lang": "Python", "content": "def dice_loss(pred, target, smooth=1.0):\n    pred = pred.contiguous()\n    target = target.contiguous()\n    intersection = (pred * target).sum(dim=1).sum(dim=1)\n    loss = 1 - (2.0 * intersection + smooth) / (pred.sum(dim=1).sum(dim=1) + target.sum(dim=1).sum(dim=1) + smooth)\n    return loss.mean()", "fn_id": 1, "class_fn": false, "repo": "rispoli-lab/Deep-Learning-Breast-FGT", "file": "loss.py", "last_update_at": "2021-09-17T17:10:52+00:00", "pred": {"ppl": 1.5656483173370361, "ppl_lower": 1.5656483173370361, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002968874162180618, "Min_5.0% Prob": 5.1213390827178955, "Min_10.0% Prob": 3.666519272327423, "Min_20.0% Prob": 2.2132474899291994, "Min_30.0% Prob": 1.5231595925986767, "Min_40.0% Prob": 1.1230588091491926, "Min_50.0% Prob": 0.904659799044477, "Min_60.0% Prob": 0.7568181690904999}}
{"hexsha": "20fd1f5105839af2bba28ff254523016e1e09b8f", "ext": "py", "lang": "Python", "content": "def _get_pipeline_definition_args(dag):\n    check.inst_param(dag, 'dag', DAG)\n    pipeline_dependencies = {}\n    solid_defs = []\n    seen_tasks = []\n    dag_roots = sorted(dag.roots, key=lambda x: x.task_id)\n    for task in dag_roots:\n        _traverse_airflow_dag(task, seen_tasks, pipeline_dependencies, solid_defs)\n    return (pipeline_dependencies, solid_defs)", "fn_id": 1, "class_fn": false, "repo": "uranusbeam/bit-dagster", "file": "python_modules/libraries/dagster-airflow/dagster_airflow/dagster_pipeline_factory.py", "last_update_at": "2021-11-08T02:10:42+00:00", "pred": {"ppl": 3.45796799659729, "ppl_lower": 3.7027759552001953, "ppl/lowercase_ppl": -1.0551323481890036, "ppl/zlib": 0.006081770256520932, "Min_5.0% Prob": 8.21266965866089, "Min_10.0% Prob": 7.199849271774292, "Min_20.0% Prob": 5.213931855701265, "Min_30.0% Prob": 3.9953987694555715, "Min_40.0% Prob": 3.065504189758074, "Min_50.0% Prob": 2.4664158410621138, "Min_60.0% Prob": 2.083478103524872}}
{"hexsha": "200733e11c459547d9421419b37fface7ce8edae", "ext": "py", "lang": "Python", "content": "def test_qcovariate_num_qs(exreaddata):\n    test = covariate.QCovariate()\n    assert test.num_qs() == 0\n    test.consume_read(exreaddata)\n    assert test.num_qs() == 11", "fn_id": 11, "class_fn": false, "repo": "adamjorr/kbbq-py", "file": "tests/test_covariate.py", "last_update_at": "2021-06-02T00:07:35+00:00", "pred": {"ppl": 8.427149772644043, "ppl_lower": 8.746936798095703, "ppl/lowercase_ppl": -1.0174739256537575, "ppl/zlib": 0.02069377290855936, "Min_5.0% Prob": 12.582721074422201, "Min_10.0% Prob": 10.524359385172525, "Min_20.0% Prob": 8.43445372581482, "Min_30.0% Prob": 6.631689078278011, "Min_40.0% Prob": 5.210940967003505, "Min_50.0% Prob": 4.274416354298592, "Min_60.0% Prob": 3.5994596843504243}}
{"hexsha": "eac9bfadf6afe42b2ba6db1b9064946fdf240cf1", "ext": "py", "lang": "Python", "content": "@card('Goblin Archaeologist')\ndef goblin_archaeologist(card, abilities):\n\n    def goblin_archaeologist():\n        return AbilityNotImplemented\n    return (goblin_archaeologist,)", "fn_id": 17, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/darksteel.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 3.0277249813079834, "ppl_lower": 7.012896537780762, "ppl/lowercase_ppl": -1.7581969545630896, "ppl/zlib": 0.010257513946803985, "Min_5.0% Prob": 12.982470512390137, "Min_10.0% Prob": 9.20304479598999, "Min_20.0% Prob": 5.503861476074565, "Min_30.0% Prob": 3.804303861572407, "Min_40.0% Prob": 2.769132841653614, "Min_50.0% Prob": 2.25654540053586, "Min_60.0% Prob": 1.846336619181481}}
{"hexsha": "d2beff782efe625c4f930164ec0ecae6152de846", "ext": "py", "lang": "Python", "content": "def get_final_seats_occupied_based_on_sight(seats: list[str]) -> int:\n    old_grid = Grid(seats)\n    while (new_grid := transform_based_on_los(old_grid)) != old_grid:\n        old_grid = new_grid\n    return new_grid.count('#')", "fn_id": 2, "class_fn": false, "repo": "pviafore/AdventOfCode2020", "file": "challenge11.py", "last_update_at": "2021-12-09T09:54:54+00:00", "pred": {"ppl": 5.433517932891846, "ppl_lower": 5.611866474151611, "ppl/lowercase_ppl": -1.0190811928875194, "ppl/zlib": 0.011359642912391438, "Min_5.0% Prob": 11.26162338256836, "Min_10.0% Prob": 9.54191357748849, "Min_20.0% Prob": 7.283319388117109, "Min_30.0% Prob": 5.456150033257225, "Min_40.0% Prob": 4.291876815516373, "Min_50.0% Prob": 3.3797435585308717, "Min_60.0% Prob": 2.8456279583359985}}
{"hexsha": "65d2c4247e06b070e56286e1c0516a47f5fdba82", "ext": "py", "lang": "Python", "content": "def generate_testcase_files(instance, env, testcase_dir_path):\n    testcases_list = []\n    config = {'config': {'name': instance.name, 'variables': [], 'request': {'base_url': env.base_url if env else ''}}}\n    testcases_list.append(config)\n    include = json.loads(instance.include, encoding='utf-8')\n    request = json.loads(instance.request, encoding='utf-8')\n    module_name = instance.module.name\n    project_name = instance.module.project.name\n    testcase_dir_path = os.path.join(testcase_dir_path, project_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n        debugtalk_obj = Projects.objects.get(name=project_name).debugtalk\n        if debugtalk_obj:\n            debugtalk = debugtalk_obj.debugtalk\n        else:\n            debugtalk = ''\n        with open(os.path.join(testcase_dir_path, 'debugtalk.py'), mode='w', encoding='utf-8') as one_file:\n            one_file.write(debugtalk)\n    testcase_dir_path = os.path.join(testcase_dir_path, module_name)\n    if not os.path.exists(testcase_dir_path):\n        os.makedirs(testcase_dir_path)\n    if 'testcases' in include:\n        for t_id in include.get('testcases'):\n            testcase_obj = Testcases.objects.filter(id=t_id).first()\n            if testcase_obj:\n                try:\n                    testcase_request = json.loads(testcase_obj.request, encoding='utf-8')\n                except Exception as e:\n                    logger.error(e)\n                    continue\n                else:\n                    extract = testcase_request['test'].get('extract')\n                    if extract:\n                        for e in extract:\n                            testcases_list[0]['config']['variables'].append({[i for i in e.keys()][0]: ''})\n                    testcase_request['test'] = OrderedDict(testcase_request['test'])\n                    testcases_list.append(OrderedDict(testcase_request))\n    request['test'] = OrderedDict(request['test'])\n    testcases_list.append(request)\n    with open(os.path.join(testcase_dir_path, instance.name + '.yml'), mode='w', encoding='utf-8') as one_file:\n        ordered_yaml_dump(testcases_list, one_file, default_flow_style=False, allow_unicode=True)", "fn_id": 1, "class_fn": false, "repo": "op896898466/apitest", "file": "utils/common.py", "last_update_at": "2021-08-16T05:48:43+00:00", "pred": {"ppl": 2.0611464977264404, "ppl_lower": 2.1968917846679688, "ppl/lowercase_ppl": -1.0881853635637009, "ppl/zlib": 0.0010941942212981698, "Min_5.0% Prob": 7.475822892682306, "Min_10.0% Prob": 5.431261901197763, "Min_20.0% Prob": 3.3400500564493685, "Min_30.0% Prob": 2.3600924287523544, "Min_40.0% Prob": 1.7977313948237998, "Min_50.0% Prob": 1.4473341346099615, "Min_60.0% Prob": 1.205224934636358}}
{"hexsha": "679616cb8b1011d2bf2813d8352a4c19d23a2b17", "ext": "py", "lang": "Python", "content": "def save_current_window_and_open_tools_window():\n    \"\"\"\n    Save the current window with `save_current_window' and open the eiffel\n    tools buffer in a window. The window containing the eiffel tools buffer\n    will be selected after the launch of this routine. To reselect the\n    window saved by this routine, use the `select_saved_window' routine.\n    \"\"\"\n    tools_buffer_name = environment.get_global_variable('eiffel_tools_buffer_name')\n    tools_buffer_number = get_tools_buffer_number()\n    if tools_buffer_number < 0:\n        save_current_window_and_open_new_tools_window(tools_buffer_name)\n    else:\n        tools_buffer_window_number = int(environment.evaluate('bufwinnr(\"' + tools_buffer_name + '\")'))\n        if tools_buffer_window_number < 0:\n            save_current_window_and_open_existing_tools_window(tools_buffer_name)\n        else:\n            save_current_window_and_select_tools_window(tools_buffer_window_number)\n    environment.execute('setlocal filetype=')", "fn_id": 8, "class_fn": false, "repo": "tioui/Vim_Eiffel_IDE", "file": "pyplugin/eiffel_ide.py", "last_update_at": "2021-11-23T20:12:06+00:00", "pred": {"ppl": 3.268625497817993, "ppl_lower": 3.4026081562042236, "ppl/lowercase_ppl": -1.0339190436868577, "ppl/zlib": 0.0032990795528803885, "Min_5.0% Prob": 8.71325082045335, "Min_10.0% Prob": 7.153053577129658, "Min_20.0% Prob": 5.020767427407778, "Min_30.0% Prob": 3.742041636116897, "Min_40.0% Prob": 2.920857356275831, "Min_50.0% Prob": 2.357169915667989, "Min_60.0% Prob": 1.9761630252027247}}
{"hexsha": "a1475fa68fd62c2546f13e320d8164046b674af2", "ext": "py", "lang": "Python", "content": "def sub_special_tokens(text):\n    text = re.sub(' www.', ' http://www.', text)\n    text = re.sub('(https|http)?:\\\\/\\\\/(\\\\w|\\\\.|\\\\/|\\\\?|\\\\=|\\\\&|\\\\%)*\\\\b', ' xxurl ', text)\n    pat = '\\\\d{3}[-\\\\.\\\\s]??\\\\d{4}[-\\\\.\\\\s]??\\\\d{4}|\\\\d{5}[-\\\\.\\\\s]??\\\\d{3}[-\\\\.\\\\s]??\\\\d{3}|(?:\\\\d{4}\\\\)?[\\\\s-]?\\\\d{3}[\\\\s-]?\\\\d{4})'\n    text = re.sub(pat, ' xxphone ', text)\n    text = text.replace('\u00a3', '$ ')\n    text = re.sub('(\\\\d+)[ ]{0,1}p', '$ 0.\\x01', text)\n    text = re.sub('\\\\$[ ]*(\\\\d+[,\\\\.])*\\\\d+', ' xxmon ', text)\n    text = re.sub('(\\\\b[A-Z][A-Z0-9]*\\\\b)', ' xxup \\\\1 ', text)\n    text = re.sub('(\\\\b[A-Z][a-z0-9]+\\\\b)', ' xxcap \\\\1 ', text)\n    text = re.sub('[:;][ ]*[-]*[ ]*[()]', ' xxemoji ', text)\n    return text", "fn_id": 0, "class_fn": false, "repo": "rkingery/ml_tutorials", "file": "notebooks/utils.py", "last_update_at": "2021-01-15T10:26:34+00:00", "pred": {"ppl": 2.8402092456817627, "ppl_lower": 2.935274839401245, "ppl/lowercase_ppl": -1.0315394826010902, "ppl/zlib": 0.0033034105301138566, "Min_5.0% Prob": 8.143445193767548, "Min_10.0% Prob": 6.055703163146973, "Min_20.0% Prob": 4.175427961349487, "Min_30.0% Prob": 3.2205632261394226, "Min_40.0% Prob": 2.540745290196859, "Min_50.0% Prob": 2.0697819021947543, "Min_60.0% Prob": 1.7417869196297266}}
{"hexsha": "10e63bec5b7e172368421e76129581befebd5bc0", "ext": "py", "lang": "Python", "content": "def part_sum(bitlist, indices):\n    \"\"\"Compute the mod 2 sum of the subset of bits in bitlist given by the list of indices.\"\"\"\n    sum = 0\n    for x in indices:\n        sum = sum ^ bitlist[x]\n    return sum", "fn_id": 6, "class_fn": false, "repo": "wmkirby1/CS-VQE", "file": "misc/legacy/fermions/yaferp/general/fermions.py", "last_update_at": "2021-11-10T18:03:49+00:00", "pred": {"ppl": 4.749872207641602, "ppl_lower": 5.32025671005249, "ppl/lowercase_ppl": -1.0727825894714147, "ppl/zlib": 0.01120947995705209, "Min_5.0% Prob": 11.095715045928955, "Min_10.0% Prob": 8.875764751434327, "Min_20.0% Prob": 6.381443413821134, "Min_30.0% Prob": 5.042229577898979, "Min_40.0% Prob": 3.842941630970348, "Min_50.0% Prob": 3.088918858872993, "Min_60.0% Prob": 2.636164644789515}}
{"hexsha": "90681b31e1662f4f8ed10dcfc71a183b60796d93", "ext": "py", "lang": "Python", "content": "def experimental_parallel_interleave_dataset(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f, output_types, output_shapes, name=None):\n    \"\"\"Creates a dataset that applies `f` to the outputs of `input_dataset`.\n\n  The resulting dataset is similar to the `InterleaveDataset`, with the exception\n  that if retrieving the next value from a dataset would cause the requester to\n  block, it will skip that input dataset. This dataset is especially useful\n  when loading data from a variable-latency datastores (e.g. HDFS, GCS), as it\n  allows the training step to proceed so long as some data is available.\n\n  !! WARNING !! This dataset is not deterministic!\n\n  Args:\n    input_dataset: A `Tensor` of type `variant`.\n    other_arguments: A list of `Tensor` objects.\n    cycle_length: A `Tensor` of type `int64`.\n    block_length: A `Tensor` of type `int64`.\n    sloppy: A `Tensor` of type `bool`.\n    buffer_output_elements: A `Tensor` of type `int64`.\n    prefetch_input_elements: A `Tensor` of type `int64`.\n    f: A function decorated with @Defun.\n      A function mapping elements of `input_dataset`, concatenated with\n      `other_arguments`, to a Dataset variant that contains elements matching\n      `output_types` and `output_shapes`.\n    output_types: A list of `tf.DTypes` that has length `>= 1`.\n    output_shapes: A list of shapes (each a `tf.TensorShape` or list of `ints`) that has length `>= 1`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A `Tensor` of type `variant`.\n  \"\"\"\n    _ctx = _context._context or _context.context()\n    tld = _ctx._thread_local_data\n    if tld.is_eager:\n        try:\n            _result = pywrap_tfe.TFE_Py_FastPathExecute(_ctx._context_handle, tld.device_name, 'ExperimentalParallelInterleaveDataset', name, tld.op_callbacks, input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, 'f', f, 'output_types', output_types, 'output_shapes', output_shapes)\n            return _result\n        except _core._NotOkStatusException as e:\n            _ops.raise_from_not_ok_status(e, name)\n        except _core._FallbackException:\n            pass\n        try:\n            return experimental_parallel_interleave_dataset_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name, ctx=_ctx)\n        except _core._SymbolicException:\n            pass\n    if not isinstance(output_types, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_types' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_types)\n    output_types = [_execute.make_type(_t, 'output_types') for _t in output_types]\n    if not isinstance(output_shapes, (list, tuple)):\n        raise TypeError(\"Expected list for 'output_shapes' argument to 'experimental_parallel_interleave_dataset' Op, not %r.\" % output_shapes)\n    output_shapes = [_execute.make_shape(_s, 'output_shapes') for _s in output_shapes]\n    _, _, _op, _outputs = _op_def_library._apply_op_helper('ExperimentalParallelInterleaveDataset', input_dataset=input_dataset, other_arguments=other_arguments, cycle_length=cycle_length, block_length=block_length, sloppy=sloppy, buffer_output_elements=buffer_output_elements, prefetch_input_elements=prefetch_input_elements, f=f, output_types=output_types, output_shapes=output_shapes, name=name)\n    _result = _outputs[:]\n    if _execute.must_record_gradient():\n        _attrs = ('f', _op.get_attr('f'), 'Targuments', _op.get_attr('Targuments'), 'output_types', _op.get_attr('output_types'), 'output_shapes', _op.get_attr('output_shapes'))\n        _inputs_flat = _op.inputs\n        _execute.record_gradient('ExperimentalParallelInterleaveDataset', _inputs_flat, _attrs, _result)\n    _result, = _result\n    return _result", "fn_id": 68, "class_fn": false, "repo": "Lube-Project/ProgettoLube", "file": "ProgettoLube/WebInspector/venv/Lib/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py", "last_update_at": "2021-01-28T01:57:41+00:00", "pred": {"ppl": 1.428208589553833, "ppl_lower": 2.1197433471679688, "ppl/lowercase_ppl": -2.107886959876607, "ppl/zlib": 0.00028242545512375237, "Min_5.0% Prob": 5.440732109780405, "Min_10.0% Prob": 3.297919415960125, "Min_20.0% Prob": 1.7798122001044892, "Min_30.0% Prob": 1.1911485701665476, "Min_40.0% Prob": 0.8914314198314381, "Min_50.0% Prob": 0.7135291520531118, "Min_60.0% Prob": 0.594808404762082}}
{"hexsha": "5d67dd4c40040dcf2e4bbcd0df1123cacc8a09a7", "ext": "py", "lang": "Python", "content": "def get_conversion_rate(response_data):\n    data = str(response_data)\n    keyword_conversion = 'conversion_rate'\n    slen = len(keyword_conversion)\n    start_index = data.find(keyword_conversion)\n    extra_len = 9\n    extracted_str = data[start_index:start_index + slen + extra_len]\n    word_list = extracted_str.split(':')\n    conversion_rate = word_list[1]\n    result = float(conversion_rate)\n    loginfo('Conversion Rate = ' + str(result), get_conversion_rate.__name__)\n    return result", "fn_id": 3, "class_fn": false, "repo": "jamesjallorina/currency_exchange", "file": "backend/backend.py", "last_update_at": "2021-12-15T17:54:21+00:00", "pred": {"ppl": 3.6635849475860596, "ppl_lower": 3.6921908855438232, "ppl/lowercase_ppl": -1.0059901442750683, "ppl/zlib": 0.005902009826809709, "Min_5.0% Prob": 9.983771006266275, "Min_10.0% Prob": 8.591180911430946, "Min_20.0% Prob": 5.7888697341636375, "Min_30.0% Prob": 4.162320183544624, "Min_40.0% Prob": 3.2542482700060913, "Min_50.0% Prob": 2.6068890488651744, "Min_60.0% Prob": 2.167361820400579}}
{"hexsha": "b740c4349aa6a00f9a664792b9a5d497e887cbae", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('value,expected', (('', ''), (None, ''), ('very long ' * 100, '')))\ndef test_mobile_number_clean(value, expected):\n    field = forms.MobileNumberField(max_length=100)\n    assert field.to_python(value) == expected", "fn_id": 0, "class_fn": false, "repo": "konradko/directory-api", "file": "company/tests/test_forms.py", "last_update_at": "2021-11-06T12:08:26+00:00", "pred": {"ppl": 3.560753345489502, "ppl_lower": 4.761835098266602, "ppl/lowercase_ppl": -1.2288719367057148, "ppl/zlib": 0.007383558932432681, "Min_5.0% Prob": 9.505125999450684, "Min_10.0% Prob": 7.577238082885742, "Min_20.0% Prob": 5.441882048334394, "Min_30.0% Prob": 4.054842111610231, "Min_40.0% Prob": 3.1707488181335584, "Min_50.0% Prob": 2.5245942200223603, "Min_60.0% Prob": 2.124086686258399}}
{"hexsha": "eedf072c408246eee339cda55c42a69c694380b4", "ext": "py", "lang": "Python", "content": "def extract_bucket_reference_for_param_reference(template, param_name):\n    param_value = template.get_parameter_default(param_name)\n    if param_value is None:\n        return\n    for resource in template.resources('AWS::Serverless::Function'):\n        policies = resource['Properties'].get('Policies')\n        if policies is None:\n            continue\n        for policy in policies:\n            for statement in policy['Statement']:\n                if param_value not in statement.get('Resource', ''):\n                    continue\n                old_value = statement['Resource']\n                parts = list(old_value.partition(param_value))\n                parts[1] = {'Ref': param_name}\n                new_value = {'Fn::Join': ['', parts]}\n                statement['Resource'] = new_value", "fn_id": 2, "class_fn": false, "repo": "jmespath/jmespath-playground", "file": "template-fixups.py", "last_update_at": "2021-11-24T14:33:45+00:00", "pred": {"ppl": 2.977276086807251, "ppl_lower": 4.122374057769775, "ppl/lowercase_ppl": -1.2982747729187725, "ppl/zlib": 0.0033161362239377775, "Min_5.0% Prob": 10.27202981710434, "Min_10.0% Prob": 7.677284156574922, "Min_20.0% Prob": 5.001569756690194, "Min_30.0% Prob": 3.52189048890974, "Min_40.0% Prob": 2.694311306318816, "Min_50.0% Prob": 2.1750588397331097, "Min_60.0% Prob": 1.8171413278335011}}
{"hexsha": "6f11be4ebd108a94cb1027e16e858ff097fa14e5", "ext": "py", "lang": "Python", "content": "def text_to_spreadsheet(directory='.', output_file='text_to_sheet.xlsx'):\n    \"\"\"\n    Searches for all text files at the given directory. Each individual\n    text file is converted to a column in the output_file spreadsheet.\n\n    :param str directory: path to directory to search\n    :param str output_file: name of output file\n    \"\"\"\n    path = os.path.abspath(directory)\n    wb = openpyxl.Workbook()\n    wb.create_sheet(title='Text to Columns', index=0)\n    sheet = wb.active\n    bold = Font(bold=True)\n    print(f'Searching for text files...')\n    files = [file for file in os.listdir(path) if file.lower().endswith('.txt')]\n    column = 1\n    print(f'Writing lines of text to columns...')\n    for file in files:\n        row = 2\n        with open(os.path.join(path, file)) as text:\n            sheet.cell(row=1, column=column).value = file\n            sheet.cell(row=1, column=column).font = bold\n            for line in text:\n                sheet.cell(row=row, column=column).value = line\n                row += 1\n        column += 1\n    wb.save(filename=output_file)\n    print(f\"Resulting file saved as '{output_file}'\")", "fn_id": 0, "class_fn": false, "repo": "zspatter/automate-the-boring-stuff", "file": "text_to_spreadsheet/text_to_spreadsheet.py", "last_update_at": "2021-09-05T20:19:40+00:00", "pred": {"ppl": 2.6126646995544434, "ppl_lower": 3.0267066955566406, "ppl/lowercase_ppl": -1.1531746829320675, "ppl/zlib": 0.0018942222055137333, "Min_5.0% Prob": 8.518950189862933, "Min_10.0% Prob": 6.641965545456985, "Min_20.0% Prob": 4.313871226068271, "Min_30.0% Prob": 3.1017478433217893, "Min_40.0% Prob": 2.3928207408229842, "Min_50.0% Prob": 1.9237257964259027, "Min_60.0% Prob": 1.6037949839003343}}
{"hexsha": "1b7c720289e99957b1d1e5c9b70d89bb7e355da1", "ext": "py", "lang": "Python", "content": "@tf.function\ndef train_step(x_target, y_target, model, optimizer, model_loss):\n    with tf.GradientTape() as model_tape:\n        y_predic = model(x_target, training=True)\n        loss = model_loss(y_target, y_predic)\n    gradients_of_model = model_tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients_of_model, model.trainable_variables))\n    return loss", "fn_id": 1, "class_fn": false, "repo": "awagot/CNN-POD", "file": "training/training.py", "last_update_at": "2021-08-18T11:23:05+00:00", "pred": {"ppl": 1.854471206665039, "ppl_lower": 2.726109743118286, "ppl/lowercase_ppl": -1.6238281306985898, "ppl/zlib": 0.0031035155358219127, "Min_5.0% Prob": 9.835668563842773, "Min_10.0% Prob": 5.855282799764113, "Min_20.0% Prob": 3.1362132253971966, "Min_30.0% Prob": 2.0625532651867937, "Min_40.0% Prob": 1.5631088276497191, "Min_50.0% Prob": 1.2349378499182007, "Min_60.0% Prob": 1.0353449853633612}}
{"hexsha": "49f5a6884183e7a4dcbfcde101a491ad27898026", "ext": "py", "lang": "Python", "content": "def _get_eval_config_from_service_classification(classification: configuration_pb2.ClassificationProblemSpec, eval_config: model_evaluation_pb2.EvaluationConfig) -> None:\n    if classification.HasField('ground_truth_column_spec'):\n        eval_config.data_spec.label_key_spec.CopyFrom(classification.ground_truth_column_spec)\n    if classification.HasField('example_weight_column_spec'):\n        eval_config.data_spec.example_weight_key_spec.CopyFrom(classification.example_weight_column_spec)\n    if classification.HasField('prediction_score_column_spec'):\n        eval_config.data_spec.predicted_score_key_spec.CopyFrom(classification.prediction_score_column_spec)\n    if classification.HasField('prediction_label_column_spec'):\n        eval_config.data_spec.predicted_label_key_spec.CopyFrom(classification.prediction_label_column_spec)\n    if classification.HasField('prediction_id_column_spec'):\n        eval_config.data_spec.predicted_label_id_key_spec.CopyFrom(classification.prediction_id_column_spec)\n    eval_config.data_spec.labels.extend(classification.class_names)\n    num_classes = len(classification.class_names)\n    if classification.type == configuration_pb2.ClassificationProblemSpec.MULTICLASS:\n        problem_type = constants.ProblemType.MULTICLASS\n    elif classification.type == configuration_pb2.ClassificationProblemSpec.MULTILABEL:\n        problem_type = constants.ProblemType.MULTILABEL\n    else:\n        raise NotImplementedError('Classification type %r not implemented' % classification.type)\n    adapter = tfma_adapter.TFMAToME(class_name_list=list(classification.class_names))\n    tfma_metric_specs = _get_metric_specs(problem_type, list(classification.class_names), list(classification.evaluation_options.positive_classes), list(classification.evaluation_options.top_k_list))\n    for tfma_metric_spec in tfma_metric_specs:\n        eval_config.metrics_specs.append(adapter.metrics_spec(tfma_metric_spec))", "fn_id": 3, "class_fn": false, "repo": "tomar27/pipelines", "file": "components/google-cloud/google_cloud_pipeline_components/experimental/evaluation/flex/lib/config.py", "last_update_at": "2021-10-23T00:39:47+00:00", "pred": {"ppl": 2.015613079071045, "ppl_lower": 2.553347587585449, "ppl/lowercase_ppl": -1.3373861804013194, "ppl/zlib": 0.0013907210450896516, "Min_5.0% Prob": 7.483989486694336, "Min_10.0% Prob": 5.468495860099792, "Min_20.0% Prob": 3.3168363819027893, "Min_30.0% Prob": 2.324689781231596, "Min_40.0% Prob": 1.7496165000178878, "Min_50.0% Prob": 1.4042894741851053, "Min_60.0% Prob": 1.168151885512932}}
{"hexsha": "02819a01b041692ac69ff145ea5f13a590fc9b34", "ext": "py", "lang": "Python", "content": "def _guess_package_name(file_type, file_name):\n    if not file_type:\n        return None\n    file_name = file_name.lower()\n    if 'Bourne-Again' in file_type or 'bash' in file_type:\n        return 'bash'\n    elif 'Mach-O' in file_type and 'executable' in file_type:\n        return 'macho'\n    elif 'directory' in file_type or (file_name.endswith('.app') or file_name.endswith('.app/')) or (file_name.endswith('.pkg') or file_name.endswith('.pkg/')):\n        return 'app'\n    elif 'Zip archive' in file_type and file_name.endswith('.zip'):\n        return 'zip'\n    elif 'PDF' in file_type or file_name.endswith('.pdf'):\n        return 'pdf'\n    elif 'Microsoft Word' in file_type or 'Microsoft Office Word' in file_type or file_name.endswith('.docx') or file_name.endswith('.doc'):\n        return 'doc'\n    elif 'Rich Text Format' in file_type or file_name.endswith('.rtf') or 'property list' in file_type or file_name.endswith('.plist'):\n        return 'rtf'\n    elif 'HTML' in file_type or file_name.endswith('.htm') or file_name.endswith('.html'):\n        return 'html'\n    elif file_name.endswith('.jar'):\n        return 'jar'\n    elif file_name.endswith('.py') or 'Python script' in file_type:\n        return 'python'\n    elif file_name.endswith('.pl') or 'perl script' in file_type.lower():\n        return 'perl'\n    elif file_name.endswith('.dmg'):\n        return 'dmg'\n    else:\n        return 'generic'", "fn_id": 2, "class_fn": false, "repo": "phdphuc/mac-a-mal-cuckoo", "file": "analyzer/darwin/lib/core/packages.py", "last_update_at": "2021-04-07T08:26:25+00:00", "pred": {"ppl": 1.7426800727844238, "ppl_lower": 1.852097511291504, "ppl/lowercase_ppl": -1.1096361786000333, "ppl/zlib": 0.0014025863634843584, "Min_5.0% Prob": 6.26201235620599, "Min_10.0% Prob": 4.33260026650551, "Min_20.0% Prob": 2.6367774745331536, "Min_30.0% Prob": 1.8296432862637424, "Min_40.0% Prob": 1.3845275792427971, "Min_50.0% Prob": 1.109793059106673, "Min_60.0% Prob": 0.9286121427690015}}
{"hexsha": "6576548aed0db505fcd1e0ff4f67a6208131321a", "ext": "py", "lang": "Python", "content": "def login0(auth=None):\n    \"\"\"Handle secure login for performance and stress testing.\n\n    Signature is the signature of email value with the application key.\n    \"\"\"\n    if not auth:\n        auth = request.headers.get('Authorization')\n        if not auth:\n            resp = Response()\n            resp.headers['WWW-Authenticate'] = 'Basic realm=\"Access to the load-testing login\"'\n            resp.status_code = 401\n            return resp\n        if ':' not in auth:\n            auth = base64.b64decode(auth).decode()\n    email, signature = auth.split(':')\n    s = Signer(app.secret_key)\n    if s.validate(email + '.' + signature):\n        try:\n            u = User.get(email=email)\n            login_user(u)\n            return redirect(get_next_url() or url_for('index'))\n        except User.DoesNotExist:\n            return handle_login()\n    abort(403)", "fn_id": 7, "class_fn": false, "repo": "tenet-ac-za/NZ-ORCID-Hub", "file": "orcid_hub/authcontroller.py", "last_update_at": "2021-07-22T08:53:40+00:00", "pred": {"ppl": 4.230541229248047, "ppl_lower": 5.6199140548706055, "ppl/lowercase_ppl": -1.1968942258700643, "ppl/zlib": 0.0032705894218823224, "Min_5.0% Prob": 10.58510684967041, "Min_10.0% Prob": 8.70001763389224, "Min_20.0% Prob": 6.109610637029012, "Min_30.0% Prob": 4.521259007945893, "Min_40.0% Prob": 3.5429918890198073, "Min_50.0% Prob": 2.8745235553809576, "Min_60.0% Prob": 2.40232225692284}}
{"hexsha": "782e47ae6e2a1bc565a53c10fee16a15dc5e46b5", "ext": "py", "lang": "Python", "content": "def readStr_qm9():\n    f = open(current_dir + '/../_dataset/QM9/qm9.smi', 'r')\n    L = []\n    for line in f:\n        line = line.strip()\n        L.append(line)\n    f.close()\n    np.random.seed(1)\n    np.random.shuffle(L)\n    return L", "fn_id": 2, "class_fn": false, "repo": "drigoni/ComparisonsDGM", "file": "_utils/read_dataset.py", "last_update_at": "2021-04-12T13:17:50+00:00", "pred": {"ppl": 3.8181629180908203, "ppl_lower": 3.710606098175049, "ppl/lowercase_ppl": -0.978672327126203, "ppl/zlib": 0.008270181453388356, "Min_5.0% Prob": 9.082234382629395, "Min_10.0% Prob": 8.11826467514038, "Min_20.0% Prob": 5.718496143817902, "Min_30.0% Prob": 4.244929678738117, "Min_40.0% Prob": 3.3048231657594442, "Min_50.0% Prob": 2.668755414523184, "Min_60.0% Prob": 2.2299239301743605}}
{"hexsha": "cbd6d9414697897c65c3690922a074fdd0eec5b2", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('method_name', ['from_pandas', 'iter_from_pandas'])\ndef test_dynamic_defines_key_fields(pandas_data, method_name):\n    model = PandasToRecordsTransformer(pandas_data, 'MyRecord', key_fields={'key_field'})\n    from_pandas_method = getattr(model, method_name)\n    record = list(from_pandas_method(pandas_data))[0]\n    assert record.key_fields == {'key_field'}", "fn_id": 4, "class_fn": false, "repo": "AbsaOSS/py2k", "file": "tests/test_models.py", "last_update_at": "2021-09-08T12:33:46+00:00", "pred": {"ppl": 4.26350212097168, "ppl_lower": 5.925845623016357, "ppl/lowercase_ppl": -1.2270426478537886, "ppl/zlib": 0.006938234051061236, "Min_5.0% Prob": 10.100015640258789, "Min_10.0% Prob": 7.912169629877264, "Min_20.0% Prob": 5.9296604720028965, "Min_30.0% Prob": 4.520648847926747, "Min_40.0% Prob": 3.5625136332078413, "Min_50.0% Prob": 2.8975486768917604, "Min_60.0% Prob": 2.432243829649506}}
{"hexsha": "6b441b738c1e2efec58e60abe442cbe344419f54", "ext": "py", "lang": "Python", "content": "def avro_schema(avsc: Union[dict, str]) -> dict:\n    \"\"\" Create avro schema from dictionary or filepath string \"\"\"\n    logging.info('Parsing avro schema')\n    if isinstance(avsc, dict):\n        avsc = avro.schema.parse_schema(avsc)\n    elif isinstance(avsc, str):\n        avsc = avro.schema.load_schema(avsc)\n    return avsc", "fn_id": 3, "class_fn": false, "repo": "staylorx/cupyopt", "file": "src/cupyopt/nuggets/schema.py", "last_update_at": "2021-03-12T20:46:34+00:00", "pred": {"ppl": 3.172882556915283, "ppl_lower": 3.7736921310424805, "ppl/lowercase_ppl": -1.1501881917949075, "ppl/zlib": 0.0064867443744531855, "Min_5.0% Prob": 8.789082884788513, "Min_10.0% Prob": 6.83323073387146, "Min_20.0% Prob": 4.829861217074924, "Min_30.0% Prob": 3.6965760169205844, "Min_40.0% Prob": 2.857564045770748, "Min_50.0% Prob": 2.3235861566727576, "Min_60.0% Prob": 1.949684028937058}}
{"hexsha": "f4365a09ba1797e4fafc8682981c9fb04235a5c1", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('space_group', ['P2', 'P3', 'P6', 'R3:h', 'I23'][:])\ndef test_determine_space_group(space_group):\n    sgi = sgtbx.space_group_info(symbol=space_group)\n    sg = sgi.group()\n    cs = sgi.any_compatible_crystal_symmetry(volume=10000)\n    cs = cs.best_cell()\n    cs = cs.minimum_cell()\n    intensities = generate_fake_intensities(cs)\n    result = LaueGroupAnalysis([intensities], normalisation=None)\n    print(result)\n    assert result.best_solution.subgroup['best_subsym'].space_group() == sg.build_derived_patterson_group()\n    assert result.best_solution.likelihood > 0.8\n    for score in result.subgroup_scores[1:]:\n        assert score.likelihood < 0.1", "fn_id": 1, "class_fn": false, "repo": "TiankunZhou/dials", "file": "algorithms/symmetry/test_laue_group.py", "last_update_at": "2021-11-18T04:20:54+00:00", "pred": {"ppl": 2.705655336380005, "ppl_lower": 3.052316665649414, "ppl/lowercase_ppl": -1.1211206326343615, "ppl/zlib": 0.0027725463829763575, "Min_5.0% Prob": 7.783732891082764, "Min_10.0% Prob": 6.069734410806135, "Min_20.0% Prob": 4.043316014607748, "Min_30.0% Prob": 3.0840278347926353, "Min_40.0% Prob": 2.4272985726594927, "Min_50.0% Prob": 1.9693577088481558, "Min_60.0% Prob": 1.6600737525633087}}
{"hexsha": "3f0ef81e04475f7801a661ee804b85c33aca42e7", "ext": "py", "lang": "Python", "content": "def get_installed_packages():\n    reqs = subprocess.check_output([sys.executable, '-m', 'pip', 'freeze'])\n    installed_packages = [r.decode().split('==')[0] for r in reqs.split()]\n    return installed_packages", "fn_id": 0, "class_fn": false, "repo": "vymana/nlpwiz", "file": "nlpwiz/utils/pkg_utils.py", "last_update_at": "2021-04-20T18:46:52+00:00", "pred": {"ppl": 1.4529575109481812, "ppl_lower": 1.4529575109481812, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002507390213875972, "Min_5.0% Prob": 7.26685643196106, "Min_10.0% Prob": 3.9733390331268312, "Min_20.0% Prob": 1.9397190619598736, "Min_30.0% Prob": 1.2683772005359917, "Min_40.0% Prob": 0.9404855421541826, "Min_50.0% Prob": 0.7467673958825141, "Min_60.0% Prob": 0.6371544621515033}}
{"hexsha": "9cb1075cc24b8fabc3e7e078623e7b3ba9e43ca3", "ext": "py", "lang": "Python", "content": "def run_sample_whole_range():\n    log_file = '../results/DBEsti_tpcds_100k_all.log'\n    db = DBEst(dataset='tpcds', logger_file=log_file)\n    table = 'store_sales'\n    file = '../data/tpcDs10k/store_sales.csv'\n    num_of_points = {'store_sales': '2685596178'}\n    tableColumnSets = [['ss_list_price', 'ss_wholesale_cost']]\n    db.init_whole_range(file=file, table=table, columnItems=tableColumnSets, num_of_points=num_of_points)\n    db.clear_training_data()\n    db.logger.logger.info('Total size of DBEst is ' + str(db.get_size()) + ' bytes.')", "fn_id": 7, "class_fn": false, "repo": "qingzma/CRegressionRDBM", "file": "dbest/dbestclient.py", "last_update_at": "2021-08-04T06:39:19+00:00", "pred": {"ppl": 6.488821983337402, "ppl_lower": 6.6734137535095215, "ppl/lowercase_ppl": -1.014999636079495, "ppl/zlib": 0.005993849364287697, "Min_5.0% Prob": 10.317217032114664, "Min_10.0% Prob": 8.507566602606522, "Min_20.0% Prob": 6.831886218144343, "Min_30.0% Prob": 5.5268211485975876, "Min_40.0% Prob": 4.5129164541379, "Min_50.0% Prob": 3.6936670800252838, "Min_60.0% Prob": 3.105962695838031}}
{"hexsha": "41a7419f7ecd636b33374eda954170a04c2d6f82", "ext": "py", "lang": "Python", "content": "def get_cert(client, service, file_path, local_path, remote_cert_path, remote_csr_path):\n    \"\"\"\n    Gets the certificate (sign or auth) from the CA.\n\n    NB! This requires the user to have sudo rights without password prompt.\n    :param client: SSHClient object\n    :param service: str - service type: sign-sign (signing certificates) or sign-auth (authentication certificates)\n    :param file_path: str - local CSR path (input)\n    :param local_path: str - local certificate path (output)\n    :param remote_cert_path: str - remote certificate path (output)\n    :param remote_csr_path: str - remote CSR path (input)\n    :return: None\n    \"\"\"\n    client.exec_command('rm temp*')\n    sftp = client.get_client().open_sftp()\n    sftp.put(file_path, remote_csr_path)\n    client.exec_command('cat ' + remote_csr_path + ' | ' + service + ' > ' + remote_cert_path)\n    time.sleep(3)\n    sftp.get(remote_cert_path, local_path)\n    sftp.close()\n    client.close()", "fn_id": 2, "class_fn": false, "repo": "ria-ee/XTM", "file": "common/xrd-ui-tests-python/tests/xroad_ss_delete_hardware_token_certificate/del_management.py", "last_update_at": "2021-11-08T10:30:35+00:00", "pred": {"ppl": 2.9966087341308594, "ppl_lower": 3.2268357276916504, "ppl/lowercase_ppl": -1.0674460547016, "ppl/zlib": 0.00277141724066393, "Min_5.0% Prob": 9.053044099074144, "Min_10.0% Prob": 6.8681161933475074, "Min_20.0% Prob": 4.74307045230159, "Min_30.0% Prob": 3.502486902990459, "Min_40.0% Prob": 2.7191158893207708, "Min_50.0% Prob": 2.1924139048766205, "Min_60.0% Prob": 1.8287188543558672}}
{"hexsha": "2cf7ecb49570612ea3ef106c4439aab58551dc8a", "ext": "py", "lang": "Python", "content": "def render_bokeh_figure(result, state):\n    from bokeh.resources import CDN\n    if 'headers' not in state:\n        state['headers'] = set()\n    state['headers'].update(['<script src=\"%s\" async=\"\"></script>' % CDN.js_files[0], '<link rel=\"stylesheet\" href=\"%s\" type=\"text/css\"/>' % CDN.css_files[0]])\n    from bokeh.embed import components\n    script, div = components(result, CDN)\n    if 'footers' not in state:\n        state['footers'] = list()\n    state['footers'].append(script)\n    return [closing_fence(state['code']), div, state['code']]", "fn_id": 9, "class_fn": false, "repo": "mrocklin/pymarkdown", "file": "pymarkdown/core.py", "last_update_at": "2021-12-25T10:56:53+00:00", "pred": {"ppl": 3.9396934509277344, "ppl_lower": 4.703366279602051, "ppl/lowercase_ppl": -1.1292212014412357, "ppl/zlib": 0.004777362076480369, "Min_5.0% Prob": 10.887246676853724, "Min_10.0% Prob": 8.464720980326335, "Min_20.0% Prob": 6.032440082232157, "Min_30.0% Prob": 4.512598820527395, "Min_40.0% Prob": 3.412513596112611, "Min_50.0% Prob": 2.7553162818872616, "Min_60.0% Prob": 2.304286710743966}}
{"hexsha": "17fa8f3d90779608a0fa731c756323ee0bb02290", "ext": "py", "lang": "Python", "content": "def set_up_outputs(OutputObj):\n    OutputObj.add_output('lead_snps_matching_quality_file', 'lead_snps_matching_quality.tsv', add_root=True)\n    OutputObj.add_output('ldscore_for_expanded_control_sets_quality_file', 'ldscore_matching_quality_for_ldexpanded_sets.tsv', add_root=True)\n    OutputObj.add_output('ldsnp_coverage_by_input_snp', 'ldsnp_coverage_by_input_snp.tsv', add_root=True)\n    return OutputObj", "fn_id": 6, "class_fn": false, "repo": "abraham-abin13/gsel_vec", "file": "gsel_vec/scripts/check_ld_expanded_control_sets.py", "last_update_at": "2021-07-22T23:14:33+00:00", "pred": {"ppl": 5.418344497680664, "ppl_lower": 6.003011703491211, "ppl/lowercase_ppl": -1.0606412326800811, "ppl/zlib": 0.00976757413619607, "Min_5.0% Prob": 10.940115292867025, "Min_10.0% Prob": 9.590131759643555, "Min_20.0% Prob": 7.512818760342068, "Min_30.0% Prob": 5.515685721141536, "Min_40.0% Prob": 4.22387249415571, "Min_50.0% Prob": 3.393834239438824, "Min_60.0% Prob": 2.8270773972014345}}
{"hexsha": "44f8ed8d741874b6b1b7ec273d09a2bf1be84c93", "ext": "py", "lang": "Python", "content": "def test_schemakey():\n    typemap = {'BareAsset': 'Asset', 'PublishedAsset': 'Asset', 'PublishedDandiset': 'Dandiset'}\n    for val in dir(models):\n        if val in ['BaseModel']:\n            continue\n        klass = getattr(models, val)\n        if isinstance(klass, pydantic.main.ModelMetaclass):\n            assert 'schemaKey' in klass.__fields__\n            if val in typemap:\n                assert typemap[val] == klass.__fields__['schemaKey'].default\n            else:\n                assert val == klass.__fields__['schemaKey'].default", "fn_id": 3, "class_fn": false, "repo": "dandi/dandischema", "file": "dandischema/tests/test_models.py", "last_update_at": "2021-09-19T10:56:25+00:00", "pred": {"ppl": 3.1528475284576416, "ppl_lower": 4.244905948638916, "ppl/lowercase_ppl": -1.259002074615779, "ppl/zlib": 0.00468696335422156, "Min_5.0% Prob": 9.052410761515299, "Min_10.0% Prob": 7.599316358566284, "Min_20.0% Prob": 5.115555586814881, "Min_30.0% Prob": 3.745728058250327, "Min_40.0% Prob": 2.8544625861971986, "Min_50.0% Prob": 2.291295637318399, "Min_60.0% Prob": 1.9327988686089062}}
{"hexsha": "2888eb7991df8f7416f4f9dbfa57abb2f621d817", "ext": "py", "lang": "Python", "content": "def plot_mne_circular_connectivity_network(con_mat, labels, perc_conn=0.25, cfc=False, fig=None, subplot=111, fig_title=None, node_name=True, vmax=None, vmin=0, colormap='Blues', facecolor='white', textcolor='black'):\n    from mne.viz import circular_layout, plot_connectivity_circle\n    fig_title = '' if fig_title is None else fig_title\n    node_colors = [label.color for label in labels]\n    label_names = [label.name for label in labels]\n    lh_labels = [name for name in label_names if name.endswith('lh')]\n    rh_labels = [name for name in label_names if name.endswith('rh')]\n    labels_network_sorted, idx_lbl_sort = rearrange_labels_network(labels)\n    label_names_sorted = [label_names[ii] for ii in idx_lbl_sort]\n    lh_labels = [name[:-3] for name in label_names_sorted if name.endswith('lh')]\n    rh_labels = [name[:-3] for name in label_names_sorted if name.endswith('rh')]\n    label_names = [name[:-3] for name in label_names]\n    node_order = lh_labels[::-1] + rh_labels\n    node_angles = circular_layout(label_names, node_order, start_pos=90, group_boundaries=[0, len(label_names) // 2])\n    if not node_name:\n        label_names = [''] * len(label_names)\n    else:\n        label_names = [label.name[13:-3] for label in labels]\n    if perc_conn < 1:\n        n_lines = int(np.prod(con_mat.shape) / 2 * perc_conn)\n    else:\n        n_lines = None\n    if fig is None:\n        fig = plt.figure(num=None, figsize=(8, 8), facecolor='black')\n    if cfc:\n        return plot_connectivity_circle_cfc(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)\n    else:\n        plot_connectivity_circle(con_mat, label_names, n_lines=n_lines, node_angles=node_angles, node_colors=node_colors, title=fig_title, fig=fig, subplot=subplot, vmax=vmax, vmin=vmin, facecolor=facecolor, colormap=colormap, textcolor=textcolor)", "fn_id": 3, "class_fn": false, "repo": "harmonic-minimization/harmoni_manuscript_codes", "file": "tools_connectivity_plot.py", "last_update_at": "2021-12-16T08:00:15+00:00", "pred": {"ppl": 1.94551682472229, "ppl_lower": 2.0387744903564453, "ppl/lowercase_ppl": -1.0703520358465575, "ppl/zlib": 0.0010563931133726328, "Min_5.0% Prob": 6.355937376618385, "Min_10.0% Prob": 4.883604720234871, "Min_20.0% Prob": 3.11754133598879, "Min_30.0% Prob": 2.1879340580975017, "Min_40.0% Prob": 1.662470730167115, "Min_50.0% Prob": 1.3299990296015674, "Min_60.0% Prob": 1.1096149090205791}}
{"hexsha": "27b7373c43ce0501e65b8ff161bfcf8803e53e2c", "ext": "py", "lang": "Python", "content": "def showmesh(node, elem, **kwargs):\n    triangulation = tri.Triangulation(node[:, 0], node[:, 1], elem)\n    markersize = 3000 / len(node)\n    if kwargs.items():\n        h = plt.triplot(triangulation, 'b-h', **kwargs)\n    else:\n        h = plt.triplot(triangulation, 'b-h', linewidth=0.5, alpha=0.5, markersize=markersize)\n    return h", "fn_id": 0, "class_fn": false, "repo": "scaomath/torch-fem", "file": "mesh/utils.py", "last_update_at": "2021-11-14T04:02:54+00:00", "pred": {"ppl": 3.043781042098999, "ppl_lower": 3.3624892234802246, "ppl/lowercase_ppl": -1.089462751118508, "ppl/zlib": 0.0061497265548783354, "Min_5.0% Prob": 9.08356533050537, "Min_10.0% Prob": 6.9182141477411445, "Min_20.0% Prob": 4.734121701934121, "Min_30.0% Prob": 3.502096084987416, "Min_40.0% Prob": 2.7772717707686954, "Min_50.0% Prob": 2.2209245143621636, "Min_60.0% Prob": 1.8651089110165178}}
{"hexsha": "6e9344b369513894bde3339419e2b7d6be02f344", "ext": "py", "lang": "Python", "content": "def load_character_json(path):\n    with open(path, 'r') as f:\n        raw = f.read()\n        raw = raw.replace('inf,', '999999999,')\n        logging.info('Returning python object')\n        return json.loads(raw)", "fn_id": 1, "class_fn": false, "repo": "trainb0y1/PyMultibound", "file": "editor.py", "last_update_at": "2021-09-18T17:59:47+00:00", "pred": {"ppl": 4.207599639892578, "ppl_lower": 4.184148788452148, "ppl/lowercase_ppl": -0.9961103272917214, "ppl/zlib": 0.009841728276013588, "Min_5.0% Prob": 10.467540740966797, "Min_10.0% Prob": 9.079718430836996, "Min_20.0% Prob": 6.1564843104435845, "Min_30.0% Prob": 4.629078077642541, "Min_40.0% Prob": 3.526733459188388, "Min_50.0% Prob": 2.8379340966542563, "Min_60.0% Prob": 2.4203914942649694}}
{"hexsha": "58199be75c2f936778ed896013450ada42119647", "ext": "py", "lang": "Python", "content": "def _setup(dataset_dir, label_types=None, classes=None, attrs=None, seed=None, download=False):\n    did_download = False\n    _label_types = _parse_label_types(label_types)\n    if etau.is_str(classes):\n        classes = [classes]\n    if etau.is_str(attrs):\n        attrs = [attrs]\n    if seed is not None:\n        random.seed(seed)\n    classes_map, _did_download = _get_classes_map(dataset_dir, download=download)\n    classes_map_rev = {v: k for k, v in classes_map.items()}\n    did_download |= _did_download\n    all_classes = sorted(classes_map.values())\n    if classes is not None:\n        oi_classes = []\n        missing_classes = []\n        filtered_classes = []\n        for c in classes:\n            if c in classes_map_rev:\n                oi_classes.append(classes_map_rev[c])\n                filtered_classes.append(c)\n            else:\n                missing_classes.append(c)\n        classes = filtered_classes\n        if missing_classes:\n            logger.warning('Ignoring invalid classes %s\\nYou can view the available classes via `fiftyone.utils.openimages.get_classes()`', missing_classes)\n    else:\n        oi_classes = None\n    if 'relationships' in _label_types:\n        attrs_map, _did_download = _get_attrs_map(dataset_dir, download=download)\n        attrs_map_rev = {v: k for k, v in attrs_map.items()}\n        did_download |= _did_download\n        all_attrs = sorted(attrs_map.values())\n        if attrs is None:\n            oi_attrs = [attrs_map_rev[a] for a in all_attrs]\n        else:\n            oi_attrs = []\n            missing_attrs = []\n            filtered_attrs = []\n            for a in attrs:\n                if a in attrs_map_rev:\n                    oi_attrs.append(attrs_map_rev[a])\n                    filtered_attrs.append(a)\n                else:\n                    missing_attrs.append(a)\n            attrs = filtered_attrs\n            if missing_attrs:\n                logger.warning('Ignoring invalid attributes %s\\nYou can view the available attributes via `fiftyone.utils.openimages.get_attributes()`', missing_attrs)\n    else:\n        attrs = None\n        attrs_map = None\n        oi_attrs = None\n        all_attrs = None\n    if 'segmentations' in _label_types:\n        seg_classes, _did_download = _get_seg_classes(dataset_dir, classes_map=classes_map, download=download)\n        did_download |= _did_download\n    else:\n        seg_classes = None\n    return (classes_map, all_classes, classes, oi_classes, attrs_map, all_attrs, attrs, oi_attrs, seg_classes, did_download)", "fn_id": 4, "class_fn": false, "repo": "Fariborzzz/fiftyone", "file": "fiftyone/utils/openimages.py", "last_update_at": "2021-12-17T10:11:37+00:00", "pred": {"ppl": 1.7958372831344604, "ppl_lower": 1.8435626029968262, "ppl/lowercase_ppl": -1.0447989982399895, "ppl/zlib": 0.0008790861354122512, "Min_5.0% Prob": 7.266512668494022, "Min_10.0% Prob": 4.860811295794018, "Min_20.0% Prob": 2.837581183038541, "Min_30.0% Prob": 1.9471989266611451, "Min_40.0% Prob": 1.4632407754770442, "Min_50.0% Prob": 1.1724501413194783, "Min_60.0% Prob": 0.9776863821101301}}
{"hexsha": "55c73198735716cc50f10f1745bd41508e18f45d", "ext": "py", "lang": "Python", "content": "def count_verbose_skip(func):\n\n    def decorator(obj, *args, **kw):\n        fname = check_parameters(func, args, kw)\n        if obj.is_truncated() or obj.is_canceled() or obj.is_aborted():\n            return 0\n        if obj.testing_syntax:\n            func(obj, *args, calc_time=True, **kw)\n            return 0\n        obj.debug('{} {} {}'.format(fname, args, kw))\n        return func(obj, *args, **kw)\n    return decorator", "fn_id": 0, "class_fn": false, "repo": "ael-noblegas/pychron", "file": "pychron/pyscripts/decorators.py", "last_update_at": "2021-08-17T15:38:24+00:00", "pred": {"ppl": 6.19340705871582, "ppl_lower": 6.8334221839904785, "ppl/lowercase_ppl": -1.0539298280421887, "ppl/zlib": 0.008601345984138888, "Min_5.0% Prob": 12.712791760762533, "Min_10.0% Prob": 10.14455529054006, "Min_20.0% Prob": 7.2830455005168915, "Min_30.0% Prob": 5.609877384371227, "Min_40.0% Prob": 4.444772654523452, "Min_50.0% Prob": 3.6326721260945, "Min_60.0% Prob": 3.0513115086489253}}
{"hexsha": "ae4b7326c41a7e04e0d0c89af9536dff4cc979a0", "ext": "py", "lang": "Python", "content": "def process_ccdlab(output=None, time_list=None, XY_integers=None, XY_fractions=None, flat_list=None, framecount_per_sec=framecount_per_sec):\n    \"\"\"Generate a Curvit compatible events list from CCDLAB files.\n\n    Parameters\n    ----------\n    output : file path\n        The name of the output events list FITS file.\n        \n    time_list : file path\n        The name of the CCDLAB time list FITS file\n        \n    XY_integers : file path\n        The name of the CCDLAB XY integers FITS file\n        \n    XY_fractions : file path\n        The name of the CCDLAB XY fractions FITS file\n        \n    flat_list : file path\n        The name of the CCDLAB flat list FITS file\n        \n    framecount_per_sec : float, optional\n        The framerate of the observation, with a default value of 28.7185\n        frames per second for 512 x 512 window mode. \n        The most accurate way to get the framerate would be to take the value \n        of (``1 / INT_TIME``). \n        ``INT_TIME`` value can be found from the corresponding image header. \n        Approximate values of framerate for different window modes of UVIT \n        are given in the table below.\n\n        +---------------+---------------------+\n        | window mode   | frames per second   |\n        +===============+=====================+\n        | 512 x 512     | 28.7                |\n        +---------------+---------------------+\n        | 350 x 350     | 61                  |\n        +---------------+---------------------+\n        | 300 x 300     | 82                  |\n        +---------------+---------------------+\n        | 250 x 250     | 115                 |\n        +---------------+---------------------+\n        | 200 x 200     | 180                 |\n        +---------------+---------------------+\n        | 150 x 150     | 300                 |\n        +---------------+---------------------+\n        | 100 x 100     | 640                 |\n        +---------------+---------------------+ \n        \n\n    Note\n    ---- \n    It is essential to set the correct value of the framerate. \n    Most UVIT observations are carried out in 512 x 512 window mode.\n            \n    Warning\n    -------\n    This function is new; please report if you find any bugs.\n        \n    Example\n    --------\n    >>> import curvit\n    >>> process_ccdlab(output = 'output_events_list.fits',\n    ...                time_list = 'sample_TimeList.fits', \n    ...                XY_integers = 'sample_XYInts_List.fits',\n    ...                XY_fractions = 'sample_XYFrac_List.fits',\n    ...                flat_list = 'sample_FlatList.fits',\n    ...                framecount_per_sec = 28.7185)\n    \n    The above script will generate a FITS table called ``output_events_list.fits``.\n    You may then use it as input to ``curve`` or ``makecurves``. \n    \"\"\"\n    time = fits.open(time_list)[0].data / 1000\n    XYFrac = fits.open(XY_fractions)[0].data\n    XYInts = fits.open(XY_integers)[0].data\n    weight = fits.open(flat_list)[0].data\n    photons = weight * framecount_per_sec\n    fx = CCDLAB_to_4k(XYInts[:, 0], XYFrac[:, 0])\n    fy = CCDLAB_to_4k(XYInts[:, 1], XYFrac[:, 1])\n    col1 = fits.Column(name='MJD_L2', format='D', array=time)\n    col2 = fits.Column(name='Fx', format='D', array=fx)\n    col3 = fits.Column(name='Fy', format='D', array=fy)\n    col4 = fits.Column(name='EFFECTIVE_NUM_PHOTONS', format='D', array=photons)\n    cols = fits.ColDefs([col1, col2, col3, col4])\n    tbhdu = fits.BinTableHDU.from_columns(cols)\n    tbhdu.writeto(output, overwrite=True)\n    return", "fn_id": 14, "class_fn": false, "repo": "prajwel/curvit", "file": "curvit/curvit.py", "last_update_at": "2021-11-15T12:01:29+00:00", "pred": {"ppl": 3.086362361907959, "ppl_lower": 3.3021295070648193, "ppl/lowercase_ppl": -1.059959899625711, "ppl/zlib": 0.000991198916688744, "Min_5.0% Prob": 9.45657723000709, "Min_10.0% Prob": 7.567500159614965, "Min_20.0% Prob": 5.074981337442448, "Min_30.0% Prob": 3.6818160342007147, "Min_40.0% Prob": 2.8136384806629873, "Min_50.0% Prob": 2.2552325999165523, "Min_60.0% Prob": 1.878823033752624}}
{"hexsha": "7d9f104ac0e3008ea503327f64672715cc84a452", "ext": "py", "lang": "Python", "content": "def encode_routing_info(r_tags):\n    result = bitstring.BitArray()\n    for route in r_tags:\n        result.append(bitstring.pack('uint:8', len(route)))\n        for step in route:\n            pubkey, channel, feebase, feerate, cltv = step\n            result.append(bitstring.BitArray(pubkey) + bitstring.BitArray(channel) + bitstring.pack('intbe:32', feebase) + bitstring.pack('intbe:32', feerate) + bitstring.pack('intbe:16', cltv))\n    return result.tobytes()", "fn_id": 0, "class_fn": false, "repo": "RonSherfey/electrum", "file": "electrum/trampoline.py", "last_update_at": "2021-04-22T07:51:24+00:00", "pred": {"ppl": 2.0524537563323975, "ppl_lower": 2.2619521617889404, "ppl/lowercase_ppl": -1.135170134560106, "ppl/zlib": 0.003328870517037536, "Min_5.0% Prob": 8.142459869384766, "Min_10.0% Prob": 5.6080030628613065, "Min_20.0% Prob": 3.3396492770739963, "Min_30.0% Prob": 2.365577614733151, "Min_40.0% Prob": 1.78551312993493, "Min_50.0% Prob": 1.4436011318327255, "Min_60.0% Prob": 1.2085970569511546}}
{"hexsha": "a016e584bf0e1d2da7b3d8766cb1e7cb07b0e46c", "ext": "py", "lang": "Python", "content": "def preprocess(paragraph):\n    result = []\n    sentences = tokenizer.tokenize(paragraph)\n    for sentence in sentences:\n        words = nltk.regexp_tokenize(sentence, pattern)\n        temp = []\n        for word in words:\n            toDeal = []\n            if camelCase1.match(word) or camelCase2.match(word):\n                toDeal = splitCode(word)\n            elif upperExtCase.match(word):\n                toDeal = splitFinalExt(word)\n            else:\n                toDeal.append(word)\n            for deal in toDeal:\n                if not isDelete(deal.lower()):\n                    temp.append(stemmer.stem(deal))\n        result.append(temp)\n    return result", "fn_id": 1, "class_fn": false, "repo": "anonym-user-1/ICSME2021", "file": "preprocessor.py", "last_update_at": "2021-07-01T17:13:10+00:00", "pred": {"ppl": 3.932849168777466, "ppl_lower": 4.105661392211914, "ppl/lowercase_ppl": -1.0314034117984476, "ppl/zlib": 0.005015985870121934, "Min_5.0% Prob": 11.974621772766113, "Min_10.0% Prob": 10.132987328938075, "Min_20.0% Prob": 6.48953560714064, "Min_30.0% Prob": 4.520733143795621, "Min_40.0% Prob": 3.427796860872689, "Min_50.0% Prob": 2.749960887774422, "Min_60.0% Prob": 2.291132968923684}}
{"hexsha": "225b550790ae56458e3be71c37a81107f822f14e", "ext": "py", "lang": "Python", "content": "def find_boost(self):\n    global boost_pos\n    boost_pos = pyAG.locateCenterOnScreen('images/{}.png'.format(self))\n    if boost_pos == None:\n        print('No', self.replace('_', ' '), 'found')\n        return False\n    else:\n        return True", "fn_id": 7, "class_fn": false, "repo": "nebelorz/NST", "file": "NST v1.3 (source)/functions.py", "last_update_at": "2021-11-30T22:09:13+00:00", "pred": {"ppl": 7.198887825012207, "ppl_lower": 10.16723918914795, "ppl/lowercase_ppl": -1.1749022335805088, "ppl/zlib": 0.011749562769893925, "Min_5.0% Prob": 14.396269798278809, "Min_10.0% Prob": 11.115537961324057, "Min_20.0% Prob": 7.72218684049753, "Min_30.0% Prob": 6.060836302606683, "Min_40.0% Prob": 4.709709362341807, "Min_50.0% Prob": 3.9083583801984787, "Min_60.0% Prob": 3.258768234879543}}
{"hexsha": "63b326f4f249f15f3d820d4b7228b3b70a34e6a6", "ext": "py", "lang": "Python", "content": "def write_file(filename, data):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w+') as f:\n        print('writing file %s' % filename)\n        f.write(data)", "fn_id": 0, "class_fn": false, "repo": "ahmednofal/DFFRAM", "file": "openlane/rtl/RTL_openlane_flow.py", "last_update_at": "2021-11-08T09:13:45+00:00", "pred": {"ppl": 2.0872058868408203, "ppl_lower": 2.765857458114624, "ppl/lowercase_ppl": -1.3825963172342113, "ppl/zlib": 0.005491240860337649, "Min_5.0% Prob": 7.0933496952056885, "Min_10.0% Prob": 5.543063926696777, "Min_20.0% Prob": 3.619651686061512, "Min_30.0% Prob": 2.4282729853602016, "Min_40.0% Prob": 1.8984358927065677, "Min_50.0% Prob": 1.495975372547816, "Min_60.0% Prob": 1.2331956296830493}}
{"hexsha": "67b6579ce4e0d25dfadfeb81d73e475c2f423051", "ext": "py", "lang": "Python", "content": "def millify(n):\n    n = float(n)\n    millidx = max(0, min(len(millnames) - 1, int(math.floor(0 if n == 0 else math.log10(abs(n)) / 3))))\n    return '{:.0f}{}'.format(n / 10 ** (3 * millidx), millnames[millidx])", "fn_id": 0, "class_fn": false, "repo": "ZhiruiFeng/CarsMemory", "file": "web/app.py", "last_update_at": "2021-08-13T11:55:56+00:00", "pred": {"ppl": 1.4794049263000488, "ppl_lower": 1.4794049263000488, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.002526709226433369, "Min_5.0% Prob": 6.1158987283706665, "Min_10.0% Prob": 3.6744774729013443, "Min_20.0% Prob": 1.9516845810062744, "Min_30.0% Prob": 1.3440241719409824, "Min_40.0% Prob": 0.9900380988084876, "Min_50.0% Prob": 0.7831297858718371, "Min_60.0% Prob": 0.6603723867372929}}
{"hexsha": "e3f7b9dd2486d6d82391b6ab2cce6e07c345cb5c", "ext": "py", "lang": "Python", "content": "def uninitializePlugin(mobject):\n    mplugin = OpenMayaMPx.MFnPlugin(mobject)\n    try:\n        mplugin.deregisterNode(spSimpleSpringNodeId)\n    except:\n        sys.stderr.write('Failed to deregister node: %s' % kPluginNodeTypeName)\n        raise", "fn_id": 2, "class_fn": false, "repo": "leegoonz/Maya-devkit", "file": "osx/devkit/plug-ins/scripted/simpleSpring.py", "last_update_at": "2021-12-07T07:29:19+00:00", "pred": {"ppl": 2.0097405910491943, "ppl_lower": 9.56280517578125, "ppl/lowercase_ppl": -3.234760488961092, "ppl/zlib": 0.004230337300379554, "Min_5.0% Prob": 7.350380261739095, "Min_10.0% Prob": 5.951203028361003, "Min_20.0% Prob": 3.504635152908472, "Min_30.0% Prob": 2.327914476022124, "Min_40.0% Prob": 1.7960882819472597, "Min_50.0% Prob": 1.4165219488045708, "Min_60.0% Prob": 1.169005057157483}}
{"hexsha": "67782e299b60e3d6714308f0cda66ce9bb82d1a5", "ext": "py", "lang": "Python", "content": "def get_depths(flows, x, h, roughness=0.01, slope=0.001, conv=1.0, dd=0.0001, verbose=False):\n    if isinstance(flows, float):\n        flows = np.array([flows], dtype=float)\n    if isinstance(roughness, float):\n        roughness = np.ones(x.shape, dtype=float) * roughness\n    depths = np.zeros(flows.shape, dtype=float)\n    for idx, q in enumerate(flows):\n        depths[idx] = qtodepth(x, h, q, roughness=roughness, slope=slope, conv=conv, dd=dd, verbose=False)\n    return depths", "fn_id": 7, "class_fn": false, "repo": "scharlton2/modflow6", "file": "autotest/scripts/cross_section_functions.py", "last_update_at": "2021-10-08T00:56:20+00:00", "pred": {"ppl": 3.1512162685394287, "ppl_lower": 3.533690929412842, "ppl/lowercase_ppl": -1.0998044665235316, "ppl/zlib": 0.004905079039787184, "Min_5.0% Prob": 9.458927810192108, "Min_10.0% Prob": 7.318988233804703, "Min_20.0% Prob": 5.049190744757652, "Min_30.0% Prob": 3.618788200981763, "Min_40.0% Prob": 2.822591300652577, "Min_50.0% Prob": 2.2775829274479937, "Min_60.0% Prob": 1.91702672782145}}
{"hexsha": "6a706ba112e6e0c7b57c1e46bd9b0418402db376", "ext": "pyde", "lang": "Python", "content": "def draw():\n    loadPixels()\n    x = 4.0\n    y = 0.0\n    for i in range(1, 120000, 1):\n        x1 = b * y + f(x)\n        y = -x + f(x1)\n        x = x1\n        pixels[350 + int(x * 26) + (280 - int(y * 26)) * width] = color(i % 255, 100, 100)\n    updatePixels()", "fn_id": 1, "class_fn": false, "repo": "kantel/processingpy", "file": "sketches/mira/mira.pyde", "last_update_at": "2021-08-18T19:55:15+00:00", "pred": {"ppl": 3.6484932899475098, "ppl_lower": 4.044393062591553, "ppl/lowercase_ppl": -1.0795921122190135, "ppl/zlib": 0.007613613441738211, "Min_5.0% Prob": 7.935865084330241, "Min_10.0% Prob": 6.500195542971293, "Min_20.0% Prob": 4.760107000668843, "Min_30.0% Prob": 3.7623463604185314, "Min_40.0% Prob": 3.0300015101627427, "Min_50.0% Prob": 2.5358207733904727, "Min_60.0% Prob": 2.1601025317221474}}
{"hexsha": "704ba9392622d555589cf12d7af04a6f1811b620", "ext": "py", "lang": "Python", "content": "def energy_plot(scenarios, color_dict):\n    \"\"\"\n    \"\"\"\n    layout = go.Layout(barmode='relative', legend_orientation='h', title='Aggregated supply and demand', paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', yaxis=dict(title='Energy in {}'.format('TWh'), titlefont=dict(size=16, color='rgb(107, 107, 107)'), tickfont=dict(size=14, color='rgb(107, 107, 107)')))\n    data = []\n    for idx, row in scenarios.T.iteritems():\n        if '-cos' in idx:\n            legend = False\n        else:\n            legend = True\n        data.append(go.Bar(x=row.index, y=row.values, text=[v.round(1) if v > 20 or v < -20 else None for v in row.values], hovertext=[', '.join([str(v.round(2)), idx.replace('-cos', '')]) for v in row.values], hoverinfo='text', textposition='auto', showlegend=legend, name=idx, marker=dict(color=color_dict.get(idx.replace('-cos', ''), 'gray'))))\n    return {'data': data, 'layout': layout}", "fn_id": 3, "class_fn": false, "repo": "znes/angus-scenarios", "file": "documentation/plotly_plots.py", "last_update_at": "2021-06-02T01:43:57+00:00", "pred": {"ppl": 2.461540460586548, "ppl_lower": 3.0428202152252197, "ppl/lowercase_ppl": -1.2353468091444675, "ppl/zlib": 0.001884492379604906, "Min_5.0% Prob": 7.796225516001384, "Min_10.0% Prob": 5.814058511487899, "Min_20.0% Prob": 3.969513145185286, "Min_30.0% Prob": 2.9062378166183347, "Min_40.0% Prob": 2.2434699322667813, "Min_50.0% Prob": 1.7970886941497715, "Min_60.0% Prob": 1.502071100937073}}
{"hexsha": "bb6e599aba13747a581a01c8843fac9626122356", "ext": "py", "lang": "Python", "content": "def show_image_series(image_series: ImageSeries, neurodata_vis_spec: dict):\n    if len(image_series.data.shape) == 3:\n        return show_grayscale_image_series(image_series, neurodata_vis_spec)\n\n    def show_image(index=0, mode='rgb'):\n        fig, ax = plt.subplots(subplot_kw={'xticks': [], 'yticks': []})\n        image = image_series.data[index]\n        if mode == 'bgr':\n            image = image[:, :, ::-1]\n        ax.imshow(image.transpose([1, 0, 2]), cmap='gray', aspect='auto')\n        fig.show()\n        return fig2widget(fig)\n    slider = widgets.IntSlider(value=0, min=0, max=image_series.data.shape[0] - 1, orientation='horizontal', continuous_update=False, description='index')\n    mode = widgets.Dropdown(options=('rgb', 'bgr'), layout=Layout(width='200px'), description='mode')\n    controls = {'index': slider, 'mode': mode}\n    out_fig = widgets.interactive_output(show_image, controls)\n    vbox = widgets.VBox(children=[out_fig, slider, mode])\n    return vbox", "fn_id": 0, "class_fn": false, "repo": "NeurodataWithoutBorders/nwb-jupyter-widgets", "file": "nwbwidgets/image.py", "last_update_at": "2021-11-16T11:50:33+00:00", "pred": {"ppl": 2.1876485347747803, "ppl_lower": 2.6538703441619873, "ppl/lowercase_ppl": -1.2467873288701343, "ppl/zlib": 0.0016342948612854918, "Min_5.0% Prob": 6.704658644539969, "Min_10.0% Prob": 5.062013305466751, "Min_20.0% Prob": 3.554474349679618, "Min_30.0% Prob": 2.543800252066417, "Min_40.0% Prob": 1.9508272078938973, "Min_50.0% Prob": 1.5625387954392604, "Min_60.0% Prob": 1.3070964947612744}}
{"hexsha": "ca0dd379bf0cfd2ef3ea5b0e3ce3a98b03b1d3f8", "ext": "py", "lang": "Python", "content": "@api.route('/send_code/<email>', methods=['POST'])\n@cross_domain\ndef send_code(email):\n    \"\"\"\n    This endpoint generates a unique code that will be used to allow\n    the user to change his/her password. The unique code is send to\n    the specified email address.\n    \"\"\"\n    from zeeguu.core.emailer.password_reset import send_password_reset_email\n    try:\n        User.find(email)\n    except sqlalchemy.orm.exc.NoResultFound:\n        return bad_request('Email unknown')\n    code = UniqueCode(email)\n    db_session.add(code)\n    db_session.commit()\n    send_password_reset_email(email, code)\n    return 'OK'", "fn_id": 2, "class_fn": false, "repo": "zeeguu-ecosystem/zeeguu-api", "file": "zeeguu/api/api/accounts.py", "last_update_at": "2021-05-26T15:24:49+00:00", "pred": {"ppl": 2.9578139781951904, "ppl_lower": 4.0772385597229, "ppl/lowercase_ppl": -1.295974291651351, "ppl/zlib": 0.003180206670425455, "Min_5.0% Prob": 6.76804906129837, "Min_10.0% Prob": 5.627854824066162, "Min_20.0% Prob": 4.221452981233597, "Min_30.0% Prob": 3.301405501862367, "Min_40.0% Prob": 2.655984233599156, "Min_50.0% Prob": 2.150103204044295, "Min_60.0% Prob": 1.8075020599764646}}
{"hexsha": "861044681bbdc6a4088c31b9167d9eb267f0536d", "ext": "py", "lang": "Python", "content": "@app.route('/rest/<jobname>/<jobid>/executionduration')\ndef get_executionduration(jobname, jobid):\n    \"\"\"Get the maximum execution duration of job <jobid>\n\n    Returns:\n        200 OK: text/plain: integer number of seconds (on success)\n        404 Not Found: Job not found (on NotFoundWarning)\n        500 Internal Server Error (on error)\n    \"\"\"\n    user = set_user()\n    try:\n        logger.info('{} {}'.format(jobname, jobid))\n        job = Job(jobname, jobid, user)\n        response.content_type = 'text/plain; charset=UTF-8'\n        return str(job.execution_duration)\n    except JobAccessDenied as e:\n        abort_403(str(e))\n    except storage.NotFoundWarning as e:\n        abort_404(str(e))\n    except:\n        abort_500_except()", "fn_id": 45, "class_fn": false, "repo": "ParisAstronomicalDataCentre/OPUS", "file": "uws_server/uws_server.py", "last_update_at": "2021-01-06T08:54:54+00:00", "pred": {"ppl": 4.2434401512146, "ppl_lower": 4.80387020111084, "ppl/lowercase_ppl": -1.0858238509751725, "ppl/zlib": 0.003813652497864684, "Min_5.0% Prob": 10.04457597732544, "Min_10.0% Prob": 8.407219386100769, "Min_20.0% Prob": 6.138810024028871, "Min_30.0% Prob": 4.5831070864786865, "Min_40.0% Prob": 3.541197900001596, "Min_50.0% Prob": 2.865113800590478, "Min_60.0% Prob": 2.414026607251991}}
{"hexsha": "2c2b3fa036cbe03c2fdfc1bafeba98b37b90d378", "ext": "py", "lang": "Python", "content": "def bbox_sample(region, metric):\n    \"\"\"Extract image that lies within region bounding box\n\n    Parameters\n    ----------\n    region: skimage.RegionProperties\n        Region defining pixels within image to analyse\n    metric: array-like\n        Metric for all pixels in image to be analysed\n    \"\"\"\n    indices = bbox_indices(region)\n    return metric[indices]", "fn_id": 1, "class_fn": false, "repo": "franklongford/ImageCol", "file": "pyfibre/model/tools/utilities.py", "last_update_at": "2021-07-26T05:53:01+00:00", "pred": {"ppl": 10.879312515258789, "ppl_lower": 12.311227798461914, "ppl/lowercase_ppl": -1.0518038199021946, "ppl/zlib": 0.011700309075958735, "Min_5.0% Prob": 11.277190844217936, "Min_10.0% Prob": 9.959677015032087, "Min_20.0% Prob": 8.131439447402954, "Min_30.0% Prob": 6.842389856066022, "Min_40.0% Prob": 5.562839956119142, "Min_50.0% Prob": 4.679624377025498, "Min_60.0% Prob": 3.9997989978901174}}
{"hexsha": "2b6b31ac1b8a4e33d35999ea6fa8cea0493f8cb2", "ext": "py", "lang": "Python", "content": "@njit(fastmath=False, cache=True)\ndef get_mean_curvature(traj_list, num_traj):\n    out = np.empty((num_traj,))\n    for i in range(num_traj):\n        out[i] = np.mean(np.abs(traj_list[i * trajectory_generator.NUM_STEPS:(i + 1) * trajectory_generator.NUM_STEPS, 3]))\n    return out", "fn_id": 9, "class_fn": false, "repo": "travelbureau/f0_icml_code", "file": "Simulator/python/mpc/trajectory_generator_utils.py", "last_update_at": "2021-02-17T20:53:38+00:00", "pred": {"ppl": 3.5278005599975586, "ppl_lower": 3.9000027179718018, "ppl/lowercase_ppl": -1.0795626751307683, "ppl/zlib": 0.006851492423552677, "Min_5.0% Prob": 10.217288970947266, "Min_10.0% Prob": 8.226883305443657, "Min_20.0% Prob": 5.47651027378283, "Min_30.0% Prob": 4.081374616458498, "Min_40.0% Prob": 3.160108880354808, "Min_50.0% Prob": 2.5389782089968116, "Min_60.0% Prob": 2.113871690012136}}
{"hexsha": "5148fe31f1a672fe0541555158917c8256ff125f", "ext": "py", "lang": "Python", "content": "def test_dataframe_barh(dataframe, with_plotting_backend):\n    chart = dataframe.plot.barh()\n    spec = chart.to_dict()\n    assert spec['mark'] == {'type': 'bar', 'orient': 'horizontal'}\n    assert spec['encoding']['y']['field'] == 'index'\n    assert spec['encoding']['x']['field'] == 'value'\n    assert spec['encoding']['color']['field'] == 'column'\n    assert spec['transform'][0]['fold'] == ['x', 'y']", "fn_id": 5, "class_fn": false, "repo": "altair-viz/altair_pandas", "file": "altair_pandas/test_plotting.py", "last_update_at": "2021-12-15T21:34:00+00:00", "pred": {"ppl": 2.3249053955078125, "ppl_lower": 2.3249053955078125, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.004075745643030378, "Min_5.0% Prob": 8.149099826812744, "Min_10.0% Prob": 5.8574393012306905, "Min_20.0% Prob": 3.856440194628455, "Min_30.0% Prob": 2.7521978029699037, "Min_40.0% Prob": 2.07296774023109, "Min_50.0% Prob": 1.6831599898370249, "Min_60.0% Prob": 1.4158779719649857}}
{"hexsha": "ac18a96ded8e760d6d2a171c418c6b63db8231ef", "ext": "py", "lang": "Python", "content": "def init_estimators_train(columns, null_value, no_compression=False):\n    if no_compression:\n        res = [NoCompressionEstimatorTrain(columns, null_value)]\n    else:\n        res = [NoCompressionEstimatorTrain(columns, null_value), DictEstimatorTrain(columns, null_value, max_dict_size), RleEstimatorTrain(columns, null_value), ForEstimatorTrain(columns, null_value)]\n    return res", "fn_id": 1, "class_fn": false, "repo": "bogdanghita/whitebox-compression", "file": "evaluation/theoretical_evaluation.py", "last_update_at": "2021-12-28T05:31:03+00:00", "pred": {"ppl": 4.056350231170654, "ppl_lower": 6.026735305786133, "ppl/lowercase_ppl": -1.2827440389601938, "ppl/zlib": 0.009273401400456833, "Min_5.0% Prob": 10.113219499588013, "Min_10.0% Prob": 8.717135482364231, "Min_20.0% Prob": 6.252757423802426, "Min_30.0% Prob": 4.5352258620591, "Min_40.0% Prob": 3.5357679203152657, "Min_50.0% Prob": 2.8229760109291724, "Min_60.0% Prob": 2.3410071716162153}}
{"hexsha": "0629068ef6b33dbfeb46975094295e4a4c07df96", "ext": "py", "lang": "Python", "content": "def which(program):\n    \"\"\"Determines if and where an executable exists on the users path.\n    This code was contributed by Jay at http://stackoverflow.com/a/377028\n    Args:\n        program (str): The name, or path for the program.\n    Returns:\n        The program or executable.\n    \"\"\"\n    import os\n\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n    fpath, fname = os.path.split(program)\n    if fpath and is_exe(program):\n        return program\n    else:\n        for path in os.environ['PATH'].split(os.pathsep):\n            path = path.strip('\"')\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n    return None", "fn_id": 5, "class_fn": false, "repo": "wsmorgan/phonon-enumeration", "file": "phenum/io_utils.py", "last_update_at": "2021-05-30T21:02:08+00:00", "pred": {"ppl": 2.241389513015747, "ppl_lower": 3.0682013034820557, "ppl/lowercase_ppl": -1.3890435667774224, "ppl/zlib": 0.0022234049362525473, "Min_5.0% Prob": 7.847087065378825, "Min_10.0% Prob": 6.1783535731466195, "Min_20.0% Prob": 3.945819452787057, "Min_30.0% Prob": 2.7218842373454364, "Min_40.0% Prob": 2.0278299399651587, "Min_50.0% Prob": 1.6141646619479597, "Min_60.0% Prob": 1.352051025353776}}
{"hexsha": "12f9436289446182577ceaab3eda30ea64c2e38b", "ext": "py", "lang": "Python", "content": "def upscale2d_conv2d(x, fmaps, kernel, gain=np.sqrt(2), use_wscale=False):\n    assert kernel >= 1 and kernel % 2 == 1\n    w = get_weight([kernel, kernel, fmaps, x.shape[1].value], gain=gain, use_wscale=use_wscale, fan_in=kernel ** 2 * x.shape[1].value)\n    w = tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')\n    w = tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])\n    w = tf.cast(w, x.dtype)\n    os = [tf.shape(x)[0], fmaps, x.shape[2] * 2, x.shape[3] * 2]\n    return tf.nn.conv2d_transpose(x, w, os, strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')", "fn_id": 7, "class_fn": false, "repo": "zhuxinqimac/stylegan2", "file": "training/vc2_subnets_pggan.py", "last_update_at": "2021-07-04T09:51:28+00:00", "pred": {"ppl": 1.2862564325332642, "ppl_lower": 1.4751354455947876, "ppl/lowercase_ppl": -1.5442757450887428, "ppl/zlib": 0.000753700626201485, "Min_5.0% Prob": 3.679260886632479, "Min_10.0% Prob": 2.2390020054120283, "Min_20.0% Prob": 1.2436179768007536, "Min_30.0% Prob": 0.843750591413715, "Min_40.0% Prob": 0.629705072903917, "Min_50.0% Prob": 0.5052688788304475, "Min_60.0% Prob": 0.42167114982845644}}
{"hexsha": "5306ddb4712ea725043386b81d8c897bbc57d019", "ext": "py", "lang": "Python", "content": "def get_first_pos(vcf):\n    p = {}\n    for line in file_util.gzopen(vcf):\n        line = file_util.decodeb(line)\n        if line[0] != '#':\n            arr = line.split('\\t')\n            print(arr)\n            p['chrom'] = arr[0]\n            p['spos'] = int(arr[1])\n            p['epos'] = int(arr[1])\n            p['str'] = p['chrom'] + ':' + str(p['spos']) + '-' + str(p['epos'])\n    return p", "fn_id": 0, "class_fn": false, "repo": "dbmi-bgm/cgap-annotation-server", "file": "tests/annotviewer.py", "last_update_at": "2021-05-27T14:27:47+00:00", "pred": {"ppl": 2.5374233722686768, "ppl_lower": 2.5374233722686768, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.004849735134329244, "Min_5.0% Prob": 9.36488135655721, "Min_10.0% Prob": 7.497112671534221, "Min_20.0% Prob": 4.600842638015747, "Min_30.0% Prob": 3.126321094208642, "Min_40.0% Prob": 2.3479598414371994, "Min_50.0% Prob": 1.8752255236468045, "Min_60.0% Prob": 1.5596151838816896}}
{"hexsha": "427cceb85af895991c1b9f9596f2e1bb0c5b7263", "ext": "py", "lang": "Python", "content": "def deprecated(version, reason):\n\n    def decorator_deprecated(fn):\n\n        @wraps(fn)\n        def wrapper_deprecated(*args, **kwds):\n            warnings.warn(f'Deprecated since {version}. The reason: {reason}', category=DeprecationWarning)\n            return fn(*args, **kwds)\n        return wrapper_deprecated\n    return decorator_deprecated", "fn_id": 16, "class_fn": false, "repo": "Sberbank-Technology/ignite-python-thin-client", "file": "pyignite/utils.py", "last_update_at": "2021-07-16T01:35:39+00:00", "pred": {"ppl": 3.030080556869507, "ppl_lower": 3.886612892150879, "ppl/lowercase_ppl": -1.2245636613366644, "ppl/zlib": 0.006408030090135519, "Min_5.0% Prob": 9.346522331237793, "Min_10.0% Prob": 6.831426620483398, "Min_20.0% Prob": 4.584996573130289, "Min_30.0% Prob": 3.514342700893229, "Min_40.0% Prob": 2.7333826313416165, "Min_50.0% Prob": 2.2447634755155526, "Min_60.0% Prob": 1.8475609504902322}}
{"hexsha": "208074ab27944df3955e997903e9acaee5afdb6b", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef rus_player_json():\n    \"\"\"Expected JSON for rus_player model-fixture\"\"\"\n    return {'name': 'Rus', 'id_': 'PjBYO_8gbf'}", "fn_id": 0, "class_fn": false, "repo": "BenjaminNMitchell/Pyker", "file": "test/encoders/json_fixtures.py", "last_update_at": "2021-04-12T17:18:19+00:00", "pred": {"ppl": 23.452930450439453, "ppl_lower": 22.356319427490234, "ppl/lowercase_ppl": -0.9848220309111366, "ppl/zlib": 0.025443511717647593, "Min_5.0% Prob": 12.877628326416016, "Min_10.0% Prob": 11.634119987487793, "Min_20.0% Prob": 9.174576653374565, "Min_30.0% Prob": 7.683026688439505, "Min_40.0% Prob": 6.876182476679484, "Min_50.0% Prob": 5.941844484080439, "Min_60.0% Prob": 5.074504730956895}}
{"hexsha": "2c502e5877d8fa61f6c9c0acfe9451fb744aa183", "ext": "py", "lang": "Python", "content": "def create_table(name):\n    name = name.title()\n    name = name.split()\n    name = ''.join(name)\n    with sqlite3.connect('supplies.db') as conn:\n        cur = conn.cursor()\n        cur.execute(f'CREATE TABLE IF NOT EXISTS {name} (Item TEXT, Part Number TEXT, Description TEXT, Vendor TEXT, Price REAL, QOH INT, QNeed INT, Ordering TEXT, Ordered DATE)')", "fn_id": 0, "class_fn": false, "repo": "irondru562/InventoryManagement", "file": "inback.py", "last_update_at": "2021-04-14T18:41:41+00:00", "pred": {"ppl": 4.304338455200195, "ppl_lower": 5.204617023468018, "ppl/lowercase_ppl": -1.1301175743097074, "ppl/zlib": 0.006211163647354759, "Min_5.0% Prob": 9.928768634796143, "Min_10.0% Prob": 7.584304597642687, "Min_20.0% Prob": 5.682631392227976, "Min_30.0% Prob": 4.540151025567736, "Min_40.0% Prob": 3.585882991552353, "Min_50.0% Prob": 2.8870338338116803, "Min_60.0% Prob": 2.4485989260046104}}
{"hexsha": "5b2a8ea69b3198b3f678cebb3485c95da3b6d811", "ext": "py", "lang": "Python", "content": "def _graph_from_dict(P, weights=False):\n    G = pairDiGraph()\n    for (a, b), n in P.items():\n        if weights:\n            G.add_edge(a, b, weight=n)\n        else:\n            G.add_edge(a, b)\n    if weights:\n        G.addPd()\n    return G", "fn_id": 2, "class_fn": false, "repo": "jpgil/logdelay", "file": "src/theory202105.py", "last_update_at": "2021-05-28T16:03:39+00:00", "pred": {"ppl": 4.068707466125488, "ppl_lower": 4.717706203460693, "ppl/lowercase_ppl": -1.1054618817125017, "ppl/zlib": 0.01002375266518613, "Min_5.0% Prob": 15.675999959309896, "Min_10.0% Prob": 10.846572058541435, "Min_20.0% Prob": 6.724535926183065, "Min_30.0% Prob": 4.714803115181301, "Min_40.0% Prob": 3.5496524408940346, "Min_50.0% Prob": 2.835115796384903, "Min_60.0% Prob": 2.3569070353232164}}
{"hexsha": "2c730cc2f3073d60e2b37cd3db6bc2590e864582", "ext": "py", "lang": "Python", "content": "def parse_args():\n    parser = argparse.ArgumentParser(description='Train a network with Detectron')\n    parser.add_argument('--cfg', dest='cfg_file', help='Config file for training (and optionally testing)', default=None, type=str)\n    parser.add_argument('--multi-gpu-testing', dest='multi_gpu_testing', help='Use cfg.NUM_GPUS GPUs for inference', action='store_true')\n    parser.add_argument('--skip-test', dest='skip_test', help='Do not test the final model', action='store_true')\n    parser.add_argument('opts', help='See detectron/core/config.py for all options', default=None, nargs=argparse.REMAINDER)\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "994374821/maskrcnn_body25", "file": "tools/train_stage2.py", "last_update_at": "2021-10-12T22:58:13+00:00", "pred": {"ppl": 1.2486026287078857, "ppl_lower": 1.7353229522705078, "ppl/lowercase_ppl": -2.4825738714111334, "ppl/zlib": 0.0006219188486486338, "Min_5.0% Prob": 3.6859646108415394, "Min_10.0% Prob": 2.1595015274850944, "Min_20.0% Prob": 1.1153570217772937, "Min_30.0% Prob": 0.7459440835104403, "Min_40.0% Prob": 0.558833824031503, "Min_50.0% Prob": 0.4462212846182861, "Min_60.0% Prob": 0.37126985977393057}}
{"hexsha": "01415ebda64b25b4823eab1699f9886d6bb0651b", "ext": "py", "lang": "Python", "content": "def get_buildings_in_radius(poly: Polygon, radius: float, excluded_poly: Polygon=None) -> List[Polygon]:\n    \"\"\"\n    Get all buildings within $radius\n    Args:\n        poly: polygon to intersect the buildings in\n        radius: radius from within we will retrieve all buildings\n        excluded_poly: optional polygon to exclude from the nearest\n\n    Returns:\n        A Geoseries with all the polygons of the buildings\n    \"\"\"\n    eng = get_connection('POSTGRES')\n    if excluded_poly is not None:\n        excluded_sql = f\"AND ST_INTERSECTS(way, ST_GEOMFROMTEXT('{excluded_poly.wkt}', 4326))=FALSE\"\n    else:\n        excluded_sql = ''\n    query = f\"\\n        SELECT st_astext(way) as geom FROM (\\n            SELECT way\\n            FROM {OSM_POLYGON_TABLE}\\n            WHERE {BUILDING}\\n                  {excluded_sql}\\n                  AND ST_DWithin(way, ST_GEOMFROMTEXT('{poly.wkt}', 4326), {radius}, true)\\n            ) t\\n        \"\n    df = get_df(query, eng)\n    eng.dispose()\n    gs = [wkt.loads(geom) for geom in df['geom'].unique()]\n    return gs", "fn_id": 3, "class_fn": false, "repo": "jonzarecki/coord2vec", "file": "coord2vec/feature_extraction/osm/osm_utils.py", "last_update_at": "2021-01-25T09:21:17+00:00", "pred": {"ppl": 4.064113140106201, "ppl_lower": 4.447765827178955, "ppl/lowercase_ppl": -1.0643322248075058, "ppl/zlib": 0.002722709804818889, "Min_5.0% Prob": 10.047919069017683, "Min_10.0% Prob": 7.89170921259913, "Min_20.0% Prob": 5.768857590083418, "Min_30.0% Prob": 4.409362542218175, "Min_40.0% Prob": 3.461847098993844, "Min_50.0% Prob": 2.7903417670869666, "Min_60.0% Prob": 2.3372064132562707}}
{"hexsha": "0ea7da24a0926bef44f6a6ab9c0f2b679c6306d1", "ext": "py", "lang": "Python", "content": "def get_corner_loss_lidar(pred_bbox3d, gt_bbox3d):\n    \"\"\"\n    :param pred_bbox3d: (N, 7)\n    :param gt_bbox3d: (N, 7)\n    :return: corner_loss: (N)\n    \"\"\"\n    assert pred_bbox3d.shape[0] == gt_bbox3d.shape[0]\n    pred_box_corners = box_torch_ops.center_to_corner_box3d(pred_bbox3d[:, 0:3], pred_bbox3d[:, 3:6], pred_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_box_corners = box_torch_ops.center_to_corner_box3d(gt_bbox3d[:, 0:3], gt_bbox3d[:, 3:6], gt_bbox3d[:, 6], [0.5, 0.5, 0], axis=2)\n    gt_bbox3d_flip = gt_bbox3d.clone()\n    gt_bbox3d_flip[:, 6] += np.pi\n    gt_box_corners_flip = box_torch_ops.center_to_corner_box3d(gt_bbox3d_flip[:, 0:3], gt_bbox3d_flip[:, 3:6], gt_bbox3d_flip[:, 6], [0.5, 0.5, 0], axis=2)\n    corner_dist = torch.min(torch.norm(pred_box_corners - gt_box_corners, dim=2), torch.norm(pred_box_corners - gt_box_corners_flip, dim=2))\n    corner_loss = huber_loss(corner_dist, delta=1.0)\n    return corner_loss.mean(dim=1)", "fn_id": 2, "class_fn": false, "repo": "xy-guo/mmdetection_kitti", "file": "mmdet/utils/det3d/loss_utils.py", "last_update_at": "2021-12-27T10:59:51+00:00", "pred": {"ppl": 1.2183929681777954, "ppl_lower": 1.235388159751892, "ppl/lowercase_ppl": -1.0701274537115155, "ppl/zlib": 0.0006251036431154262, "Min_5.0% Prob": 3.1603761457261585, "Min_10.0% Prob": 1.8475758149510337, "Min_20.0% Prob": 0.9773679943645701, "Min_30.0% Prob": 0.6615488100686939, "Min_40.0% Prob": 0.4948671433917137, "Min_50.0% Prob": 0.39505043702560505, "Min_60.0% Prob": 0.3299936447265317}}
{"hexsha": "605df9b62c38bf133d0aa401619574d4bb7f6839", "ext": "py", "lang": "Python", "content": "def get_position(fallback=defaults.CURSOR_POS_FALLBACK):\n    \"\"\" Return the current column number of the terminal cursor.\n        Used to figure out if we need to print an extra newline.\n\n        Returns:\n            tuple(int): (x, y) | (,)  - empty, if an error occurred.\n    \"\"\"\n    values = fallback\n    try:\n        with TermStack() as fd:\n            termios.tcflush(fd, termios.TCIFLUSH)\n            tty.setcbreak(fd, termios.TCSANOW)\n            sys.stdout.write(CSI + '6n')\n            sys.stdout.flush()\n            log.debug('about to read get_position response\u2026')\n            resp = _read_until_select(max_bytes=10, end='R')\n    except AttributeError:\n        return values\n    resp = resp.lstrip(CSI)\n    try:\n        values = tuple((int(token) for token in resp.partition(';')[::-2]))\n    except (ValueError, IndexError) as err:\n        log.error('parse error: %s on %r', err, resp)\n    return values", "fn_id": 16, "class_fn": false, "repo": "Dsa-Terminal/Dsa-Terminal", "file": "Python3/Lib/site-packages/console/detection.py", "last_update_at": "2021-04-02T17:14:25+00:00", "pred": {"ppl": 6.370911598205566, "ppl_lower": 7.749619483947754, "ppl/lowercase_ppl": -1.1057928782225732, "ppl/zlib": 0.0036813967542418365, "Min_5.0% Prob": 11.143621762593588, "Min_10.0% Prob": 9.525207102298737, "Min_20.0% Prob": 7.342586184541385, "Min_30.0% Prob": 5.6574537509108245, "Min_40.0% Prob": 4.492215253028673, "Min_50.0% Prob": 3.6582988090202457, "Min_60.0% Prob": 3.083011830455228}}
{"hexsha": "5ee4210df799d29db459911536ee02f9a5a1fd24", "ext": "py", "lang": "Python", "content": "def readlines(file):\n    with open(file) as f:\n        content = f.readlines()\n    return [x.strip() for x in content]", "fn_id": 1, "class_fn": false, "repo": "omidroshani/DeepDIA", "file": "code/deepdetect/py/predict_ensemble.py", "last_update_at": "2021-12-25T20:09:40+00:00", "pred": {"ppl": 2.1735172271728516, "ppl_lower": 2.1735172271728516, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.008438551058921216, "Min_5.0% Prob": 9.607097625732422, "Min_10.0% Prob": 6.481266180674235, "Min_20.0% Prob": 3.9373991986115775, "Min_30.0% Prob": 2.7744848330815635, "Min_40.0% Prob": 1.9652696214616299, "Min_50.0% Prob": 1.6001423880807124, "Min_60.0% Prob": 1.3481881028948057}}
{"hexsha": "12e6a066caf160f30a66f07074f6d4b7810f6f9d", "ext": "py", "lang": "Python", "content": "def motion(pin):\n    print('Bewegung erkannt')\n    with picamera.PiCamera() as camera:\n        for filename in camera.capture_continuous('/home/pi/Desktop/Fotos/{timestamp:%d.%m_%H-%M-%S}Uhr.jpg'):\n            print('Captured %s' % filename)\n            break", "fn_id": 0, "class_fn": false, "repo": "meigrafd/Sample-Code", "file": "PIR_interrupt_pic.py", "last_update_at": "2021-03-31T04:22:25+00:00", "pred": {"ppl": 4.523626327514648, "ppl_lower": 7.178127765655518, "ppl/lowercase_ppl": -1.3059168922401914, "ppl/zlib": 0.008158453821805698, "Min_5.0% Prob": 10.161484400431315, "Min_10.0% Prob": 8.28691462108067, "Min_20.0% Prob": 6.1946961879730225, "Min_30.0% Prob": 4.889530290256847, "Min_40.0% Prob": 3.7329564223686855, "Min_50.0% Prob": 3.0491011573656186, "Min_60.0% Prob": 2.5131185863580967}}
{"hexsha": "971e98315817be02de95647ef3faaea39f4b2047", "ext": "py", "lang": "Python", "content": "@export\ndef tlv_pack(*args):\n    if len(args) == 2:\n        tlv = {'type': args[0], 'value': args[1]}\n    else:\n        tlv = args[0]\n    data = ''\n    if tlv['type'] & TLV_META_TYPE_UINT == TLV_META_TYPE_UINT:\n        data = struct.pack('>III', 12, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_QWORD == TLV_META_TYPE_QWORD:\n        data = struct.pack('>IIQ', 16, tlv['type'], tlv['value'])\n    elif tlv['type'] & TLV_META_TYPE_BOOL == TLV_META_TYPE_BOOL:\n        data = struct.pack('>II', 9, tlv['type']) + bytes(chr(int(bool(tlv['value']))), 'UTF-8')\n    else:\n        value = tlv['value']\n        if sys.version_info[0] < 3 and value.__class__.__name__ == 'unicode':\n            value = value.encode('UTF-8')\n        elif not is_bytes(value):\n            value = bytes(value, 'UTF-8')\n        if tlv['type'] & TLV_META_TYPE_STRING == TLV_META_TYPE_STRING:\n            data = struct.pack('>II', 8 + len(value) + 1, tlv['type']) + value + NULL_BYTE\n        elif tlv['type'] & TLV_META_TYPE_RAW == TLV_META_TYPE_RAW:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_GROUP == TLV_META_TYPE_GROUP:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n        elif tlv['type'] & TLV_META_TYPE_COMPLEX == TLV_META_TYPE_COMPLEX:\n            data = struct.pack('>II', 8 + len(value), tlv['type']) + value\n    return data", "fn_id": 6, "class_fn": false, "repo": "madhavarao-yejarla/VoIP", "file": "data/meterpreter/meterpreter.py", "last_update_at": "2021-04-07T18:00:44+00:00", "pred": {"ppl": 1.4128230810165405, "ppl_lower": 1.5567768812179565, "ppl/lowercase_ppl": -1.2807596453532353, "ppl/zlib": 0.0008189333834288454, "Min_5.0% Prob": 4.764039824406306, "Min_10.0% Prob": 3.075429381156454, "Min_20.0% Prob": 1.7008857186695543, "Min_30.0% Prob": 1.150373003014282, "Min_40.0% Prob": 0.864065654327784, "Min_50.0% Prob": 0.6910652694994599, "Min_60.0% Prob": 0.5775112343558767}}
{"hexsha": "83e9ee54f5b91fb9bed39ac8b9254bc4e100e0bc", "ext": "py", "lang": "Python", "content": "def vector_valued_monomial_basis_fn(nu, i, n):\n    \"\"\"\n    Generate a vector valued monomial basis polynomial :math:`p_{\\\\nu, i}` in the space\n    :math:`\\\\mathcal{P}_r(\\\\mathbb{R}^m, \\\\mathbb{R}^n)`, where :math:`r = |\\\\nu|` and m is equal to the length of nu.\n\n    The vector valued basis polynomial is generated by specifying a scalar valued basis polynomial and the component\n    of the vector valued basis polynomial that should be equal to the scalar valued basis polynomial. All other\n    components of the vector valued basis polynomial will be zero, i.e.\n\n    .. math:: p_{\\\\nu, i}^j (x) = \\\\begin{cases} p_{\\\\nu} (x), & i = j \\\\\\\\ 0, & \\\\text{else} \\\\end{cases}.\n\n    :param nu: Multi-index indicating which scalar valued monomial basis polynomial should be generated for the\n        non-zero component.\n    :type nu: int or :class:`~polynomials_on_simplices.algebra.multiindex.MultiIndex` or Tuple[int, ...]\n    :param int i: Index of the vector component that is non-zero.\n    :param int n: Dimension of the target.\n    :return: The monomial base polynomial as specified by nu, r, i and n.\n    :rtype: :class:`Polynomial`.\n\n    .. rubric:: Examples\n\n    >>> import sympy as sp\n    >>> x1, x2 = sp.symbols('x1 x2')\n    >>> vector_valued_monomial_basis_fn(0, 0, 2)(x1)\n    array([1, 0])\n    >>> vector_valued_monomial_basis_fn(1, 1, 2)(x1)\n    array([0, x1], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 0), 0, 2)((x1, x2))\n    array([x1, 0], dtype=object)\n    >>> vector_valued_monomial_basis_fn((1, 1), 1, 3)((x1, x2))\n    array([0, x1*x2, 0], dtype=object)\n    \"\"\"\n    if n == 1:\n        assert i == 0\n        return monomial_basis_fn(nu)\n    assert i >= 0\n    assert i < n\n    try:\n        m = len(nu)\n    except TypeError:\n        m = 1\n    if not isinstance(nu, multiindex.MultiIndex):\n        nu = multiindex.MultiIndex(nu)\n    r = multiindex.norm(nu)\n    dim = get_dimension(r, m)\n    coeff = np.zeros((dim, n), dtype=int)\n    j = multiindex.get_index(nu, r)\n    coeff[j][i] = 1\n    return Polynomial(coeff, r, m)", "fn_id": 3, "class_fn": false, "repo": "FAndersson/polynomials_on_simplices", "file": "polynomials_on_simplices/polynomial/polynomials_monomial_basis.py", "last_update_at": "2021-03-17T11:41:21+00:00", "pred": {"ppl": 2.1880204677581787, "ppl_lower": 2.564452648162842, "ppl/lowercase_ppl": -1.2027437854622054, "ppl/zlib": 0.0009654713182086944, "Min_5.0% Prob": 6.344910964369774, "Min_10.0% Prob": 4.82756761770982, "Min_20.0% Prob": 3.3114389590634645, "Min_30.0% Prob": 2.4692033511127915, "Min_40.0% Prob": 1.9323645126046116, "Min_50.0% Prob": 1.563085589421595, "Min_60.0% Prob": 1.3047582915166231}}
{"hexsha": "6bd2ed2c7bff37b5c4b35bd8f9b870bb8d243202", "ext": "py", "lang": "Python", "content": "def main(argv=None):\n    \"\"\"Main entrance into app.  Setup logging, create App, and enter main loop\n    \"\"\"\n    global DEBUG\n    args = process_command_line(argv)\n    if args.debug:\n        DEBUG = True\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    if another_instance_running(args.srcfiles):\n        print('Another instance of Marcam is already running.  Exiting.')\n        return 1\n    if (const.USER_CONFIG_DIR / 'debug').exists():\n        DEBUG = True\n        log_level = logging.DEBUG\n    logging_setup(log_level)\n    sys.stderr = marcam_extra.StderrToLog()\n    log_debug_main()\n    LOGGER.info(repr(args))\n    sanity_checks()\n    myapp = MarcamApp(args.srcfiles)\n    myapp.MainLoop()\n    return 0", "fn_id": 7, "class_fn": false, "repo": "itsayellow/marcam", "file": "marcam/marcam.py", "last_update_at": "2021-10-05T10:22:16+00:00", "pred": {"ppl": 6.059032917022705, "ppl_lower": 7.496470928192139, "ppl/lowercase_ppl": -1.1181661015492876, "ppl/zlib": 0.0047161000070589515, "Min_5.0% Prob": 12.195376290215385, "Min_10.0% Prob": 9.651594864694696, "Min_20.0% Prob": 7.106832076341678, "Min_30.0% Prob": 5.462102423279973, "Min_40.0% Prob": 4.368859845626203, "Min_50.0% Prob": 3.571268432068102, "Min_60.0% Prob": 2.9979397764726845}}
{"hexsha": "3ee5df8aa3ce8621360bf2c27434ac72151c3d37", "ext": "py", "lang": "Python", "content": "def context_geo(key, values, dataset, namecount):\n    geoname = '\"' + key + '\"'\n    spar2 = '\\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n    PREFIX gndo: <http://d-nb.info/standards/elementset/gnd#>\\n    PREFIX pro: <http://purl.org/hpi/patchr#>\\n    PREFIX owl: <http://www.w3.org/2002/07/owl#>\\n    PREFIX edm: <http://www.europeana.eu/schemas/edm/>\\n    PREFIX dc: <http://purl.org/dc/elements/1.1/>\\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n    PREFIX dblp: <http://dblp.org/rdf/schema-2015-01-26#>\\n    PREFIX dcterms: <http://purl.org/dc/terms/>\\n    PREFIX bibtex: <http://data.bibbase.org/ontology/#>\\n    PREFIX geo: <http://www.opengis.net/ont/geosparql#>\\n\\n        select ?x  (group_concat(?alt; SEPARATOR=\", \") as ?altname) (group_concat(?sameas; SEPARATOR=\", \") as ?same)\\n\\n        WHERE{{\\n\\n          graph <http://maral.wisslab.org/graphs/gnd> {{\\n\\n\\n            \\t?x (gndo:preferredNameForThePlaceOrGeographicName | gndo:variantNameForThePlaceOrGeographicName){0}.\\n                optional {{?x gndo:variantNameForThePlaceOrGeographicName ?alt.}}\\n                optional {{?x owl:sameAs ?sameas.}}\\n               # ?x geo:hasGeometry ?geo.\\n               # optional {{?geo geo:asWKT ?coo}}\\n          }}\\n          }} group by ?x\\n\\n        '.format(geoname)\n    sparql.setQuery(spar2)\n    sparql.setReturnFormat(XML)\n    results = sparql.query().convert()\n    for i in range(0, len(results.bindings)):\n        uri = 'https://data.jhn.ngo/spatial/' + str(dataset) + '/' + str(namecount)\n        graph.add((URIRef(uri), RDF.type, edm.Place))\n        for z in range(0, len(values)):\n            graph.add((URIRef(uri), edm.identifier, Literal(values[z])))\n        graph.add((URIRef(uri), skos.prefLabel, Literal(key)))\n        if 'altname' in results.bindings[i].keys():\n            count1 = results.bindings[i]['altname'].value.count(',')\n            if count1 > 0:\n                for j in range(0, count1 + 1):\n                    graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value.rsplit(', ', count1)[count1 - j])))\n            else:\n                graph.add((URIRef(uri), skos.altLabel, Literal(results.bindings[i]['altname'].value)))\n        if 'same' in results.bindings[i].keys():\n            count2 = results.bindings[i]['same'].value.count(',')\n            if count2 > 0:\n                for j in range(0, count2 + 1):\n                    graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value.rsplit(', ', count2)[count2 - j])))\n            else:\n                graph.add((URIRef(uri), owl.sameAs, Literal(results.bindings[i]['same'].value)))\n    graph.serialize(destination=dataset + '_Spatial_01.ttl', format='turtle')", "fn_id": 1, "class_fn": false, "repo": "ubffm/judaica-europeana-2-0", "file": "scripts/contextualize_output_spatial_01.py", "last_update_at": "2021-03-17T08:38:58+00:00", "pred": {"ppl": 1.661295771598816, "ppl_lower": 1.8396236896514893, "ppl/lowercase_ppl": -1.2008738696922754, "ppl/zlib": 0.0005091252589475279, "Min_5.0% Prob": 6.175749728020201, "Min_10.0% Prob": 4.26879149738111, "Min_20.0% Prob": 2.4818873728445063, "Min_30.0% Prob": 1.6897830738835817, "Min_40.0% Prob": 1.2693427095033658, "Min_50.0% Prob": 1.0150082258857829, "Min_60.0% Prob": 0.8468520681717738}}
{"hexsha": "00500ee126bf98712c024187bb2a8536d5e82f46", "ext": "py", "lang": "Python", "content": "@login_required\ndef productlist(request):\n    organization = request.user.info.organization\n    if not hasattr(request.user, 'organization'):\n        if not hasattr(request.user, 'permissions'):\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n        if request.user.permissions.product_permissions < 1:\n            return HttpResponseForbidden('<h1>403 Forbidden</h1>')\n    products = Product.objects.filter(organization=organization).order_by('-id').annotate(earmarked=Sum('salesinvoiceentry__quantity', filter=Q(salesinvoiceentry__invoice__finalized=0)))\n    productfilter = ProductFilter(request.GET, queryset=products)\n    paginator = Paginator(productfilter.qs, 25)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    context = {'page_obj': page_obj, 'filter': productfilter}\n    return render(request, 'products/product_list.html', context=context)", "fn_id": 0, "class_fn": false, "repo": "drtweety/busman", "file": "products/views.py", "last_update_at": "2021-06-13T18:12:21+00:00", "pred": {"ppl": 2.565312385559082, "ppl_lower": 3.9500889778137207, "ppl/lowercase_ppl": -1.4581964664240925, "ppl/zlib": 0.002385013313796304, "Min_5.0% Prob": 9.261981097134678, "Min_10.0% Prob": 6.975406729656717, "Min_20.0% Prob": 4.395671321990642, "Min_30.0% Prob": 3.107472419528894, "Min_40.0% Prob": 2.3678005353963756, "Min_50.0% Prob": 1.8906463859681735, "Min_60.0% Prob": 1.5720272463005247}}
{"hexsha": "04feed9797eeb64fb97ec419811711f467958210", "ext": "py", "lang": "Python", "content": "def get_marks(cos_scores, max_marks, bias):\n    max_cos_score = max(cos_scores)\n    marks_obtained = max([(max_cos_score - bias[0]) / (1 - bias[0]) * max_marks if max_cos_score < bias[1] else max_marks, 0])\n    return marks_obtained", "fn_id": 1, "class_fn": false, "repo": "iamyajat/auto-grader", "file": "autograder/text_similarity.py", "last_update_at": "2021-12-24T13:03:22+00:00", "pred": {"ppl": 3.863176107406616, "ppl_lower": 3.863176107406616, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.010641650951922994, "Min_5.0% Prob": 9.928299188613892, "Min_10.0% Prob": 7.790549993515015, "Min_20.0% Prob": 5.592336982488632, "Min_30.0% Prob": 4.256532164911429, "Min_40.0% Prob": 3.3304338045418262, "Min_50.0% Prob": 2.6733985932135003, "Min_60.0% Prob": 2.255167968267081}}
{"hexsha": "6e4206da9fd80226e539745dda7d6ae8f2010e3a", "ext": "py", "lang": "Python", "content": "@card('Pacifism')\ndef pacifism(card, abilities):\n\n    def pacifism():\n        return AbilityNotImplemented\n\n    def pacifism():\n        return AbilityNotImplemented\n    return (pacifism, pacifism)", "fn_id": 150, "class_fn": false, "repo": "Julian/cardboard", "file": "cardboard/cards/sets/mirage.py", "last_update_at": "2021-05-29T06:00:40+00:00", "pred": {"ppl": 2.900876045227051, "ppl_lower": 7.406662464141846, "ppl/lowercase_ppl": -1.880146392035014, "ppl/zlib": 0.011093883082657565, "Min_5.0% Prob": 11.28711748123169, "Min_10.0% Prob": 9.288574814796448, "Min_20.0% Prob": 5.382281038496229, "Min_30.0% Prob": 3.5597635975905826, "Min_40.0% Prob": 2.778759397773279, "Min_50.0% Prob": 2.1760039214024562, "Min_60.0% Prob": 1.7876739196071867}}
{"hexsha": "58f3964892634b3c801b485b006283a9cc644941", "ext": "py", "lang": "Python", "content": "def test_vertex_merger_vertices():\n    merger = MeshVertexMerger()\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    merger.add_vertices([(1, 2, 3), (4, 5, 6)])\n    assert merger.vertices == [(1, 2, 3), (4, 5, 6)]", "fn_id": 1, "class_fn": false, "repo": "jpsantos-mf/ezdxf", "file": "tests/test_07_render/test_703_render_mesh.py", "last_update_at": "2021-06-05T09:15:15+00:00", "pred": {"ppl": 1.8213282823562622, "ppl_lower": 2.15704345703125, "ppl/lowercase_ppl": -1.2821581557044193, "ppl/zlib": 0.005656283588359222, "Min_5.0% Prob": 7.444792985916138, "Min_10.0% Prob": 4.767648484971788, "Min_20.0% Prob": 2.8829846647050648, "Min_30.0% Prob": 2.004329180275952, "Min_40.0% Prob": 1.4901375261110228, "Min_50.0% Prob": 1.2089607387214252, "Min_60.0% Prob": 1.0134136968461627}}
{"hexsha": "40c216bc802b50376ba5e2720ccd9e0872685eb7", "ext": "py", "lang": "Python", "content": "def parse_args():\n    global args\n    parser = argparse.ArgumentParser(description='Reset RFID Reader')\n    parser.add_argument('host', help='hostname or IP address of RFID reader', nargs='+')\n    parser.add_argument('-p', '--port', default=llrp.LLRP_PORT, help='port to connect to (default {})'.format(llrp.LLRP_PORT))\n    parser.add_argument('-d', '--debug', action='store_true', help='show debugging output')\n    args = parser.parse_args()", "fn_id": 0, "class_fn": false, "repo": "amjadmajid/stork", "file": "Host_software/sllurp/reset.py", "last_update_at": "2021-11-21T08:23:03+00:00", "pred": {"ppl": 2.2283341884613037, "ppl_lower": 2.7478764057159424, "ppl/lowercase_ppl": -1.2615575231859555, "ppl/zlib": 0.0032439445572388305, "Min_5.0% Prob": 9.077486610412597, "Min_10.0% Prob": 6.054797237569636, "Min_20.0% Prob": 3.7445642170698745, "Min_30.0% Prob": 2.6375182041100094, "Min_40.0% Prob": 2.007824204228026, "Min_50.0% Prob": 1.6119014384951127, "Min_60.0% Prob": 1.3423261335972225}}
{"hexsha": "81170dea07b0b06f634847b4f0645d72a042dbbb", "ext": "py", "lang": "Python", "content": "def test_laser_timing_delay(lxt):\n    \"\"\"\n    Check basic moves are getting to the fs_tgt_time signal.\n\n    That signal's value is off by 10e9 for the ns to s conversion\n    and negative due to the convention that positive lxt means earlier laser.\n    \"\"\"\n    logger.debug('test_laser_timing_delay')\n    assert lxt.wm() == 0\n    assert lxt._fs_tgt_time.get() == -0\n    lxt.mv(1e-06)\n    assert lxt.wm() == 1e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(-1000)\n    lxt.mv(-5e-06)\n    assert lxt.wm() == -5e-06\n    assert lxt._fs_tgt_time.get() == pytest.approx(5000)", "fn_id": 7, "class_fn": false, "repo": "cristinasewell/pcdsdevices", "file": "tests/test_lxe.py", "last_update_at": "2021-06-15T14:09:42+00:00", "pred": {"ppl": 4.934922695159912, "ppl_lower": 4.990959167480469, "ppl/lowercase_ppl": -1.0070731311818069, "ppl/zlib": 0.00593433832027819, "Min_5.0% Prob": 10.468235206604003, "Min_10.0% Prob": 8.554678297042846, "Min_20.0% Prob": 6.2224437415599825, "Min_30.0% Prob": 4.872144083182017, "Min_40.0% Prob": 3.867067323790656, "Min_50.0% Prob": 3.176521399086065, "Min_60.0% Prob": 2.6717106356970537}}
{"hexsha": "10296073b3cc74d61d9da67e57a17da208e30b41", "ext": "py", "lang": "Python", "content": "def corrSpin2(ra, dec, g1a, g2a, g1b=None, g2b=None, raUnits='degrees', decUnits='degrees', **treecorrKwargs):\n    \"\"\"Function to compute correlations between at most two shear-like fields.\n    This is used to compute Rho statistics, given the appropriate spin-2\n    (shear-like) fields.\n    Parameters\n    ----------\n    ra : `numpy.array`\n        The right ascension values of entries in the catalog.\n    dec : `numpy.array`\n        The declination values of entries in the catalog.\n    g1a : `numpy.array`\n        The first component of the primary shear-like field.\n    g2a : `numpy.array`\n        The second component of the primary shear-like field.\n    g1b : `numpy.array`, optional\n        The first component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    g2b : `numpy.array`, optional\n        The second component of the secondary shear-like field.\n        Autocorrelation of the primary field is computed if `None` (default).\n    raUnits : `str`, optional\n        Unit of the right ascension values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    decUnits : `str`, optional\n        Unit of the declination values.\n        Valid options are \"degrees\", \"arcmin\", \"arcsec\", \"hours\" or \"radians\".\n    **treecorrKwargs\n        Keyword arguments to be passed to `treecorr.GGCorrelation`.\n    Returns\n    -------\n    xy : `treecorr.GGCorrelation`\n        A `treecorr.GGCorrelation` object containing the correlation function.\n    \"\"\"\n    xy = treecorr.GGCorrelation(**treecorrKwargs)\n    catA = treecorr.Catalog(ra=ra, dec=dec, g1=g1a, g2=g2a, ra_units=raUnits, dec_units=decUnits)\n    if g1b is None or g2b is None:\n        xy.process(catA)\n    else:\n        catB = treecorr.Catalog(ra=ra, dec=dec, g1=g1b, g2=g2b, ra_units=raUnits, dec_units=decUnits)\n        xy.process(catA, catB)\n    return xy", "fn_id": 1, "class_fn": false, "repo": "lsst-dmsst/metric-pipeline-tasks", "file": "python/lsst/faro/utils/tex.py", "last_update_at": "2021-02-23T16:05:17+00:00", "pred": {"ppl": 1.8729603290557861, "ppl_lower": 2.1222732067108154, "ppl/lowercase_ppl": -1.1991450318237373, "ppl/zlib": 0.0010236871823952217, "Min_5.0% Prob": 7.335069364971584, "Min_10.0% Prob": 5.092951416969299, "Min_20.0% Prob": 3.0186989329276828, "Min_30.0% Prob": 2.0831841973179, "Min_40.0% Prob": 1.569007694776506, "Min_50.0% Prob": 1.2548397811772098, "Min_60.0% Prob": 1.0483850010750757}}
{"hexsha": "7cfa76a0e321448c9b715a43fe2ae910c799972c", "ext": "py", "lang": "Python", "content": "def make_summary_file(filename):\n    \"\"\"\n    Given a DLIS file, make a short human readable summary of it.\n    Show things like headers, well parameters and which well curves are\n    available.\n\n    Args:\n    filename: A DLIS file.\n\n    Returns:\n    summaryfile: The DLIS file without the extention and the suffix\n    _summary.txt.\n    \"\"\"\n    summaryfile = open(filename.replace('.DLIS', '_summary.txt'), 'w')\n    f, *f_tail = dlis.load(filename)\n    if len(f_tail):\n        print('There are more logical files in tail')\n    origin, *origin_tail = f.origins\n    if len(origin_tail):\n        print(filename + ' contains multiple origins')\n    header = f.fileheader\n    parameter_table = summarize(f.parameters, name='Name', long_name='Long name', values='Value(s)')\n    mask = ~parameter_table['Name'].isin(['R8', 'RR1', 'WITN', 'ENGI'])\n    parameter_table = parameter_table[mask]\n    parameter_table.sort_values('Name')\n    summaryfile.write(str(f.describe()))\n    summaryfile.write(str(origin.describe()))\n    summaryfile.write(str(header.describe()))\n    summaryfile.write(str(parameter_table))\n    for frame in f.frames:\n        index_channel = next((ch for ch in frame.channels if ch.name == frame.index))\n        summaryfile.write(f'\\nFrame {frame.name}:\\n')\n        summaryfile.write(f'Description      : {frame.description}\\n')\n        summaryfile.write(f'Indexed by       : {frame.index_type}\\n')\n        summaryfile.write(f'Interval         : [{frame.index_min}, {frame.index_max}] {index_channel.units}\\n')\n        summaryfile.write(f'Direction        : {frame.direction}\\n')\n        summaryfile.write(f'Constant spacing : {frame.spacing} {index_channel.units}\\n')\n        summaryfile.write(f'Index channel    : {index_channel}\\n')\n        summaryfile.write(f'No. of channels  : {len(frame.channels)}\\n')\n    channel_table = summarize(f.channels, name='Name', long_name='Long name', units='Units', dimension='Dimension', frame='Frame')\n    channel_table.sort_values('Name')\n    summaryfile.write(str(channel_table))\n    summaryfile.close()\n    return summaryfile", "fn_id": 1, "class_fn": false, "repo": "softwareunderground/northern-lights", "file": "scripts/dlis_summary.py", "last_update_at": "2021-04-17T09:13:20+00:00", "pred": {"ppl": 3.64090895652771, "ppl_lower": 3.7369720935821533, "ppl/lowercase_ppl": -1.02015295363709, "ppl/zlib": 0.0017229778184096709, "Min_5.0% Prob": 9.412181752068657, "Min_10.0% Prob": 7.729521349856728, "Min_20.0% Prob": 5.574414079649406, "Min_30.0% Prob": 4.095016348083117, "Min_40.0% Prob": 3.1839956788901698, "Min_50.0% Prob": 2.576984048177276, "Min_60.0% Prob": 2.1549133211047504}}
{"hexsha": "4be3288dc749ae714f5530e0b9af4e86fbcb9c14", "ext": "py", "lang": "Python", "content": "def set_crs(df: GDF, epsg_code: Union[int, str]) -> GDF:\n    \"\"\"Sets dataframe crs in geopandas pipeline.\n\n    TODO: Deprecate with next rasterio version that will integrate set_crs method.\n    \"\"\"\n    df.crs = {'init': f'epsg:{str(epsg_code)}'}\n    return df", "fn_id": 2, "class_fn": false, "repo": "ZakariaELHAJOUY/Remote-sensing-", "file": "utils/geo.py", "last_update_at": "2021-07-12T06:28:31+00:00", "pred": {"ppl": 5.555490493774414, "ppl_lower": 7.357839584350586, "ppl/lowercase_ppl": -1.1638569014115168, "ppl/zlib": 0.008748911820932376, "Min_5.0% Prob": 11.204551219940186, "Min_10.0% Prob": 8.987954497337341, "Min_20.0% Prob": 6.661061689257622, "Min_30.0% Prob": 5.1969683567682905, "Min_40.0% Prob": 4.180051451548934, "Min_50.0% Prob": 3.410965198278427, "Min_60.0% Prob": 2.8536912947893143}}
{"hexsha": "28241061cc6276467c762df6e87e9db4f4a59e1b", "ext": "py", "lang": "Python", "content": "def total_lights():\n    total_lights_on = 0\n    for y, _ in enumerate(lights):\n        for x, _ in enumerate(lights[y]):\n            if lights[y][x] == 1:\n                total_lights_on += 1\n    return total_lights_on", "fn_id": 6, "class_fn": false, "repo": "josephroquedev/advent-of-code", "file": "2015/day_18/python/day18.py", "last_update_at": "2021-11-30T10:05:29+00:00", "pred": {"ppl": 2.211911201477051, "ppl_lower": 2.211911201477051, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.007283091182170458, "Min_5.0% Prob": 8.544622580210367, "Min_10.0% Prob": 5.9556697607040405, "Min_20.0% Prob": 3.9167034874359765, "Min_30.0% Prob": 2.740348713265525, "Min_40.0% Prob": 1.9942535509169101, "Min_50.0% Prob": 1.6125004080935352, "Min_60.0% Prob": 1.3515644527852182}}
{"hexsha": "c85e03d56b4d6fc548188cd588d9ea2d6a3b23be", "ext": "py", "lang": "Python", "content": "def argopen(file, mode, encoding=None, errors=None):\n    closefd = True\n    if file == '-':\n        closefd = False\n        if 'r' in mode:\n            file = sys.stdin.fileno()\n        else:\n            file = sys.stdout.fileno()\n    return io.open(file, mode, encoding=encoding, errors=errors, closefd=closefd)", "fn_id": 0, "class_fn": false, "repo": "olivier-compilatio/uniseg-python", "file": "uniseg/samples/unibreak.py", "last_update_at": "2021-05-11T02:01:47+00:00", "pred": {"ppl": 1.9696621894836426, "ppl_lower": 2.4307475090026855, "ppl/lowercase_ppl": -1.3102943675645078, "ppl/zlib": 0.00434526955529803, "Min_5.0% Prob": 8.177587032318115, "Min_10.0% Prob": 5.431743770837784, "Min_20.0% Prob": 3.1096690156880546, "Min_30.0% Prob": 2.263533525466919, "Min_40.0% Prob": 1.7042577352155657, "Min_50.0% Prob": 1.354558834134666, "Min_60.0% Prob": 1.1428266593104448}}
{"hexsha": "96a9ce1af1b9abc8e61b5491562c9ddee1c883c3", "ext": "py", "lang": "Python", "content": "def infer_replicates(target_labels_long):\n    \"\"\" Infer replicate experiments based on their long form labels.\n\n    In:\n        target_labels_long [str]: list of long form target labels\n    Out:\n        replicate_lists {exp_label -> [target indexes]}\n    \"\"\"\n    replicate_lists = {}\n    rep_re = []\n    rep_re.append(re.compile('rep\\\\d+'))\n    rep_re.append(re.compile('donor\\\\d+'))\n    for ti in range(len(target_labels_long)):\n        label = target_labels_long[ti]\n        for ri in range(len(rep_re)):\n            rep_m = rep_re[ri].search(label)\n            if rep_m:\n                rep_str = rep_m.group(0)\n                label = label.replace(rep_str, '')\n        replicate_lists.setdefault(label, []).append(ti)\n    return replicate_lists", "fn_id": 1, "class_fn": false, "repo": "JasperSnoek/basenji", "file": "bin/basenji_test_reps.py", "last_update_at": "2021-05-12T08:51:44+00:00", "pred": {"ppl": 3.3063766956329346, "ppl_lower": 3.3505756855010986, "ppl/lowercase_ppl": -1.0111044102178761, "ppl/zlib": 0.003737040424782767, "Min_5.0% Prob": 9.63267936706543, "Min_10.0% Prob": 7.73974916934967, "Min_20.0% Prob": 5.401489362484071, "Min_30.0% Prob": 3.8914471903154926, "Min_40.0% Prob": 2.9953806492977026, "Min_50.0% Prob": 2.3995249819697686, "Min_60.0% Prob": 1.9958691931885457}}
{"hexsha": "eb9320bc73ea082b4d99c1b4dbcaed9bf2e92e33", "ext": "py", "lang": "Python", "content": "def verify_flow_region_func(height: float, boundary_layer_height: float) -> FlowFieldRegion:\n    if height < boundary_layer_height:\n        return FlowFieldRegion.BOUNDARY_LAYER\n    else:\n        return FlowFieldRegion.FREE_FLOW", "fn_id": 0, "class_fn": false, "repo": "lucasralves/steady-flow-prediction", "file": "src/pre_processing/core/mesh/functions/verify_flow_region.py", "last_update_at": "2021-07-16T19:59:39+00:00", "pred": {"ppl": 4.843627452850342, "ppl_lower": 6.689902305603027, "ppl/lowercase_ppl": -1.2046921111834001, "ppl/zlib": 0.01126902795530546, "Min_5.0% Prob": 9.19800329208374, "Min_10.0% Prob": 8.657609939575195, "Min_20.0% Prob": 6.476658149199053, "Min_30.0% Prob": 4.863144124255461, "Min_40.0% Prob": 3.9328451427546414, "Min_50.0% Prob": 3.1769509315490723, "Min_60.0% Prob": 2.6399097760372303}}
{"hexsha": "3f5030776c04f54c1b5b6703282b5954e3f6c54c", "ext": "py", "lang": "Python", "content": "def timeit(method):\n\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        if 'log_time' in kw:\n            name = kw.get('log_name', method.__name__.upper())\n            kw['log_time'][name] = int((te - ts) * 1000)\n        else:\n            print('%r  %2.2f ms' % (method.__name__, (te - ts) * 1000))\n        return result\n    return timed", "fn_id": 0, "class_fn": false, "repo": "xiongjuncheng/futu_algo", "file": "strategies/Strategies.py", "last_update_at": "2021-06-09T01:16:13+00:00", "pred": {"ppl": 1.248496413230896, "ppl_lower": 1.248496413230896, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0011041788948798295, "Min_5.0% Prob": 4.227928916613261, "Min_10.0% Prob": 2.32730740805467, "Min_20.0% Prob": 1.1262307840958237, "Min_30.0% Prob": 0.7414667846092734, "Min_40.0% Prob": 0.5636291679623536, "Min_50.0% Prob": 0.4473679214981588, "Min_60.0% Prob": 0.37086177859466835}}
{"hexsha": "89cf74e1d86ffce9e2a638d3306254d23a748771", "ext": "py", "lang": "Python", "content": "def infer_remote_zip_file_directory_name() -> List[str]:\n    from ..version import __version__\n    remote_zip_file_directory_name: List[str] = [__version__]\n    remote_zip_file_directory_name.append(f'python_{PYTHON_VERSION}')\n    if Env.ON_WINDOWS:\n        remote_zip_file_directory_name.append('windows')\n    else:\n        remote_zip_file_directory_name.append('linux')\n    return remote_zip_file_directory_name", "fn_id": 3, "class_fn": false, "repo": "Reefledge/reefledge", "file": "reefledge/remote_zip_file_path/__init__.py", "last_update_at": "2021-09-23T10:44:32+00:00", "pred": {"ppl": 2.905958890914917, "ppl_lower": 3.0256848335266113, "ppl/lowercase_ppl": -1.037847228006368, "ppl/zlib": 0.005644250892960919, "Min_5.0% Prob": 9.650183582305909, "Min_10.0% Prob": 7.794515696438876, "Min_20.0% Prob": 5.057736821796583, "Min_30.0% Prob": 3.531645963873182, "Min_40.0% Prob": 2.6798674532390656, "Min_50.0% Prob": 2.1483864137681863, "Min_60.0% Prob": 1.787638971300035}}
{"hexsha": "c8cc0e831e5f48f15a8c98373df38d2e3f24ded3", "ext": "py", "lang": "Python", "content": "def heap_sort(list_item):\n    \"\"\"\n    Heap Sort\n    Time Complexity of Solution:\n    Best - O(nlog(n))\n    Average - O(nlog(n))\n    Worst - O(nlog(n))\n\n    Approach:\n    Heap sort takes place in two steps. In first step, array is\n    transformed into a heap.\n    In second step, heap is continously reduced to a sorted array.\n\n    \"\"\"\n    end = len(list_item)\n    start = end // 2 - 1\n    for i in range(start, -1, -1):\n        heapify(list_item, end, i)\n    for i in range(end - 1, 0, -1):\n        swap(list_item, i, 0)\n        heapify(list_item, i, 0)", "fn_id": 0, "class_fn": false, "repo": "mish24/pydsa", "file": "pydsa/heap_sort.py", "last_update_at": "2021-11-02T09:24:38+00:00", "pred": {"ppl": 2.6284139156341553, "ppl_lower": 3.0240378379821777, "ppl/lowercase_ppl": -1.1450902282529531, "ppl/zlib": 0.0033671797573661963, "Min_5.0% Prob": 8.352034038967556, "Min_10.0% Prob": 6.855941004223293, "Min_20.0% Prob": 4.398845033513175, "Min_30.0% Prob": 3.1608702645257667, "Min_40.0% Prob": 2.418717019052969, "Min_50.0% Prob": 1.9427079909481109, "Min_60.0% Prob": 1.619457114962171}}
{"hexsha": "29dcd0e7194a9a266ef5c8a71033e49f8cc50186", "ext": "py", "lang": "Python", "content": "def a_star(grid, h, start, goal):\n    path = []\n    path_cost = 0\n    queue = PriorityQueue()\n    queue.put((0, start))\n    visited = set(start)\n    branch = {}\n    found = False\n    while not queue.empty():\n        item = queue.get()\n        current_node = item[1]\n        if current_node == start:\n            current_cost = 0.0\n        else:\n            current_cost = branch[current_node][0]\n        if current_node == goal:\n            print('Found a path.')\n            found = True\n            break\n        else:\n            for action in valid_actions(grid, current_node):\n                da = action.delta\n                next_node = (current_node[0] + da[0], current_node[1] + da[1])\n                branch_cost = current_cost + action.cost\n                queue_cost = branch_cost + h(next_node, goal)\n                if next_node not in visited:\n                    visited.add(next_node)\n                    branch[next_node] = (branch_cost, current_node, action)\n                    queue.put((queue_cost, next_node))\n    if found:\n        n = goal\n        path_cost = branch[n][0]\n        path.append(goal)\n        while branch[n][1] != start:\n            path.append(branch[n][1])\n            n = branch[n][1]\n        path.append(branch[n][1])\n    else:\n        print('**********************')\n        print('Failed to find a path!')\n        print('**********************')\n    return (path[::-1], path_cost)", "fn_id": 2, "class_fn": false, "repo": "allthatido/Drone_Motion_Planning", "file": "planning_utils.py", "last_update_at": "2021-07-08T18:54:42+00:00", "pred": {"ppl": 1.3282238245010376, "ppl_lower": 1.479770302772522, "ppl/lowercase_ppl": -1.3806486529688569, "ppl/zlib": 0.0006091042476362767, "Min_5.0% Prob": 4.0556206703186035, "Min_10.0% Prob": 2.6002069546116724, "Min_20.0% Prob": 1.4057298198135362, "Min_30.0% Prob": 0.9422420587288131, "Min_40.0% Prob": 0.7113733409614912, "Min_50.0% Prob": 0.5674499415198935, "Min_60.0% Prob": 0.4738773233681776}}
{"hexsha": "7fa31603a252cfd1d536877477d7abb4da4bdef3", "ext": "py", "lang": "Python", "content": "def decimal_to_binary(n: int):\n    \"\"\"\n    Function to convert Decimal number to Binary number \n    \n    :param n: \n    :return: \n    \"\"\"\n    return int('{0:b}'.format(n))", "fn_id": 0, "class_fn": false, "repo": "ikostan/python", "file": "secret-handshake/secret_handshake.py", "last_update_at": "2021-08-02T19:20:10+00:00", "pred": {"ppl": 5.241581916809082, "ppl_lower": 4.96393346786499, "ppl/lowercase_ppl": -0.9671471000794722, "ppl/zlib": 0.013359865687849921, "Min_5.0% Prob": 9.870241641998291, "Min_10.0% Prob": 9.76509976387024, "Min_20.0% Prob": 7.233640789985657, "Min_30.0% Prob": 5.172785548063425, "Min_40.0% Prob": 4.1689238513217255, "Min_50.0% Prob": 3.284955161538991, "Min_60.0% Prob": 2.796682279413709}}
{"hexsha": "66a6d587f9640fe42f4703541334c4465b7b3a16", "ext": "py", "lang": "Python", "content": "def _parse_word(operand):\n    value = OP_EVALUATOR.eval_int(operand)\n    if 0 <= value < 65536:\n        return (value % 256, value // 256)\n    raise ValueError", "fn_id": 6, "class_fn": false, "repo": "skoolkid/sk6502", "file": "sk6502/assembler.py", "last_update_at": "2021-01-26T17:44:49+00:00", "pred": {"ppl": 5.846653938293457, "ppl_lower": 6.787662029266357, "ppl/lowercase_ppl": -1.0845119266470058, "ppl/zlib": 0.014126956169942336, "Min_5.0% Prob": 12.058410167694092, "Min_10.0% Prob": 9.465659618377686, "Min_20.0% Prob": 7.125129266218706, "Min_30.0% Prob": 5.661828964948654, "Min_40.0% Prob": 4.356239026243037, "Min_50.0% Prob": 3.48607959864395, "Min_60.0% Prob": 2.9781699948238605}}
{"hexsha": "f46d4201935576f7c5b0f071b01e8b9a5b4caddc", "ext": "py", "lang": "Python", "content": "def test_proportions_delta_aa(proportions_data_small):\n    exp = Experiment(proportions_data_small, name='proportions-test')\n    test_aa = HypothesisTest(metric='metric', control='A', variation='A', hypothesis='larger', inference_method='proportions_delta')\n    results_aa = exp.run_test(test_aa)\n    assert not results_aa.accept_hypothesis", "fn_id": 4, "class_fn": false, "repo": "quizlet/abracadabra", "file": "test/test_proportions_delta.py", "last_update_at": "2021-09-01T12:25:38+00:00", "pred": {"ppl": 4.246872901916504, "ppl_lower": 5.044320106506348, "ppl/lowercase_ppl": -1.1189890654186303, "ppl/zlib": 0.0073784843077922815, "Min_5.0% Prob": 7.822678947448731, "Min_10.0% Prob": 6.6868198871612545, "Min_20.0% Prob": 5.275735247135162, "Min_30.0% Prob": 4.270587611198425, "Min_40.0% Prob": 3.459629699587822, "Min_50.0% Prob": 2.8535696971416473, "Min_60.0% Prob": 2.418679244319598}}
{"hexsha": "dd575f7aaba2cc90075652902b7b83a55562e8f2", "ext": "py", "lang": "Python", "content": "def _load_cache():\n    if not os.path.exists(cache_file_name):\n        raise ValueError('No cache file found.')\n    else:\n        with open(cache_file_name, 'rb') as f:\n            dataset_stats = pickle.load(f)\n    return dataset_stats", "fn_id": 0, "class_fn": false, "repo": "cmusatyalab/dronesearch", "file": "experiments/random_select/plot_random_select_and_filter.py", "last_update_at": "2021-10-08T23:19:12+00:00", "pred": {"ppl": 2.6244964599609375, "ppl_lower": 3.514695644378662, "ppl/lowercase_ppl": -1.302691672292375, "ppl/zlib": 0.00634795429517155, "Min_5.0% Prob": 6.45123291015625, "Min_10.0% Prob": 5.7425252596537275, "Min_20.0% Prob": 4.090346237023671, "Min_30.0% Prob": 3.0746060452963175, "Min_40.0% Prob": 2.423762879371643, "Min_50.0% Prob": 1.9214036236517131, "Min_60.0% Prob": 1.6243552017319751}}
{"hexsha": "d4e3e838774528218776e66d0b619c26190040dd", "ext": "py", "lang": "Python", "content": "@api_view(['PUT'])\n@permission_classes((IsAuthenticated,))\n@allowed_groups(group_names=['admin'])\ndef updateUser(request: HttpRequest, id):\n    user = get_object_or_404(User, id=id)\n    groups = request.data.pop('authGroups', [])\n    serialised = UserSerializer(user, data=request.data, context={'request': request}, partial=True)\n    if serialised.is_valid():\n        serialised.save()\n        user_group_many.objects.filter(user=user).delete()\n        for group in groups:\n            user_group_many.objects.create(user=user, group_id=group['id'])\n        return Response(status=status.HTTP_200_OK)\n    print(serialised.error_messages)\n    return Response(status=status.HTTP_400_BAD_REQUEST)", "fn_id": 6, "class_fn": false, "repo": "JetLightStudio/Jet-Gest-stock-management", "file": "server/auth_app/views/authViews.py", "last_update_at": "2021-08-18T18:53:02+00:00", "pred": {"ppl": 2.201812982559204, "ppl_lower": 3.256011724472046, "ppl/lowercase_ppl": -1.495668707979248, "ppl/zlib": 0.0020935838301744817, "Min_5.0% Prob": 8.397319507598876, "Min_10.0% Prob": 6.0523765802383425, "Min_20.0% Prob": 3.692910397052765, "Min_30.0% Prob": 2.5650410058597726, "Min_40.0% Prob": 1.9549736130982638, "Min_50.0% Prob": 1.5742571897432207, "Min_60.0% Prob": 1.3147290542876968}}
{"hexsha": "7a6ac05f5c406402bdf62d0f733ffe486364b813", "ext": "py", "lang": "Python", "content": "def speak_rank_top_10():\n    sql = '\\n        select * \\n        from(select row_number() over(order by user_speak_total desc) as row_number,* from user_info)\\n        where row_number <= 10\\n    '\n    data = sql_dql(sql)\n    msg = f'\ud83d\ude48\u53d1\u8a00\u5149\u8363\u699c\ud83d\ude48\\n__________________\\n'\n    for item in data:\n        rank = item[0]\n        name = item[1]\n        id = item[2]\n        num = item[3]\n        num_emoji = rank_emoji(rank)\n        msg += f'{num_emoji}{name}({id})\ud83d\udde3\ufe0f:{num}\\n'\n    msg += f'\u8fd9\u4e9b\ud83d\udc68\u90fd4\ufe0f\u20e3\u5927\ud83d\udca6\ud83d\udc7e'\n    return msg", "fn_id": 2, "class_fn": false, "repo": "Twip-Emma/QQbot-Twip", "file": "bot_plugins/user/user_speaki_rank/__init__.py", "last_update_at": "2021-12-23T15:36:48+00:00", "pred": {"ppl": 5.645600318908691, "ppl_lower": 5.645600318908691, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0051822650814146365, "Min_5.0% Prob": 11.112030771043566, "Min_10.0% Prob": 9.126181761423746, "Min_20.0% Prob": 6.7223684916625155, "Min_30.0% Prob": 5.249515524932316, "Min_40.0% Prob": 4.229027078151703, "Min_50.0% Prob": 3.4471000172990434, "Min_60.0% Prob": 2.8867046293695418}}
{"hexsha": "43ee7c52704e9f62de936933b0306b16b4a79105", "ext": "py", "lang": "Python", "content": "def test_model_default_implementations():\n\n    class MyModel(Model):\n        pass\n    model = MyModel()\n    with pytest.raises(NotImplementedError):\n        model.__prior__()\n    with pytest.raises(NotImplementedError):\n        model.__condition__(None, None)\n    with pytest.raises(NotImplementedError):\n        model.__noiseless__()\n    with pytest.raises(NotImplementedError):\n        model.logpdf(None, None)\n    with pytest.raises(NotImplementedError):\n        model.sample(None)\n\n    class MyModel2(Model):\n\n        def __prior__(self):\n            pass\n\n        def sample(self, x):\n            return 1\n    model = MyModel2()\n    assert model.predict(None, num_samples=100) == (1, 0)", "fn_id": 8, "class_fn": false, "repo": "wesselb/probmods", "file": "tests/test_model.py", "last_update_at": "2021-08-28T16:32:03+00:00", "pred": {"ppl": 2.60509991645813, "ppl_lower": 3.0883500576019287, "ppl/lowercase_ppl": -1.1777243915396625, "ppl/zlib": 0.004022987521495321, "Min_5.0% Prob": 7.867661416530609, "Min_10.0% Prob": 6.2487844079732895, "Min_20.0% Prob": 4.236727331623887, "Min_30.0% Prob": 3.1027238150032197, "Min_40.0% Prob": 2.3639622290026057, "Min_50.0% Prob": 1.9191056453145858, "Min_60.0% Prob": 1.594492565689966}}
{"hexsha": "7d2d407dbcaa652ae9d9750427e051162ad2d2e3", "ext": "py", "lang": "Python", "content": "def pattern_loader(path_to_rules='patterns.jsonl') -> List:\n    \"\"\" Loads the patterns from the pattern list. \"\"\"\n    patterns = []\n    patternDicts = []\n    with open(path_to_rules, encoding='utf8') as f:\n        try:\n            for line in f:\n                data = json.loads(line)\n                patternDicts.append(data)\n        except:\n            pass\n    for patternDict in patternDicts:\n        patterns.append(Pattern(**patternDict))\n    return patterns", "fn_id": 5, "class_fn": false, "repo": "ChrisChross/turCy", "file": "turcy/tree_dep_pattern.py", "last_update_at": "2021-04-15T12:29:32+00:00", "pred": {"ppl": 3.199496269226074, "ppl_lower": 3.6434264183044434, "ppl/lowercase_ppl": -1.1117213417592946, "ppl/zlib": 0.005262413491165843, "Min_5.0% Prob": 8.54124183654785, "Min_10.0% Prob": 7.021183794195002, "Min_20.0% Prob": 5.071842182766307, "Min_30.0% Prob": 3.7319324359749304, "Min_40.0% Prob": 2.887269230390137, "Min_50.0% Prob": 2.3359213532371954, "Min_60.0% Prob": 1.9535433920100331}}
{"hexsha": "9a23cc6017e673eb9497903c018a6480ea3f8e60", "ext": "py", "lang": "Python", "content": "def readVDAT(fid, address):\n    vdat = namedtuple('vdat', [])\n    if address != -1:\n        fid.seek(address, 0)\n    [dumCRC, lastSize, lastType, dumMisc] = readARDFpointer(fid, -1)\n    vdat.force = struct.unpack('i', fid.read(4))[0]\n    vdat.line = struct.unpack('i', fid.read(4))[0]\n    vdat.point = struct.unpack('i', fid.read(4))[0]\n    vdat.sizeData = struct.unpack('i', fid.read(4))[0]\n    vdat.forceType = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt0 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt1 = struct.unpack('i', fid.read(4))[0]\n    vdat.pnt2 = struct.unpack('i', fid.read(4))[0]\n    dum = struct.unpack('i' * 2, fid.read(4 * 2))[0]\n    sizeData = vdat.sizeData\n    vdat.data = struct.unpack('f' * sizeData, fid.read(4 * sizeData))\n    return vdat", "fn_id": 6, "class_fn": false, "repo": "yu-efremov/ViscoIndent", "file": "import_ARDF.py", "last_update_at": "2021-12-21T13:26:53+00:00", "pred": {"ppl": 2.9496967792510986, "ppl_lower": 2.967837333679199, "ppl/lowercase_ppl": -1.0056680458873304, "ppl/zlib": 0.004192644877419657, "Min_5.0% Prob": 10.467310224260602, "Min_10.0% Prob": 8.143677695044156, "Min_20.0% Prob": 5.1763009100124755, "Min_30.0% Prob": 3.574329225667592, "Min_40.0% Prob": 2.701110534964065, "Min_50.0% Prob": 2.163102815414233, "Min_60.0% Prob": 1.8028119833932201}}
{"hexsha": "4621fba19fcf958d4877519ee2e7db8ca9d513e9", "ext": "py", "lang": "Python", "content": "def search_froms():\n    \"\"\"\n    Search for unique \"from xxx import yyy\" statements, returning a sorted list.\n    \"\"\"\n    _froms = []\n    _lib_dir_regex = '{}\\\\.'.format(LIB_DIR)\n    _regex = '^[ ]*from '\n    print(Fore.GREEN + '\\nimport list contents:' + Style.RESET_ALL)\n    for _items in _find_in_files('^[ ]*from.*import.*'):\n        _item = _items[0]\n        _filename = _items[1]\n        _library_name = re.sub(' import.*', '', _item)\n        _library_name = re.sub(_regex, '', _library_name).strip()\n        if IGNORE_LIB and re.match(_lib_dir_regex, _library_name):\n            pass\n        elif len(_library_name) > 1 and _library_name not in _froms:\n            _froms.append(_library_name)\n    _froms.sort()\n    print(Fore.CYAN + \"\\n-- complete: {:d} instances of '{}' found.\".format(len(_froms), _regex) + Style.RESET_ALL)\n    return _froms", "fn_id": 3, "class_fn": false, "repo": "ifurusato/ros", "file": "import_report.py", "last_update_at": "2021-07-23T14:20:05+00:00", "pred": {"ppl": 4.967209339141846, "ppl_lower": 5.198826313018799, "ppl/lowercase_ppl": -1.02843340127101, "ppl/zlib": 0.003780325899125028, "Min_5.0% Prob": 10.420259402348446, "Min_10.0% Prob": 8.366386028436514, "Min_20.0% Prob": 6.281221600679251, "Min_30.0% Prob": 4.932521243890126, "Min_40.0% Prob": 3.9296454156820593, "Min_50.0% Prob": 3.1826655609917096, "Min_60.0% Prob": 2.669629135115701}}
{"hexsha": "f5243a5a3b358ca43895541eb22f25937e8336f3", "ext": "py", "lang": "Python", "content": "def try_to_get_last_line_as_json(file_location: str, max_tries=3, await_in_seconds_between_tries=1) -> Optional[dict]:\n    attempts = 0\n    while True:\n        line = last_line_from_some_file(file_location)\n        line_as_json = json.loads(line) if line else None\n        if line_as_json:\n            return line_as_json\n        if attempts >= max_tries:\n            return None\n        sleep(await_in_seconds_between_tries)\n        attempts += 1", "fn_id": 5, "class_fn": false, "repo": "juntossomosmais/python-fluentd-testing", "file": "python_fluentd_testing/utils.py", "last_update_at": "2021-11-12T20:00:54+00:00", "pred": {"ppl": 2.7610316276550293, "ppl_lower": 3.400773286819458, "ppl/lowercase_ppl": -1.2051964893924036, "ppl/zlib": 0.004574794540663484, "Min_5.0% Prob": 9.387884775797525, "Min_10.0% Prob": 7.119873633751502, "Min_20.0% Prob": 4.742473212572245, "Min_30.0% Prob": 3.342303443700075, "Min_40.0% Prob": 2.5535005083623923, "Min_50.0% Prob": 2.027878678528898, "Min_60.0% Prob": 1.7004643240245059}}
{"hexsha": "b82969bc09d27dd516accba17236411cb1f5adb8", "ext": "py", "lang": "Python", "content": "def test_get_binary_patterns():\n    wl = Wordlist(data_path('wichmannmixezoquean.tsv'))\n    pats, characters = get_binary_patterns(wl, 'cogid')\n    etd = wl.get_etymdict(ref='cogid')\n    assert len(etd) == len(pats)", "fn_id": 0, "class_fn": false, "repo": "WesScivetti/data", "file": "tests/test_wordlist.py", "last_update_at": "2021-05-23T18:25:06+00:00", "pred": {"ppl": 6.9932708740234375, "ppl_lower": 7.272156238555908, "ppl/lowercase_ppl": -1.020105653672129, "ppl/zlib": 0.012795713046023912, "Min_5.0% Prob": 13.356857935587565, "Min_10.0% Prob": 10.891692229679652, "Min_20.0% Prob": 7.349582719802856, "Min_30.0% Prob": 5.860994599082253, "Min_40.0% Prob": 4.632711414496104, "Min_50.0% Prob": 3.800027277908827, "Min_60.0% Prob": 3.254252416557736}}
{"hexsha": "1609ca3cfecd7e4bdac13a4eed7e722233b86773", "ext": "py", "lang": "Python", "content": "async def get_prefix(bot_, message):\n    \"\"\"Returns the appropriate prefix for the bot.\"\"\"\n    with open('./data/options.json', 'r') as options_file:\n        options_dict = json.load(options_file)\n    if message.guild and str(message.guild.id) in options_dict:\n        prefixes = options_dict[str(message.guild.id)]['prefix']\n    else:\n        prefixes = '.'\n    return commands.when_mentioned_or(*prefixes)(bot_, message)", "fn_id": 0, "class_fn": false, "repo": "ethantv1234567890/ServerAntiRaid", "file": "main.py", "last_update_at": "2021-01-28T06:22:08+00:00", "pred": {"ppl": 2.1121327877044678, "ppl_lower": 2.215043306350708, "ppl/lowercase_ppl": -1.0636268958899486, "ppl/zlib": 0.003323103274816549, "Min_5.0% Prob": 7.41180009841919, "Min_10.0% Prob": 5.3421471118927, "Min_20.0% Prob": 3.5307515263557434, "Min_30.0% Prob": 2.4824856519699097, "Min_40.0% Prob": 1.8774497865445234, "Min_50.0% Prob": 1.507357337766073, "Min_60.0% Prob": 1.2573148964473866}}
{"hexsha": "9886643486593889d35875fc98bf1b7805dee00d", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('operation', [cirq.CNOT(AspenQubit(0, 1), AspenQubit(0, 2))])\ndef test_rigetti_qcs_aspen_device_valid_operation(operation: cirq.Operation, qcs_aspen8_isa: InstructionSetArchitecture):\n    \"\"\"test RigettiQCSAspenDevice throws no error when validating 2Q operations on\n    adjacent qubits\n    \"\"\"\n    device = RigettiQCSAspenDevice(isa=qcs_aspen8_isa)\n    device.validate_operation(operation)", "fn_id": 14, "class_fn": false, "repo": "dabacon/Cirq", "file": "cirq-rigetti/cirq_rigetti/aspen_device_test.py", "last_update_at": "2021-04-29T15:30:32+00:00", "pred": {"ppl": 4.198247909545898, "ppl_lower": 6.3549017906188965, "ppl/lowercase_ppl": -1.2889584117110737, "ppl/zlib": 0.005855784791258026, "Min_5.0% Prob": 11.918763637542725, "Min_10.0% Prob": 9.062135549692007, "Min_20.0% Prob": 6.019082069396973, "Min_30.0% Prob": 4.56913585960865, "Min_40.0% Prob": 3.5281700182844093, "Min_50.0% Prob": 2.8780154626983316, "Min_60.0% Prob": 2.388265415405234}}
{"hexsha": "8090bbc869f16bd9ee00e270a16a5e0352ae7028", "ext": "py", "lang": "Python", "content": "def categoryFilter(doc):\n    categories = doc.Settings.Categories\n    cats = [ElementCategoryFilter(c.Id) for c in categories if c.CategoryType == CategoryType.Model and c.CanAddSubcategory]\n    filter = None\n    if len(cats):\n        try:\n            filter = LogicalOrFilter(List[ElementFilter](cats))\n        except Exception as ex:\n            raise Exception(str(ex) + str(len(cats)))\n    return filter", "fn_id": 0, "class_fn": false, "repo": "pabloderen/pyRevitExtension", "file": "lib/tools.py", "last_update_at": "2021-10-24T00:05:02+00:00", "pred": {"ppl": 5.6506571769714355, "ppl_lower": 12.410321235656738, "ppl/lowercase_ppl": -1.4543073210749164, "ppl/zlib": 0.008054752804197955, "Min_5.0% Prob": 11.843959331512451, "Min_10.0% Prob": 9.462957700093588, "Min_20.0% Prob": 6.873440955814562, "Min_30.0% Prob": 5.251635559673967, "Min_40.0% Prob": 4.1718844924217615, "Min_50.0% Prob": 3.397304183974558, "Min_60.0% Prob": 2.9026781636579284}}
{"hexsha": "534d6702940b8bc6ddbaba4862587a1683235de5", "ext": "py", "lang": "Python", "content": "def view_form_force(form, force, forcescale=0.5, edge_label=True):\n    if edge_label:\n        form_edge_label = {uv: index for index, uv in enumerate(form.edges())}\n        force_edge_label = force_edge_labels\n    else:\n        form_edge_label = None\n        force_edge_label = None\n    viewer = Viewer(form, force, delay_setup=False)\n    viewer.draw_form(edgelabel=form_edge_label, forces_on=True, forcescale=forcescale, vertexcolor={key: '#000000' for key in form.vertices_where({'is_fixed': True})})\n    viewer.draw_force(edgelabel=force_edge_label)\n    viewer.show()", "fn_id": 0, "class_fn": false, "repo": "BlockResearchGroup/compas_ags", "file": "scripts/paper-CSD/exampleD_truss_constant.py", "last_update_at": "2021-12-15T18:47:04+00:00", "pred": {"ppl": 3.3454999923706055, "ppl_lower": 4.2179107666015625, "ppl/lowercase_ppl": -1.1918852842069643, "ppl/zlib": 0.0047357496351381955, "Min_5.0% Prob": 9.425449550151825, "Min_10.0% Prob": 7.2876604304594155, "Min_20.0% Prob": 4.992562144143241, "Min_30.0% Prob": 3.7988496995889225, "Min_40.0% Prob": 2.9675600618124007, "Min_50.0% Prob": 2.39668526568196, "Min_60.0% Prob": 2.0190469333813303}}
{"hexsha": "b36cd3ac7c6ccf4bb43ebb3004f30af35e47297a", "ext": "py", "lang": "Python", "content": "def generateCoordsForLayersPG(dictDlsLayers, graphvizLayout, isHorizontal):\n    theGraph = pyg.AGraph()\n    for kk, vv in dictDlsLayers.items():\n        for ll in vv['cfg']['wires']:\n            theGraph.add_edge(kk, ll)\n    if isHorizontal:\n        pArgs = '-Grankdir=LR'\n    else:\n        pArgs = '-Grankdir=TB'\n    if graphvizLayout is None:\n        graphvizLayout = 'dot'\n    theGraph.layout(prog=graphvizLayout, args=pArgs)\n    theGraphPos = {}\n    for kk in dictDlsLayers.keys():\n        tnode = theGraph.get_node(kk)\n        tpos = [int(float(xx)) for xx in tnode.attr['pos'].split(',')]\n        theGraphPos[kk] = tuple(tpos)\n    return theGraphPos", "fn_id": 2, "class_fn": false, "repo": "SummaLabs/DLS", "file": "app/backend/core/models/convertors/keras2dls.py", "last_update_at": "2021-02-16T23:08:34+00:00", "pred": {"ppl": 3.7841641902923584, "ppl_lower": 4.915670871734619, "ppl/lowercase_ppl": -1.1965721940011778, "ppl/zlib": 0.004171865332029818, "Min_5.0% Prob": 11.050613085428873, "Min_10.0% Prob": 9.08670048964651, "Min_20.0% Prob": 6.0237815624628315, "Min_30.0% Prob": 4.365368332903264, "Min_40.0% Prob": 3.3278457344144203, "Min_50.0% Prob": 2.6689384137515466, "Min_60.0% Prob": 2.224194735296446}}
{"hexsha": "3fa1da9767d379e042b89a14701794778faba152", "ext": "py", "lang": "Python", "content": "@numba.njit([types.Long(types.Keys)], cache=True)\ndef find_depth(tree):\n    \"\"\"\n    Return maximum depth of a linear octree.\n    \"\"\"\n    levels = morton.find_level(np.unique(tree))\n    return np.max(levels)", "fn_id": 7, "class_fn": false, "repo": "Excalibur-SLE/AdapOctree", "file": "adaptoctree/tree.py", "last_update_at": "2021-04-27T10:58:52+00:00", "pred": {"ppl": 11.160927772521973, "ppl_lower": 13.318382263183594, "ppl/lowercase_ppl": -1.0732568067141393, "ppl/zlib": 0.015767445014616178, "Min_5.0% Prob": 13.90515104929606, "Min_10.0% Prob": 12.59255345662435, "Min_20.0% Prob": 9.654562711715698, "Min_30.0% Prob": 7.481942929719624, "Min_40.0% Prob": 5.951201593875885, "Min_50.0% Prob": 4.770340796560049, "Min_60.0% Prob": 4.048514055970468}}
{"hexsha": "52b60b2ec451113de42ad06d277c614499c2007a", "ext": "py", "lang": "Python", "content": "@expose_builtin('del_attrs', unwrap_spec=['obj'])\ndef impl_del_attrs(engine, heap, attvar):\n    if isinstance(attvar, AttVar):\n        if attvar.value_list is not None:\n            for name, index in attvar.attmap.indexes.iteritems():\n                heap.add_trail_atts(attvar, name)\n            attvar.value_list = None", "fn_id": 5, "class_fn": false, "repo": "ForoughA/CORGI", "file": "testnet/prolog/builtin/attvars.py", "last_update_at": "2021-12-11T12:39:51+00:00", "pred": {"ppl": 7.182036876678467, "ppl_lower": 8.718631744384766, "ppl/lowercase_ppl": -1.0983368603732275, "ppl/zlib": 0.01016279912571186, "Min_5.0% Prob": 11.66966986656189, "Min_10.0% Prob": 9.00367652045356, "Min_20.0% Prob": 6.980939361784193, "Min_30.0% Prob": 5.7297399044036865, "Min_40.0% Prob": 4.679845621188481, "Min_50.0% Prob": 3.881494004858865, "Min_60.0% Prob": 3.271276319468463}}
{"hexsha": "504b87ddee9917d8fa486f13be56f5b536985c45", "ext": "py", "lang": "Python", "content": "def test_client_with_wrong_credentials(zendesk_credentials):\n    \"\"\"Test check with wrong credentials\"\"\"\n    client = Client(**zendesk_credentials)\n    alive, error = client.health_check()\n    assert not alive\n    assert error", "fn_id": 0, "class_fn": false, "repo": "rajatariya21/airbyte", "file": "airbyte-integrations/connectors/source-zendesk-talk/unit_tests/unit_test.py", "last_update_at": "2021-04-30T13:53:34+00:00", "pred": {"ppl": 4.661291122436523, "ppl_lower": 6.5533127784729, "ppl/lowercase_ppl": -1.2213213021180498, "ppl/zlib": 0.011235711493888354, "Min_5.0% Prob": 11.688974857330322, "Min_10.0% Prob": 8.72923698425293, "Min_20.0% Prob": 6.281536173820496, "Min_30.0% Prob": 4.744415990511576, "Min_40.0% Prob": 3.7587121397256853, "Min_50.0% Prob": 3.0851369851827624, "Min_60.0% Prob": 2.595666719476382}}
{"hexsha": "241fb0211e37aae619cf601b0686c40ee27576eb", "ext": "py", "lang": "Python", "content": "def update_doing_card():\n    \"\"\"\n    DOING \uc0c1\ud0dc\uc758 \uce74\ub4dc\uc758 DURATION\uc744 \uc0c8\ub85c \uae30\ub85d\ud569\ub2c8\ub2e4.\n    DURATION\uc758 \uac12\uc774 \uc5c6\uc744 \uacbd\uc6b0\uc5d0\ub294 \uc2dc\uc791\uc77c\uc744 \ub2f9\uc77c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n    \"\"\"\n    status = notion.CARD_STATUS\n    doing = notion.DOING\n    duration = notion.CARD_DURATION\n    today = date.today()\n    for card_id in notion.get_filtered_card_ids(status, doing):\n        card = notion.client.get_block(card_id)\n        notion_date = card.get_property(duration)\n        if not notion_date or notion_date.start == None:\n            notion_date = NotionDate(start=today)\n        card.set_property(duration, notion_date)", "fn_id": 1, "class_fn": false, "repo": "wormwlrm/notion-scrum-analytics", "file": "commands/run_update_duration.py", "last_update_at": "2021-08-29T03:23:02+00:00", "pred": {"ppl": 3.8608815670013428, "ppl_lower": 4.6809797286987305, "ppl/lowercase_ppl": -1.1425808902658339, "ppl/zlib": 0.003837771427938383, "Min_5.0% Prob": 9.830426216125488, "Min_10.0% Prob": 7.916011866401224, "Min_20.0% Prob": 5.408314629963466, "Min_30.0% Prob": 4.127632431264193, "Min_40.0% Prob": 3.2631194100413525, "Min_50.0% Prob": 2.66060364028711, "Min_60.0% Prob": 2.2579186369647397}}
{"hexsha": "7354359d5802ce995119a41c90b85838a4204d5d", "ext": "py", "lang": "Python", "content": "@app.route('/commands_per_day')\n@cache(time=datetime.timedelta(minutes=DEFAULT_CACHE_MINUTES))\ndef commands_per_day():\n    command_names = [row.get('command_name') for row in bigquery_client.query('SELECT DISTINCT command_name FROM analytics.commands').result()]\n    print(command_names)\n    command_names = filter(lambda item: item not in ['list', 'set', 'voices', 'languages', 'property'], command_names)\n    result = {}\n    for command_name in command_names:\n        usage = {date: {'text_count': 0, 'slash_count': 0} for date in get_days_in_range(datetime.datetime(2021, 1, 1), datetime.datetime.today())}\n        query = 'SELECT DATE(time) as d, COUNTIF(NOT is_slash) as cnt, COUNTIF(is_slash) as slash_cnt FROM analytics.commands WHERE command_name = @command_name GROUP BY d ORDER BY d'\n        job_config = bigquery.QueryJobConfig(query_parameters=[bigquery.ScalarQueryParameter('command_name', 'STRING', command_name)])\n        for row in bigquery_client.query(query, job_config=job_config).result():\n            d = row_to_dict(row)\n            usage[d['d']]['text_count'] = d['cnt']\n            usage[d['d']]['slash_count'] = d['slash_cnt']\n        result[command_name] = [{'date': date, **usage[date]} for date in usage.keys()]\n    response = jsonify(result)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response", "fn_id": 4, "class_fn": false, "repo": "TychoTheTaco/Discord-Dictionary-Bot", "file": "api/main.py", "last_update_at": "2021-12-12T20:35:49+00:00", "pred": {"ppl": 2.5679309368133545, "ppl_lower": 3.09682035446167, "ppl/lowercase_ppl": -1.1985741741689773, "ppl/zlib": 0.0014851976247272456, "Min_5.0% Prob": 9.068006264536004, "Min_10.0% Prob": 7.002346703880711, "Min_20.0% Prob": 4.4317626488673225, "Min_30.0% Prob": 3.0923192941680036, "Min_40.0% Prob": 2.360238272043598, "Min_50.0% Prob": 1.8895914363409416, "Min_60.0% Prob": 1.573006206967342}}
{"hexsha": "f31065a13878fbae4e2467fa58de8efe0ace1f13", "ext": "py", "lang": "Python", "content": "def test_delete_all_album():\n    rq_album.delete_all(token=env.env_var['USER_1_TOKEN'], user_id=env.env_var['USER_1_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_2_TOKEN'], user_id=env.env_var['USER_2_MAIL'])\n    rq_album.delete_all(token=env.env_var['USER_3_TOKEN'], user_id=env.env_var['USER_3_MAIL'])", "fn_id": 3, "class_fn": false, "repo": "OsiriX-Foundation/IntegrationTest", "file": "test_sharing_with_album_token_no_permission.py", "last_update_at": "2021-06-02T07:41:28+00:00", "pred": {"ppl": 2.047811985015869, "ppl_lower": 2.1527276039123535, "ppl/lowercase_ppl": -1.0697066840593887, "ppl/zlib": 0.006457404493437194, "Min_5.0% Prob": 6.72450057665507, "Min_10.0% Prob": 5.288006166617076, "Min_20.0% Prob": 3.509505295753479, "Min_30.0% Prob": 2.400978204451109, "Min_40.0% Prob": 1.7977157284816105, "Min_50.0% Prob": 1.433380616854265, "Min_60.0% Prob": 1.207168232493323}}
{"hexsha": "1b7e2d214e5eeb85cf50702bb2e69e77348f954c", "ext": "py", "lang": "Python", "content": "def _delete_old(old_ids):\n    db = get_db('yahoo')\n    for item in ['financial_data', 'key_stats']:\n        collection = db[item]\n        id_ = old_ids[item]\n        if id_:\n            result = collection.delete_many({'_id': {'$lte': id_}})\n            logger.info(f'\u5220\u9664 {item} \u65e7\u6570\u636e {result.deleted_count} \u884c')", "fn_id": 5, "class_fn": false, "repo": "NeoBert/liudengfeng-cnswd", "file": "cnswd/scripts/yahoo.py", "last_update_at": "2021-06-26T13:23:01+00:00", "pred": {"ppl": 4.297892093658447, "ppl_lower": 4.297892093658447, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006568129242026248, "Min_5.0% Prob": 9.012981295585632, "Min_10.0% Prob": 7.531197759840223, "Min_20.0% Prob": 5.6612849486501595, "Min_30.0% Prob": 4.516135939529964, "Min_40.0% Prob": 3.5744194921694303, "Min_50.0% Prob": 2.8964727396766343, "Min_60.0% Prob": 2.4509224034192267}}
{"hexsha": "a9df1185d80d2c045bcd42e083755fc20bd784de", "ext": "py", "lang": "Python", "content": "def split_indices(idx, n_total, fractions):\n    \"\"\"\n    splits idx containing n_total distinct events into fractions given in fractions list.\n    returns the number of events in each split\n    \"\"\"\n    num_ids = [ceil(n_total * f) for f in fractions]\n    if sum(num_ids) > n_total:\n        num_ids[-1] -= sum(num_ids) - n_total\n    return num_ids", "fn_id": 0, "class_fn": false, "repo": "fact-project/classifier", "file": "aict_tools/scripts/split_data.py", "last_update_at": "2021-01-22T11:57:26+00:00", "pred": {"ppl": 3.5856759548187256, "ppl_lower": 3.5856759548187256, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.006939929386598345, "Min_5.0% Prob": 9.344358444213867, "Min_10.0% Prob": 7.644546318054199, "Min_20.0% Prob": 5.427840995788574, "Min_30.0% Prob": 4.014236966768901, "Min_40.0% Prob": 3.1261509425938128, "Min_50.0% Prob": 2.539667394608259, "Min_60.0% Prob": 2.125119832189133}}
{"hexsha": "0e43d54d54e3eafdf583b28f0be4bd0753b4013d", "ext": "py", "lang": "Python", "content": "@app.route('/json-rpc', methods=['GET', 'POST', 'OPTIONS'])\ndef jsonrpc():\n    result = ''\n    if request.headers['CONTENT_LENGTH']:\n        handler = JSONRPCHandler()\n        result = handler.handle(request.data)\n    response = make_response(result, 200)\n    hdr = 'Access-Control-Allow-%s'\n    response.headers[hdr % 'Origin'] = '*'\n    response.headers[hdr % 'Headers'] = 'Content-Type, Authentication'\n    response.headers[hdr % 'Method'] = 'POST, GET, OPTIONS, PUT, DELETE, TRACE'\n    return response", "fn_id": 0, "class_fn": false, "repo": "MasonM/apeye", "file": "examples/api.apeye.org/example_server/rpc.py", "last_update_at": "2021-07-27T18:31:15+00:00", "pred": {"ppl": 3.206716299057007, "ppl_lower": 3.840610980987549, "ppl/lowercase_ppl": -1.1548031786948567, "ppl/zlib": 0.0040319981099174035, "Min_5.0% Prob": 10.603626569112143, "Min_10.0% Prob": 7.953197992764986, "Min_20.0% Prob": 5.279685307432104, "Min_30.0% Prob": 3.78172116744809, "Min_40.0% Prob": 2.902184570919384, "Min_50.0% Prob": 2.33949332770662, "Min_60.0% Prob": 1.9500960908067155}}
{"hexsha": "6461501746c4c91ad65a43d4651b57d08946bf5f", "ext": "py", "lang": "Python", "content": "def contains_inappropriate_phrases(tweet_text):\n    if 'sex' in tweet_text:\n        return True\n    return False", "fn_id": 4, "class_fn": false, "repo": "mgreiler/code-review-twitter-bot", "file": "code-review-bot/matching_rules.py", "last_update_at": "2021-10-04T08:36:17+00:00", "pred": {"ppl": 5.226265907287598, "ppl_lower": 7.416190147399902, "ppl/lowercase_ppl": -1.2116278923192028, "ppl/zlib": 0.01837441163791997, "Min_5.0% Prob": 8.96170711517334, "Min_10.0% Prob": 7.475501775741577, "Min_20.0% Prob": 5.838922023773193, "Min_30.0% Prob": 5.033071339130402, "Min_40.0% Prob": 4.249134648929942, "Min_50.0% Prob": 3.397415961538042, "Min_60.0% Prob": 2.8146744626848137}}
{"hexsha": "dedf80bf95ac67960c80fd880c96b74b9b20d6cf", "ext": "py", "lang": "Python", "content": "def test_local_missing_url(tmpdir):\n    \"\"\" Test creating a toolchain from path to a local feed xml \"\"\"\n    full = '<feed>\\n<feed />\\n</feed>\\n'\n    with pytest.raises(Exception) as e:\n        _generic_test_local(tmpdir, full)\n    assert 'not parse' in str(e)\n    assert \"Non-root 'feed' element must have an 'url' attribute\" in str(e)", "fn_id": 9, "class_fn": false, "repo": "aldebaran/qibuild", "file": "python/qitoolchain/test/test_feed.py", "last_update_at": "2021-07-27T06:46:59+00:00", "pred": {"ppl": 9.11375617980957, "ppl_lower": 10.674819946289062, "ppl/lowercase_ppl": -1.0715466691004445, "ppl/zlib": 0.009999026878794849, "Min_5.0% Prob": 11.875013828277588, "Min_10.0% Prob": 10.269959873623318, "Min_20.0% Prob": 7.80080489108437, "Min_30.0% Prob": 6.374302707869431, "Min_40.0% Prob": 5.28632842866998, "Min_50.0% Prob": 4.374780231465896, "Min_60.0% Prob": 3.6763911201008437}}
{"hexsha": "3ca816c1fdae9c07f862a54969748690cccccdc9", "ext": "py", "lang": "Python", "content": "def get_authorization_token(event) -> str:\n    cookie = SimpleCookie()\n    cookie.load(', '.join(event['cookies']))\n    if COOKIE_TOKEN_KEY in cookie:\n        return cookie[COOKIE_TOKEN_KEY].value\n    header = event['headers'].get('authorization')\n    if header is None:\n        return None\n    return header.replace('Bearer ', '')", "fn_id": 0, "class_fn": false, "repo": "adacotech/terraform-aws-api-auth-proxy", "file": "modules/oauth2/lambda/authorizer/function.py", "last_update_at": "2021-09-17T03:22:05+00:00", "pred": {"ppl": 3.819749116897583, "ppl_lower": 6.371674537658691, "ppl/lowercase_ppl": -1.381796294672542, "ppl/zlib": 0.006837677266616766, "Min_5.0% Prob": 10.630590120951334, "Min_10.0% Prob": 8.835594245365687, "Min_20.0% Prob": 5.997791361808777, "Min_30.0% Prob": 4.3720902748729875, "Min_40.0% Prob": 3.3425600336443995, "Min_50.0% Prob": 2.6930492625404625, "Min_60.0% Prob": 2.2471028040856758}}
{"hexsha": "fbbdcaf00a8d9fa8c6f2f80cfad9ef55df7708dc", "ext": "py", "lang": "Python", "content": "def fromList(li: List[int]):\n    if len(li) == 0:\n        return None\n    root = TreeNode(val=li[0])\n    queue = [root]\n    i = 1\n    while i < len(li):\n        node = queue[0]\n        del queue[0]\n        if li[i] is not None:\n            node.left = TreeNode(val=li[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(li):\n            if li[i]:\n                node.right = TreeNode(val=li[i])\n                queue.append(node.right)\n            i += 1\n    return root", "fn_id": 0, "class_fn": false, "repo": "wanglongjiang/leetcode", "file": "easy/897-increasing-order-search-tree.py", "last_update_at": "2021-03-14T11:38:30+00:00", "pred": {"ppl": 1.4123648405075073, "ppl_lower": 1.7197126150131226, "ppl/lowercase_ppl": -1.5702617440620836, "ppl/zlib": 0.0016842219088964838, "Min_5.0% Prob": 5.463198355266026, "Min_10.0% Prob": 3.2696875631809235, "Min_20.0% Prob": 1.7201382122163116, "Min_30.0% Prob": 1.169631217389779, "Min_40.0% Prob": 0.8686654794848813, "Min_50.0% Prob": 0.6904817893746316, "Min_60.0% Prob": 0.5794024270576668}}
{"hexsha": "9a9f21e89303399d79c67e75c99b8d626266c51f", "ext": "py", "lang": "Python", "content": "def get_maximum_mutation_frequency(counts, distance_matrix, frequencies):\n    \"\"\"\n    # ========================================================================\n\n    GET MAXMIMUM MUTATION FREQUENCY\n\n    PURPOSE\n    -------\n\n    Returns the maximum mutation frequency of the haplotypes.\n\n\n    INPUT\n    -----\n\n    [INT LIST] [counts]\n        A haplotype counts, from the counts of the most abundant to the counts\n        of the least abundant haplotype.\n\n    [FLOAT LIST] [frequencies]\n        A list of (relative) frequencies of the Haplotypes.\n\n    [2D ARRAY] [distance_matrix]\n        A two dimensional array, representing the distance matrix of distances\n        between the sorted haplotypes.\n\n        This is expected to be calculated in a similar manner as:\n            haplotype.build_distiance_matrix(haplotypes)\n\n\n    RETURN\n    ------\n\n    [FLOAT] [maximum_mutation_frequency]\n        The maximum mutation frequency.\n\n    # ========================================================================\n    \"\"\"\n    H = len(counts)\n    F = frequencies\n    D = distance_matrix\n    maximum_mutation_frequency = calculate.maximum_mutation_frequency(H, F, D)\n    return maximum_mutation_frequency", "fn_id": 7, "class_fn": false, "repo": "phac-nml/quasitools", "file": "quasitools/commands/cmd_complexity.py", "last_update_at": "2021-03-15T07:28:20+00:00", "pred": {"ppl": 5.790465354919434, "ppl_lower": 6.004883766174316, "ppl/lowercase_ppl": -1.0207038927874779, "ppl/zlib": 0.0037768014205048503, "Min_5.0% Prob": 9.47551135222117, "Min_10.0% Prob": 8.369917770226797, "Min_20.0% Prob": 6.532732238372167, "Min_30.0% Prob": 5.182142345872644, "Min_40.0% Prob": 4.211593987400999, "Min_50.0% Prob": 3.4646443355767453, "Min_60.0% Prob": 2.924124933013769}}
{"hexsha": "e8db797381a8d4f3d0f04952d696026266dfabdc", "ext": "py", "lang": "Python", "content": "def add_zero(lst):\n    \"\"\" Add pulses for logical zero \"\"\"\n    pulse = 1875\n    space = 1875\n    lst.extend([pulse, space])\n    return lst", "fn_id": 2, "class_fn": false, "repo": "skbobade/UniversalRemote", "file": "src/irxm.py", "last_update_at": "2021-03-31T23:54:12+00:00", "pred": {"ppl": 9.456256866455078, "ppl_lower": 9.587196350097656, "ppl/lowercase_ppl": -1.0061209832873605, "ppl/zlib": 0.020996977800775928, "Min_5.0% Prob": 13.393769264221191, "Min_10.0% Prob": 10.487874269485474, "Min_20.0% Prob": 7.825357437133789, "Min_30.0% Prob": 6.548760096232097, "Min_40.0% Prob": 5.094332162071677, "Min_50.0% Prob": 4.337100863456726, "Min_60.0% Prob": 3.764028947353363}}
{"hexsha": "6e0e15f18889c25b4f39d64ec87555d40f8d8c97", "ext": "py", "lang": "Python", "content": "def apply_mask_criteria(column):\n    \"\"\"Apply simple masking criteria to a single column, and return '-' if the\n    column does not meet the criteria, and 'I' if it does.\n    \"\"\"\n    mask_char = '-'\n    num_seqs = len(column)\n    half_num_seqs = num_seqs / 2\n    num_gaps_in_col = column.count('-')\n    column_no_gaps = column.replace('-', '')\n    if column_no_gaps == '':\n        return mask_char\n    elif not column_no_gaps == '':\n        most_common_residue = collections.Counter(column_no_gaps).most_common(1)[0]\n        most_common_residue_count = most_common_residue[1]\n        percent_identity = most_common_residue_count * 100 / num_seqs\n        if num_gaps_in_col < num_seqs * 0.3:\n            mask_char = 'I'\n        if percent_identity >= 50:\n            mask_char = 'I'\n        return mask_char", "fn_id": 0, "class_fn": false, "repo": "laelbarlow/amoebae", "file": "amoebaelib/mask_nex.py", "last_update_at": "2021-11-28T08:32:05+00:00", "pred": {"ppl": 2.834628105163574, "ppl_lower": 3.068861246109009, "ppl/lowercase_ppl": -1.0762021262754478, "ppl/zlib": 0.003138285387766284, "Min_5.0% Prob": 8.999369819959005, "Min_10.0% Prob": 6.736672470966975, "Min_20.0% Prob": 4.540379998635273, "Min_30.0% Prob": 3.359967800852371, "Min_40.0% Prob": 2.57676621313606, "Min_50.0% Prob": 2.0862053057148318, "Min_60.0% Prob": 1.7358235380720017}}
{"hexsha": "d24a6419f9fcb2d3facd5e3d432818cfe2776fbb", "ext": "py", "lang": "Python", "content": "def get_activity_rawdata(cfg: DictConfig, id: int) -> pd.DataFrame:\n    \"\"\"query rawdata from strava api for a given id\n\n    Args:\n        cfg (DictConfig): configuration\n        id (int): activity id\n\n    Returns:\n        pd.DataFrame: activity rawdata\n    \"\"\"\n    with MySession(cfg) as session:\n        stream = session.get(cfg.api.BASE_URL + f'/activities/{id}/streams', params={'keys': ','.join(cfg.api.STREAMS)})\n    activity = dict()\n    found = list()\n    for values in stream.json():\n        activity[values['type']] = values['data']\n        found.append(values['type'])\n    res_df = pd.DataFrame(activity)\n    try:\n        res_df['lat'] = res_df['latlng'].apply(lambda x: x[0])\n        res_df['long'] = res_df['latlng'].apply(lambda x: x[-1])\n    except KeyError:\n        res_df['lat'], res_df['long'] = (np.nan, np.nan)\n    missings = set(cfg.api.STREAMS) - set(found)\n    if missings:\n        for missing in missings:\n            res_df[missing] = np.nan\n    res_df['id'] = id\n    if 'latlng' in res_df:\n        del res_df['latlng']\n    if cfg.TO_DB:\n        res_df['last_update'] = save_datetime_now()\n        with sqlite3.connect(call(cfg.DB)) as con:\n            res_df.to_sql('ACTIVITIES_RAW', con=con, if_exists='append', index=False, index_label='id')\n    time.sleep(cfg.api.SLEEP)\n    return res_df", "fn_id": 6, "class_fn": false, "repo": "Ektoplasmakugel/strava_datacollect", "file": "strava_datacollect/strava_query.py", "last_update_at": "2021-01-05T10:58:30+00:00", "pred": {"ppl": 2.9270517826080322, "ppl_lower": 3.316009521484375, "ppl/lowercase_ppl": -1.1161703066962092, "ppl/zlib": 0.0017491786627236812, "Min_5.0% Prob": 10.006932091712951, "Min_10.0% Prob": 7.45299077630043, "Min_20.0% Prob": 4.829108335077763, "Min_30.0% Prob": 3.4909032605588437, "Min_40.0% Prob": 2.6686380275990813, "Min_50.0% Prob": 2.14540969312191, "Min_60.0% Prob": 1.7895395607532312}}
{"hexsha": "66ec3f6ee6f74fd6f9a9ebdb2510fc97b493104f", "ext": "py", "lang": "Python", "content": "def get_output_dir(output_dir):\n    if not output_dir or os.path.isfile(output_dir):\n        output_dir = '.'\n    elif not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    return output_dir", "fn_id": 0, "class_fn": false, "repo": "bjwuzh/autocase", "file": "axxac/path_tool.py", "last_update_at": "2021-07-02T09:46:23+00:00", "pred": {"ppl": 1.7861363887786865, "ppl_lower": 1.7861363887786865, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.00542107331809529, "Min_5.0% Prob": 4.57976770401001, "Min_10.0% Prob": 3.8149077892303467, "Min_20.0% Prob": 2.6191189686457315, "Min_30.0% Prob": 1.893981086711089, "Min_40.0% Prob": 1.4421013536242147, "Min_50.0% Prob": 1.1594534809390704, "Min_60.0% Prob": 0.9666562048627788}}
{"hexsha": "95f32217242b488480e02ece9bfc4b27508cb75d", "ext": "py", "lang": "Python", "content": "def minimal(input_size=2, output_size=2, weight_low=-2, weight_high=2, depth=3):\n    \"\"\" Builds a minimal genome with specified inputs and\n    outputs, weight bounds, depth and one connected node in\n    the first layer.\n\n    :param input_size: Number of input nodes\n    :param output_size: Number of output nodes\n    :param weight_low: Maximum weight on node and edges\n    :param weight_high: Minimum weight on node and edges\n    :param depth: Number of layers in network.\n    :return: Constructed genome.\n    \"\"\"\n    genome = Genome(input_size=input_size, output_size=output_size, weight_low=weight_low, weight_high=weight_high, depth=depth)\n    genome.layers = [genome.inputs, *[[] for _ in range(depth)], genome.outputs]\n    genome.add_node(1)\n    for n in genome.inputs:\n        genome.add_edge(n, genome.layers[1][0])\n    for n in genome.outputs:\n        genome.add_edge(genome.layers[1][0], n)\n    return genome", "fn_id": 1, "class_fn": false, "repo": "mauicv/genrl", "file": "src/gerel/genome/factories.py", "last_update_at": "2021-03-25T23:29:07+00:00", "pred": {"ppl": 3.074192762374878, "ppl_lower": 3.239719867706299, "ppl/lowercase_ppl": -1.0466986084403314, "ppl/zlib": 0.003110920638488069, "Min_5.0% Prob": 8.834485014279684, "Min_10.0% Prob": 6.986487274169922, "Min_20.0% Prob": 4.836411154270172, "Min_30.0% Prob": 3.619589997927348, "Min_40.0% Prob": 2.78882700293371, "Min_50.0% Prob": 2.251796001095384, "Min_60.0% Prob": 1.8813601195109109}}
{"hexsha": "5d7651dffd876fa23e9cd979e7ddb5ed364b6b00", "ext": "py", "lang": "Python", "content": "def validate_bool(value):\n    \"\"\"Check that ``value`` is an boolean value.\"\"\"\n    if value not in (0, 1, False, True):\n        raise ValidationError(value, INVALID_BOOL)\n    return bool(value)", "fn_id": 4, "class_fn": false, "repo": "agarwalrounak/readthedocs.org", "file": "readthedocs/config/validation.py", "last_update_at": "2021-04-26T21:59:29+00:00", "pred": {"ppl": 5.039396286010742, "ppl_lower": 8.452159881591797, "ppl/lowercase_ppl": -1.3197552150680223, "ppl/zlib": 0.011231154794353196, "Min_5.0% Prob": 8.86375617980957, "Min_10.0% Prob": 7.864686965942383, "Min_20.0% Prob": 6.3761030832926435, "Min_30.0% Prob": 4.881654015609196, "Min_40.0% Prob": 3.9026421684967842, "Min_50.0% Prob": 3.222408006588618, "Min_60.0% Prob": 2.7165856001705957}}
{"hexsha": "65836e5e8c8f2024ffb8b16e84f296ad241bb07d", "ext": "py", "lang": "Python", "content": "def run_async(factor, func, *args, **kwargs):\n    \"\"\"\n    Asynchronously executes a callable within a :class:`hiro.Timeline`\n\n    :param int factor: scale factor to use for the timeline during execution\n    :param function func: the function to invoke\n    :param args: the arguments to pass to the function\n    :param kwargs: the keyword arguments to pass to the function\n    :returns: an instance of :class:`hiro.core.ScaledAsyncRunner`\n\n    \"\"\"\n    return ScaledAsyncRunner(factor, func, *args, **kwargs)", "fn_id": 1, "class_fn": false, "repo": "alisaifee/hiro", "file": "hiro/core.py", "last_update_at": "2021-04-07T15:42:23+00:00", "pred": {"ppl": 4.075323104858398, "ppl_lower": 5.3303656578063965, "ppl/lowercase_ppl": -1.1910885085825342, "ppl/zlib": 0.005757991938874509, "Min_5.0% Prob": 10.566522121429443, "Min_10.0% Prob": 8.31840991973877, "Min_20.0% Prob": 5.930925190448761, "Min_30.0% Prob": 4.413646951317787, "Min_40.0% Prob": 3.438896205276251, "Min_50.0% Prob": 2.792208650211493, "Min_60.0% Prob": 2.33787894468858}}
{"hexsha": "f3817abe4aba076e3056537deae3e73cf43cce08", "ext": "py", "lang": "Python", "content": "@patch('inventory.readers._logger', autospec=True)\ndef test_given_error_from_boto_then_account_is_skipped_but_others_still_processed(mock_logger):\n    os.environ['ACCOUNT_LIST'] = '[ { \"name\": \"foo\", \"id\": \"210987654321\" }, { \"name\": \"bar\", \"id\": \"123456789012\" } ]'\n    mock_mapper = Mock(spec=DataMapper)\n    mock_mapper.can_map.return_value = True\n    mock_mapper.map.return_value = [{'test': True}]\n    mock_select_resource_config = Mock(side_effect=[ClientError(error_response={'Error': {'Code': 'ResourceInUseException'}}, operation_name='select_resource_config'), {'NextToken': None, 'Results': [json.dumps({'resourceType': 'foobar'})]}])\n    mock_config_client_factory = Mock()\n    mock_config_client_factory.return_value.select_resource_config = mock_select_resource_config\n    reader = AwsConfigInventoryReader(lambda_context=MagicMock(), sts_client=Mock(), mappers=[mock_mapper])\n    reader._get_config_client = mock_config_client_factory\n    all_inventory = reader.get_resources_from_all_accounts()\n    assert len(all_inventory) == 1, 'inventory from the successful call should be returned'\n    assert len(mock_select_resource_config.mock_calls) == 2, 'boto should have been called twice to page through results'\n    mock_logger.error.assert_called_with(String() & Contains('moving onto next account'), ANY, ANY, exc_info=True)", "fn_id": 2, "class_fn": false, "repo": "Alpacked/fedramp-integrated-inventory-workbook", "file": "tests/test_inventory_reader.py", "last_update_at": "2021-12-15T22:29:08+00:00", "pred": {"ppl": 3.177417516708374, "ppl_lower": 4.3307342529296875, "ppl/lowercase_ppl": -1.2678632493078972, "ppl/zlib": 0.0017229042700370456, "Min_5.0% Prob": 9.05583565235138, "Min_10.0% Prob": 7.215342593193054, "Min_20.0% Prob": 4.977589897811413, "Min_30.0% Prob": 3.7018043120702107, "Min_40.0% Prob": 2.867724885698408, "Min_50.0% Prob": 2.3128051743097604, "Min_60.0% Prob": 1.9308028840188247}}
{"hexsha": "640f81533781b97654cf6abb19ee0b856a6e367b", "ext": "py", "lang": "Python", "content": "def th_mdn_loss_dense(gt, mu, sigma, pi, mask, V, **kwargs):\n    C = 17\n    BS = gt.shape[0]\n    M = pi.shape[1]\n    H = gt.shape[2]\n    W = gt.shape[3]\n    gt = gt.permute(0, 2, 3, 1)\n    mu = mu.permute(0, 2, 3, 1)\n    sigma = sigma.permute(0, 2, 3, 1)\n    pi = pi.permute(0, 2, 3, 1)\n    mask = mask.permute(0, 2, 3, 1)\n    lmask = (torch.sum(mask, 3) > 0).float()\n    mask = torch.reshape(mask[:, :, :, np.repeat(np.arange(C), 2)], (BS, H, W, 1, C * 2))\n    mask = mask.repeat(1, 1, 1, M, 1)\n    gt = gt.reshape(BS, H, W, 1, 2 * C)\n    gt = gt.repeat(1, 1, 1, M, 1)\n    mu = mu.reshape(BS, H, W, M, 2 * C)\n    V = torch.reshape(V[np.repeat(np.arange(C), 2)], (1, 1, 1, 1, C * 2))\n    sigma = torch.reshape(sigma, (BS, H, W, M, 2))[:, :, :, :, np.concatenate([np.arange(2) for _ in np.arange(C)])]\n    e = 0.5 * ((gt - mu) * torch.reciprocal(sigma) * torch.reciprocal(V)) ** 2\n    e = torch.where(mask > 0.0, e, torch.zeros_like(e))\n    e = torch.sum(e, -1)\n    nviskps = torch.sum(mask[:, :, :, :, 0::2] > 0.0, -1).float().detach()\n    sigma_y = sigma[:, :, :, :, 0]\n    sigma_x = sigma[:, :, :, :, 1]\n    PI = torch.tensor(np.pi).cuda()\n    coef = -nviskps * torch.log(sigma_y) - nviskps * torch.log(sigma_x) - nviskps * torch.log(2 * PI)\n    exponent = torch.log(pi) + coef - e\n    loss = -torch.squeeze(log_sum_exp(exponent, 3), 3)\n    if kwargs.get('debug', False):\n        print('exponent.shape', exponent.shape)\n        print('loss.shape', loss.shape)\n    loss = torch.sum(lmask * loss) / (1.0 + torch.sum(lmask))\n    return loss", "fn_id": 4, "class_fn": false, "repo": "alivaramesh/MixtureDenseRegression", "file": "src/lib/models/losses.py", "last_update_at": "2021-11-30T01:22:48+00:00", "pred": {"ppl": 2.2767601013183594, "ppl_lower": 2.3029327392578125, "ppl/lowercase_ppl": -1.0138923645730578, "ppl/zlib": 0.0013758418464598994, "Min_5.0% Prob": 7.581610549579967, "Min_10.0% Prob": 5.829579533952655, "Min_20.0% Prob": 3.717074862100128, "Min_30.0% Prob": 2.646783123612404, "Min_40.0% Prob": 2.0416972410578027, "Min_50.0% Prob": 1.6434110239394255, "Min_60.0% Prob": 1.3711905029648914}}
{"hexsha": "075a378bb5687e7c4ee731ece7a5af55df206c93", "ext": "py", "lang": "Python", "content": "def validate(model, dataset, opt, ctx):\n    \"\"\"Test on validation dataset.\"\"\"\n    detector = CenterDetector(opt)\n    detector.model = model\n    results = {}\n    num_iters = len(dataset)\n    bar = Bar('{}'.format(opt.exp_id), max=num_iters)\n    time_stats = ['tot', 'load', 'pre', 'net', 'dec', 'post', 'merge']\n    avg_time_stats = {t: AverageMeter() for t in time_stats}\n    print('Reporting every 1000 images...')\n    for ind in range(num_iters):\n        img_id = dataset.images[ind]\n        img_info = dataset.coco.loadImgs(ids=[img_id])[0]\n        img_path = os.path.join(dataset.img_dir, img_info['file_name'])\n        ret = detector.run(img_path)\n        results[img_id] = ret['results']\n        Bar.suffix = '[{0}/{1}]|Tot: {total:} |ETA: {eta:} '.format(ind, num_iters, total=bar.elapsed_td, eta=bar.eta_td)\n        for t in avg_time_stats:\n            avg_time_stats[t].update(ret[t])\n            Bar.suffix = Bar.suffix + '|{} {:.3f} '.format(t, avg_time_stats[t].avg)\n        if ind % 1000 == 0:\n            bar.next()\n    bar.finish()\n    val_dataset.run_eval(results=results, save_dir='./output/')", "fn_id": 3, "class_fn": false, "repo": "Guanghan/mxnet-centernet", "file": "train.py", "last_update_at": "2021-05-12T08:41:33+00:00", "pred": {"ppl": 1.5686150789260864, "ppl_lower": 1.9561855792999268, "ppl/lowercase_ppl": -1.4904635857247834, "ppl/zlib": 0.0008352376896731576, "Min_5.0% Prob": 5.607895255088806, "Min_10.0% Prob": 3.907486915588379, "Min_20.0% Prob": 2.2030470367107124, "Min_30.0% Prob": 1.4918895244460415, "Min_40.0% Prob": 1.1235232683441911, "Min_50.0% Prob": 0.8998588624268046, "Min_60.0% Prob": 0.7502099441836536}}
{"hexsha": "2b63ae4e99c2f9a3f9a1f7f166698e9931cfc29c", "ext": "py", "lang": "Python", "content": "def get_roc_data(df_test, df_prob, encoding):\n    tprs = []\n    aucs = []\n    mean_fpr = np.linspace(0, 1, 100)\n    for i in range(df_test.shape[0]):\n        y_true = df_test.iloc[i, :].dropna().values\n        y_pred = df_prob.iloc[i, :].dropna().values\n        fpr, tpr, _ = roc_curve(y_true, y_pred)\n        interp_tpr = np.interp(mean_fpr, fpr, tpr)\n        interp_tpr[0] = 0.0\n        tprs.append(interp_tpr)\n        aucs.append(roc_auc_score(y_true, y_pred))\n    mean_tpr = np.mean(tprs, axis=0)\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n    std_auc = np.std(aucs)\n    std_tpr = np.std(tprs, axis=0)\n    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)\n    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)\n    df = pd.DataFrame({'x': mean_fpr, 'y': mean_tpr, 'tprs_lower': tprs_lower, 'tprs_upper': tprs_upper})\n    df['Encoding'] = encoding\n    df['mean_auc'] = np.round(mean_auc, 2)\n    df['legend_label'] = df.apply(lambda row: f\"{row['Encoding']} (AUC: {row['mean_auc']})\", axis=1)\n    return df", "fn_id": 1, "class_fn": false, "repo": "spaenigs/peptidereactor", "file": "nodes/vis/sds_3_Curves/scripts/roc_pr_curve.py", "last_update_at": "2021-06-07T07:03:38+00:00", "pred": {"ppl": 1.444695234298706, "ppl_lower": 1.506832480430603, "ppl/lowercase_ppl": -1.114464659226742, "ppl/zlib": 0.0008248842798199941, "Min_5.0% Prob": 5.1799764156341555, "Min_10.0% Prob": 3.306452892175535, "Min_20.0% Prob": 1.8137398561144746, "Min_30.0% Prob": 1.2239958027726023, "Min_40.0% Prob": 0.9194867615999722, "Min_50.0% Prob": 0.7357530251011911, "Min_60.0% Prob": 0.613153910331986}}
{"hexsha": "d7d0cc76bd9ced96d824215c265e0b8c9d95c87b", "ext": "py", "lang": "Python", "content": "def get_unique_changed_packages(diffs):\n    packages_changed = {}\n    for change in diffs:\n        if len(change) != 2:\n            logging.debug(change)\n            continue\n        change_type, path = change\n        path_tokens = path.split('/')\n        if path_tokens[-1] in IGNORE_CHANGES_FILES:\n            continue\n        try:\n            package = Package(package_dir=path_tokens[0])\n        except PackageDoesNotExistException:\n            continue\n        if package.package_name not in packages_changed:\n            packages_changed.update({package.package_name: package})\n    return packages_changed", "fn_id": 2, "class_fn": false, "repo": "r-kells/scream", "file": "scream/detect_changed_packages.py", "last_update_at": "2021-11-22T18:45:19+00:00", "pred": {"ppl": 3.1814005374908447, "ppl_lower": 4.23478364944458, "ppl/lowercase_ppl": -1.2471316008580753, "ppl/zlib": 0.004133291144392884, "Min_5.0% Prob": 7.156760056813558, "Min_10.0% Prob": 5.83667281957773, "Min_20.0% Prob": 4.559422042634752, "Min_30.0% Prob": 3.6069135331526034, "Min_40.0% Prob": 2.859170233209928, "Min_50.0% Prob": 2.309155370820971, "Min_60.0% Prob": 1.9270546078772806}}
{"hexsha": "bc24e936ef606bdcce7d65b0ddb291682889d4ea", "ext": "py", "lang": "Python", "content": "def tx_register(tx, cursor):\n    payload = json.loads(tx.payload)\n    owner = models.Account(tx.chain_id, tx.sender, cursor)\n    parcel = models.Parcel(tx.chain_id, payload['target'], owner.address, cursor)\n    storage = models.Storage(tx.chain_id, parcel.storage_id, None, cursor)\n    host = models.Account(tx.chain_id, storage.owner, cursor)\n    parcel.custody = payload['custody']\n    if parcel.custody != None and len(parcel.custody) > 100:\n        parcel.custody = parcel.custody[:100]\n    parcel.proxy_account = payload.get('proxy_account', None)\n    if parcel.proxy_account != None and len(parcel.proxy_account) > 40:\n        parcel.proxy_account = parcel.proxy_account[:40]\n    parcel.extra = payload.get('extra', '{}')\n    parcel.on_sale = True\n    parcel.save(cursor)\n    owner.balance -= storage.registration_fee\n    owner.save(cursor)\n    host.balance += storage.registration_fee\n    host.save(cursor)", "fn_id": 7, "class_fn": false, "repo": "MECTrace/edge-data-chain-explorer", "file": "crawler/tx.py", "last_update_at": "2021-12-17T08:52:58+00:00", "pred": {"ppl": 2.7595365047454834, "ppl_lower": 2.875584840774536, "ppl/lowercase_ppl": -1.0405820670533938, "ppl/zlib": 0.003021020037391346, "Min_5.0% Prob": 9.351059436798096, "Min_10.0% Prob": 7.163545535160945, "Min_20.0% Prob": 4.5661919161958515, "Min_30.0% Prob": 3.2668711476027967, "Min_40.0% Prob": 2.509696667717996, "Min_50.0% Prob": 2.028519388177057, "Min_60.0% Prob": 1.6942995075390945}}
{"hexsha": "a6ecbbb0e40168d4238d3a4dc7a1087809d1ed3f", "ext": "py", "lang": "Python", "content": "@box.cron('0 3 * * *')\nasync def refresh_db(bot):\n    logger.info('refresh subway')\n    tasks = []\n    for service_region, api_version in REGION_TABLE.values():\n        tasks.append(fetch_station_db(bot, service_region, api_version))\n    await asyncio.wait(tasks)", "fn_id": 2, "class_fn": false, "repo": "item4/yui", "file": "yui/apps/search/subway.py", "last_update_at": "2021-01-31T17:57:41+00:00", "pred": {"ppl": 6.638467788696289, "ppl_lower": 6.602448463439941, "ppl/lowercase_ppl": -0.9971257453179695, "ppl/zlib": 0.010343613017191052, "Min_5.0% Prob": 9.906183878580729, "Min_10.0% Prob": 8.557998180389404, "Min_20.0% Prob": 6.933446280161539, "Min_30.0% Prob": 5.711565121360447, "Min_40.0% Prob": 4.604393687940413, "Min_50.0% Prob": 3.7451017720577044, "Min_60.0% Prob": 3.195105952737124}}
{"hexsha": "70836ca1748caea3d326c0101f9ea4804dc8b95e", "ext": "py", "lang": "Python", "content": "def save_3D_animation(embeddings, emb_space_sizes, train_losses, test_losses, opt_name, n_bins=10, horizon_size=10, cmap_name='jet', **plotting_kwargs):\n    \"\"\"Utility function for visualizing the changes in weights over time in\n    UMAP space. The visualization is in 3D for better appreciating the descent\n    on the error surface.\n\n        Args:\n            - embeddings: list of embeddings, result of alligned UMAP\n            - emb_space_sizes: list of arrays, define the limits of the\n                embedding space for the three layers of the MLP.\n            - train_losses: list, training losses history.\n            - test_losses: list, test losses.\n            - opt_name: string, name of the optimizer used.\n            - n_bins: int, number of bins for discretizing the training loss.\n            -  horizon_size: int, maximum number of points simultaneously\n                on screen.\n            - cmap_name: string, name of the colormap used for representing\n                the change in train losses.\n            - **plotting_kwargs: keyword arguments, keyword arguments for the\n                plotting function.\n\n        Returns:\n            - None\n    \"\"\"\n    discretizer = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy='uniform')\n    cmap = matplotlib.cm.get_cmap(cmap_name)\n    colors = np.array(train_losses)\n    colors = discretizer.fit_transform(colors.reshape(-1, 1)).flatten()\n    norm = plt.Normalize(colors.min(), colors.max())\n    for i in tqdm(range(embeddings[0].shape[0])):\n        fig, axs = plt.subplots(1, 3, figsize=(30, 10), subplot_kw=dict(projection='3d'))\n        for index, emb in enumerate(embeddings):\n            min_sizes, max_sizes = emb_space_sizes[index]\n            past_horizon = max(0, i - horizon_size)\n            axs[index].scatter(emb[past_horizon:i, 0], emb[past_horizon:i, 1], train_losses[past_horizon:i], c=[cmap(norm(color)) for color in colors[past_horizon:i]], **plotting_kwargs)\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=train_losses[past_horizon:i], c='grey', zdir='y', zs=max_sizes[1], linewidth=5, alpha=0.25)\n            axs[index].plot(xs=emb[past_horizon:i, 1], ys=train_losses[past_horizon:i], c='grey', zdir='x', linewidth=5, alpha=0.25, zs=min_sizes[0])\n            axs[index].plot(xs=emb[past_horizon:i, 0], ys=emb[past_horizon:i, 1], c='grey', zdir='z', linewidth=5, alpha=0.25, zs=min_sizes[2])\n            axs[index].text2D(0.05, 0.95, f'Layer {index + 1}', transform=axs[index].transAxes)\n            if index == 1:\n                axs[index].text2D(0.5, 1.1, f'Optimizer: {opt_name}                     \\nTrain Loss: {round(train_losses[i], 3)}                     \\n Test Loss: {round(test_losses[i], 3)}', transform=axs[index].transAxes)\n            elif index == 2:\n                axs[index].set_xlabel('Weights Space \\n UMAP 1')\n                axs[index].set_ylabel('Weights Space \\n UMAP 2')\n                axs[index].set_zlabel('Trainining Loss')\n        if not os.path.exists(f'results\\\\3D_{opt_name}'):\n            os.makedirs(f'results\\\\3D_{opt_name}')\n        plt.savefig(f'results\\\\3D_{opt_name}\\\\{i}.png', bbox_inches='tight')\n        plt.close('all')\n    return None", "fn_id": 0, "class_fn": false, "repo": "vb690/machine_learning_exercises", "file": "shops/visualize_gradient_descent/utilities/viz_utils.py", "last_update_at": "2021-04-26T19:06:06+00:00", "pred": {"ppl": 2.677513599395752, "ppl_lower": 2.9393579959869385, "ppl/lowercase_ppl": -1.0947341517536444, "ppl/zlib": 0.0008410662702530069, "Min_5.0% Prob": 9.32248613682199, "Min_10.0% Prob": 7.04208594372398, "Min_20.0% Prob": 4.545553722306696, "Min_30.0% Prob": 3.217967467187168, "Min_40.0% Prob": 2.448245313233106, "Min_50.0% Prob": 1.9690900241030649, "Min_60.0% Prob": 1.6409689745009206}}
{"hexsha": "2096e74d026f92b88f279c71ae6c465be2f77b95", "ext": "py", "lang": "Python", "content": "def is_accuracy_aware_training(config: NNCFConfig, compression_config_passed: bool=False) -> bool:\n    \"\"\"\n    Returns True if the compression config contains an accuracy-aware\n    training related section, False otherwise.\n    \"\"\"\n    compression_config = config.get('compression', {}) if not compression_config_passed else config\n    if isinstance(compression_config, list):\n        for algo_config in compression_config:\n            if algo_config.get('accuracy_aware_training') is not None:\n                return True\n        return False\n    if compression_config.get('accuracy_aware_training') is not None:\n        return True\n    return False", "fn_id": 0, "class_fn": false, "repo": "sarthakpati/nncf", "file": "nncf/config/utils.py", "last_update_at": "2021-07-23T07:46:52+00:00", "pred": {"ppl": 2.3555068969726562, "ppl_lower": 3.3732802867889404, "ppl/lowercase_ppl": -1.4191738660296906, "ppl/zlib": 0.0031849663464045327, "Min_5.0% Prob": 7.154354776654925, "Min_10.0% Prob": 5.279905029705593, "Min_20.0% Prob": 3.6153910628386905, "Min_30.0% Prob": 2.718098284233184, "Min_40.0% Prob": 2.1180218064359257, "Min_50.0% Prob": 1.7082569804574763, "Min_60.0% Prob": 1.426773094450168}}
{"hexsha": "f4d5118418f49eeb3e5a0e0d7756f5a28b10fda6", "ext": "py", "lang": "Python", "content": "def decoder_layer(input_prob, input_aspect, n_hidden, n_class, n_aspects, random_base, l2_reg, sub_vocab, FLAGS, scope_name='1', use_aspect=True):\n    \"\"\"\n    Decoder structure of the autoencoder-like model taht reconstructs the sentence using the sentimenet embedding matrix\n\n    :param input_prob:\n    :param input_aspect:\n    :param n_hidden:\n    :param n_class:\n    :param n_aspects:\n    :param random_base:\n    :param l2_reg:\n    :param sub_vocab:\n    :param FLAGS:\n    :param scope_name:\n    :param use_aspect:\n    :return:\n    \"\"\"\n    w = tf.get_variable(name='sentiment_embedding' + scope_name, shape=[n_class, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    if use_aspect:\n        w_aspect = tf.get_variable(name='aspect_w' + scope_name, shape=[n_aspects, n_hidden], initializer=tf.random_uniform_initializer(-random_base, random_base), regularizer=tf.keras.regularizers.L2(l2_reg), trainable=True)\n    batch_size = tf.shape(input_prob)[0]\n    if use_aspect:\n        outputs = tf.matmul(input_prob, w) + tf.matmul(input_aspect, w_aspect)\n    else:\n        outputs = tf.matmul(input_prob, w)\n    return (outputs, w)", "fn_id": 3, "class_fn": false, "repo": "LucaZampierin/ABSE", "file": "nn_layer.py", "last_update_at": "2021-10-17T13:53:20+00:00", "pred": {"ppl": 2.532641649246216, "ppl_lower": 2.6415255069732666, "ppl/lowercase_ppl": -1.0452979519644798, "ppl/zlib": 0.0021119611094353283, "Min_5.0% Prob": 9.10539870513113, "Min_10.0% Prob": 6.986778943162215, "Min_20.0% Prob": 4.43207980849241, "Min_30.0% Prob": 3.079501625607934, "Min_40.0% Prob": 2.325677285987982, "Min_50.0% Prob": 1.8629000376174716, "Min_60.0% Prob": 1.5527521337218084}}
{"hexsha": "c4ee4862ccbeff5f750d6e6bb757e31dbab056f4", "ext": "py", "lang": "Python", "content": "def solve_format_ArithOperation(optree, integer_size_func=lambda lhs_prec, rhs_prec: None, frac_size_func=lambda lhs_prec, rhs_prec: None, signed_func=lambda lhs, lhs_prec, rhs, rhs_prec: False, format_solver=None):\n    \"\"\" determining fixed-point format for a generic 2-op arithmetic\n        operation (e.g. Multiplication, Addition, Subtraction)\n    \"\"\"\n    lhs = optree.get_input(0)\n    rhs = optree.get_input(1)\n    lhs_precision = lhs.get_precision()\n    rhs_precision = rhs.get_precision()\n    abstract_operation = lhs_precision is ML_Integer and rhs_precision is ML_Integer\n    if abstract_operation:\n        return ML_Integer\n    if lhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(lhs, input_prec_solver=format_solver)\n        lhs_precision = solve_format_Constant(Constant(cst_eval))\n    if rhs_precision is ML_Integer:\n        cst_eval = evaluate_cst_graph(rhs, input_prec_solver=format_solver)\n        rhs_precision = solve_format_Constant(Constant(cst_eval))\n    if is_fixed_point(lhs_precision) and is_fixed_point(rhs_precision):\n        int_size = integer_size_func(lhs_precision, rhs_precision)\n        frac_size = frac_size_func(lhs_precision, rhs_precision)\n        is_signed = signed_func(lhs, lhs_precision, rhs, rhs_precision)\n        return fixed_point(int_size, frac_size, signed=is_signed)\n    else:\n        return optree.get_precision()", "fn_id": 3, "class_fn": false, "repo": "nibrunie/metalibm", "file": "metalibm_core/opt/p_size_datapath.py", "last_update_at": "2021-03-12T18:54:53+00:00", "pred": {"ppl": 2.7436234951019287, "ppl_lower": 2.8837616443634033, "ppl/lowercase_ppl": -1.0493580605722206, "ppl/zlib": 0.0022886156240581193, "Min_5.0% Prob": 10.083425973591051, "Min_10.0% Prob": 7.6641385066203584, "Min_20.0% Prob": 4.720396612263933, "Min_30.0% Prob": 3.331353638636864, "Min_40.0% Prob": 2.52230907724345, "Min_50.0% Prob": 2.0178169431917445, "Min_60.0% Prob": 1.6863040541380228}}
{"hexsha": "bc8a29dc53319c769a4b51f92593b8f3fdee45c6", "ext": "py", "lang": "Python", "content": "def update_df_all(df_all, training_data, validation_data, test_data):\n    \"\"\"Add a column \"group\" to df_all indicating train/validation or test\"\"\"\n    df_all['group'] = 0\n    for simu_name in training_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'train'\n    for simu_name in validation_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'validation'\n    for simu_name in test_data:\n        df_all['group'][df_all['topo_name'] == simu_name] = 'test'\n    return df_all", "fn_id": 1, "class_fn": false, "repo": "louisletoumelin/wind_downscaling_cnn", "file": "pre_process/preprocess_folds.py", "last_update_at": "2021-12-13T16:26:31+00:00", "pred": {"ppl": 2.213892936706543, "ppl_lower": 2.2229506969451904, "ppl/lowercase_ppl": -1.0051374239602875, "ppl/zlib": 0.004272862772649118, "Min_5.0% Prob": 8.721404314041138, "Min_10.0% Prob": 6.350577250123024, "Min_20.0% Prob": 3.800111895427108, "Min_30.0% Prob": 2.6267487583111744, "Min_40.0% Prob": 2.003756097274331, "Min_50.0% Prob": 1.5894080570788214, "Min_60.0% Prob": 1.329986004728161}}
{"hexsha": "6bef08836876832f7516142a645d88720de907e9", "ext": "py", "lang": "Python", "content": "def update_image_metadata_from_image_path(image_path: str, metadata: Dict):\n    \"\"\" \"\"\"\n    pickled = codecs.encode(pickle.dumps(metadata), 'base64').decode()\n    db = get_db()\n    cur = db.cursor()\n    cur.execute(f'UPDATE images SET metadata = \"{pickled}\" WHERE path = \"{image_path}\" AND metadata IS NULL')\n    db.commit()", "fn_id": 0, "class_fn": false, "repo": "frederikgram/describe", "file": "dev/frontend/models/database_updaters.py", "last_update_at": "2021-03-10T01:32:19+00:00", "pred": {"ppl": 3.114614486694336, "ppl_lower": 3.193060874938965, "ppl/lowercase_ppl": -1.021894618869451, "ppl/zlib": 0.005410025639474937, "Min_5.0% Prob": 10.353180170059204, "Min_10.0% Prob": 7.406939427057902, "Min_20.0% Prob": 5.057493872112698, "Min_30.0% Prob": 3.6268101249422346, "Min_40.0% Prob": 2.8328569249526874, "Min_50.0% Prob": 2.256344143856079, "Min_60.0% Prob": 1.9022116854653828}}
{"hexsha": "6c468eb327991e8438e939f0e8280fc938e87e2b", "ext": "py", "lang": "Python", "content": "def float_sanitiser():\n\n    def sanitise(n, debug_name):\n        if not isinstance(n, float):\n            raise CefTypeError('{}: Expected float, got {}'.format(debug_name, type(n)))\n        else:\n            return str(n)\n    return sanitise", "fn_id": 3, "class_fn": false, "repo": "slallum/format_cef", "file": "src/format_cef/_cef/base.py", "last_update_at": "2021-04-28T08:58:00+00:00", "pred": {"ppl": 6.604551315307617, "ppl_lower": 7.422276973724365, "ppl/lowercase_ppl": -1.0618335682645081, "ppl/zlib": 0.012338294147716663, "Min_5.0% Prob": 9.838570435841879, "Min_10.0% Prob": 8.327081998189291, "Min_20.0% Prob": 6.626582344373067, "Min_30.0% Prob": 5.4764765236112805, "Min_40.0% Prob": 4.479110812147458, "Min_50.0% Prob": 3.7144968777894976, "Min_60.0% Prob": 3.136378306481573}}
{"hexsha": "22b492bfb5e030f558182e6d784c2ccfc5064429", "ext": "py", "lang": "Python", "content": "def hive_copy_to_table(source_dataset, source_table_name, destination_dataset, destination_table_name, s3_step_path, local_step_path, action_id, set_hive_vars, step_num, steps_total):\n    hive_source_path = os.path.join(local_step_path, 'hive', 'copy_to_table.hql')\n    hive_target_path = os.path.join(local_step_path, 'hive', 'copy_to_table_%s.hql' % destination_table_name)\n    with open(hive_source_path, 'r') as s, open(hive_target_path, 'w') as t:\n        contents = s.read().format(source_table_name=source_table_name, destination_table_name=destination_table_name, partitions=get_partitions(source_dataset), columns=get_columns(source_dataset, destination_dataset), compression=get_emr_compression(destination_dataset), set_hive_vars=set_hive_vars if set_hive_vars else '')\n        t.write(contents)\n    return StepWrapper(JarStep(name='dart: (%s) copy_to_table_%s.hql (from %s)' % (_title_data(action_id, step_num, steps_total), destination_table_name, source_table_name), jar=_command_runner_jar, action_on_failure='CONTINUE', step_args=_hive_args + [s3_step_path + '/hive/copy_to_table_%s.hql' % destination_table_name]), step_num, steps_total)", "fn_id": 4, "class_fn": false, "repo": "RetailMeNotSandbox/dart", "file": "src/python/dart/engine/emr/steps.py", "last_update_at": "2021-07-14T22:37:35+00:00", "pred": {"ppl": 3.233787775039673, "ppl_lower": 3.4218878746032715, "ppl/lowercase_ppl": -1.0481728570732705, "ppl/zlib": 0.0027230954430312922, "Min_5.0% Prob": 10.643235683441162, "Min_10.0% Prob": 8.02724241582971, "Min_20.0% Prob": 5.256231137012181, "Min_30.0% Prob": 3.8124429128671946, "Min_40.0% Prob": 2.9302100969576523, "Min_50.0% Prob": 2.3446566863326814, "Min_60.0% Prob": 1.9574135528352745}}
{"hexsha": "1a8166a42e84641b39cb8babc256e3c8ddcff393", "ext": "py", "lang": "Python", "content": "def check_post_status(func):\n    \"\"\"\n     call the func only if the smc.setting is not already posted via API\n    Args:\n        func:write_file\n\n    Returns:\n        wrapper: confirmation if the smc.settings file has been posted already\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        if os.environ.get('stealth_watch_post', '0') == '0':\n            func(*args, **kwargs)\n        else:\n            print(f'{Style.RED}smc.setting file data is already posted to smc server from this machine, so skipping the operation for function {func.__qualname__}{Style.RESET}')\n            print(f'{Style.GREEN}Thank you!{Style.RESET}')\n    return wrapper", "fn_id": 2, "class_fn": false, "repo": "CiscoDevNet/sna-initial-config-setup-script", "file": "utils/misc.py", "last_update_at": "2021-12-23T20:16:15+00:00", "pred": {"ppl": 9.222708702087402, "ppl_lower": 9.653993606567383, "ppl/lowercase_ppl": -1.0205714260813257, "ppl/zlib": 0.006496107543560986, "Min_5.0% Prob": 13.067215323448181, "Min_10.0% Prob": 10.650293618440628, "Min_20.0% Prob": 7.719354093074799, "Min_30.0% Prob": 6.178596794605255, "Min_40.0% Prob": 5.171247683465481, "Min_50.0% Prob": 4.362380628287792, "Min_60.0% Prob": 3.7043301632317402}}
{"hexsha": "1380364880e72805de31c21c228ab7d9dbd45947", "ext": "py", "lang": "Python", "content": "def update_activity_notice_seed_date_of_notice_earlier_than_update_window(activity_notice_seed):\n    status = ''\n    success = True\n    activity_notice_seed_changed = False\n    from activity.models import get_lifespan_of_seed\n    lifespan_of_seed_in_seconds = get_lifespan_of_seed(activity_notice_seed.kind_of_seed)\n    earliest_date_of_notice = now() - timedelta(seconds=lifespan_of_seed_in_seconds)\n    if activity_notice_seed.date_of_notice < earliest_date_of_notice:\n        try:\n            activity_notice_seed.date_of_notice_earlier_than_update_window = True\n            activity_notice_seed.save()\n            activity_notice_seed_changed = True\n            status += 'DATE_OF_NOTICE_EARLIER_THAN_UPDATE_WINDOW_SET_TRUE '\n        except Exception as e:\n            status += 'COULD_NOT_UPDATE-date_of_notice_earlier_than_update_window: ' + str(e) + ' '\n            success = False\n    results = {'success': success, 'status': status, 'activity_notice_seed': activity_notice_seed, 'activity_notice_seed_changed': activity_notice_seed_changed, 'date_of_notice_earlier_than_update_window': activity_notice_seed.date_of_notice_earlier_than_update_window}\n    return results", "fn_id": 24, "class_fn": false, "repo": "aucoeur/WeVoteServer", "file": "activity/controllers.py", "last_update_at": "2021-03-17T02:08:26+00:00", "pred": {"ppl": 2.157156229019165, "ppl_lower": 2.279545307159424, "ppl/lowercase_ppl": -1.0717818205181753, "ppl/zlib": 0.001976325947633442, "Min_5.0% Prob": 7.9381064527175, "Min_10.0% Prob": 6.038104723481571, "Min_20.0% Prob": 3.681059909903485, "Min_30.0% Prob": 2.533217146491202, "Min_40.0% Prob": 1.9275546881329755, "Min_50.0% Prob": 1.5414874307902777, "Min_60.0% Prob": 1.2825040158389198}}
{"hexsha": "6f641f627b8305f23c544478d79bdef1903c7e0c", "ext": "py", "lang": "Python", "content": "def sample_mask(idx, l):\n    \"\"\"Create mask.\"\"\"\n    mask = np.zeros(l)\n    mask[idx] = 1\n    return np.array(mask, dtype=np.bool)", "fn_id": 1, "class_fn": false, "repo": "psychologyphd/HWGCN", "file": "utils.py", "last_update_at": "2021-08-04T09:31:04+00:00", "pred": {"ppl": 1.5264647006988525, "ppl_lower": 1.8974812030792236, "ppl/lowercase_ppl": -1.5144122181546573, "ppl/zlib": 0.0039162445239625384, "Min_5.0% Prob": 6.434457778930664, "Min_10.0% Prob": 4.061605781316757, "Min_20.0% Prob": 2.189924407750368, "Min_30.0% Prob": 1.3992390489348998, "Min_40.0% Prob": 1.0841145839761286, "Min_50.0% Prob": 0.8431183559058065, "Min_60.0% Prob": 0.7148862990837258}}
{"hexsha": "6f3e2a72a770d5215943ec27b58899302ae9bfa0", "ext": "py", "lang": "Python", "content": "def table_args(model: Base) -> None:\n\n    def create_new_column(column: sa.Column) -> sa.Column:\n        attributes: List[str] = ['name', 'type', 'key', 'primary_key', 'nullable', 'default', 'server_default', 'server_onupdate', 'index', 'unique', 'system', 'doc', 'onupdate', 'autoincrement', 'comment']\n        kwargs: Dict[str, Any] = {a: getattr(column, a, None) for a in attributes}\n        kwargs['type_']: 'TypeEngine' = kwargs.get('type', None)\n        del kwargs['type']\n        return sa.Column(**kwargs)\n    columns: List[sa.Column] = list(map(create_new_column, model.__table__.columns.values()))\n    return (model.__tablename__, *columns)", "fn_id": 0, "class_fn": false, "repo": "h4wldev/seed", "file": "migrations/utils.py", "last_update_at": "2021-06-01T06:23:41+00:00", "pred": {"ppl": 2.854461193084717, "ppl_lower": 3.5793066024780273, "ppl/lowercase_ppl": -1.215739955741934, "ppl/zlib": 0.0031216758968275115, "Min_5.0% Prob": 8.166007465786404, "Min_10.0% Prob": 6.231655147340563, "Min_20.0% Prob": 4.454220829783259, "Min_30.0% Prob": 3.353296102157661, "Min_40.0% Prob": 2.6057363710800807, "Min_50.0% Prob": 2.0988015446891177, "Min_60.0% Prob": 1.7525758225207044}}
{"hexsha": "fe84bfb3726301394e904f8a5ed253c3c9774c54", "ext": "py", "lang": "Python", "content": "def enlarge_bbox(bbox, im_size, ratio=0.15):\n    width, height = (bbox[2] - bbox[0], bbox[3] - bbox[1])\n    half_width_inc, half_height_inc = ((width * ratio).astype(np.int32), (height * ratio).astype(np.int32))\n    bbox[0], bbox[1], bbox[2], bbox[3] = (bbox[0] - half_width_inc, bbox[1] - half_height_inc, bbox[2] + half_width_inc, bbox[3] + half_height_inc)\n    bbox[0], bbox[1] = (max(bbox[0], 0), max(bbox[1], 0))\n    bbox[3], bbox[2] = (min(bbox[3], im_size[0]), min(bbox[2], im_size[1]))\n    return bbox", "fn_id": 0, "class_fn": false, "repo": "ErestorX/Buddha_alignment", "file": "generate_dataset.py", "last_update_at": "2021-05-10T08:27:46+00:00", "pred": {"ppl": 1.8061286211013794, "ppl_lower": 1.8061286211013794, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.0027243579319372593, "Min_5.0% Prob": 7.576416015625, "Min_10.0% Prob": 5.118918152082534, "Min_20.0% Prob": 2.8962178482186225, "Min_30.0% Prob": 1.9736747910224257, "Min_40.0% Prob": 1.4844108454750053, "Min_50.0% Prob": 1.1878810120569099, "Min_60.0% Prob": 0.989969451978155}}
{"hexsha": "13d942d0b49cb364c495b965f3f53cdb29e47d14", "ext": "py", "lang": "Python", "content": "def line_counts_as_uncovered(line: str, is_from_cover_annotation_file: bool) -> bool:\n    \"\"\"\n    Args:\n        line: The line of code (including coverage annotation).\n        is_from_cover_annotation_file: Whether this line has been annotated.\n    Returns:\n        Does the line count as uncovered?\n    \"\"\"\n    if is_from_cover_annotation_file:\n        if not line.startswith('! '):\n            return False\n        content = line[2:]\n    else:\n        content = line\n    content = content.strip()\n    if '#' in content:\n        content = content[:content.index('#')].strip()\n    if any((re.search(pat, content) for pat in IGNORED_LINE_PATTERNS)):\n        return False\n    return is_from_cover_annotation_file or line_content_counts_as_uncovered_manual(content)", "fn_id": 6, "class_fn": false, "repo": "Uzayyy/Cirq", "file": "dev_tools/incremental_coverage.py", "last_update_at": "2021-03-07T19:34:28+00:00", "pred": {"ppl": 3.783745527267456, "ppl_lower": 4.4388251304626465, "ppl/lowercase_ppl": -1.1199921876532533, "ppl/zlib": 0.003879633817093945, "Min_5.0% Prob": 8.909451908535427, "Min_10.0% Prob": 7.6728388886702685, "Min_20.0% Prob": 5.681681345670651, "Min_30.0% Prob": 4.220923500545954, "Min_40.0% Prob": 3.307162799896338, "Min_50.0% Prob": 2.663845601814742, "Min_60.0% Prob": 2.2196564020241722}}
{"hexsha": "3013d6318ebcca79568b59c329de03eb84f3b683", "ext": "py", "lang": "Python", "content": "def save_builtin(img, path):\n    path.parent.mkdir(parents=True, exist_ok=True)\n    img.filepath = str(path).replace('.png', '-builtinsave.png')\n    img.file_format = 'PNG'\n    img.save()\n    log.info(f'wrote {path}')", "fn_id": 0, "class_fn": false, "repo": "drewp/megasecond", "file": "world_export/image.py", "last_update_at": "2021-04-06T07:51:27+00:00", "pred": {"ppl": 4.347661972045898, "ppl_lower": 5.90986442565918, "ppl/lowercase_ppl": -1.2088845156787538, "ppl/zlib": 0.009301507739981544, "Min_5.0% Prob": 11.499190330505371, "Min_10.0% Prob": 8.83617877960205, "Min_20.0% Prob": 6.472950799124582, "Min_30.0% Prob": 4.7365610883349465, "Min_40.0% Prob": 3.6640367827245166, "Min_50.0% Prob": 2.9705415751252855, "Min_60.0% Prob": 2.481874112793732}}
{"hexsha": "0322be0d34cfd540d38d08178833c28642a03567", "ext": "py", "lang": "Python", "content": "def MinSpanning(n, m):\n    dt = defaultdict(list)\n    for i in range(m):\n        x, y, w = map(int, input().slpit())\n        dt[x].append([y, w])\n        dt[y].append([x, w])\n    parent = [-1] * n\n    key = [float('inf')] * n\n    mstSet = [False] * n\n    prq = [(0, 0)]\n    key[0] = 0\n    for i in range(n - 1):\n        u = heappop(prq)[1]\n        mstSet[u] = True\n        for x, w in dt[u]:\n            if not mstSet[x] and w < key[x]:\n                parent[x] = u\n                key[x] = w\n                heappush(prq, (key[x], x))", "fn_id": 0, "class_fn": false, "repo": "Saicharan67/Interview-Coding-Questions", "file": "Graphs/MinSpanningTreeByPrims.py", "last_update_at": "2021-11-04T03:30:00+00:00", "pred": {"ppl": 1.8770179748535156, "ppl_lower": 1.9963685274124146, "ppl/lowercase_ppl": -1.0978989893263316, "ppl/zlib": 0.0023495684101950062, "Min_5.0% Prob": 8.799003071255154, "Min_10.0% Prob": 5.506111000713549, "Min_20.0% Prob": 3.085321076405354, "Min_30.0% Prob": 2.10684149346218, "Min_40.0% Prob": 1.572715020380341, "Min_50.0% Prob": 1.2655622890895981, "Min_60.0% Prob": 1.0494035946550524}}
{"hexsha": "715d0f56efd10b24b6c396c628f36713f9d9d35a", "ext": "py", "lang": "Python", "content": "def is_frozen():\n    \"\"\"Return a bool indicating if application is compressed\"\"\"\n    import imp\n    return hasattr(sys, 'frozen') or imp.is_frozen('__main__')", "fn_id": 4, "class_fn": false, "repo": "zywek123/accessible_output2", "file": "build/lib/accessible_output2/platform_utils/paths.py", "last_update_at": "2021-11-29T05:20:10+00:00", "pred": {"ppl": 4.173793315887451, "ppl_lower": 4.639789581298828, "ppl/lowercase_ppl": -1.0740774443675, "ppl/zlib": 0.011430602323135789, "Min_5.0% Prob": 10.28190803527832, "Min_10.0% Prob": 8.255906899770102, "Min_20.0% Prob": 5.605493613651821, "Min_30.0% Prob": 4.32109779661352, "Min_40.0% Prob": 3.434674366315206, "Min_50.0% Prob": 2.7948340208906877, "Min_60.0% Prob": 2.4434067207303913}}
{"hexsha": "9c4f0f1dce62fe32e46d081a9b30a7b8429010c4", "ext": "py", "lang": "Python", "content": "def test_offline_chunked():\n    r = http('--offline', '--chunked', '--form', 'https://this-should.never-resolve/foo', 'hello=world')\n    assert 'POST /foo' in r\n    assert 'Transfer-Encoding: chunked' in r, r\n    assert 'hello=world' in r", "fn_id": 5, "class_fn": false, "repo": "Wallyhs04/httpie", "file": "tests/test_offline.py", "last_update_at": "2021-05-29T14:40:37+00:00", "pred": {"ppl": 4.652289390563965, "ppl_lower": 5.644421577453613, "ppl/lowercase_ppl": -1.1257404614783721, "ppl/zlib": 0.0099828535097107, "Min_5.0% Prob": 9.937580108642578, "Min_10.0% Prob": 7.961684908185687, "Min_20.0% Prob": 6.015326465879168, "Min_30.0% Prob": 4.755585136867705, "Min_40.0% Prob": 3.7731510528496335, "Min_50.0% Prob": 3.080793337736811, "Min_60.0% Prob": 2.5895182263283503}}
{"hexsha": "9c3d586ec62841559008de5a1baefd1f7c1ea4ef", "ext": "py", "lang": "Python", "content": "def parse_logging_lvl(lvl_name: str) -> int:\n    if lvl_name:\n        lvl_name = lvl_name.strip().upper()\n        return logging._nameToLevel.get(lvl_name, logging.INFO)\n    else:\n        return logging.INFO", "fn_id": 0, "class_fn": false, "repo": "ove/ove-asset-manager", "file": "common/util.py", "last_update_at": "2021-06-06T23:01:57+00:00", "pred": {"ppl": 2.3067851066589355, "ppl_lower": 3.3477084636688232, "ppl/lowercase_ppl": -1.4455573298472737, "ppl/zlib": 0.0065301158317244016, "Min_5.0% Prob": 7.499796549479167, "Min_10.0% Prob": 5.862482786178589, "Min_20.0% Prob": 3.804679493109385, "Min_30.0% Prob": 2.7040826943185596, "Min_40.0% Prob": 2.0642214476441345, "Min_50.0% Prob": 1.6643511584649484, "Min_60.0% Prob": 1.392085037349413}}
{"hexsha": "977d85f77545dff9112557fdde20247c847ed065", "ext": "py", "lang": "Python", "content": "@login_required\ndef edit_folder(request, set_id):\n    folder = get_object_or_404(CardFolder, id=set_id)\n    if folder.user != request.user:\n        return redirect('/no_access/')\n    if folder.being_edited:\n        return render(request, 'Cards/folder_being_updated.html', {'folder': folder})\n    if request.method == 'POST':\n        form = FolderForm(request.POST or None, instance=folder)\n        if form.is_valid():\n            folder = form.save(commit=False)\n            folder.being_edited = True\n            folder.save()\n            t = Thread(target=edit_folder_translate, args=[folder])\n            t.setDaemon(False)\n            t.start()\n            enough = len(folder.multicard_set.all()) > 2\n            return render(request, 'Cards/view_set.html', {'folder': folder, 'enough': enough})\n    else:\n        form = FolderForm(instance=folder)\n    return render(request, 'Cards/edit_set.html', {'form': form, 'folder': folder})", "fn_id": 3, "class_fn": false, "repo": "Solurix/Flashcards-Django", "file": "FCards/Cards/views.py", "last_update_at": "2021-05-16T03:20:23+00:00", "pred": {"ppl": 2.383815288543701, "ppl_lower": 3.1248719692230225, "ppl/lowercase_ppl": -1.3116039365334224, "ppl/zlib": 0.0022104383373121933, "Min_5.0% Prob": 10.695250868797302, "Min_10.0% Prob": 7.160049724578857, "Min_20.0% Prob": 4.182779622077942, "Min_30.0% Prob": 2.8505736875690912, "Min_40.0% Prob": 2.1732998133295833, "Min_50.0% Prob": 1.7357018007860174, "Min_60.0% Prob": 1.4512395493649437}}
{"hexsha": "1767ab96cf054ceb50f317b23720f5c55d829e30", "ext": "py", "lang": "Python", "content": "@pytest.fixture\ndef fixture_property_typed_multiple_choice_filter():\n    TypedMultipleChoiceFilterModel.objects.create(id=-1, text='1')\n    TypedMultipleChoiceFilterModel.objects.create(id=0, text='One')\n    TypedMultipleChoiceFilterModel.objects.create(id=1, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=2, text='2')\n    TypedMultipleChoiceFilterModel.objects.create(id=3, text='Not a Number')\n    TypedMultipleChoiceFilterModel.objects.create(id=4, text='3')\n    TypedMultipleChoiceFilterModel.objects.create(id=5, text='3.3')\n    TypedMultipleChoiceFilterModel.objects.create(id=6)\n    global LOOKUP_CHOICES\n    LOOKUP_CHOICES = [(c.text, c.text) for c in TypedMultipleChoiceFilterModel.objects.order_by('id')]\n    LOOKUP_CHOICES.append(('666', '666'))", "fn_id": 0, "class_fn": false, "repo": "ericziethen/django-filter-property", "file": "tests/django_property_filter/filters/test_property_typed_multiple_choice_filter.py", "last_update_at": "2021-11-28T12:02:59+00:00", "pred": {"ppl": 2.2037577629089355, "ppl_lower": 2.370133638381958, "ppl/lowercase_ppl": -1.0921104553428875, "ppl/zlib": 0.003225159091078749, "Min_5.0% Prob": 8.55153174833818, "Min_10.0% Prob": 6.203963538874751, "Min_20.0% Prob": 3.837290048599243, "Min_30.0% Prob": 2.62470613538787, "Min_40.0% Prob": 1.9742395725485908, "Min_50.0% Prob": 1.5802083056916119, "Min_60.0% Prob": 1.3169244031824232}}
{"hexsha": "ea4d849d98e292e6186433a00e5238e2edf41505", "ext": "py", "lang": "Python", "content": "def test_render(using_temp_config, disabling_caching):\n    scene = SquareToCircle()\n    renderer = scene.renderer\n    renderer.update_frame = Mock(wraps=renderer.update_frame)\n    renderer.add_frame = Mock(wraps=renderer.add_frame)\n    scene.render()\n    assert renderer.add_frame.call_count == config['frame_rate']\n    assert renderer.update_frame.call_count == config['frame_rate']\n    assert_file_exists(config['output_file'])", "fn_id": 0, "class_fn": false, "repo": "fargetan/manim", "file": "tests/test_scene_rendering/test_cairo_renderer.py", "last_update_at": "2021-07-17T04:09:59+00:00", "pred": {"ppl": 3.190894603729248, "ppl_lower": 4.056626319885254, "ppl/lowercase_ppl": -1.2068862211384817, "ppl/zlib": 0.005950263166775958, "Min_5.0% Prob": 9.162914657592774, "Min_10.0% Prob": 7.142027898268267, "Min_20.0% Prob": 4.965823230536087, "Min_30.0% Prob": 3.683614182472229, "Min_40.0% Prob": 2.8927742618581522, "Min_50.0% Prob": 2.3263081362278295, "Min_60.0% Prob": 1.9370599095842669}}
{"hexsha": "5479d7749b7f0f4c38907d23268688673d78cc7e", "ext": "py", "lang": "Python", "content": "def save():\n    website = website_e.get()\n    email = email_e.get()\n    password = password_e.get()\n    new_data = {website.upper(): {'email': email, 'password': password}}\n    if len(website) == 0 or len(password) == 0:\n        messagebox.showinfo(title='Oops!', message=\"Please don't leave any fields empty!!\")\n    else:\n        out = messagebox.askokcancel(title=website, message=f'These are the details entered: \\nEmail: {email}\\nPassword: {password} \\nDo you wish to proceed with these details?\\n\\n Note: If you want to update a new password for an existing website,also click OK\\n Else cancel the operation and search for the existing password!')\n        if out:\n            try:\n                with open('data.json', 'r') as data_file:\n                    data = json.load(data_file)\n            except FileNotFoundError:\n                with open('data.json', 'w') as data_file:\n                    json.dump(new_data, data_file, indent=4)\n            else:\n                data.update(new_data)\n                with open('data.json', 'w') as data_file:\n                    json.dump(data, data_file, indent=4)\n            finally:\n                messagebox.showinfo(title=website, message='Password saved successfully!')\n                website_e.delete(0, END)\n                password_e.delete(0, END)", "fn_id": 2, "class_fn": false, "repo": "SrihariMurali01/Password-manager", "file": "main.py", "last_update_at": "2021-12-21T18:17:28+00:00", "pred": {"ppl": 2.305128812789917, "ppl_lower": 2.5482537746429443, "ppl/lowercase_ppl": -1.1200663176545311, "ppl/zlib": 0.0015727618812822447, "Min_5.0% Prob": 7.86659973859787, "Min_10.0% Prob": 5.912494457129276, "Min_20.0% Prob": 3.90137798316551, "Min_30.0% Prob": 2.748700053252355, "Min_40.0% Prob": 2.0942513144603283, "Min_50.0% Prob": 1.6692293880630777, "Min_60.0% Prob": 1.3930803629214028}}
{"hexsha": "293907725bd25c3293fb9246b3cf2af13bae51d7", "ext": "py", "lang": "Python", "content": "@app.route('/getNotifications', methods=['GET'])\ndef getNotifications():\n    page = request.args.get('page', default=1, type=int)\n    limit = request.args.get('limit', default=25, type=int)\n    data = rdb.getNotifications(page, limit)\n    return jsonify(data)", "fn_id": 10, "class_fn": false, "repo": "naztronaut/easyUptime", "file": "upService.py", "last_update_at": "2021-05-05T06:29:10+00:00", "pred": {"ppl": 2.203216314315796, "ppl_lower": 2.5534021854400635, "ppl/lowercase_ppl": -1.186738824932126, "ppl/zlib": 0.004906324557715955, "Min_5.0% Prob": 9.916933059692383, "Min_10.0% Prob": 6.576889651162284, "Min_20.0% Prob": 3.803447267838887, "Min_30.0% Prob": 2.654511292775472, "Min_40.0% Prob": 1.9678211541011417, "Min_50.0% Prob": 1.5960837496030662, "Min_60.0% Prob": 1.3394872356466083}}
{"hexsha": "6d928cb5cd52bb854817785ae392fcb7dd1a50d7", "ext": "py", "lang": "Python", "content": "def test_eds_plugins_built_property():\n    e = Event(False, True, 'url', 'project_name', 'project_version')\n    assert e.eds_plugins_built\n    e = Event(True, False, 'url', 'project_name', 'project_version')\n    assert not e.eds_plugins_built", "fn_id": 1, "class_fn": false, "repo": "jleopold28/eds", "file": "tests/test_event.py", "last_update_at": "2021-12-06T13:21:15+00:00", "pred": {"ppl": 4.513327121734619, "ppl_lower": 5.304576396942139, "ppl/lowercase_ppl": -1.107187529929861, "ppl/zlib": 0.01205627682030129, "Min_5.0% Prob": 11.324640274047852, "Min_10.0% Prob": 9.43827772140503, "Min_20.0% Prob": 6.744963560785566, "Min_30.0% Prob": 4.947583252475376, "Min_40.0% Prob": 3.7269833498987657, "Min_50.0% Prob": 3.045495457533333, "Min_60.0% Prob": 2.5578809608813633}}
{"hexsha": "2aa04fe50cb3ff88be7ef0d11bebb4e8eabb4c12", "ext": "py", "lang": "Python", "content": "def _h(y):\n\n    def foo(x):\n        \"\"\"funcdoc\"\"\"\n        return [x + z for z in y]\n    return foo", "fn_id": 3, "class_fn": false, "repo": "QZLin/nogil", "file": "Lib/test/test_dis.py", "last_update_at": "2021-11-19T02:20:24+00:00", "pred": {"ppl": 10.265623092651367, "ppl_lower": 10.265623092651367, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.03064211512270209, "Min_5.0% Prob": 7.6792449951171875, "Min_10.0% Prob": 7.29956595102946, "Min_20.0% Prob": 6.76724100112915, "Min_30.0% Prob": 6.069146951039632, "Min_40.0% Prob": 5.289988040924072, "Min_50.0% Prob": 4.551896985371908, "Min_60.0% Prob": 3.84800404144658}}
{"hexsha": "be2ff543f0b705a68df4d91c081b06d11c31d754", "ext": "py", "lang": "Python", "content": "def LogSquad_Damage(data_str, server_id):\n    matchObj = re.search('[([0-9.:-]+]\\\\[([ 0-9]*)]LogSquad: Player:(.*) ActualDamage=(\\\\d+(\\\\.\\\\d+)?) from (.*) caused by (.*).*', data_str, re.M | re.I)\n    date_time = datetime.datetime.strptime(matchObj.group(0).split('[')[1].split(']')[0], '%Y.%m.%d-%H.%M.%S:%f')\n    date_time_n = (date_time + datetime.timedelta(hours=8)).strftime('%Y.%m.%d-%H.%M.%S:%f')\n    date = date_time_n.split('-')[0]\n    time = date_time_n.split('-')[1]\n    Player_take_damage = matchObj.group(2)\n    Damage = matchObj.group(3)\n    Player_make_damage = matchObj.group(5)\n    Weapon = matchObj.group(6).split('_C_')[0]\n    return (date, time, str(Player_take_damage), str(Damage), str(Player_make_damage), str(Weapon), server_id)\n    pass", "fn_id": 0, "class_fn": false, "repo": "ChenjianS47/SquadPy", "file": "Core/Log_Plugins/LogSquad_Damage.py", "last_update_at": "2021-09-27T07:32:32+00:00", "pred": {"ppl": 2.5636954307556152, "ppl_lower": 3.502164602279663, "ppl/lowercase_ppl": -1.3313310046049522, "ppl/zlib": 0.002607894031152182, "Min_5.0% Prob": 8.241352353777204, "Min_10.0% Prob": 6.502758392265865, "Min_20.0% Prob": 4.307803509490831, "Min_30.0% Prob": 3.0661308006161736, "Min_40.0% Prob": 2.337724765097456, "Min_50.0% Prob": 1.8794556554539927, "Min_60.0% Prob": 1.5685048141999036}}
{"hexsha": "fea44362f63483b4569ec189eda480b3e3b01e26", "ext": "py", "lang": "Python", "content": "def QA_save_tdx_to_mongo(file_dir, client=DATABASE):\n    reader = TdxMinBarReader()\n    __coll = client.stock_min_five\n    for a, v, files in os.walk(file_dir):\n        for file in files:\n            if str(file)[0:2] == 'sh' and int(str(file)[2]) == 6 or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 0) or (str(file)[0:2] == 'sz' and int(str(file)[2]) == 3):\n                QA_util_log_info('Now_saving ' + str(file)[2:8] + \"'s 5 min tick\")\n                fname = file_dir + os.sep + file\n                df = reader.get_df(fname)\n                df['code'] = str(file)[2:8]\n                df['market'] = str(file)[0:2]\n                df['datetime'] = [str(x) for x in list(df.index)]\n                df['date'] = [str(x)[0:10] for x in list(df.index)]\n                df['time_stamp'] = df['datetime'].apply(lambda x: QA_util_time_stamp(x))\n                df['date_stamp'] = df['date'].apply(lambda x: QA_util_date_stamp(x))\n                data_json = json.loads(df.to_json(orient='records'))\n                __coll.insert_many(data_json)", "fn_id": 0, "class_fn": false, "repo": "liujiannong/QUANTAXIS", "file": "QUANTAXIS/QASU/save_tdx_file.py", "last_update_at": "2021-04-01T08:59:46+00:00", "pred": {"ppl": 2.4924774169921875, "ppl_lower": 2.8871309757232666, "ppl/lowercase_ppl": -1.1609435893984348, "ppl/zlib": 0.0021438431042923307, "Min_5.0% Prob": 8.183787850772633, "Min_10.0% Prob": 6.28671840940203, "Min_20.0% Prob": 4.101077112129756, "Min_30.0% Prob": 2.9695390536671593, "Min_40.0% Prob": 2.2773260235254256, "Min_50.0% Prob": 1.8217937349955635, "Min_60.0% Prob": 1.5222872724509422}}
{"hexsha": "9d3c3cf62b10c24e35584ee9f62074dd84ba8c6b", "ext": "py", "lang": "Python", "content": "def preprocess_prices(df_prices: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Preprocessing of price dataframe. Get latest available price.\n    :param df_prices: Needed columns: ISIN, Price, Datum, Currency\n    :return: dataframe containing prices of stocks defined by ISIN on latest available date\n    \"\"\"\n    dfp = df_prices.copy()\n    assert dfp['Currency'].drop_duplicates().count() == 1, 'Multiple currencies used for price data!'\n    assert dfp['Currency'].iloc[0] == 'EUR', 'Currency is not Euro!'\n    dfp['Date'] = pd.to_datetime(dfp['Date'], format='%d.%m.%Y')\n    latest_date = dfp['Date'].max()\n    df_current_prices = dfp[dfp['Date'] == latest_date].reset_index(drop=True)\n    return df_current_prices", "fn_id": 5, "class_fn": false, "repo": "christophpernul/personal-finance-dashboard", "file": "lib_data_operations.py", "last_update_at": "2021-02-19T15:27:06+00:00", "pred": {"ppl": 3.4466280937194824, "ppl_lower": 4.303500175476074, "ppl/lowercase_ppl": -1.1794350613022133, "ppl/zlib": 0.0033443145647897928, "Min_5.0% Prob": 9.31427354812622, "Min_10.0% Prob": 7.340050840377808, "Min_20.0% Prob": 5.1939158082008365, "Min_30.0% Prob": 3.911995941400528, "Min_40.0% Prob": 3.055314381793141, "Min_50.0% Prob": 2.474454276636243, "Min_60.0% Prob": 2.0703503531869503}}
{"hexsha": "178e3d96179baff608652d760ff54f1c5c188588", "ext": "py", "lang": "Python", "content": "def get_phonopy_options(postprocess_parameters):\n    \"\"\"Return phonopy command option strings.\"\"\"\n    mesh_opts = []\n    if 'mesh' in postprocess_parameters:\n        mesh = postprocess_parameters['mesh']\n        try:\n            length = float(mesh)\n            mesh_opts.append('--mesh=%f' % length)\n        except TypeError:\n            mesh_opts.append('--mesh=\"%d %d %d\"' % tuple(mesh))\n        mesh_opts.append('--nowritemesh')\n    fc_opts = []\n    if 'fc_calculator' in postprocess_parameters:\n        if postprocess_parameters['fc_calculator'].lower().strip() == 'alm':\n            fc_opts.append('--alm')\n    return (mesh_opts, fc_opts)", "fn_id": 4, "class_fn": false, "repo": "atztogo/aiida-phonopy", "file": "aiida_phonopy/common/file_generators.py", "last_update_at": "2021-12-18T03:05:40+00:00", "pred": {"ppl": 2.559666156768799, "ppl_lower": 2.939950704574585, "ppl/lowercase_ppl": -1.1473767256763185, "ppl/zlib": 0.003468180230536842, "Min_5.0% Prob": 7.776718437671661, "Min_10.0% Prob": 6.014105960726738, "Min_20.0% Prob": 4.1887091867851485, "Min_30.0% Prob": 3.0912682979690786, "Min_40.0% Prob": 2.3452596102248537, "Min_50.0% Prob": 1.8751253878854843, "Min_60.0% Prob": 1.5747209421895219}}
{"hexsha": "b087ca6dbcea8e5a3be1946bdd709bb2ed25f366", "ext": "py", "lang": "Python", "content": "@pytest.mark.parametrize('factory', [lambda x: list(x), lambda x: MultiDict(x), lambda x: MultiDictProxy(MultiDict(x))])\ndef test_multi_dict_multidict_less_keys_substitution(factory: Callable):\n    with given:\n        sch = schema_multi_dict([('id', schema.int), ('name', schema.str)])\n    with when:\n        res = substitute(sch, factory([('id', 1)]))\n    with then:\n        assert res == schema_multi_dict([('id', schema.int(1)), ('name', schema.str)])\n        assert res != sch", "fn_id": 5, "class_fn": false, "repo": "nikitanovosibirsk/district42-exp-types", "file": "tests/multi_dict/substitutor/test_multi_dict_multidict_substitutor.py", "last_update_at": "2021-08-01T10:06:28+00:00", "pred": {"ppl": 3.309338092803955, "ppl_lower": 3.47127628326416, "ppl/lowercase_ppl": -1.0399199547437126, "ppl/zlib": 0.005180728127399833, "Min_5.0% Prob": 9.87604924610683, "Min_10.0% Prob": 7.749847786767142, "Min_20.0% Prob": 5.170790599925177, "Min_30.0% Prob": 3.848247224376315, "Min_40.0% Prob": 2.9636387614799395, "Min_50.0% Prob": 2.396178725468261, "Min_60.0% Prob": 2.0048167700657533}}
{"hexsha": "f04872eed07d871c244788341ce7469a3e8c2ec3", "ext": "py", "lang": "Python", "content": "def get_random_vals(mean_vel):\n    init_v = 20 + np.random.choice(range(-5, 5))\n    action_magnitute = np.random.uniform(-3, 3)\n    action_freq = np.random.uniform(0.02, 0.06)\n    return (init_v, action_magnitute, action_freq)", "fn_id": 3, "class_fn": false, "repo": "saArbabi/sim", "file": "src/exploratory_experiments/_data_generator.py", "last_update_at": "2021-03-26T15:28:31+00:00", "pred": {"ppl": 3.956378221511841, "ppl_lower": 3.956378221511841, "ppl/lowercase_ppl": -1.0, "ppl/zlib": 0.009754106498198396, "Min_5.0% Prob": 9.07089114189148, "Min_10.0% Prob": 7.110368013381958, "Min_20.0% Prob": 5.241744265836828, "Min_30.0% Prob": 4.120019830190218, "Min_40.0% Prob": 3.357048543060527, "Min_50.0% Prob": 2.746179705442384, "Min_60.0% Prob": 2.2933031488209963}}
{"hexsha": "539c6e5edfed9d87bb33e2513733ff5fcbd5e916", "ext": "py", "lang": "Python", "content": "def _make_dagster_event(event_type: DagsterEventType, pipeline_name: str, step_key: str):\n    event_specific_data = None\n    if event_type == DagsterEventType.STEP_SUCCESS:\n        event_specific_data = StepSuccessData(duration_ms=1.0)\n    elif event_type == DagsterEventType.STEP_FAILURE:\n        event_specific_data = StepFailureData(error=None, user_failure_data=None)\n    return DagsterEvent(event_type.value, pipeline_name, step_key=step_key, event_specific_data=event_specific_data)", "fn_id": 1, "class_fn": false, "repo": "denimalpaca/OpenLineage", "file": "integration/dagster/tests/conftest.py", "last_update_at": "2021-12-03T17:00:00+00:00", "pred": {"ppl": 1.6173917055130005, "ppl_lower": 2.691453695297241, "ppl/lowercase_ppl": -2.0591742775958117, "ppl/zlib": 0.0021561201496957485, "Min_5.0% Prob": 5.289188725607736, "Min_10.0% Prob": 3.7939469814300537, "Min_20.0% Prob": 2.3128590984591124, "Min_30.0% Prob": 1.6116513389834137, "Min_40.0% Prob": 1.2061203377770966, "Min_50.0% Prob": 0.9610275900667559, "Min_60.0% Prob": 0.8068317653258043}}
{"hexsha": "8e050af63a97f4a7f86ee722501d806903d052be", "ext": "py", "lang": "Python", "content": "def test_clip_lines(two_line_gdf, single_rectangle_gdf):\n    \"\"\"Test what happens when you give the clip_extent a line GDF.\"\"\"\n    clip_line = cl.clip_shp(two_line_gdf, single_rectangle_gdf)\n    assert len(clip_line.geometry) == 2", "fn_id": 19, "class_fn": false, "repo": "jlpalomino/earthpy", "file": "earthpy/tests/test_clip.py", "last_update_at": "2021-01-02T02:32:41+00:00", "pred": {"ppl": 5.657032489776611, "ppl_lower": 5.898293495178223, "ppl/lowercase_ppl": -1.0241004237752271, "ppl/zlib": 0.011708780132647896, "Min_5.0% Prob": 11.054947853088379, "Min_10.0% Prob": 9.327919483184814, "Min_20.0% Prob": 6.892133458455404, "Min_30.0% Prob": 5.4167057926004585, "Min_40.0% Prob": 4.222585090994835, "Min_50.0% Prob": 3.4767323998180597, "Min_60.0% Prob": 2.8784861102700234}}
{"hexsha": "cab40a1d1240c5bed8edb2cf223d0f234868dfd0", "ext": "py", "lang": "Python", "content": "def daily_mean(data):\n    \"\"\"Calculate the daily mean of a 2D inflammation data array.\n\n    :param data: A 2D data array with inflammation data (each row contains measurements for a single patient across all days).\n    :returns: An array of mean values of measurements for each day.\n    \"\"\"\n    return np.mean(data, axis=0)", "fn_id": 1, "class_fn": false, "repo": "raphaelshirley/python-intermediate-inflammation-1", "file": "inflammation/models.py", "last_update_at": "2021-12-10T12:28:49+00:00", "pred": {"ppl": 3.634953737258911, "ppl_lower": 3.989187717437744, "ppl/lowercase_ppl": -1.0720529267481846, "ppl/zlib": 0.006518163554939692, "Min_5.0% Prob": 9.024391174316406, "Min_10.0% Prob": 6.509571462869644, "Min_20.0% Prob": 4.81461575627327, "Min_30.0% Prob": 3.819285571575165, "Min_40.0% Prob": 3.0851743053644896, "Min_50.0% Prob": 2.5582905173301698, "Min_60.0% Prob": 2.1653373617058}}
{"hexsha": "bc9cb89c9de7c8845a3f7858c2bf081cca88afc4", "ext": "py", "lang": "Python", "content": "def main():\n    parser = argparse.ArgumentParser()\n    default_url = 'https://search.api.hubmapconsortium.org/portal/search'\n    parser.add_argument('--url', default=default_url, help=f'ES endpoint. Default: {default_url}')\n    default_size = 20\n    parser.add_argument('--size', type=int, default=default_size, help=f'Number of records to pull. Default: {default_size}')\n    default_type = 'Dataset'\n    parser.add_argument('--type', default=default_type, help=f'Entity type to query. Default: {default_type}')\n    args = parser.parse_args()\n    query = {'post_filter': {'term': {'entity_type.keyword': args.type}}, 'size': args.size, '_source': ['metadata.metadata' if args.type == 'Dataset' else 'metadata']}\n    response = requests.post(args.url, json=query)\n    hits = response.json()['hits']['hits']\n    writer = DictWriter(sys.stdout, fieldnames=['uuid', 'assay_type', 'field', 'value'], extrasaction='ignore')\n    writer.writeheader()\n    for hit in hits:\n        uuid = hit['_id']\n        if 'metadata' not in hit['_source']:\n            continue\n        meta = hit['_source']['metadata']\n        if 'metadata' in meta:\n            meta = meta['metadata']\n        for field, value in meta.items():\n            if not re.search('[A-Za-z]', value):\n                continue\n            writer.writerow({'uuid': uuid, 'assay_type': meta['assay_type'] if 'assay_type' in meta else 'Sample', 'field': field, 'value': value})\n    assert len(hits) < args.size, f'Result truncated at {args.size}'\n    return 0", "fn_id": 0, "class_fn": false, "repo": "lukasz-migas/ingest-validation-tools", "file": "src/generate_field_values_csv.py", "last_update_at": "2021-03-17T20:48:41+00:00", "pred": {"ppl": 2.0414865016937256, "ppl_lower": 2.2800915241241455, "ppl/lowercase_ppl": -1.1548840380062488, "ppl/zlib": 0.0011064778601559144, "Min_5.0% Prob": 7.651785802841187, "Min_10.0% Prob": 5.439536612208297, "Min_20.0% Prob": 3.375448789941259, "Min_30.0% Prob": 2.353052121857482, "Min_40.0% Prob": 1.779002358643226, "Min_50.0% Prob": 1.4299977015780403, "Min_60.0% Prob": 1.1893366495784126}}
